{
 "http://basex.org/modules/admin": {
  "moduleNamespace": "http://basex.org/modules/admin",
  "prefixes": [
   "admin"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "logs",
    "uri": "http://basex.org/modules/admin",
    "params": [],
    "comments": {
     "description": " Returns <a href=\"https://docs.basex.org/wiki/Logging\">Logging</a> data compiled by the database or HTTP server: <ul><li>If no argument is specified, a list of all log files will be returned, including the file size and date.</li><li>If a <code>$date</code> is specified, the contents of a single log file will be returned.</li><li>If <code>$merge</code> is set to true, related log entries will be merged. The merged representation may not be 100% correct, as log entries can be ambiguous.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element()*"
    }
   },
   {
    "name": "logs",
    "uri": "http://basex.org/modules/admin",
    "params": [
     "$date as xs:string"
    ],
    "comments": {
     "description": " Returns <a href=\"https://docs.basex.org/wiki/Logging\">Logging</a> data compiled by the database or HTTP server: <ul><li>If no argument is specified, a list of all log files will be returned, including the file size and date.</li><li>If a <code>$date</code> is specified, the contents of a single log file will be returned.</li><li>If <code>$merge</code> is set to true, related log entries will be merged. The merged representation may not be 100% correct, as log entries can be ambiguous.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element()*"
    }
   },
   {
    "name": "logs",
    "uri": "http://basex.org/modules/admin",
    "params": [
     "$date as xs:string",
     "$merge as xs:boolean?"
    ],
    "comments": {
     "description": " Returns <a href=\"https://docs.basex.org/wiki/Logging\">Logging</a> data compiled by the database or HTTP server: <ul><li>If no argument is specified, a list of all log files will be returned, including the file size and date.</li><li>If a <code>$date</code> is specified, the contents of a single log file will be returned.</li><li>If <code>$merge</code> is set to true, related log entries will be merged. The merged representation may not be 100% correct, as log entries can be ambiguous.</li></ul>",
     "params": {
      "$merge": "value of type xs:boolean?"
     },
     "errors": [],
     "others": [],
     "return": "value of type element()*"
    }
   },
   {
    "name": "write-log",
    "uri": "http://basex.org/modules/admin",
    "params": [
     "$text as xs:string"
    ],
    "comments": {
     "description": " Writes a string to the database logs, along with current user data (timestamp, username). An optional log <code>$type</code> can be specified. If omitted, the log type is <code>INFO</code>.<br/>If the function is called from a database client, the IP will be logged. Otherwise, the string <code>SERVER</code> will be logged.",
     "params": {},
     "errors": [
      "admin:type Type string contains whitespaces."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write-log",
    "uri": "http://basex.org/modules/admin",
    "params": [
     "$text as xs:string",
     "$type as xs:string"
    ],
    "comments": {
     "description": " Writes a string to the database logs, along with current user data (timestamp, username). An optional log <code>$type</code> can be specified. If omitted, the log type is <code>INFO</code>.<br/>If the function is called from a database client, the IP will be logged. Otherwise, the string <code>SERVER</code> will be logged.",
     "params": {
      "$type": "value of type xs:string"
     },
     "errors": [
      "admin:type Type string contains whitespaces."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "delete-logs",
    "uri": "http://basex.org/modules/admin",
    "params": [
     "$date as xs:string"
    ],
    "comments": {
     "description": " Deletes the log entries from the specified <code>$date</code>",
     "params": {},
     "errors": [
      "admin:today Today's log file cannot be deleted.",
      "admin:delete An error occurred while deleting a log file."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "sessions",
    "uri": "http://basex.org/modules/admin",
    "params": [],
    "comments": {
     "description": " Returns an element sequence with all currently opened database sessions, including the username, address (IP:port) and an optionally opened database.<br/>The output of this function and the <code><a href=\"https://docs.basex.org/wiki/Commands#SHOW_SESSIONS\">SHOW SESSIONS</a></code> command is similar.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(session)*"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for performing admin-centric operations such as managing database users and log data."
 },
 "http://basex.org/modules/archive": {
  "moduleNamespace": "http://basex.org/modules/archive",
  "prefixes": [
   "archive"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "entries",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$archive as xs:base64Binary"
    ],
    "comments": {
     "description": " Returns the entry descriptors of the specified <code>$archive</code>. A descriptor contains the following attributes, provided that they are available in the archive format: <ul><li><code>size</code>: original file size</li><li><code>last-modified</code>: timestamp, formatted as xs:dateTime</li><li><code>compressed-size</code>: compressed file size</li></ul> <p>An example: </p> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nt\">&lt;archive:entry</span> <span class=\"na\">size=</span><span class=\"s\">\"1840\"</span> <span class=\"na\">last-modified=</span><span class=\"s\">\"2009-03-20T03:30:32\"</span> <span class=\"na\">compressed-size=</span><span class=\"s\">\"672\"</span><span class=\"nt\">&gt;</span> doc/index.html <span class=\"nt\">&lt;/archive:entry&gt;</span> </pre></div>",
     "params": {},
     "errors": [
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type element(archive:entry)*"
    }
   },
   {
    "name": "options",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$archive as xs:base64Binary"
    ],
    "comments": {
     "description": " Returns the options of the specified <code>$archive</code> in the format specified by <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code>.",
     "params": {},
     "errors": [
      "archive:format The archive format is not supported.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type map(*)"
    }
   },
   {
    "name": "extract-text",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$archive as xs:base64Binary"
    ],
    "comments": {
     "description": " Extracts entries of the specified <code>$archive</code> and returns them as texts.<br/>The returned entries can be limited via <code>$entries</code>. The format of the argument is the same as for <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code> (attributes will be ignored).<br/>The encoding of the input files can be specified via <code>$encoding</code>.",
     "params": {},
     "errors": [
      "archive:encode the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if <code><a href=\"https://docs.basex.org/wiki/Options#CHECKSTRINGS\">CHECKSTRINGS</a></code> is turned off.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "extract-text",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$archive as xs:base64Binary",
     "$entries as item()*"
    ],
    "comments": {
     "description": " Extracts entries of the specified <code>$archive</code> and returns them as texts.<br/>The returned entries can be limited via <code>$entries</code>. The format of the argument is the same as for <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code> (attributes will be ignored).<br/>The encoding of the input files can be specified via <code>$encoding</code>.",
     "params": {
      "$entries": "value of type item()*"
     },
     "errors": [
      "archive:encode the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if <code><a href=\"https://docs.basex.org/wiki/Options#CHECKSTRINGS\">CHECKSTRINGS</a></code> is turned off.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "extract-text",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$archive as xs:base64Binary",
     "$entries as item()*",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Extracts entries of the specified <code>$archive</code> and returns them as texts.<br/>The returned entries can be limited via <code>$entries</code>. The format of the argument is the same as for <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code> (attributes will be ignored).<br/>The encoding of the input files can be specified via <code>$encoding</code>.",
     "params": {
      "$entries": "value of type item()*",
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "archive:encode the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if <code><a href=\"https://docs.basex.org/wiki/Options#CHECKSTRINGS\">CHECKSTRINGS</a></code> is turned off.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "extract-binary",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$archive as xs:base64Binary"
    ],
    "comments": {
     "description": " Extracts entries of the specified <code>$archive</code> and returns them as binaries.<br/>The returned entries can be limited via <code>$entries</code>. The format of the argument is the same as for <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code> (attributes will be ignored).",
     "params": {},
     "errors": [
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:base64Binary*"
    }
   },
   {
    "name": "extract-binary",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$archive as xs:base64Binary",
     "$entries as item()*"
    ],
    "comments": {
     "description": " Extracts entries of the specified <code>$archive</code> and returns them as binaries.<br/>The returned entries can be limited via <code>$entries</code>. The format of the argument is the same as for <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code> (attributes will be ignored).",
     "params": {
      "$entries": "value of type item()*"
     },
     "errors": [
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:base64Binary*"
    }
   },
   {
    "name": "create",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$entries as item()",
     "$contents as item()*"
    ],
    "comments": {
     "description": " Creates a new archive from the specified entries and contents.<br/>The <code>$entries</code> argument contains meta information required to create new entries. All items may either be of type <code>xs:string</code>, representing the entry name, or <code>element(archive:entry)</code>, containing the name as text node and additional, optional attributes: <ul><li><code>last-modified</code>: timestamp, specified as xs:dateTime (default: current time)</li><li><code>compression-level</code>: 0-9, 0 = uncompressed (default: 8)</li><li><code>encoding</code>: for textual entries (default: UTF-8)</li></ul> <p>An example: </p> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nt\">&lt;archive:entry</span> <span class=\"na\">last-modified=</span><span class=\"s\">'2011-11-11T11:11:11'</span> <span class=\"na\">compression-level=</span><span class=\"s\">'8'</span> <span class=\"na\">encoding=</span><span class=\"s\">'US-ASCII'</span><span class=\"nt\">&gt;</span>hello.txt<span class=\"nt\">&lt;/archive:entry&gt;</span> </pre></div> <p>The actual <code>$contents</code> must be <code>xs:string</code> or <code>xs:base64Binary</code> items.<br/> The <code>$options</code> parameter contains archiving options: </p> <ul><li><code>format</code>: allowed values are <code>zip</code> and <code>gzip</code>. <code>zip</code> is the default.</li><li><code>algorithm</code>: allowed values are <code>deflate</code> and <code>stored</code> (for the <code>zip</code> format). <code>deflate</code> is the default.</li></ul>",
     "params": {
      "$contents": "value of type item()*"
     },
     "errors": [
      "archive:number the number of entries and contents differs.",
      "archive:format the specified option or its value is invalid or not supported.",
      "archive:descriptor entry descriptors contain invalid entry names, timestamps or compression levels.",
      "archive:encode the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if <code><a href=\"https://docs.basex.org/wiki/Options#CHECKSTRINGS\">CHECKSTRINGS</a></code> is turned off.",
      "archive:single the chosen archive format only allows single entries.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "create",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$entries as item()",
     "$contents as item()*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Creates a new archive from the specified entries and contents.<br/>The <code>$entries</code> argument contains meta information required to create new entries. All items may either be of type <code>xs:string</code>, representing the entry name, or <code>element(archive:entry)</code>, containing the name as text node and additional, optional attributes: <ul><li><code>last-modified</code>: timestamp, specified as xs:dateTime (default: current time)</li><li><code>compression-level</code>: 0-9, 0 = uncompressed (default: 8)</li><li><code>encoding</code>: for textual entries (default: UTF-8)</li></ul> <p>An example: </p> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nt\">&lt;archive:entry</span> <span class=\"na\">last-modified=</span><span class=\"s\">'2011-11-11T11:11:11'</span> <span class=\"na\">compression-level=</span><span class=\"s\">'8'</span> <span class=\"na\">encoding=</span><span class=\"s\">'US-ASCII'</span><span class=\"nt\">&gt;</span>hello.txt<span class=\"nt\">&lt;/archive:entry&gt;</span> </pre></div> <p>The actual <code>$contents</code> must be <code>xs:string</code> or <code>xs:base64Binary</code> items.<br/> The <code>$options</code> parameter contains archiving options: </p> <ul><li><code>format</code>: allowed values are <code>zip</code> and <code>gzip</code>. <code>zip</code> is the default.</li><li><code>algorithm</code>: allowed values are <code>deflate</code> and <code>stored</code> (for the <code>zip</code> format). <code>deflate</code> is the default.</li></ul>",
     "params": {
      "$contents": "value of type item()*",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "archive:number the number of entries and contents differs.",
      "archive:format the specified option or its value is invalid or not supported.",
      "archive:descriptor entry descriptors contain invalid entry names, timestamps or compression levels.",
      "archive:encode the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if <code><a href=\"https://docs.basex.org/wiki/Options#CHECKSTRINGS\">CHECKSTRINGS</a></code> is turned off.",
      "archive:single the chosen archive format only allows single entries.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "update",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$archive as xs:base64Binary",
     "$entries as item()*",
     "$contents as item()*"
    ],
    "comments": {
     "description": " Creates an updated version of the specified <code>$archive</code> with new or replaced entries.<br/>The format of <code>$entries</code> and <code>$contents</code> is the same as for <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code>.",
     "params": {
      "$entries": "value of type item()*",
      "$contents": "value of type item()*"
     },
     "errors": [
      "archive:number the number of entries and contents differs.",
      "archive:descriptor entry descriptors contain invalid entry names, timestamps, compression levels or encodings.",
      "archive:encode the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if <code><a href=\"https://docs.basex.org/wiki/Options#CHECKSTRINGS\">CHECKSTRINGS</a></code> is turned off.",
      "archive:modify the entries of the given archive cannot be modified.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "delete",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$archive as xs:base64Binary",
     "$entries as item()*"
    ],
    "comments": {
     "description": " Deletes entries from an <code>$archive</code>.<br/>The format of <code>$entries</code> is the same as for <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code>.",
     "params": {
      "$entries": "value of type item()*"
     },
     "errors": [
      "archive:modify the entries of the given archive cannot be modified.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "create-from",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " This convenience function creates an archive from all files in the specified directory <code>$path</code>.<br/>The <code>$options</code> parameter contains archiving options, and the files to be archived can be limited via <code>$entries</code>. The format of the two last arguments is identical to <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code>, with two additional options: <ul><li><code>recursive</code>: parse all files recursively (default: <code>true</code>; ignored if entries are specified via the last argument).</li><li><code>root-dir</code>: use name of supplied directory as archive root directory (default: <code>false</code>).</li></ul>",
     "params": {},
     "errors": [
      "file:no-dir the specified path does not point to a directory.",
      "file:is-dir one of the specified entries points to a directory.",
      "file:not-found a specified entry does not exist.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "create-from",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$path as xs:string",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " This convenience function creates an archive from all files in the specified directory <code>$path</code>.<br/>The <code>$options</code> parameter contains archiving options, and the files to be archived can be limited via <code>$entries</code>. The format of the two last arguments is identical to <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code>, with two additional options: <ul><li><code>recursive</code>: parse all files recursively (default: <code>true</code>; ignored if entries are specified via the last argument).</li><li><code>root-dir</code>: use name of supplied directory as archive root directory (default: <code>false</code>).</li></ul>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "file:no-dir the specified path does not point to a directory.",
      "file:is-dir one of the specified entries points to a directory.",
      "file:not-found a specified entry does not exist.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "create-from",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$path as xs:string",
     "$options as map(*)?",
     "$entries as item()*"
    ],
    "comments": {
     "description": " This convenience function creates an archive from all files in the specified directory <code>$path</code>.<br/>The <code>$options</code> parameter contains archiving options, and the files to be archived can be limited via <code>$entries</code>. The format of the two last arguments is identical to <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code>, with two additional options: <ul><li><code>recursive</code>: parse all files recursively (default: <code>true</code>; ignored if entries are specified via the last argument).</li><li><code>root-dir</code>: use name of supplied directory as archive root directory (default: <code>false</code>).</li></ul>",
     "params": {
      "$options": "value of type map(*)?",
      "$entries": "value of type item()*"
     },
     "errors": [
      "file:no-dir the specified path does not point to a directory.",
      "file:is-dir one of the specified entries points to a directory.",
      "file:not-found a specified entry does not exist.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "extract-to",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$path as xs:string",
     "$archive as xs:base64Binary"
    ],
    "comments": {
     "description": " This convenience function writes files of an <code>$archive</code> directly to the specified directory <code>$path</code>.<br/>The archive entries to be written can be restricted via <code>$entries</code>. The format of the argument is the same as for <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code> (attributes will be ignored).",
     "params": {
      "$archive": "value of type xs:base64Binary"
     },
     "errors": [
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "extract-to",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$path as xs:string",
     "$archive as xs:base64Binary",
     "$entries as item()*"
    ],
    "comments": {
     "description": " This convenience function writes files of an <code>$archive</code> directly to the specified directory <code>$path</code>.<br/>The archive entries to be written can be restricted via <code>$entries</code>. The format of the argument is the same as for <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code> (attributes will be ignored).",
     "params": {
      "$archive": "value of type xs:base64Binary",
      "$entries": "value of type item()*"
     },
     "errors": [
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$path as xs:string",
     "$entries as item()",
     "$contents as item()*"
    ],
    "comments": {
     "description": " This convenience function creates a new archive from the specified <code>$entries</code> and <code>$contents</code> and writes it disk.<br/> See <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code> for more details.",
     "params": {
      "$entries": "value of type item()",
      "$contents": "value of type item()*"
     },
     "errors": [
      "archive:number the number of entries and contents differs.",
      "archive:format the specified option or its value is invalid or not supported.",
      "archive:descriptor entry descriptors contain invalid entry names, timestamps or compression levels.",
      "archive:encode the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if <code><a href=\"https://docs.basex.org/wiki/Options#CHECKSTRINGS\">CHECKSTRINGS</a></code> is turned off.",
      "archive:single the chosen archive format only allows single entries.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "write",
    "uri": "http://basex.org/modules/archive",
    "params": [
     "$path as xs:string",
     "$entries as item()",
     "$contents as item()*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " This convenience function creates a new archive from the specified <code>$entries</code> and <code>$contents</code> and writes it disk.<br/> See <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:create\">archive:create</a></code> for more details.",
     "params": {
      "$entries": "value of type item()",
      "$contents": "value of type item()*",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "archive:number the number of entries and contents differs.",
      "archive:format the specified option or its value is invalid or not supported.",
      "archive:descriptor entry descriptors contain invalid entry names, timestamps or compression levels.",
      "archive:encode the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if <code><a href=\"https://docs.basex.org/wiki/Options#CHECKSTRINGS\">CHECKSTRINGS</a></code> is turned off.",
      "archive:single the chosen archive format only allows single entries.",
      "archive:error archive creation failed."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions to handle archives (including ePub, Open Office, JAR, and many other formats). New ZIP and GZIP archives can be created, existing archives can be updated, and the archive entries can be listed and extracted. The <code><a href=\"https://docs.basex.org/wiki/Archive_Module#archive:extract-binary\">archive:extract-binary</a></code> function includes an example for writing the contents of an archive to disk."
 },
 "http://www.w3.org/2005/xpath-functions/array": {
  "moduleNamespace": "http://www.w3.org/2005/xpath-functions/array",
  "prefixes": [
   "array"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "size",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)"
    ],
    "comments": {
     "description": " Returns the number of members in <code>$array</code>. Note that because an array is an item, the <code>fn:count</code> function when applied to an array always returns <code>1</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "get",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$position as xs:integer"
    ],
    "comments": {
     "description": " Returns the <code>$array</code> member at the specified <code>$position</code>.",
     "params": {
      "$position": "value of type xs:integer"
     },
     "errors": [
      "array:FOAY0001 <code>$position</code> is not in the range <code>1</code> to <code>array:size($array)</code> inclusive."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "append",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$member as item()*"
    ],
    "comments": {
     "description": " Returns a copy of <code>$array</code> with <code>$member</code> attached.",
     "params": {
      "$member": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "subarray",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$position as xs:integer"
    ],
    "comments": {
     "description": " Constructs a new array with with <code>$length</code> members of <code>$array</code> beginning from the specified <code>$position</code>.<br/>The two-argument version of the function returns the same result as the three-argument version when called with <code>$length</code> equal to the value of <code>array:size($array) - $position + 1</code>.",
     "params": {
      "$position": "value of type xs:integer"
     },
     "errors": [
      "array:FOAY0001 <code>$position</code> is less than one, or if <code>$position + $length</code> is greater than <code>array:size($array) + 1</code>.",
      "array:FOAY0002 <code>$length</code> is less than zero."
     ],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "subarray",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$position as xs:integer",
     "$length as xs:integer"
    ],
    "comments": {
     "description": " Constructs a new array with with <code>$length</code> members of <code>$array</code> beginning from the specified <code>$position</code>.<br/>The two-argument version of the function returns the same result as the three-argument version when called with <code>$length</code> equal to the value of <code>array:size($array) - $position + 1</code>.",
     "params": {
      "$position": "value of type xs:integer",
      "$length": "value of type xs:integer"
     },
     "errors": [
      "array:FOAY0001 <code>$position</code> is less than one, or if <code>$position + $length</code> is greater than <code>array:size($array) + 1</code>.",
      "array:FOAY0002 <code>$length</code> is less than zero."
     ],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "put",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$position as xs:integer",
     "$member as item()*"
    ],
    "comments": {
     "description": " Returns a copy of <code>$array</code> with <code>$member</code> replaced at the specified <code>$position</code>. Equivalent to <code>$array =&gt; array:remove($position) =&gt; array:insert-before($position, $member)</code>.",
     "params": {
      "$position": "value of type xs:integer",
      "$member": "value of type item()*"
     },
     "errors": [
      "array:FOAY0001 <code>$position</code> is not in the range <code>1</code> to <code>array:size($array)</code> inclusive."
     ],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "remove",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$positions as xs:integer*"
    ],
    "comments": {
     "description": " Returns a copy of <code>$array</code> without the member at the specified <code>$positions</code>.",
     "params": {
      "$positions": "value of type xs:integer*"
     },
     "errors": [
      "array:FOAY0001 A position is not in the range <code>1</code> to <code>array:size($array)</code> inclusive."
     ],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "insert-before",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$position as xs:integer",
     "$member as item()*"
    ],
    "comments": {
     "description": " Returns a copy of <code>$array</code> with one new <code>$member</code> at the specified <code>$position</code>. Setting <code>$position</code> to the value <code>array:size($array) + 1</code> yields the same result as <code>array:append($array, $insert)</code>.",
     "params": {
      "$position": "value of type xs:integer",
      "$member": "value of type item()*"
     },
     "errors": [
      "array:FOAY0001 <code>$position</code> is not in the range <code>1</code> to <code>array:size($array) + 1</code> inclusive."
     ],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "head",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)"
    ],
    "comments": {
     "description": " Returns the first member of <code>$array</code>. This function is equivalent to the expression <code>$array(1)</code>.",
     "params": {},
     "errors": [
      "array:FOAY0001 The array is empty."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "tail",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)"
    ],
    "comments": {
     "description": " Returns a new array with all members except the first from <code>$array</code>. This function is equivalent to the expression <code>array:remove($array, 1)</code>.",
     "params": {},
     "errors": [
      "array:FOAY0001 The array is empty."
     ],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "reverse",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)"
    ],
    "comments": {
     "description": " Returns a new array with all members of <code>$array</code> in reverse order.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "join",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$arrays as array(*)*"
    ],
    "comments": {
     "description": " Concatenates the contents of several <code>$arrays</code> into a single array.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "flatten",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$items as item()*"
    ],
    "comments": {
     "description": " Recursively flattens all arrays that occur in the supplied <code>$items</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "for-each",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$action as function(item()*) as item()*"
    ],
    "comments": {
     "description": " Returns a new array, in which each member is computed by applying <code>$action</code> to the corresponding member of <code>$array</code>.",
     "params": {
      "$action": "value of type function(item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "filter",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$predicate as function(item()*) as xs:boolean"
    ],
    "comments": {
     "description": " Returns a new array with those members of <code>$array</code> for which <code>$predicate</code> returns <code>true</code>.",
     "params": {
      "$predicate": "value of type function(item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "fold-left",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$zero as item()*",
     "$action as function(item()*, item()*) as item()*"
    ],
    "comments": {
     "description": " Evaluates the supplied <code>$action</code> cumulatively on successive members of the supplied <code>$array</code> from left to right, and uses <code>$zero</code> as first argument.",
     "params": {
      "$zero": "value of type item()*",
      "$action": "value of type function(item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "fold-right",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$zero as item()*",
     "$action as function(item()*, item()*) as item()*"
    ],
    "comments": {
     "description": " Evaluates the supplied <code>$action</code> cumulatively on successive members of the supplied <code>$array</code> from right to left, and uses <code>$zero</code> as first argument.",
     "params": {
      "$zero": "value of type item()*",
      "$action": "value of type function(item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "for-each-pair",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array1 as array(*)",
     "$array2 as array(*)",
     "$action as function(item()*) as item()*"
    ],
    "comments": {
     "description": " Returns a new array obtained by evaluating the supplied <code>$action</code> for each pair of members at the same position in <code>$array1</code> and <code>$array2</code>.",
     "params": {
      "$array2": "value of type array(*)",
      "$action": "value of type function(item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "sort",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)"
    ],
    "comments": {
     "description": " Returns a new array with sorted <code>$array</code> members, using an optional <code>$collation</code>. If a <code>$key</code> function is supplied, it will be applied on all array members. The items of the resulting values will be sorted using the semantics of the <code>lt</code> expression.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "sort",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$collation as xs:string?"
    ],
    "comments": {
     "description": " Returns a new array with sorted <code>$array</code> members, using an optional <code>$collation</code>. If a <code>$key</code> function is supplied, it will be applied on all array members. The items of the resulting values will be sorted using the semantics of the <code>lt</code> expression.",
     "params": {
      "$collation": "value of type xs:string?"
     },
     "errors": [],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "sort",
    "uri": "http://www.w3.org/2005/xpath-functions/array",
    "params": [
     "$array as array(*)",
     "$collation as xs:string?",
     "$key as function(item()*) as xs:anyAtomicType*"
    ],
    "comments": {
     "description": " Returns a new array with sorted <code>$array</code> members, using an optional <code>$collation</code>. If a <code>$key</code> function is supplied, it will be applied on all array members. The items of the resulting values will be sorted using the semantics of the <code>lt</code> expression.",
     "params": {
      "$collation": "value of type xs:string?",
      "$key": "value of type function(item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type array(*)"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for manipulating arrays, which has been introduced with <a href=\"https://docs.basex.org/wiki/XQuery_3.1#Arrays\">XQuery 3.1</a>."
 },
 "http://expath.org/ns/binary": {
  "moduleNamespace": "http://expath.org/ns/binary",
  "prefixes": [
   "bin"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "hex",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:string?"
    ],
    "comments": {
     "description": " Returns the binary form of the set of octets written as a sequence of (ASCII) hex digits ([0-9A-Fa-f]).<br/><code>$in</code> will be effectively zero-padded from the left to generate an integral number of octets, i.e. an even number of hexadecimal digits. If <code>$in</code> is an empty string, then the result will be an <code>xs:base64Binary</code> with no embedded data. Byte order in the result follows (per-octet) character order in the string. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {},
     "errors": [
      "bin:non-numeric-character the input cannot be parsed as a hexadecimal number."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "bin",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:string?"
    ],
    "comments": {
     "description": " Returns the binary form of the set of octets written as a sequence of (8-wise) (ASCII) binary digits ([01]).<br/><code>$in</code> will be effectively zero-padded from the left to generate an integral number of octets. If <code>$in</code> is an empty string, then the result will be an <code>xs:base64Binary</code> with no embedded data. Byte order in the result follows (per-octet) character order in the string. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {},
     "errors": [
      "bin:non-numeric-character the input cannot be parsed as a binary number."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "octal",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:string?"
    ],
    "comments": {
     "description": " Returns the binary form of the set of octets written as a sequence of (ASCII) octal digits ([0-7]).<br/><code>$in</code> will be effectively zero-padded from the left to generate an integral number of octets. If <code>$in</code> is an empty string, then the result will be an <code>xs:base64Binary</code> with no embedded data. Byte order in the result follows (per-octet) character order in the string. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {},
     "errors": [
      "bin:non-numeric-character the input cannot be parsed as an octal number."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "to-octets",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary"
    ],
    "comments": {
     "description": " Returns binary data as a sequence of octets.<br/>If <code>$in</code> is a zero length binary data then the empty sequence is returned. Octets are returned as integers from 0 to 255.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer*"
    }
   },
   {
    "name": "from-octets",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:integer*"
    ],
    "comments": {
     "description": " Converts a sequence of octets into binary data.<br/>Octets are integers from 0 to 255. If the value of <code>$in</code> is the empty sequence, the function returns zero-sized binary data.",
     "params": {},
     "errors": [
      "bin:octet-out-of-range one of the octets lies outside the range 0 - 255."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "length",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary"
    ],
    "comments": {
     "description": " Returns the size of binary data in octets.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "part",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$offset as xs:integer"
    ],
    "comments": {
     "description": " Returns a section of binary data starting at the <code>$offset</code> octet.<br/>If <code>$size</code> is specified, the size of the returned binary data is <code>$size</code> octets. If <code>$size</code> is absent, all remaining data from <code>$offset</code> is returned. The <code>$offset</code> is zero based. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$offset": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:index-out-of-range the specified offset + size is out of range."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "part",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$offset as xs:integer",
     "$size as xs:integer"
    ],
    "comments": {
     "description": " Returns a section of binary data starting at the <code>$offset</code> octet.<br/>If <code>$size</code> is specified, the size of the returned binary data is <code>$size</code> octets. If <code>$size</code> is absent, all remaining data from <code>$offset</code> is returned. The <code>$offset</code> is zero based. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$offset": "value of type xs:integer",
      "$size": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:index-out-of-range the specified offset + size is out of range."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "join",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary*"
    ],
    "comments": {
     "description": " Returns an <code>xs:base64Binary</code> created by concatenating the items in the sequence <code>$in</code>, in order. If the value of <code>$in</code> is the empty sequence, the function returns a binary item containing no data bytes.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "insert-before",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$offset as xs:integer",
     "$extra as xs:base64Binary?"
    ],
    "comments": {
     "description": " Returns binary data consisting sequentially of the data from <code>$in</code> up to and including the <code>$offset - 1</code> octet, followed by all the data from <code>$extra</code>, and then the remaining data from <code>$in</code>.<br/>The <code>$offset</code> is zero based. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$offset": "value of type xs:integer",
      "$extra": "value of type xs:base64Binary?"
     },
     "errors": [
      "bin:index-out-of-range the specified offset is out of range."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "pad-left",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$size as xs:integer"
    ],
    "comments": {
     "description": " Returns an <code>xs:base64Binary</code> created by padding the input with <code>$size</code> octets in front of the input. If <code>$octet</code> is specified, the padding octets each have that value, otherwise they are zero.<br/>If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$size": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:octet-out-of-range the specified octet lies outside the range 0-255."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "pad-left",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$size as xs:integer",
     "$octet as xs:integer"
    ],
    "comments": {
     "description": " Returns an <code>xs:base64Binary</code> created by padding the input with <code>$size</code> octets in front of the input. If <code>$octet</code> is specified, the padding octets each have that value, otherwise they are zero.<br/>If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$size": "value of type xs:integer",
      "$octet": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:octet-out-of-range the specified octet lies outside the range 0-255."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "pad-right",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$size as xs:integer"
    ],
    "comments": {
     "description": " Returns an <code>xs:base64Binary</code> created by padding the input with <code>$size</code> octets after the input. If <code>$octet</code> is specified, the padding octets each have that value, otherwise they are zero.<br/>If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$size": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:octet-out-of-range the specified octet lies outside the range 0-255."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "pad-right",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$size as xs:integer",
     "$octet as xs:integer"
    ],
    "comments": {
     "description": " Returns an <code>xs:base64Binary</code> created by padding the input with <code>$size</code> octets after the input. If <code>$octet</code> is specified, the padding octets each have that value, otherwise they are zero.<br/>If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$size": "value of type xs:integer",
      "$octet": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:octet-out-of-range the specified octet lies outside the range 0-255."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "find",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$offset as xs:integer",
     "$search as xs:base64Binary"
    ],
    "comments": {
     "description": " Returns the first location of the binary search sequence in the input, or if not found, the empty sequence.<br/>The <code>$offset</code> and the returned location are zero based. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$offset": "value of type xs:integer",
      "$search": "value of type xs:base64Binary"
     },
     "errors": [
      "bin:index-out-of-range the specified offset + size is out of range."
     ],
     "others": [],
     "return": "value of type xs:integer?"
    }
   },
   {
    "name": "decode-string",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Decodes binary data as a string in a given <code>$encoding</code>.<br/>If <code>$offset</code> and <code>$size</code> are provided, the <code>$size</code> octets from <code>$offset</code> are decoded. If <code>$offset</code> alone is provided, octets from <code>$offset</code> to the end are decoded.If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:index-out-of-range the specified offset + size is out of range.",
      "bin:unknown-encoding the specified encoding is unknown.",
      "bin:conversion-error an error or malformed input occurred during decoding the string."
     ],
     "others": [],
     "return": "value of type xs:string?"
    }
   },
   {
    "name": "decode-string",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$encoding as xs:string",
     "$offset as xs:integer"
    ],
    "comments": {
     "description": " Decodes binary data as a string in a given <code>$encoding</code>.<br/>If <code>$offset</code> and <code>$size</code> are provided, the <code>$size</code> octets from <code>$offset</code> are decoded. If <code>$offset</code> alone is provided, octets from <code>$offset</code> to the end are decoded.If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$encoding": "value of type xs:string",
      "$offset": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:index-out-of-range the specified offset + size is out of range.",
      "bin:unknown-encoding the specified encoding is unknown.",
      "bin:conversion-error an error or malformed input occurred during decoding the string."
     ],
     "others": [],
     "return": "value of type xs:string?"
    }
   },
   {
    "name": "decode-string",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$encoding as xs:string",
     "$offset as xs:integer",
     "$size as xs:integer"
    ],
    "comments": {
     "description": " Decodes binary data as a string in a given <code>$encoding</code>.<br/>If <code>$offset</code> and <code>$size</code> are provided, the <code>$size</code> octets from <code>$offset</code> are decoded. If <code>$offset</code> alone is provided, octets from <code>$offset</code> to the end are decoded.If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$encoding": "value of type xs:string",
      "$offset": "value of type xs:integer",
      "$size": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:index-out-of-range the specified offset + size is out of range.",
      "bin:unknown-encoding the specified encoding is unknown.",
      "bin:conversion-error an error or malformed input occurred during decoding the string."
     ],
     "others": [],
     "return": "value of type xs:string?"
    }
   },
   {
    "name": "encode-string",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:string?",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Encodes a string into binary data using a given <code>$encoding</code>.<br/>If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "bin:unknown-encoding the specified encoding is unknown.",
      "bin:conversion-error an error or malformed input occurred during encoding the string."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "pack-double",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:double"
    ],
    "comments": {
     "description": " Returns the 8-octet binary representation of a double value.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified.",
     "params": {},
     "errors": [
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "pack-double",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:double",
     "$octet-order as xs:string"
    ],
    "comments": {
     "description": " Returns the 8-octet binary representation of a double value.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified.",
     "params": {},
     "errors": [
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "pack-float",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:float"
    ],
    "comments": {
     "description": " Returns the 4-octet binary representation of a float value.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified.",
     "params": {},
     "errors": [
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "pack-float",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:float",
     "$octet-order as xs:string"
    ],
    "comments": {
     "description": " Returns the 4-octet binary representation of a float value.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified.",
     "params": {},
     "errors": [
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "pack-integer",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:integer",
     "$size as xs:integer"
    ],
    "comments": {
     "description": " Returns the twos-complement binary representation of an integer value treated as <code>$size</code> octets long. Any 'excess' high-order bits are discarded.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. Specifying a <code>$size</code> of zero yields an empty binary data.",
     "params": {
      "$size": "value of type xs:integer"
     },
     "errors": [
      "bin:unknown-significance-order the specified octet order is unknown.",
      "bin:negative-size the specified size is negative."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "pack-integer",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:integer",
     "$size as xs:integer",
     "$octet-order as xs:string"
    ],
    "comments": {
     "description": " Returns the twos-complement binary representation of an integer value treated as <code>$size</code> octets long. Any 'excess' high-order bits are discarded.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. Specifying a <code>$size</code> of zero yields an empty binary data.",
     "params": {
      "$size": "value of type xs:integer"
     },
     "errors": [
      "bin:unknown-significance-order the specified octet order is unknown.",
      "bin:negative-size the specified size is negative."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "unpack-double",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary",
     "$offset as xs:integer"
    ],
    "comments": {
     "description": " Extracts the double value stored at the particular offset in binary data.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based.",
     "params": {
      "$offset": "value of type xs:integer"
     },
     "errors": [
      "bin:index-out-of-range the specified offset is out of range.",
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:double"
    }
   },
   {
    "name": "unpack-double",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary",
     "$offset as xs:integer",
     "$octet-order as xs:string"
    ],
    "comments": {
     "description": " Extracts the double value stored at the particular offset in binary data.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based.",
     "params": {
      "$offset": "value of type xs:integer"
     },
     "errors": [
      "bin:index-out-of-range the specified offset is out of range.",
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:double"
    }
   },
   {
    "name": "unpack-float",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary",
     "$offset as xs:integer"
    ],
    "comments": {
     "description": " Extracts the float value stored at the particular offset in binary data.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based.",
     "params": {
      "$offset": "value of type xs:integer"
     },
     "errors": [
      "bin:index-out-of-range the specified offset + size is out of range.",
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:float"
    }
   },
   {
    "name": "unpack-float",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary",
     "$offset as xs:integer",
     "$octet-order as xs:string"
    ],
    "comments": {
     "description": " Extracts the float value stored at the particular offset in binary data.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based.",
     "params": {
      "$offset": "value of type xs:integer"
     },
     "errors": [
      "bin:index-out-of-range the specified offset + size is out of range.",
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:float"
    }
   },
   {
    "name": "unpack-integer",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary",
     "$offset as xs:integer",
     "$size as xs:integer"
    ],
    "comments": {
     "description": " Returns a signed integer value represented by the <code>$size</code> octets starting from <code>$offset</code> in the input binary representation. Necessary sign extension is performed (i.e. the result is negative if the high order bit is '1').<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based. Specifying a <code>$size</code> of zero yields the integer <code>0</code>.",
     "params": {
      "$offset": "value of type xs:integer",
      "$size": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:index-out-of-range the specified offset + size is out of range.",
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "unpack-integer",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary",
     "$offset as xs:integer",
     "$size as xs:integer",
     "$octet-order as xs:string"
    ],
    "comments": {
     "description": " Returns a signed integer value represented by the <code>$size</code> octets starting from <code>$offset</code> in the input binary representation. Necessary sign extension is performed (i.e. the result is negative if the high order bit is '1').<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based. Specifying a <code>$size</code> of zero yields the integer <code>0</code>.",
     "params": {
      "$offset": "value of type xs:integer",
      "$size": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:index-out-of-range the specified offset + size is out of range.",
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "unpack-unsigned-integer",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary",
     "$offset as xs:integer",
     "$size as xs:integer"
    ],
    "comments": {
     "description": " Returns an unsigned integer value represented by the <code>$size</code> octets starting from <code>$offset</code> in the input binary representation.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based. Specifying a <code>$size</code> of zero yields the integer <code>0</code>.",
     "params": {
      "$offset": "value of type xs:integer",
      "$size": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:index-out-of-range the specified offset + size is out of range.",
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "unpack-unsigned-integer",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary",
     "$offset as xs:integer",
     "$size as xs:integer",
     "$octet-order as xs:string"
    ],
    "comments": {
     "description": " Returns an unsigned integer value represented by the <code>$size</code> octets starting from <code>$offset</code> in the input binary representation.<br/>Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based. Specifying a <code>$size</code> of zero yields the integer <code>0</code>.",
     "params": {
      "$offset": "value of type xs:integer",
      "$size": "value of type xs:integer"
     },
     "errors": [
      "bin:negative-size the specified size is negative.",
      "bin:index-out-of-range the specified offset + size is out of range.",
      "bin:unknown-significance-order the specified octet order is unknown."
     ],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "or",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$a as xs:base64Binary?",
     "$b as xs:base64Binary?"
    ],
    "comments": {
     "description": " Returns the \"bitwise or\" of two binary arguments.<br/>If either argument is the empty sequence, an empty sequence is returned.",
     "params": {
      "$b": "value of type xs:base64Binary?"
     },
     "errors": [
      "bin:differing-length-arguments the input arguments are of differing length."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "xor",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$a as xs:base64Binary?",
     "$b as xs:base64Binary?"
    ],
    "comments": {
     "description": " Returns the \"bitwise xor\" of two binary arguments.<br/>If either argument is the empty sequence, an empty sequence is returned.",
     "params": {
      "$b": "value of type xs:base64Binary?"
     },
     "errors": [
      "bin:differing-length-arguments the input arguments are of differing length."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "and",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$a as xs:base64Binary?",
     "$b as xs:base64Binary?"
    ],
    "comments": {
     "description": " Returns the \"bitwise and\" of two binary arguments.<br/>If either argument is the empty sequence, an empty sequence is returned.",
     "params": {
      "$b": "value of type xs:base64Binary?"
     },
     "errors": [
      "bin:differing-length-arguments the input arguments are of differing length."
     ],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "not",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?"
    ],
    "comments": {
     "description": " Returns the \"bitwise not\" of a binary argument.<br/>If the argument is the empty sequence, an empty sequence is returned.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   },
   {
    "name": "shift",
    "uri": "http://expath.org/ns/binary",
    "params": [
     "$in as xs:base64Binary?",
     "$by as xs:integer"
    ],
    "comments": {
     "description": " Shifts bits in binary data.<br/>If <code>$by</code> is zero, the result is identical to <code>$in</code>. If <code>$by</code> is positive then bits are shifted to the left. Otherwise, bits are shifted to the right. If the absolute value of <code>$by</code> is greater than the bit-length of <code>$in</code> then an all-zeros result is returned. The result always has the same size as <code>$in</code>. The shifting is logical: zeros are placed into discarded bits. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.",
     "params": {
      "$by": "value of type xs:integer"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:base64Binary?"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions to process binary data, including extracting subparts, searching, basic binary operations and conversion between binary and structured forms."
 },
 "http://basex.org/modules/client": {
  "moduleNamespace": "http://basex.org/modules/client",
  "prefixes": [
   "client"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "connect",
    "uri": "http://basex.org/modules/client",
    "params": [
     "$host as xs:string",
     "$port as xs:integer",
     "$username as xs:string",
     "$password as xs:string"
    ],
    "comments": {
     "description": " This function establishes a connection to a remote BaseX server, creates a new client session, and returns a session id. The parameter <code>$host</code> is the name of the database server, <code>$port</code> specifies the server port, and <code>$username</code> and <code>$password</code> represent the login data.",
     "params": {
      "$port": "value of type xs:integer",
      "$username": "value of type xs:string",
      "$password": "value of type xs:string"
     },
     "errors": [
      "client:connect an error occurs while creating the session (possible reasons: server not available, access denied)."
     ],
     "others": [],
     "return": "value of type xs:anyURI"
    }
   },
   {
    "name": "execute",
    "uri": "http://basex.org/modules/client",
    "params": [
     "$id as xs:anyURI",
     "$command as xs:string"
    ],
    "comments": {
     "description": " This function executes a <a href=\"https://docs.basex.org/wiki/Commands\">command</a> and returns the result as a string. The parameter <code>$id</code> contains the session ID returned by <code><a href=\"https://docs.basex.org/wiki/Client_Module#client:connect\">client:connect</a></code>. The <code>$command</code> argument represents a single command, which will be executed by the server.",
     "params": {
      "$command": "value of type xs:string"
     },
     "errors": [
      "client:error an I/O error occurs while transferring data from or to the server.",
      "client:command an error occurs while executing a command."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "info",
    "uri": "http://basex.org/modules/client",
    "params": [
     "$id as xs:anyURI"
    ],
    "comments": {
     "description": " This function returns an information string, created by the last call of <code><a href=\"https://docs.basex.org/wiki/Client_Module#client:execute\">client:execute</a></code>. <code>$id</code> specifies the session id.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "query",
    "uri": "http://basex.org/modules/client",
    "params": [
     "$id as xs:anyURI",
     "$query as xs:string"
    ],
    "comments": {
     "description": " Evaluates a query and returns the result as sequence. The parameter <code>$id</code> contains the session id returned by <code><a href=\"https://docs.basex.org/wiki/Client_Module#client:connect\">client:connect</a></code>, and <code>$query</code> represents the query string, which will be evaluated by the server.<br/>Variables and the context item can be declared via <code>$bindings</code>. The specified keys must be QNames or strings: <ul><li>If a key is a QName, it will be directly adopted as variable name.</li><li>If a key is a string, it may be prefixed with a dollar sign. A namespace can be specified using the <a href=\"http://www.jclark.com/xml/xmlns.htm\">Clark Notation</a>. If the specified string is empty, the value will be bound to the context item.</li></ul>",
     "params": {
      "$query": "value of type xs:string"
     },
     "errors": [
      "client:error an I/O error occurs while transferring data from or to the server.",
      "client:query an error occurs while evaluating a query, and if the original error cannot be extracted from the returned error string.",
      "client:function function items (including maps and arrays) cannot be returned."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "query",
    "uri": "http://basex.org/modules/client",
    "params": [
     "$id as xs:anyURI",
     "$query as xs:string",
     "$bindings as map(*)?"
    ],
    "comments": {
     "description": " Evaluates a query and returns the result as sequence. The parameter <code>$id</code> contains the session id returned by <code><a href=\"https://docs.basex.org/wiki/Client_Module#client:connect\">client:connect</a></code>, and <code>$query</code> represents the query string, which will be evaluated by the server.<br/>Variables and the context item can be declared via <code>$bindings</code>. The specified keys must be QNames or strings: <ul><li>If a key is a QName, it will be directly adopted as variable name.</li><li>If a key is a string, it may be prefixed with a dollar sign. A namespace can be specified using the <a href=\"http://www.jclark.com/xml/xmlns.htm\">Clark Notation</a>. If the specified string is empty, the value will be bound to the context item.</li></ul>",
     "params": {
      "$query": "value of type xs:string",
      "$bindings": "value of type map(*)?"
     },
     "errors": [
      "client:error an I/O error occurs while transferring data from or to the server.",
      "client:query an error occurs while evaluating a query, and if the original error cannot be extracted from the returned error string.",
      "client:function function items (including maps and arrays) cannot be returned."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "close",
    "uri": "http://basex.org/modules/client",
    "params": [
     "$id as xs:anyURI"
    ],
    "comments": {
     "description": " This function closes a client session. <code>$id</code> specifies the session id.<br/>Opened connections will automatically be closed after the XQuery expression has been evaluated, but it is recommendable to explicitly close them with this function if you open many connections.",
     "params": {},
     "errors": [
      "client:error an I/O error occurs while transferring data from or to the server."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions to access BaseX server instances from XQuery. With this module, you can execute database commands and evaluate XQuery expressions."
 },
 "http://basex.org/modules/convert": {
  "moduleNamespace": "http://basex.org/modules/convert",
  "prefixes": [
   "convert"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "binary-to-string",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$bytes as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Converts the specifed <code>$bytes</code> (<code>xs:base64Binary</code>, <code>xs:hexBinary</code>) to a string: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid characters will be rejected. If <code>$fallback</code> is set to true, these characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul>",
     "params": {},
     "errors": [
      "convert:string The input is an invalid XML string, or the wrong encoding has been specified.",
      "convert:BXCO0002 The specified encoding is invalid or not supported."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "binary-to-string",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$bytes as xs:anyAtomicType",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Converts the specifed <code>$bytes</code> (<code>xs:base64Binary</code>, <code>xs:hexBinary</code>) to a string: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid characters will be rejected. If <code>$fallback</code> is set to true, these characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul>",
     "params": {
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "convert:string The input is an invalid XML string, or the wrong encoding has been specified.",
      "convert:BXCO0002 The specified encoding is invalid or not supported."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "binary-to-string",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$bytes as xs:anyAtomicType",
     "$encoding as xs:string",
     "$fallback as xs:boolean?"
    ],
    "comments": {
     "description": " Converts the specifed <code>$bytes</code> (<code>xs:base64Binary</code>, <code>xs:hexBinary</code>) to a string: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid characters will be rejected. If <code>$fallback</code> is set to true, these characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul>",
     "params": {
      "$encoding": "value of type xs:string",
      "$fallback": "value of type xs:boolean?"
     },
     "errors": [
      "convert:string The input is an invalid XML string, or the wrong encoding has been specified.",
      "convert:BXCO0002 The specified encoding is invalid or not supported."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "string-to-base64",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$string as xs:string"
    ],
    "comments": {
     "description": " Converts the specified <code>$string</code> to an <code>xs:base64Binary</code> item. If the default encoding is chosen, conversion will be cheap, as strings and binaries are both internally represented as byte arrays.<br/>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.",
     "params": {},
     "errors": [
      "convert:binary The input cannot be represented in the specified encoding.",
      "convert:encoding The specified encoding is invalid or not supported."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "string-to-base64",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$string as xs:string",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Converts the specified <code>$string</code> to an <code>xs:base64Binary</code> item. If the default encoding is chosen, conversion will be cheap, as strings and binaries are both internally represented as byte arrays.<br/>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.",
     "params": {
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "convert:binary The input cannot be represented in the specified encoding.",
      "convert:encoding The specified encoding is invalid or not supported."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "string-to-hex",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$string as xs:string"
    ],
    "comments": {
     "description": " Converts the specified <code>$string</code> to an <code>xs:hexBinary</code> item. If the default encoding is chosen, conversion will be cheap, as strings and binaries are both internally represented as byte arrays.<br/>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.",
     "params": {},
     "errors": [
      "convert:binary The input cannot be represented in the specified encoding.",
      "convert:encoding The specified encoding is invalid or not supported."
     ],
     "others": [],
     "return": "value of type xs:hexBinary"
    }
   },
   {
    "name": "string-to-hex",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$string as xs:string",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Converts the specified <code>$string</code> to an <code>xs:hexBinary</code> item. If the default encoding is chosen, conversion will be cheap, as strings and binaries are both internally represented as byte arrays.<br/>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.",
     "params": {
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "convert:binary The input cannot be represented in the specified encoding.",
      "convert:encoding The specified encoding is invalid or not supported."
     ],
     "others": [],
     "return": "value of type xs:hexBinary"
    }
   },
   {
    "name": "integers-to-base64",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$integers as xs:integer*"
    ],
    "comments": {
     "description": " Converts the specified <code>$integers</code> to an item of type <code>xs:base64Binary</code>: <ul><li>Only the first 8 bits of the supplied integers will be considered.</li><li>Conversion of byte sequences is very efficient, as items of binary type are internally represented as byte arrays.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "integers-to-hex",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$integers as xs:integer*"
    ],
    "comments": {
     "description": " Converts the specified <code>$integers</code> to an item of type <code>xs:hexBinary</code>: <ul><li>Only the first 8 bits of the supplied integers will be considered.</li><li>Conversion of byte sequences is very efficient, as items of binary type are internally represented as byte arrays.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:hexBinary"
    }
   },
   {
    "name": "binary-to-integers",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$binary as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Returns the specified <code>$binary</code> (<code>xs:base64Binary</code>, <code>xs:hexBinary</code>) as a sequence of unsigned integers (octets).",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer*"
    }
   },
   {
    "name": "binary-to-bytes",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$binary as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Returns the specified <code>$binary</code> (<code>xs:base64Binary</code>, <code>xs:hexBinary</code>) as a sequence of bytes. The conversion is very cheap and takes no additional memory, as items of binary type are internally represented as byte arrays.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:byte*"
    }
   },
   {
    "name": "integer-to-base",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$number as xs:integer",
     "$base as xs:integer"
    ],
    "comments": {
     "description": " Converts <code>$number</code> to a string, using the specified <code>$base</code>, interpreting it as a 64-bit unsigned integer.<br/>The first base elements of the sequence <code>'0',..,'9','a',..,'z'</code> are used as digits.<br/>Valid bases are <code>2, .., 36</code>.<br/>",
     "params": {
      "$base": "value of type xs:integer"
     },
     "errors": [
      "convert:base The specified base is not in the range 2-36."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "integer-from-base",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$string as xs:string",
     "$base as xs:integer"
    ],
    "comments": {
     "description": " Decodes an integer from <code>$string</code>, using the specified <code>$base</code>.<br/> The first base elements of the sequence <code>'0',..,'9','a',..,'z'</code> are allowed as digits; case does not matter. <br/>Valid bases are 2 - 36.<br/> If the supplied string contains more than 64 bits of information, the result will be truncated.",
     "params": {
      "$base": "value of type xs:integer"
     },
     "errors": [
      "convert:base The specified base is not in the range 2-36.",
      "convert:integer The specified digit is not valid for the given range."
     ],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "integer-to-dateTime",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$milliseconds as xs:integer"
    ],
    "comments": {
     "description": " Converts the specified number of <code>$milliseconds</code> since 1 Jan 1970 to an item of type xs:dateTime.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:dateTime"
    }
   },
   {
    "name": "dateTime-to-integer",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$dateTime as xs:dateTime"
    ],
    "comments": {
     "description": " Converts the specified <code>$dateTime</code> item to the number of milliseconds since 1 Jan 1970.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "integer-to-dayTime",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$milliseconds as xs:integer"
    ],
    "comments": {
     "description": " Converts the specified number of <code>$milliseconds</code> to an item of type xs:dayTimeDuration.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:dayTimeDuration"
    }
   },
   {
    "name": "dayTime-to-integer",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$dayTime as xs:dayTimeDuration"
    ],
    "comments": {
     "description": " Converts the specified <code>$dayTime</code> duration to milliseconds represented by an integer.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "encode-key",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$key as xs:string"
    ],
    "comments": {
     "description": " Encodes the specified <code>$key</code> (with the optional <code>$lax</code> conversion method) to a valid NCName representation, which can be used to create an element node. This encoding is employed by the <a href=\"https://docs.basex.org/wiki/JSON_Module\">JSON Module</a> and the <a href=\"https://docs.basex.org/wiki/CSV_Module\">CSV Module</a>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "encode-key",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$key as xs:string",
     "$lax as xs:boolean?"
    ],
    "comments": {
     "description": " Encodes the specified <code>$key</code> (with the optional <code>$lax</code> conversion method) to a valid NCName representation, which can be used to create an element node. This encoding is employed by the <a href=\"https://docs.basex.org/wiki/JSON_Module\">JSON Module</a> and the <a href=\"https://docs.basex.org/wiki/CSV_Module\">CSV Module</a>.",
     "params": {
      "$lax": "value of type xs:boolean?"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "decode-key",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$key as xs:string"
    ],
    "comments": {
     "description": " Decodes the specified <code>$key</code> (with the optional <code>$lax</code> conversion method) to the original string representation.<br/>Keys supplied to this function can be element names that have been created by the <a href=\"https://docs.basex.org/wiki/JSON_Module\">JSON Module</a> or <a href=\"https://docs.basex.org/wiki/CSV_Module\">CSV Module</a>.",
     "params": {},
     "errors": [
      "convert:key The specified key cannot be decoded to its original representation."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "decode-key",
    "uri": "http://basex.org/modules/convert",
    "params": [
     "$key as xs:string",
     "$lax as xs:boolean?"
    ],
    "comments": {
     "description": " Decodes the specified <code>$key</code> (with the optional <code>$lax</code> conversion method) to the original string representation.<br/>Keys supplied to this function can be element names that have been created by the <a href=\"https://docs.basex.org/wiki/JSON_Module\">JSON Module</a> or <a href=\"https://docs.basex.org/wiki/CSV_Module\">CSV Module</a>.",
     "params": {
      "$lax": "value of type xs:boolean?"
     },
     "errors": [
      "convert:key The specified key cannot be decoded to its original representation."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions to convert data between different formats."
 },
 "http://expath.org/ns/crypto": {
  "moduleNamespace": "http://expath.org/ns/crypto",
  "prefixes": [
   "crypto"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "hmac",
    "uri": "http://expath.org/ns/crypto",
    "params": [
     "$data as xs:anyAtomicType",
     "$key as xs:anyAtomicType",
     "$algorithm as xs:string"
    ],
    "comments": {
     "description": " Creates an authentication code for the specified <code>$data</code> via a cryptographic hash function: <ul><li><code>$key</code> must not be empty.</li><li><code>$algorithm</code> describes the hash algorithm which is used for encryption. Currently supported are <code>md5</code>, <code>sha1</code>, <code>sha256</code>, <code>sha384</code>, <code>sha512</code>. Default is <code>md5</code>.</li><li><code>$encoding</code> must either be <code>hex</code> or <code>base64</code>; it specifies the encoding of the returned authentication code. Default is <code>base64</code>.</li></ul>",
     "params": {
      "$key": "value of type xs:anyAtomicType",
      "$algorithm": "value of type xs:string"
     },
     "errors": [
      "experr:CX0013 the specified hashing algorithm is not supported.",
      "experr:CX0014 the specified encoding method is not supported.",
      "experr:CX0019 the specified secret key is invalid."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "hmac",
    "uri": "http://expath.org/ns/crypto",
    "params": [
     "$data as xs:anyAtomicType",
     "$key as xs:anyAtomicType",
     "$algorithm as xs:string",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Creates an authentication code for the specified <code>$data</code> via a cryptographic hash function: <ul><li><code>$key</code> must not be empty.</li><li><code>$algorithm</code> describes the hash algorithm which is used for encryption. Currently supported are <code>md5</code>, <code>sha1</code>, <code>sha256</code>, <code>sha384</code>, <code>sha512</code>. Default is <code>md5</code>.</li><li><code>$encoding</code> must either be <code>hex</code> or <code>base64</code>; it specifies the encoding of the returned authentication code. Default is <code>base64</code>.</li></ul>",
     "params": {
      "$key": "value of type xs:anyAtomicType",
      "$algorithm": "value of type xs:string",
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "experr:CX0013 the specified hashing algorithm is not supported.",
      "experr:CX0014 the specified encoding method is not supported.",
      "experr:CX0019 the specified secret key is invalid."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "encrypt",
    "uri": "http://expath.org/ns/crypto",
    "params": [
     "$data as xs:anyAtomicType",
     "$type as xs:string",
     "$key as xs:anyAtomicType",
     "$algorithm as xs:string"
    ],
    "comments": {
     "description": " Encrypts data with the specified key: <ul><li><code>$data</code> must be a string or binary item.</li><li><code>$type</code> must be <code>symmetric</code>.</li><li><code>$key</code> is the secret key which is used for both encryption and decryption of input data. It must be a string or binary item. Its length is fixed and depends on the chosen algorithm: 8 bytes for <code>DES</code>, 16 bytes for <code>AES</code>.</li><li><code>$algorithm</code> must either be <code>DES</code> or <code>AES</code>. Default is <code>DES</code>.</li></ul>",
     "params": {
      "$type": "value of type xs:string",
      "$key": "value of type xs:anyAtomicType",
      "$algorithm": "value of type xs:string"
     },
     "errors": [
      "experr:CX0016 padding problems arise.",
      "experr:CX0017 padding is incorrect.",
      "experr:CX0018 the encryption type is not supported.",
      "experr:CX0019 the secret key is invalid.",
      "experr:CX0020 the block size is incorrect.",
      "experr:CX0021 the specified encryption algorithm is not supported."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "decrypt",
    "uri": "http://expath.org/ns/crypto",
    "params": [
     "$data as xs:anyAtomicType",
     "$type as xs:string",
     "$key as xs:anyAtomicType",
     "$algorithm as xs:string"
    ],
    "comments": {
     "description": " Encrypts data with the specified key: <ul><li><code>$data</code> must be a string or binary item.</li><li><code>$type</code> must be <code>symmetric</code>.</li><li><code>$key</code> is the secret key which is used for both encryption and decryption of input data. It must be a string or binary item. Its length is fixed and depends on the chosen algorithm: 8 bytes for <code>DES</code>, 16 bytes for <code>AES</code>.</li><li><code>$algorithm</code> must either be <code>DES</code> or <code>AES</code>. Default is <code>DES</code>.</li></ul>",
     "params": {
      "$type": "value of type xs:string",
      "$key": "value of type xs:anyAtomicType",
      "$algorithm": "value of type xs:string"
     },
     "errors": [
      "experr:CX0016 padding problems arise.",
      "experr:CX0017 padding is incorrect.",
      "experr:CX0018 the encryption type is not supported.",
      "experr:CX0019 the secret key is invalid.",
      "experr:CX0020 the block size is incorrect.",
      "experr:CX0021 the specified encryption algorithm is not supported."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "generate-signature",
    "uri": "http://expath.org/ns/crypto",
    "params": [
     "$input as node()",
     "$canonicalization as xs:string",
     "$digest as xs:string",
     "$signature as xs:string",
     "$prefix as xs:string",
     "$type as xs:string",
     "$ext1 as item()",
     "$ext2 as node()"
    ],
    "comments": {
     "description": " <code>$canonicalization</code> must either be <code>inclusive-with-comments</code>, <code>inclusive</code>, <code>exclusive-with-comments</code> or <code>exclusive</code>. <b>Default is <code>inclusive-with-comments</code></b>.<br/> <p><code>$digest</code> must be one of the following: <code>SHA1</code>, <code>SHA256</code> or <code>SHA512</code>. <b>Default is <code>SHA1</code></b>.<br/> <code>$signature</code> must either be <code>RSA_SHA1</code> or <code>DSA_SHA1</code>. <b>Default is <code>RSA_SHA1</code></b>.<br/> <code>$prefix</code> may be empty and prefixes the <code>Signature</code> element accordingly.<br/> <code>$type</code> is the signature type. It must either be <code>enveloped</code> or <code>enveloping</code> (detached signatures are not supported so far). <b>Default is <code>enveloped</code></b>.<br/> <code>$ext1</code> may either be an <code>$xpath</code> expression or a <code>$certificate</code>.<br/> If <code>$ext2</code> is specified as well, <code>$ext1</code> is an arbitrary XPath expression which specifies a subset of the document that is to be signed, and <code>$ext2</code> is the digitial certificate used to sign the input document.<br/> </p>",
     "params": {
      "$canonicalization": "value of type xs:string",
      "$digest": "value of type xs:string",
      "$signature": "value of type xs:string",
      "$prefix": "value of type xs:string",
      "$type": "value of type xs:string",
      "$ext1": "value of type item()",
      "$ext2": "value of type node()"
     },
     "errors": [
      "experr:CX0001 the canonicalization algorithm is not supported.",
      "experr:CX0002 the digest algorithm is not supported.",
      "experr:CX0003 the signature algorithm is not supported.",
      "experr:CX0004 the <code>$xpath-expression</code> is invalid.",
      "experr:CX0005 the root name of <code>$digital-certificate</code> is not 'digital-certificate.",
      "experr:CX0007 the key store is null.",
      "experr:CX0012 the key cannot be found in the specified key store.",
      "experr:CX0023 the certificate alias is invalid.",
      "experr:CX0024 an invalid algorithm is specified.",
      "experr:CX0025 an exception occurs while the signing the document.",
      "experr:CX0026 an exception occurs during key store initialization.",
      "experr:CX0027 an IO exception occurs.",
      "experr:CX0028 the signature type is not supported."
     ],
     "others": [],
     "return": "value of type node()"
    }
   },
   {
    "name": "validate-signature",
    "uri": "http://expath.org/ns/crypto",
    "params": [
     "$input-doc as node()"
    ],
    "comments": {
     "description": " Checks if the given node contains a <code>Signature</code> element and whether the signature is valid. In this case <code>true</code> is returned. If the signature is invalid the function returns <code>false</code>.",
     "params": {},
     "errors": [
      "experr:CX0015 the signature element cannot be found.",
      "experr:CX9994 an unspecified problem occurs during validation.",
      "experr:CX9996 an IO exception occurs during validation."
     ],
     "others": [],
     "return": "value of type xs:boolean"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions to perform cryptographic operations in XQuery. The cryptographic module is based on an early draft of the <a href=\"http://expath.org/spec/crypto/20110810\">EXPath Cryptographic Module</a> and provides the following functionality: creation of message authentication codes (HMAC), encryption and decryption, and creation and validation of XML Digital Signatures."
 },
 "http://basex.org/modules/csv": {
  "moduleNamespace": "http://basex.org/modules/csv",
  "prefixes": [
   "csv"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "doc",
    "uri": "http://basex.org/modules/csv",
    "params": [
     "$href as xs:string?"
    ],
    "comments": {
     "description": " Fetches the CSV document referred to by the given <code>$href</code> and converts it to an XQuery value. The <code>$options</code> argument can be used to control the way the input is converted.",
     "params": {},
     "errors": [
      "csv:parse the specified input cannot be parsed as CSV document.",
      "csv:options the specified options are conflicting."
     ],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "doc",
    "uri": "http://basex.org/modules/csv",
    "params": [
     "$href as xs:string?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Fetches the CSV document referred to by the given <code>$href</code> and converts it to an XQuery value. The <code>$options</code> argument can be used to control the way the input is converted.",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "csv:parse the specified input cannot be parsed as CSV document.",
      "csv:options the specified options are conflicting."
     ],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "parse",
    "uri": "http://basex.org/modules/csv",
    "params": [
     "$value as xs:string?"
    ],
    "comments": {
     "description": " Converts the CSV <code>$value</code> to an XQuery value. The <code>$options</code> argument can be used to control the way the input is converted.",
     "params": {},
     "errors": [
      "csv:parse the specified input cannot be parsed as CSV document."
     ],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "parse",
    "uri": "http://basex.org/modules/csv",
    "params": [
     "$value as xs:string?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Converts the CSV <code>$value</code> to an XQuery value. The <code>$options</code> argument can be used to control the way the input is converted.",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "csv:parse the specified input cannot be parsed as CSV document."
     ],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "serialize",
    "uri": "http://basex.org/modules/csv",
    "params": [
     "$input as item()?"
    ],
    "comments": {
     "description": " Serializes the specified <code>$input</code> as CSV, using the specified <code>$options</code>, and returns the result as string. <p>Values can also be serialized as CSV with the standard <a href=\"https://docs.basex.org/wiki/Serialization\">Serialization</a> feature of XQuery: </p> <ul><li>The parameter <code>method</code> needs to be set to <code>csv</code>, and</li><li>the options presented in this article need to be assigned to the <code>csv</code> parameter.</li></ul>",
     "params": {},
     "errors": [
      "csv:serialize the input cannot be serialized."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "serialize",
    "uri": "http://basex.org/modules/csv",
    "params": [
     "$input as item()?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Serializes the specified <code>$input</code> as CSV, using the specified <code>$options</code>, and returns the result as string. <p>Values can also be serialized as CSV with the standard <a href=\"https://docs.basex.org/wiki/Serialization\">Serialization</a> feature of XQuery: </p> <ul><li>The parameter <code>method</code> needs to be set to <code>csv</code>, and</li><li>the options presented in this article need to be assigned to the <code>csv</code> parameter.</li></ul>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "csv:serialize the input cannot be serialized."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains a single function to parse CSV input. <a href=\"https://en.wikipedia.org/wiki/Comma-separated_values\">CSV</a> (comma-separated values) is a popular representation for tabular data, exported e. g. from Excel."
 },
 "http://basex.org/modules/db": {
  "moduleNamespace": "http://basex.org/modules/db",
  "prefixes": [
   "db"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "system",
    "uri": "http://basex.org/modules/db",
    "params": [],
    "comments": {
     "description": " Returns general information on the database system the current values of all global and local <a href=\"https://docs.basex.org/wiki/Options\">Options</a>. The <code><a href=\"https://docs.basex.org/wiki/Commands#INFO\">INFO</a></code> command returns similar output.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(system)"
    }
   },
   {
    "name": "option",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns the current value (string, integer, boolean, map) of a global or local <a href=\"https://docs.basex.org/wiki/Options\">Option</a> with the specified <code>$name</code>. The <code><a href=\"https://docs.basex.org/wiki/Commands#SHOW_OPTIONS\">SHOW OPTIONS</a></code> command returns similar output.",
     "params": {},
     "errors": [
      "db:option the specified option is unknown."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "info",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string"
    ],
    "comments": {
     "description": " Returns meta information on the specified <code>$database</code>. The output is similar to the <code><a href=\"https://docs.basex.org/wiki/Commands#INFO_DB\">INFO DB</a></code> command.",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type element(database)"
    }
   },
   {
    "name": "property",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns the value (string, boolean, integer) of a property with the specified <code>$name</code> in the specified <code>$database</code>. The available properties are the ones returned by <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:info\">db:info</a></code>.",
     "params": {
      "$name": "value of type xs:string"
     },
     "errors": [
      "db:property the specified property is unknown."
     ],
     "others": [],
     "return": "value of type xs:anyAtomicType"
    }
   },
   {
    "name": "list",
    "uri": "http://basex.org/modules/db",
    "params": [],
    "comments": {
     "description": " Without arguments, the names of all databases are returned that are accessible to the current user. If <code>$database</code> is specified, paths to all resources of this database are returned. The results can be restricted to resources starting with the specified <code>$path</code>.",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "list",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string"
    ],
    "comments": {
     "description": " Without arguments, the names of all databases are returned that are accessible to the current user. If <code>$database</code> is specified, paths to all resources of this database are returned. The results can be restricted to resources starting with the specified <code>$path</code>.",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "list",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Without arguments, the names of all databases are returned that are accessible to the current user. If <code>$database</code> is specified, paths to all resources of this database are returned. The results can be restricted to resources starting with the specified <code>$path</code>.",
     "params": {
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "list-details",
    "uri": "http://basex.org/modules/db",
    "params": [],
    "comments": {
     "description": " Without arguments, an element is returned for each database that is accessible to the current user: <ul><li>An element has a value, which is the name of the database, and several attributes, which contain the number of stored resources, the modification date, the database size on disk (measured in bytes), and a path to the original database input.</li></ul> <p>If <code>$database</code> is specified, an element for each resource in this database is returned: </p> <ul><li>An element has a value, which is the name of the resource, and several attributes, which contain the content type, the modification date, the raw flag (which indicates if the resource is binary or XML), and the size of a resource.</li><li>The value of the size attribute depends on the resource type: for documents, it represents the number of nodes; for binary data, it represents the file size (measured in bytes).</li><li>The results can be restricted to resources starting with the specified <code>$path</code>.</li></ul>",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type element()*"
    }
   },
   {
    "name": "list-details",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string"
    ],
    "comments": {
     "description": " Without arguments, an element is returned for each database that is accessible to the current user: <ul><li>An element has a value, which is the name of the database, and several attributes, which contain the number of stored resources, the modification date, the database size on disk (measured in bytes), and a path to the original database input.</li></ul> <p>If <code>$database</code> is specified, an element for each resource in this database is returned: </p> <ul><li>An element has a value, which is the name of the resource, and several attributes, which contain the content type, the modification date, the raw flag (which indicates if the resource is binary or XML), and the size of a resource.</li><li>The value of the size attribute depends on the resource type: for documents, it represents the number of nodes; for binary data, it represents the file size (measured in bytes).</li><li>The results can be restricted to resources starting with the specified <code>$path</code>.</li></ul>",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type element()*"
    }
   },
   {
    "name": "list-details",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Without arguments, an element is returned for each database that is accessible to the current user: <ul><li>An element has a value, which is the name of the database, and several attributes, which contain the number of stored resources, the modification date, the database size on disk (measured in bytes), and a path to the original database input.</li></ul> <p>If <code>$database</code> is specified, an element for each resource in this database is returned: </p> <ul><li>An element has a value, which is the name of the resource, and several attributes, which contain the content type, the modification date, the raw flag (which indicates if the resource is binary or XML), and the size of a resource.</li><li>The value of the size attribute depends on the resource type: for documents, it represents the number of nodes; for binary data, it represents the file size (measured in bytes).</li><li>The results can be restricted to resources starting with the specified <code>$path</code>.</li></ul>",
     "params": {
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type element()*"
    }
   },
   {
    "name": "dir",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns metadata on all directories and resources of a <code>$database</code> in the specified <code>$path</code>. Two types of elements are returned: <ul><li><code>resource</code> represents a resource. The element value is the directory path; content type, modification date, raw flag (which indicates if the resource is binary or XML), and size of the resource are returned as attributes.</li><li><code>dir</code> represents a directory. The element value is the directory path; the modification date is returned in an attribute.</li></ul> <p>The directories are not stored in the internal database layout. Instead, they result implicitly from the paths of stored resources. </p>",
     "params": {
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:path the specified path is invalid."
     ],
     "others": [],
     "return": "value of type element()*"
    }
   },
   {
    "name": "get",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string"
    ],
    "comments": {
     "description": " Returns all documents from the specified <code>$database</code>, or only documents matching the specified <code>$path</code>.",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type document-node()*"
    }
   },
   {
    "name": "get",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns all documents from the specified <code>$database</code>, or only documents matching the specified <code>$path</code>.",
     "params": {
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type document-node()*"
    }
   },
   {
    "name": "get-pre",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$values as xs:integer*"
    ],
    "comments": {
     "description": " Returns all nodes from a <code>$database</code> with the specified PRE <code>values</code> in <a href=\"https://docs.basex.org/wiki/Utility_Module#util:ddo\">distinct document order</a>.<br/>The <a href=\"https://docs.basex.org/wiki/Node_Storage#PRE_Value\">PRE value</a> provides very fast access to an existing database node, but it will change whenever a node with a smaller <i>pre</i> values is added to or deleted from a database.",
     "params": {
      "$values": "value of type xs:integer*"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:range the specified PRE value does not exist in the database."
     ],
     "others": [],
     "return": "value of type node()*"
    }
   },
   {
    "name": "get-id",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$values as xs:integer*"
    ],
    "comments": {
     "description": " Returns all nodes from a <code>$database</code> with the specified ID <code>$values</code> in <a href=\"https://docs.basex.org/wiki/Utility_Module#util:ddo\">distinct document order</a>.<br/>Each database node has a <i>persistent</i> <a href=\"https://docs.basex.org/wiki/Node_Storage#ID_Value\">ID value</a>. Access to the node ID can be sped up by turning on the <code><a href=\"https://docs.basex.org/wiki/Options#UPDINDEX\">UPDINDEX</a></code> option.",
     "params": {
      "$values": "value of type xs:integer*"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:range the specified ID value does not exist in the database."
     ],
     "others": [],
     "return": "value of type node()*"
    }
   },
   {
    "name": "get-binary",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns a map with the paths and binary items of all resources in the specified <code>$database</code>. A single <code>xs:base64Binary</code> item is returned if a <code>$path</code> is specified. All items are <a href=\"https://docs.basex.org/wiki/Lazy_Module\">lazy</a>, i.e., the actual data will only be retrieved if it is processed.",
     "params": {
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:mainmem the database is not <i>persistent</i> (stored on disk)."
     ],
     "others": [],
     "return": "value of type item()"
    }
   },
   {
    "name": "get-value",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns a map with the paths and values of all resources in the specified <code>$database</code>. A single value is returned if a <code>$path</code> is specified.",
     "params": {
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:mainmem the database is not <i>persistent</i> (stored on disk)."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "node-pre",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$nodes as node()*"
    ],
    "comments": {
     "description": " Returns the PRE values of the specified <code>$nodes</code>, which must all be <a href=\"https://docs.basex.org/wiki/Database_Module#Database_Nodes\">database nodes</a>.<br/>The <a href=\"https://docs.basex.org/wiki/Node_Storage#PRE_Value\">PRE value</a> provides very fast access to an existing database node, but it will change whenever a node with a smaller <i>pre</i> values is added to or deleted from a database.",
     "params": {},
     "errors": [
      "db:node <code>$nodes</code> contains a node which is not stored in a database."
     ],
     "others": [],
     "return": "value of type xs:integer*"
    }
   },
   {
    "name": "node-id",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$nodes as node()*"
    ],
    "comments": {
     "description": " Returns the ID values of the specified <code>$nodes</code>, which must all be <a href=\"https://docs.basex.org/wiki/Database_Module#Database_Nodes\">database nodes</a>.<br/>Each database node has a <i>persistent</i> <a href=\"https://docs.basex.org/wiki/Node_Storage#ID_Value\">ID value</a>. Access to the node id can be sped up by turning on the <code><a href=\"https://docs.basex.org/wiki/Options#UPDINDEX\">UPDINDEX</a></code> option.",
     "params": {},
     "errors": [
      "db:node <code>$nodes</code> contains a node which is not stored in a database."
     ],
     "others": [],
     "return": "value of type xs:integer*"
    }
   },
   {
    "name": "export",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Exports the specified <code>$database</code> to the specified file <code>$path</code>. Existing files will be overwritten.<br/>The <code>$options</code> argument contains <a href=\"https://docs.basex.org/wiki/Serialization\">serialization parameters</a> (see <a href=\"https://www.w3.org/TR/xpath-functions-31/#func-serialize\">fn:serialize()</a>).",
     "params": {
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "export",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Exports the specified <code>$database</code> to the specified file <code>$path</code>. Existing files will be overwritten.<br/>The <code>$options</code> argument contains <a href=\"https://docs.basex.org/wiki/Serialization\">serialization parameters</a> (see <a href=\"https://www.w3.org/TR/xpath-functions-31/#func-serialize\">fn:serialize()</a>).",
     "params": {
      "$path": "value of type xs:string",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "text",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$values as xs:string*"
    ],
    "comments": {
     "description": " Returns all text nodes of a <code>$database</code> that match one of the specified <code>$values</code> and that are stored in the text index.",
     "params": {
      "$values": "value of type xs:string*"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type text()*"
    }
   },
   {
    "name": "text-range",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$min as xs:string",
     "$max as xs:string"
    ],
    "comments": {
     "description": " Returns all text nodes of a <code>$database</code> whose values are larger than or equal to <code>$min</code> and smaller than or equal to <code>$max</code> and that are stored in the text index.",
     "params": {
      "$min": "value of type xs:string",
      "$max": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type text()*"
    }
   },
   {
    "name": "attribute",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$values as xs:string*"
    ],
    "comments": {
     "description": " Returns all attribute nodes of a <code>$database</code> that match one of the specified <code>$values</code> and that are stored in the attribute index.<br/>If <code>$name</code> is specified, the resulting attribute nodes are filtered by their attribute name.",
     "params": {
      "$values": "value of type xs:string*"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type attribute()*"
    }
   },
   {
    "name": "attribute",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$values as xs:string*",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns all attribute nodes of a <code>$database</code> that match one of the specified <code>$values</code> and that are stored in the attribute index.<br/>If <code>$name</code> is specified, the resulting attribute nodes are filtered by their attribute name.",
     "params": {
      "$values": "value of type xs:string*",
      "$name": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type attribute()*"
    }
   },
   {
    "name": "attribute-range",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$min as xs:string",
     "$max as xs:string"
    ],
    "comments": {
     "description": " Returns all attributes of a <code>$database</code> whose values are larger than or equal to <code>$min</code> and smaller than or equal to <code>$max</code> and that are stored in the attribute index.",
     "params": {
      "$min": "value of type xs:string",
      "$max": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type attribute()*"
    }
   },
   {
    "name": "attribute-range",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$min as xs:string",
     "$max as xs:string",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns all attributes of a <code>$database</code> whose values are larger than or equal to <code>$min</code> and smaller than or equal to <code>$max</code> and that are stored in the attribute index.",
     "params": {
      "$min": "value of type xs:string",
      "$max": "value of type xs:string",
      "$name": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type attribute()*"
    }
   },
   {
    "name": "token",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$tokens as xs:string*"
    ],
    "comments": {
     "description": " Returns all attribute nodes of a <code>$database</code> the values of which contain one of the specified <code>$tokens</code>.<br/>If <code>$name</code> is specified, the resulting attribute nodes are filtered by their attribute name.",
     "params": {
      "$tokens": "value of type xs:string*"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type attribute()*"
    }
   },
   {
    "name": "token",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$tokens as xs:string*",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns all attribute nodes of a <code>$database</code> the values of which contain one of the specified <code>$tokens</code>.<br/>If <code>$name</code> is specified, the resulting attribute nodes are filtered by their attribute name.",
     "params": {
      "$tokens": "value of type xs:string*",
      "$name": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type attribute()*"
    }
   },
   {
    "name": "create",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string"
    ],
    "comments": {
     "description": " Creates a new <code>$database</code> and adds the supplied <code>$inputs</code> to the specified <code>$paths</code>: <ul><li>The inputs may be strings or nodes: <ul><li>nodes may be of any type except for attributes</li><li>strings can be a URI pointing to a file/directory or an XML string (which is detected by the leading <code>&lt;</code> character)</li><li>a path must be specified if the input is not a file or directory reference</li></ul></li><li>The parsing and indexing behavior can be controlled via <code>$options</code>: <ul><li>allowed options are <code><a href=\"https://docs.basex.org/wiki/Options#ADDCACHE\">ADDCACHE</a></code> and the <a href=\"https://docs.basex.org/wiki/Options#Indexing\">indexing</a>, <a href=\"https://docs.basex.org/wiki/Options#Full-Text_Indexing\">full-text indexing</a>, <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options, all in lower case</li><li>parsing options will only impact string input (URIs, XML strings) because nodes have already been parsed.</li></ul></li><li>An existing database will be overwritten.</li><li>Database creation takes place after most other update operations (see <a href=\"https://docs.basex.org/wiki/XQuery_Update#Pending_Update_List\">Pending Update List</a>). As a consequence, a newly created database cannot be addressed in the same query.</li></ul>",
     "params": {},
     "errors": [
      "db:lock a database is opened by another process.",
      "db:name the specified name is not a <a href=\"https://docs.basex.org/wiki/Commands#Valid_Names\">valid database name</a>.",
      "db:conflict the same database was addressed more than once.",
      "db:args the number of specified inputs and paths differs."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "create",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$inputs as item()*"
    ],
    "comments": {
     "description": " Creates a new <code>$database</code> and adds the supplied <code>$inputs</code> to the specified <code>$paths</code>: <ul><li>The inputs may be strings or nodes: <ul><li>nodes may be of any type except for attributes</li><li>strings can be a URI pointing to a file/directory or an XML string (which is detected by the leading <code>&lt;</code> character)</li><li>a path must be specified if the input is not a file or directory reference</li></ul></li><li>The parsing and indexing behavior can be controlled via <code>$options</code>: <ul><li>allowed options are <code><a href=\"https://docs.basex.org/wiki/Options#ADDCACHE\">ADDCACHE</a></code> and the <a href=\"https://docs.basex.org/wiki/Options#Indexing\">indexing</a>, <a href=\"https://docs.basex.org/wiki/Options#Full-Text_Indexing\">full-text indexing</a>, <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options, all in lower case</li><li>parsing options will only impact string input (URIs, XML strings) because nodes have already been parsed.</li></ul></li><li>An existing database will be overwritten.</li><li>Database creation takes place after most other update operations (see <a href=\"https://docs.basex.org/wiki/XQuery_Update#Pending_Update_List\">Pending Update List</a>). As a consequence, a newly created database cannot be addressed in the same query.</li></ul>",
     "params": {
      "$inputs": "value of type item()*"
     },
     "errors": [
      "db:lock a database is opened by another process.",
      "db:name the specified name is not a <a href=\"https://docs.basex.org/wiki/Commands#Valid_Names\">valid database name</a>.",
      "db:conflict the same database was addressed more than once.",
      "db:args the number of specified inputs and paths differs."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "create",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$inputs as item()*",
     "$paths as xs:string*"
    ],
    "comments": {
     "description": " Creates a new <code>$database</code> and adds the supplied <code>$inputs</code> to the specified <code>$paths</code>: <ul><li>The inputs may be strings or nodes: <ul><li>nodes may be of any type except for attributes</li><li>strings can be a URI pointing to a file/directory or an XML string (which is detected by the leading <code>&lt;</code> character)</li><li>a path must be specified if the input is not a file or directory reference</li></ul></li><li>The parsing and indexing behavior can be controlled via <code>$options</code>: <ul><li>allowed options are <code><a href=\"https://docs.basex.org/wiki/Options#ADDCACHE\">ADDCACHE</a></code> and the <a href=\"https://docs.basex.org/wiki/Options#Indexing\">indexing</a>, <a href=\"https://docs.basex.org/wiki/Options#Full-Text_Indexing\">full-text indexing</a>, <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options, all in lower case</li><li>parsing options will only impact string input (URIs, XML strings) because nodes have already been parsed.</li></ul></li><li>An existing database will be overwritten.</li><li>Database creation takes place after most other update operations (see <a href=\"https://docs.basex.org/wiki/XQuery_Update#Pending_Update_List\">Pending Update List</a>). As a consequence, a newly created database cannot be addressed in the same query.</li></ul>",
     "params": {
      "$inputs": "value of type item()*",
      "$paths": "value of type xs:string*"
     },
     "errors": [
      "db:lock a database is opened by another process.",
      "db:name the specified name is not a <a href=\"https://docs.basex.org/wiki/Commands#Valid_Names\">valid database name</a>.",
      "db:conflict the same database was addressed more than once.",
      "db:args the number of specified inputs and paths differs."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "create",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$inputs as item()*",
     "$paths as xs:string*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Creates a new <code>$database</code> and adds the supplied <code>$inputs</code> to the specified <code>$paths</code>: <ul><li>The inputs may be strings or nodes: <ul><li>nodes may be of any type except for attributes</li><li>strings can be a URI pointing to a file/directory or an XML string (which is detected by the leading <code>&lt;</code> character)</li><li>a path must be specified if the input is not a file or directory reference</li></ul></li><li>The parsing and indexing behavior can be controlled via <code>$options</code>: <ul><li>allowed options are <code><a href=\"https://docs.basex.org/wiki/Options#ADDCACHE\">ADDCACHE</a></code> and the <a href=\"https://docs.basex.org/wiki/Options#Indexing\">indexing</a>, <a href=\"https://docs.basex.org/wiki/Options#Full-Text_Indexing\">full-text indexing</a>, <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options, all in lower case</li><li>parsing options will only impact string input (URIs, XML strings) because nodes have already been parsed.</li></ul></li><li>An existing database will be overwritten.</li><li>Database creation takes place after most other update operations (see <a href=\"https://docs.basex.org/wiki/XQuery_Update#Pending_Update_List\">Pending Update List</a>). As a consequence, a newly created database cannot be addressed in the same query.</li></ul>",
     "params": {
      "$inputs": "value of type item()*",
      "$paths": "value of type xs:string*",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "db:lock a database is opened by another process.",
      "db:name the specified name is not a <a href=\"https://docs.basex.org/wiki/Commands#Valid_Names\">valid database name</a>.",
      "db:conflict the same database was addressed more than once.",
      "db:args the number of specified inputs and paths differs."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "add",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$input as item()"
    ],
    "comments": {
     "description": " Adds the specified <code>$input</code> to a <code>$database</code> with the specified <code>$path</code>: <ul><li>A document with the same path may occur more than once in a database. If you want to enforce single instances, use <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:put\">db:put</a></code> instead.</li><li>See <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:create\">db:create</a></code> for more details on the input and path arguments.</li><li>The parsing behavior can be controlled via <code>$options</code>: <ul><li>allowed options are <code><a href=\"https://docs.basex.org/wiki/Options#ADDCACHE\">ADDCACHE</a></code> and the <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options, all in lower case</li><li>parsing options will only impact string input (URIs, XML strings) because nodes have already been parsed</li></ul></li></ul>",
     "params": {
      "$input": "value of type item()"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "add",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$input as item()",
     "$path as xs:string?"
    ],
    "comments": {
     "description": " Adds the specified <code>$input</code> to a <code>$database</code> with the specified <code>$path</code>: <ul><li>A document with the same path may occur more than once in a database. If you want to enforce single instances, use <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:put\">db:put</a></code> instead.</li><li>See <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:create\">db:create</a></code> for more details on the input and path arguments.</li><li>The parsing behavior can be controlled via <code>$options</code>: <ul><li>allowed options are <code><a href=\"https://docs.basex.org/wiki/Options#ADDCACHE\">ADDCACHE</a></code> and the <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options, all in lower case</li><li>parsing options will only impact string input (URIs, XML strings) because nodes have already been parsed</li></ul></li></ul>",
     "params": {
      "$input": "value of type item()",
      "$path": "value of type xs:string?"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "add",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$input as item()",
     "$path as xs:string?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Adds the specified <code>$input</code> to a <code>$database</code> with the specified <code>$path</code>: <ul><li>A document with the same path may occur more than once in a database. If you want to enforce single instances, use <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:put\">db:put</a></code> instead.</li><li>See <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:create\">db:create</a></code> for more details on the input and path arguments.</li><li>The parsing behavior can be controlled via <code>$options</code>: <ul><li>allowed options are <code><a href=\"https://docs.basex.org/wiki/Options#ADDCACHE\">ADDCACHE</a></code> and the <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options, all in lower case</li><li>parsing options will only impact string input (URIs, XML strings) because nodes have already been parsed</li></ul></li></ul>",
     "params": {
      "$input": "value of type item()",
      "$path": "value of type xs:string?",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "put",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$input as item()",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Replaces a resource, specified by <code>$path</code>, in a <code>$database</code> with the contents of <code>$input</code>, or adds it as a new resource: <ul><li>The parsing behavior can be controlled via <code>$options</code>: <ul><li>Allowed options are <code><a href=\"https://docs.basex.org/wiki/Options#ADDCACHE\">ADDCACHE</a></code> and the <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options, all in lower case.</li><li>Parsing options will only impact string input (URIs, XML strings), because nodes have already been parsed.</li></ul></li><li>See <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:create\">db:create</a></code> for more details on the input argument.</li></ul>",
     "params": {
      "$input": "value of type item()",
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:target the path points to a directory."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "put",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$input as item()",
     "$path as xs:string",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Replaces a resource, specified by <code>$path</code>, in a <code>$database</code> with the contents of <code>$input</code>, or adds it as a new resource: <ul><li>The parsing behavior can be controlled via <code>$options</code>: <ul><li>Allowed options are <code><a href=\"https://docs.basex.org/wiki/Options#ADDCACHE\">ADDCACHE</a></code> and the <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options, all in lower case.</li><li>Parsing options will only impact string input (URIs, XML strings), because nodes have already been parsed.</li></ul></li><li>See <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:create\">db:create</a></code> for more details on the input argument.</li></ul>",
     "params": {
      "$input": "value of type item()",
      "$path": "value of type xs:string",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:target the path points to a directory."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "put-binary",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$input as item()",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Stores a binary resource specified by <code>$input</code> in a <code>$database</code> at the specified <code>$path</code>. Existing resources are overwritten.",
     "params": {
      "$input": "value of type item()",
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:mainmem the database is not <i>persistent</i> (stored on disk)."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "put-value",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$input as item()*",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Stores an <code>$input</code> value in a <code>$database</code> at the specified <code>$path</code>. Existing resources are overwritten. The value can be an arbitrary sequence of atomic items, nodes, maps, and arrays.",
     "params": {
      "$input": "value of type item()*",
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:mainmem the database is not <i>persistent</i> (stored on disk)."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "delete",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Deletes resource(s), specified by <code>$path</code>, from the specified <code>$database</code>.",
     "params": {
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:path the specified path is invalid."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "copy",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$new-name as xs:string"
    ],
    "comments": {
     "description": " Creates a copy of <code>$database</code>, which will be called <code>$new-name</code>.",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:lock a database is opened by another process.",
      "db:name invalid database name.",
      "db:conflict the same database was addressed more than once."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "alter",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$new-name as xs:string"
    ],
    "comments": {
     "description": " Renames a <code>$database</code> to <code>$new-name</code>.",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:lock a database is opened by another process.",
      "db:name invalid database name.",
      "db:conflict the same database was addressed more than once."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "optimize",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string"
    ],
    "comments": {
     "description": " Optimizes the metadata and indexes of a <code>$database</code>.<br/>If <code>$all</code> is <code>true</code>, the complete database will be rebuilt.<br/>The <code>$options</code> argument can be used to control indexing. The syntax is identical to the <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:create\">db:create</a></code> function: Allowed options are all <a href=\"https://docs.basex.org/wiki/Options#Indexing\">indexing</a> and <a href=\"https://docs.basex.org/wiki/Options#Full-Text\">full-text</a> options. <code><a href=\"https://docs.basex.org/wiki/Options#UPDINDEX\">UPDINDEX</a></code> is only supported if <code>$all</code> is <code>true</code>.",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "optimize",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$all as xs:boolean?"
    ],
    "comments": {
     "description": " Optimizes the metadata and indexes of a <code>$database</code>.<br/>If <code>$all</code> is <code>true</code>, the complete database will be rebuilt.<br/>The <code>$options</code> argument can be used to control indexing. The syntax is identical to the <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:create\">db:create</a></code> function: Allowed options are all <a href=\"https://docs.basex.org/wiki/Options#Indexing\">indexing</a> and <a href=\"https://docs.basex.org/wiki/Options#Full-Text\">full-text</a> options. <code><a href=\"https://docs.basex.org/wiki/Options#UPDINDEX\">UPDINDEX</a></code> is only supported if <code>$all</code> is <code>true</code>.",
     "params": {
      "$all": "value of type xs:boolean?"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "optimize",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$all as xs:boolean?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Optimizes the metadata and indexes of a <code>$database</code>.<br/>If <code>$all</code> is <code>true</code>, the complete database will be rebuilt.<br/>The <code>$options</code> argument can be used to control indexing. The syntax is identical to the <code><a href=\"https://docs.basex.org/wiki/Database_Module#db:create\">db:create</a></code> function: Allowed options are all <a href=\"https://docs.basex.org/wiki/Options#Indexing\">indexing</a> and <a href=\"https://docs.basex.org/wiki/Options#Full-Text\">full-text</a> options. <code><a href=\"https://docs.basex.org/wiki/Options#UPDINDEX\">UPDINDEX</a></code> is only supported if <code>$all</code> is <code>true</code>.",
     "params": {
      "$all": "value of type xs:boolean?",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "rename",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$source as xs:string",
     "$target as xs:string"
    ],
    "comments": {
     "description": " Moves all resources(s) of a <code>$database</code>, which are found in the supplied <code>$source</code> path, to the supplied <code>$target</code> path. The paths may point to single resources or directories. No updates will take place if a non-existing source path is supplied.",
     "params": {
      "$source": "value of type xs:string",
      "$target": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:path the specified source or target path, or one of its descendants, is invalid."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "flush",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string"
    ],
    "comments": {
     "description": " Explicitly flushes the buffers of a <code>$database</code>. This command is only useful if <code><a href=\"https://docs.basex.org/wiki/Options#AUTOFLUSH\">AUTOFLUSH</a></code> has been set to <code>false</code>.",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "drop",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string"
    ],
    "comments": {
     "description": " Drops a <code>$database</code> and all connected resources.",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:lock a database is opened by another process.",
      "db:conflict the same database was addressed more than once."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "create-backup",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string"
    ],
    "comments": {
     "description": " Creates a backup of a <code>$database</code>. If no name is supplied, general data will be backed up. The following <code>$options</code> are available: <ul><li>With <code>comment</code>, a comment string can be attached to the backup.</li><li>By setting <code>compress</code> to false, the backup will be created faster, but it will take more space on disk.</li></ul>",
     "params": {},
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:name invalid database name.",
      "db:conflict the same database was addressed more than once."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "create-backup",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Creates a backup of a <code>$database</code>. If no name is supplied, general data will be backed up. The following <code>$options</code> are available: <ul><li>With <code>comment</code>, a comment string can be attached to the backup.</li><li>By setting <code>compress</code> to false, the backup will be created faster, but it will take more space on disk.</li></ul>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened.",
      "db:name invalid database name.",
      "db:conflict the same database was addressed more than once."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "drop-backup",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Drops all backups of the database with the specified <code>$name</code>. If the name ends with a timestamp, only the specified backup file will be deleted. If no name is supplied, backups with general data are addressed.",
     "params": {},
     "errors": [
      "db:backup No backup file found.",
      "db:name invalid database name.",
      "db:conflict the same database was addressed more than once."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "alter-backup",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$name as xs:string",
     "$new-name as xs:string"
    ],
    "comments": {
     "description": " Renames all backups of the database with the specified <code>$name</code> to <code>$new-name</code>. If the name ends with a date, only the specified backup file will be renamed.",
     "params": {},
     "errors": [
      "db:backup No backup file found.",
      "db:name invalid database name.",
      "db:conflict the same database was addressed more than once."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "restore",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Restores the database with the specified <code>$name</code>. The <code>$name</code> may include the timestamp of the backup file. If no name is supplied, general data will be restored. If general data is restored, it will only be available after BaseX has been restarted.",
     "params": {},
     "errors": [
      "db:lock a database is opened by another process.",
      "db:name invalid database name.",
      "db:no-backup No backup found.",
      "db:conflict the same database was addressed more than once."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "backups",
    "uri": "http://basex.org/modules/db",
    "params": [],
    "comments": {
     "description": " Returns an element sequence containing all available database backups with timestamp, file size and comment.<br/>If a <code>$database</code> is specified, the sequence will be restricted to the backups matching this database.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(backup)*"
    }
   },
   {
    "name": "backups",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string"
    ],
    "comments": {
     "description": " Returns an element sequence containing all available database backups with timestamp, file size and comment.<br/>If a <code>$database</code> is specified, the sequence will be restricted to the backups matching this database.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(backup)*"
    }
   },
   {
    "name": "name",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$node as node()"
    ],
    "comments": {
     "description": " Returns the name of the database in which the specified <a href=\"https://docs.basex.org/wiki/Database_Module#Database_Nodes\">database node</a> <code>$node</code> is stored.",
     "params": {},
     "errors": [
      "db:node <code>$nodes</code> contains a node which is not stored in a database."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "path",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$node as node()"
    ],
    "comments": {
     "description": " Returns the path of the database document in which the specified <a href=\"https://docs.basex.org/wiki/Database_Module#Database_Nodes\">database node</a> <code>$node</code> is stored.",
     "params": {},
     "errors": [
      "db:node <code>$nodes</code> contains a node which is not stored in a database."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "exists",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string"
    ],
    "comments": {
     "description": " Checks if a <code>$database</code> exists, or a resource located at <code>$path</code> in this database.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "exists",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Checks if a <code>$database</code> exists, or a resource located at <code>$path</code> in this database.",
     "params": {
      "$path": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "type",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns the type (<code>xml</code>, <code>binary</code>, <code>value</code>) of a resource in a <code>$database</code> at the specified <code>$path</code>.",
     "params": {
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "content-type",
    "uri": "http://basex.org/modules/db",
    "params": [
     "$database as xs:string",
     "$path as xs:string"
    ],
    "comments": {
     "description": " Retrieves the content-type of a resource in a <code>$database</code> at the specified <code>$path</code>.<br/>The file extension is used to recognize the content-type of a resource stored in the database. <code>application/xml</code> will be returned for any XML document stored in the database, regardless of its file name extension.",
     "params": {
      "$path": "value of type xs:string"
     },
     "errors": [
      "db:open the addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for processing databases from within XQuery. Existing databases can be opened and listed, its contents can be directly accessed, documents can be added to and removed, etc."
 },
 "http://basex.org/modules/fetch": {
  "moduleNamespace": "http://basex.org/modules/fetch",
  "prefixes": [
   "fetch"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "binary",
    "uri": "http://basex.org/modules/fetch",
    "params": [
     "$href as xs:string"
    ],
    "comments": {
     "description": " Fetches the resource referred to by the given <code>href</code> string and returns it as <a href=\"https://docs.basex.org/wiki/Lazy_Module\">lazy</a> <code>xs:base64Binary</code> item.",
     "params": {},
     "errors": [
      "fetch:open the URI could not be resolved, or the resource could not be retrieved."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "text",
    "uri": "http://basex.org/modules/fetch",
    "params": [
     "$href as xs:string"
    ],
    "comments": {
     "description": " Fetches the resource referred to by the given <code>href</code> string and returns it as <a href=\"https://docs.basex.org/wiki/Lazy_Module\">lazy</a> <code>xs:string</code> item: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid characters will be rejected. If <code>$fallback</code> is set to true, these characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul>",
     "params": {},
     "errors": [
      "fetch:open the URI could not be resolved, or the resource could not be retrieved.",
      "fetch:encoding the specified encoding is not supported, or unknown."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "text",
    "uri": "http://basex.org/modules/fetch",
    "params": [
     "$href as xs:string",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Fetches the resource referred to by the given <code>href</code> string and returns it as <a href=\"https://docs.basex.org/wiki/Lazy_Module\">lazy</a> <code>xs:string</code> item: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid characters will be rejected. If <code>$fallback</code> is set to true, these characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul>",
     "params": {
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "fetch:open the URI could not be resolved, or the resource could not be retrieved.",
      "fetch:encoding the specified encoding is not supported, or unknown."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "text",
    "uri": "http://basex.org/modules/fetch",
    "params": [
     "$href as xs:string",
     "$encoding as xs:string",
     "$fallback as xs:boolean?"
    ],
    "comments": {
     "description": " Fetches the resource referred to by the given <code>href</code> string and returns it as <a href=\"https://docs.basex.org/wiki/Lazy_Module\">lazy</a> <code>xs:string</code> item: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid characters will be rejected. If <code>$fallback</code> is set to true, these characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul>",
     "params": {
      "$encoding": "value of type xs:string",
      "$fallback": "value of type xs:boolean?"
     },
     "errors": [
      "fetch:open the URI could not be resolved, or the resource could not be retrieved.",
      "fetch:encoding the specified encoding is not supported, or unknown."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "doc",
    "uri": "http://basex.org/modules/fetch",
    "params": [
     "$href as xs:string"
    ],
    "comments": {
     "description": " Fetches the resource referred to by the given <code>href</code> string and returns it as a document node.<br/>The <code>$options</code> argument can be used to change the parsing behavior. Allowed options are all <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options in lower case.<br/>The function differs from <code>fn:doc</code> in various aspects: <ul><li>It is <i>non-deterministic</i>, i.e., a new document node will be created by each call of this function.</li><li>A document created by this function will be garbage-collected as soon as it is not referenced anymore.</li><li>URIs will not be resolved against existing databases. As a result, it will not trigger any locks (see <a href=\"https://docs.basex.org/wiki/Transaction_Management#Limitations\">limitations of database locking</a> for more details).</li></ul>",
     "params": {},
     "errors": [
      "fetch:open the URI could not be resolved, or the resource could not be retrieved."
     ],
     "others": [],
     "return": "value of type document-node()"
    }
   },
   {
    "name": "doc",
    "uri": "http://basex.org/modules/fetch",
    "params": [
     "$href as xs:string",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Fetches the resource referred to by the given <code>href</code> string and returns it as a document node.<br/>The <code>$options</code> argument can be used to change the parsing behavior. Allowed options are all <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options in lower case.<br/>The function differs from <code>fn:doc</code> in various aspects: <ul><li>It is <i>non-deterministic</i>, i.e., a new document node will be created by each call of this function.</li><li>A document created by this function will be garbage-collected as soon as it is not referenced anymore.</li><li>URIs will not be resolved against existing databases. As a result, it will not trigger any locks (see <a href=\"https://docs.basex.org/wiki/Transaction_Management#Limitations\">limitations of database locking</a> for more details).</li></ul>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "fetch:open the URI could not be resolved, or the resource could not be retrieved."
     ],
     "others": [],
     "return": "value of type document-node()"
    }
   },
   {
    "name": "binary-doc",
    "uri": "http://basex.org/modules/fetch",
    "params": [
     "$input as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Converts the specified <code>$input</code> (<code>xs:base64Binary</code>, <code>xs:hexBinary</code>) to XML and returns it as a document node.<br/>In contrast to <code>fn:parse-xml</code>, which expects a string, the input can be arbitrarily encoded. The encoding will be derived from the XML declaration or (in case of UTF-16 or UTF-32) from the first bytes of the input.<br/>The <code>$options</code> argument can be used to change the parsing behavior. Allowed options are all <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options in lower case.",
     "params": {},
     "errors": [
      "fetch:open the input could not be parsed."
     ],
     "others": [],
     "return": "value of type document-node()"
    }
   },
   {
    "name": "binary-doc",
    "uri": "http://basex.org/modules/fetch",
    "params": [
     "$input as xs:anyAtomicType",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Converts the specified <code>$input</code> (<code>xs:base64Binary</code>, <code>xs:hexBinary</code>) to XML and returns it as a document node.<br/>In contrast to <code>fn:parse-xml</code>, which expects a string, the input can be arbitrarily encoded. The encoding will be derived from the XML declaration or (in case of UTF-16 or UTF-32) from the first bytes of the input.<br/>The <code>$options</code> argument can be used to change the parsing behavior. Allowed options are all <a href=\"https://docs.basex.org/wiki/Options#Parsing\">parsing</a> and <a href=\"https://docs.basex.org/wiki/Options#XML_Parsing\">XML parsing</a> options in lower case.",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "fetch:open the input could not be parsed."
     ],
     "others": [],
     "return": "value of type document-node()"
    }
   },
   {
    "name": "content-type",
    "uri": "http://basex.org/modules/fetch",
    "params": [
     "$href as xs:string"
    ],
    "comments": {
     "description": " Returns the content-type (also called mime-type) of the resource specified by <code>href</code> string: <ul><li>If a remote resource is addressed, the request header will be evaluated.</li><li>If the addressed resource is locally stored, the content-type will be guessed based on the file extension.</li></ul>",
     "params": {},
     "errors": [
      "fetch:open the URI could not be resolved, or the resource could not be retrieved."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> provides simple functions to fetch the content of resources identified by URIs. Resources can be stored locally or remotely and e.g. use the <code>file://</code> or <code>http://</code> scheme. If more control over HTTP requests is required, the <a href=\"https://docs.basex.org/wiki/HTTP_Client_Module\">HTTP Client Module</a> can be used. With the <a href=\"https://docs.basex.org/wiki/HTML_Module\">HTML Module</a>, retrieved HTML documents can be converted to XML."
 },
 "http://expath.org/ns/file": {
  "moduleNamespace": "http://expath.org/ns/file",
  "prefixes": [
   "file"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "list",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$dir as xs:string"
    ],
    "comments": {
     "description": " Lists all files and directories found in the specified <code>$dir</code>. The returned paths are relative to the provided path.<br/>If <code>$recursive</code> is set to true, subdirectories will be traversed.<br/>The optional parameter <code>$pattern</code> defines a file name pattern in the <a href=\"https://docs.basex.org/wiki/Commands#Glob_Syntax\">Glob Syntax</a>. If present, only those files and directories are returned that correspond to the pattern. Several patterns can be separated with a comma (<code>,</code>).<br/>",
     "params": {},
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:no-dir the specified path does not point to a directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "list",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$dir as xs:string",
     "$recursive as xs:boolean?"
    ],
    "comments": {
     "description": " Lists all files and directories found in the specified <code>$dir</code>. The returned paths are relative to the provided path.<br/>If <code>$recursive</code> is set to true, subdirectories will be traversed.<br/>The optional parameter <code>$pattern</code> defines a file name pattern in the <a href=\"https://docs.basex.org/wiki/Commands#Glob_Syntax\">Glob Syntax</a>. If present, only those files and directories are returned that correspond to the pattern. Several patterns can be separated with a comma (<code>,</code>).<br/>",
     "params": {
      "$recursive": "value of type xs:boolean?"
     },
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:no-dir the specified path does not point to a directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "list",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$dir as xs:string",
     "$recursive as xs:boolean?",
     "$pattern as xs:string"
    ],
    "comments": {
     "description": " Lists all files and directories found in the specified <code>$dir</code>. The returned paths are relative to the provided path.<br/>If <code>$recursive</code> is set to true, subdirectories will be traversed.<br/>The optional parameter <code>$pattern</code> defines a file name pattern in the <a href=\"https://docs.basex.org/wiki/Commands#Glob_Syntax\">Glob Syntax</a>. If present, only those files and directories are returned that correspond to the pattern. Several patterns can be separated with a comma (<code>,</code>).<br/>",
     "params": {
      "$recursive": "value of type xs:boolean?",
      "$pattern": "value of type xs:string"
     },
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:no-dir the specified path does not point to a directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "children",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$dir as xs:string"
    ],
    "comments": {
     "description": " Returns the full paths to all files and directories found in the specified <code>$dir</code>.<br/>The inverse function is <code><a href=\"https://docs.basex.org/wiki/File_Module#file:parent\">file:parent</a></code>. The returned paths start with the specified directory. The related function <code><a href=\"https://docs.basex.org/wiki/File_Module#file:list\">file:list</a></code> returns relative file paths.",
     "params": {},
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:no-dir the specified path does not point to a directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "descendants",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$dir as xs:string"
    ],
    "comments": {
     "description": " Returns the full paths to all files and directories found in the specified <code>$dir</code> and its subdirectories.<br/>. The returned paths start with the specified directory. The related function <code><a href=\"https://docs.basex.org/wiki/File_Module#file:list\">file:list</a></code> creates relative file paths.",
     "params": {},
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:no-dir the specified path does not point to a directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "read-binary",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Reads the binary content of the file specified by <code>$path</code> and returns it as <a href=\"https://docs.basex.org/wiki/Lazy_Module\">lazy</a> <code>xs:base64Binary</code> item.<br/>The optional parameters <code>$offset</code> and <code>$length</code> can be used to read chunks of a file.",
     "params": {},
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:is-dir the specified path is a directory.",
      "file:out-of-range the offset or length is negative, or the chosen values would exceed the file bounds.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "read-binary",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$offset as xs:integer"
    ],
    "comments": {
     "description": " Reads the binary content of the file specified by <code>$path</code> and returns it as <a href=\"https://docs.basex.org/wiki/Lazy_Module\">lazy</a> <code>xs:base64Binary</code> item.<br/>The optional parameters <code>$offset</code> and <code>$length</code> can be used to read chunks of a file.",
     "params": {
      "$offset": "value of type xs:integer"
     },
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:is-dir the specified path is a directory.",
      "file:out-of-range the offset or length is negative, or the chosen values would exceed the file bounds.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "read-binary",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$offset as xs:integer",
     "$length as xs:integer"
    ],
    "comments": {
     "description": " Reads the binary content of the file specified by <code>$path</code> and returns it as <a href=\"https://docs.basex.org/wiki/Lazy_Module\">lazy</a> <code>xs:base64Binary</code> item.<br/>The optional parameters <code>$offset</code> and <code>$length</code> can be used to read chunks of a file.",
     "params": {
      "$offset": "value of type xs:integer",
      "$length": "value of type xs:integer"
     },
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:is-dir the specified path is a directory.",
      "file:out-of-range the offset or length is negative, or the chosen values would exceed the file bounds.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "read-text",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Reads the textual contents of the file specified by <code>$path</code> and returns it as <a href=\"https://docs.basex.org/wiki/Lazy_Module\">lazy</a> <code>xs:string</code> item: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid XML characters will be rejected. If <code>$fallback</code> is enabled, the characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul>",
     "params": {},
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "read-text",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Reads the textual contents of the file specified by <code>$path</code> and returns it as <a href=\"https://docs.basex.org/wiki/Lazy_Module\">lazy</a> <code>xs:string</code> item: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid XML characters will be rejected. If <code>$fallback</code> is enabled, the characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul>",
     "params": {
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "read-text",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$encoding as xs:string",
     "$fallback as xs:boolean?"
    ],
    "comments": {
     "description": " Reads the textual contents of the file specified by <code>$path</code> and returns it as <a href=\"https://docs.basex.org/wiki/Lazy_Module\">lazy</a> <code>xs:string</code> item: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid XML characters will be rejected. If <code>$fallback</code> is enabled, the characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul>",
     "params": {
      "$encoding": "value of type xs:string",
      "$fallback": "value of type xs:boolean?"
     },
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "read-text-lines",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Reads the textual contents of the file specified by <code>$path</code> and returns it as a sequence of <code>xs:string</code> items: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid characters will be rejected. If <code>$fallback</code> is set to true, these characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul> <p>The lines to be read can be restricted with the optional parameters <code>$offset</code> and <code>$length</code>. </p>",
     "params": {},
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "read-text-lines",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Reads the textual contents of the file specified by <code>$path</code> and returns it as a sequence of <code>xs:string</code> items: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid characters will be rejected. If <code>$fallback</code> is set to true, these characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul> <p>The lines to be read can be restricted with the optional parameters <code>$offset</code> and <code>$length</code>. </p>",
     "params": {
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "read-text-lines",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$encoding as xs:string",
     "$fallback as xs:boolean?"
    ],
    "comments": {
     "description": " Reads the textual contents of the file specified by <code>$path</code> and returns it as a sequence of <code>xs:string</code> items: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid characters will be rejected. If <code>$fallback</code> is set to true, these characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul> <p>The lines to be read can be restricted with the optional parameters <code>$offset</code> and <code>$length</code>. </p>",
     "params": {
      "$encoding": "value of type xs:string",
      "$fallback": "value of type xs:boolean?"
     },
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "read-text-lines",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$encoding as xs:string",
     "$fallback as xs:boolean?",
     "$offset as xs:integer?"
    ],
    "comments": {
     "description": " Reads the textual contents of the file specified by <code>$path</code> and returns it as a sequence of <code>xs:string</code> items: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid characters will be rejected. If <code>$fallback</code> is set to true, these characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul> <p>The lines to be read can be restricted with the optional parameters <code>$offset</code> and <code>$length</code>. </p>",
     "params": {
      "$encoding": "value of type xs:string",
      "$fallback": "value of type xs:boolean?",
      "$offset": "value of type xs:integer?"
     },
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "read-text-lines",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$encoding as xs:string",
     "$fallback as xs:boolean?",
     "$offset as xs:integer?",
     "$length as xs:integer?"
    ],
    "comments": {
     "description": " Reads the textual contents of the file specified by <code>$path</code> and returns it as a sequence of <code>xs:string</code> items: <ul><li>The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</li><li>By default, invalid characters will be rejected. If <code>$fallback</code> is set to true, these characters will be replaced with the Unicode replacement character <code>FFFD</code> (�).</li></ul> <p>The lines to be read can be restricted with the optional parameters <code>$offset</code> and <code>$length</code>. </p>",
     "params": {
      "$encoding": "value of type xs:string",
      "$fallback": "value of type xs:boolean?",
      "$offset": "value of type xs:integer?",
      "$length": "value of type xs:integer?"
     },
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "create-dir",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$dir as xs:string"
    ],
    "comments": {
     "description": " Creates the directory specified by <code>$dir</code> if it does not already exist. Non-existing parent directories will be created as well.<br/>",
     "params": {},
     "errors": [
      "file:exists the specified target exists, but is no directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "create-temp-dir",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$prefix as xs:string",
     "$suffix as xs:string"
    ],
    "comments": {
     "description": " Creates a new temporary directory that did not exist before this function was called, and returns its full file path. The directory name begins and ends with the specified <code>$prefix</code> and <code>$suffix</code>. If no directory is specified via <code>$dir</code>, the directory will be placed in the system’s default temporary directory. The operation will create all non-existing parent directories.",
     "params": {
      "$suffix": "value of type xs:string"
     },
     "errors": [
      "file:no-dir the specified directory points to a file.",
      "file:io-error the directory could not be created."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "create-temp-dir",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$prefix as xs:string",
     "$suffix as xs:string",
     "$dir as xs:string"
    ],
    "comments": {
     "description": " Creates a new temporary directory that did not exist before this function was called, and returns its full file path. The directory name begins and ends with the specified <code>$prefix</code> and <code>$suffix</code>. If no directory is specified via <code>$dir</code>, the directory will be placed in the system’s default temporary directory. The operation will create all non-existing parent directories.",
     "params": {
      "$suffix": "value of type xs:string",
      "$dir": "value of type xs:string"
     },
     "errors": [
      "file:no-dir the specified directory points to a file.",
      "file:io-error the directory could not be created."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "create-temp-file",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$prefix as xs:string",
     "$suffix as xs:string"
    ],
    "comments": {
     "description": " Creates a new temporary file that did not exist before this function was called, and returns its full file path. The file name begins and ends with the specified <code>$prefix</code> and <code>$suffix</code>. If no directory is specified via <code>$dir</code>, the file will be placed in the system’s default temporary directory. The operation will create all non-existing parent directories.",
     "params": {
      "$suffix": "value of type xs:string"
     },
     "errors": [
      "file:no-dir the specified directory points to a file.",
      "file:io-error the directory could not be created."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "create-temp-file",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$prefix as xs:string",
     "$suffix as xs:string",
     "$dir as xs:string"
    ],
    "comments": {
     "description": " Creates a new temporary file that did not exist before this function was called, and returns its full file path. The file name begins and ends with the specified <code>$prefix</code> and <code>$suffix</code>. If no directory is specified via <code>$dir</code>, the file will be placed in the system’s default temporary directory. The operation will create all non-existing parent directories.",
     "params": {
      "$suffix": "value of type xs:string",
      "$dir": "value of type xs:string"
     },
     "errors": [
      "file:no-dir the specified directory points to a file.",
      "file:io-error the directory could not be created."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "delete",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Recursively deletes a file or directory specified by <code>$path</code>.<br/>The optional parameter <code>$recursive</code> specifies whether subdirectories will be deleted, too.<br/>",
     "params": {},
     "errors": [
      "file:not-found the specified path does not exist.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "delete",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$recursive as xs:boolean?"
    ],
    "comments": {
     "description": " Recursively deletes a file or directory specified by <code>$path</code>.<br/>The optional parameter <code>$recursive</code> specifies whether subdirectories will be deleted, too.<br/>",
     "params": {
      "$recursive": "value of type xs:boolean?"
     },
     "errors": [
      "file:not-found the specified path does not exist.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$input as item()*"
    ],
    "comments": {
     "description": " Writes serialized <a href=\"https://docs.basex.org/index.php?title=Template:$input&amp;action=edit&amp;redlink=1\">Template:$input</a> to the specified file. If the file already exists, it will be overwritten.<br/>The <code>$options</code> argument contains <a href=\"https://docs.basex.org/wiki/Serialization\">serialization parameters</a>. As with <a href=\"https://www.w3.org/TR/xpath-functions-31/#func-serialize\">fn:serialize()</a>, the parameters can be specified<br/> <ul><li>either as children of an <code>&lt;output:serialization-parameters/&gt;</code> element:</li></ul> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nt\">&lt;output:serialization-parameters&gt;</span> <span class=\"nt\">&lt;output:method</span> <span class=\"na\">value=</span><span class=\"s\">'xml'</span><span class=\"nt\">/&gt;</span> <span class=\"nt\">&lt;output:cdata-section-elements</span> <span class=\"na\">value=</span><span class=\"s\">\"div\"</span><span class=\"nt\">/&gt;</span> ... <span class=\"nt\">&lt;/output:serialization-parameters&gt;</span> </pre></div> <ul><li>or as map, which contains all key/value pairs:</li></ul> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"k\">map</span> <span class=\"p\">{</span> <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"xml\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cdata-section-elements\"</span><span class=\"p\">:</span> <span class=\"s2\">\"div\"</span><span class=\"p\">,</span> <span class=\"p\">..</span><span class=\"o\">.</span> <span class=\"p\">}</span> </pre></div>",
     "params": {
      "$input": "value of type item()*"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$input as item()*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Writes serialized <a href=\"https://docs.basex.org/index.php?title=Template:$input&amp;action=edit&amp;redlink=1\">Template:$input</a> to the specified file. If the file already exists, it will be overwritten.<br/>The <code>$options</code> argument contains <a href=\"https://docs.basex.org/wiki/Serialization\">serialization parameters</a>. As with <a href=\"https://www.w3.org/TR/xpath-functions-31/#func-serialize\">fn:serialize()</a>, the parameters can be specified<br/> <ul><li>either as children of an <code>&lt;output:serialization-parameters/&gt;</code> element:</li></ul> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nt\">&lt;output:serialization-parameters&gt;</span> <span class=\"nt\">&lt;output:method</span> <span class=\"na\">value=</span><span class=\"s\">'xml'</span><span class=\"nt\">/&gt;</span> <span class=\"nt\">&lt;output:cdata-section-elements</span> <span class=\"na\">value=</span><span class=\"s\">\"div\"</span><span class=\"nt\">/&gt;</span> ... <span class=\"nt\">&lt;/output:serialization-parameters&gt;</span> </pre></div> <ul><li>or as map, which contains all key/value pairs:</li></ul> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"k\">map</span> <span class=\"p\">{</span> <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"xml\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cdata-section-elements\"</span><span class=\"p\">:</span> <span class=\"s2\">\"div\"</span><span class=\"p\">,</span> <span class=\"p\">..</span><span class=\"o\">.</span> <span class=\"p\">}</span> </pre></div>",
     "params": {
      "$input": "value of type item()*",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write-binary",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$value as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Writes a binary item (xs:base64Binary, xs:hexBinary) to the specified file. If the file already exists, it will be overwritten.<br/>If <code>$offset</code> is specified, data will be written at this file position. An existing file may be resized by that operation.",
     "params": {
      "$value": "value of type xs:anyAtomicType"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:out-of-range the offset is negative, or it exceeds the current file size.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write-binary",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$value as xs:anyAtomicType",
     "$offset as xs:integer"
    ],
    "comments": {
     "description": " Writes a binary item (xs:base64Binary, xs:hexBinary) to the specified file. If the file already exists, it will be overwritten.<br/>If <code>$offset</code> is specified, data will be written at this file position. An existing file may be resized by that operation.",
     "params": {
      "$value": "value of type xs:anyAtomicType",
      "$offset": "value of type xs:integer"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:out-of-range the offset is negative, or it exceeds the current file size.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write-text",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$value as xs:string"
    ],
    "comments": {
     "description": " Writes a string to the specified file. If the file already exists, it will be overwritten.<br/>The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).<br/>",
     "params": {
      "$value": "value of type xs:string"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write-text",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$value as xs:string",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Writes a string to the specified file. If the file already exists, it will be overwritten.<br/>The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).<br/>",
     "params": {
      "$value": "value of type xs:string",
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write-text-lines",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$values as xs:string*"
    ],
    "comments": {
     "description": " Writes a sequence of strings to the specified file, each followed by the system specific newline character. If the file already exists, it will be overwritten.<br/>The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).<br/>",
     "params": {
      "$values": "value of type xs:string*"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write-text-lines",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$values as xs:string*",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Writes a sequence of strings to the specified file, each followed by the system specific newline character. If the file already exists, it will be overwritten.<br/>The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).<br/>",
     "params": {
      "$values": "value of type xs:string*",
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "append",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$input as item()*"
    ],
    "comments": {
     "description": " Appends a serialized sequence of <code>$input</code> to the specified file, with the supplied <code>$options</code> as serialization parameters. If the file does not exist, a new file is created.<br/>",
     "params": {
      "$input": "value of type item()*"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "append",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$input as item()*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Appends a serialized sequence of <code>$input</code> to the specified file, with the supplied <code>$options</code> as serialization parameters. If the file does not exist, a new file is created.<br/>",
     "params": {
      "$input": "value of type item()*",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "append-binary",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$value as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Appends a binary item (xs:base64Binary, xs:hexBinary) to the specified file. If the file does not exists, a new one is created.<br/>",
     "params": {
      "$value": "value of type xs:anyAtomicType"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "append-text",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$value as xs:string"
    ],
    "comments": {
     "description": " Appends a string to a file specified by <code>$path</code>. If the specified file does not exists, a new file is created.<br/>The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).<br/>",
     "params": {
      "$value": "value of type xs:string"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "append-text",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$value as xs:string",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Appends a string to a file specified by <code>$path</code>. If the specified file does not exists, a new file is created.<br/>The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).<br/>",
     "params": {
      "$value": "value of type xs:string",
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "append-text-lines",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$values as xs:string*"
    ],
    "comments": {
     "description": " Appends a sequence of strings to the specified file, each followed by the system specific newline character. If the specified file does not exists, a new file is created.<br/>The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).<br/>",
     "params": {
      "$values": "value of type xs:string*"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "append-text-lines",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$values as xs:string*",
     "$encoding as xs:string"
    ],
    "comments": {
     "description": " Appends a sequence of strings to the specified file, each followed by the system specific newline character. If the specified file does not exists, a new file is created.<br/>The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).<br/>",
     "params": {
      "$values": "value of type xs:string*",
      "$encoding": "value of type xs:string"
     },
     "errors": [
      "file:no-dir the parent of specified path is no directory.",
      "file:is-dir the specified path is a directory.",
      "file:unknown-encoding the specified encoding is not supported, or unknown.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "copy",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$source as xs:string",
     "$target as xs:string"
    ],
    "comments": {
     "description": " Copies a file or directory specified by <code>$source</code> to the file or directory specified by <code>$target</code>. If the target file already exists, it will be overwritten. No operation will be performed if the source and target path are equal.<br/>",
     "params": {
      "$target": "value of type xs:string"
     },
     "errors": [
      "file:not-found the specified source does not exist.",
      "file:exists the specified source is a directory and the target is a file.",
      "file:no-dir the parent of the specified target is no directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "move",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$source as xs:string",
     "$target as xs:string"
    ],
    "comments": {
     "description": " Moves or renames the file or directory specified by <code>$source</code> to the path specified by <code>$target</code>. If the target file already exists, it will be overwritten. No operation will be performed if the source and target path are equal.<br/>",
     "params": {
      "$target": "value of type xs:string"
     },
     "errors": [
      "file:not-found the specified source does not exist.",
      "file:exists the specified source is a directory and the target is a file.",
      "file:no-dir the parent of the specified target is no directory.",
      "file:io-error the operation fails for some other reason."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "exists",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns an <code>xs:boolean</code> indicating whether a file or directory specified by <code>$path</code> exists in the file system.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "is-dir",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns an <code>xs:boolean</code> indicating whether the argument <code>$path</code> points to an existing directory.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "is-absolute",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns an <code>xs:boolean</code> indicating whether the argument <code>$path</code> is absolute.<br/>The behavior of this function depends on the operating system: On Windows, an absolute path starts with the drive letter and a colon, whereas on Linux it starts with a slash.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "is-file",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns an <code>xs:boolean</code> indicating whether the argument <code>$path</code> points to an existing file.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "last-modified",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Retrieves the timestamp of the last modification of the file or directory specified by <code>$path</code>.<br/>",
     "params": {},
     "errors": [
      "file:not-found the specified path does not exist."
     ],
     "others": [],
     "return": "value of type xs:dateTime"
    }
   },
   {
    "name": "size",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns the size, in bytes, of the file specified by <code>$path</code>, or <code>0</code> for directories.<br/>",
     "params": {},
     "errors": [
      "file:not-found the specified file does not exist."
     ],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "name",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns the name of a file or directory specified by <code>$path</code>. An empty string is returned if the path points to the root directory.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "parent",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns the absolute path to the parent directory of a file or directory specified by <code>$path</code>. An empty sequence is returned if the path points to a root directory.<br/>The inverse function is <code><a href=\"https://docs.basex.org/wiki/File_Module#file:children\">file:children</a></code>.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string?"
    }
   },
   {
    "name": "path-to-native",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Transforms the <code>$path</code> argument to its native representation on the operating system.<br/>",
     "params": {},
     "errors": [
      "file:not-found the specified file does not exist.",
      "file:io-error the specified path cannot be transformed to its native representation."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "resolve-path",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Transforms the <code>$path</code> argument to an absolute operating system path.<br/>If the path is relative, and if an absolute <code>$base</code> path is specified, it will be resolved against this path.",
     "params": {},
     "errors": [
      "file:is-relative the specified base path is relative."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "resolve-path",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string",
     "$base as xs:string"
    ],
    "comments": {
     "description": " Transforms the <code>$path</code> argument to an absolute operating system path.<br/>If the path is relative, and if an absolute <code>$base</code> path is specified, it will be resolved against this path.",
     "params": {
      "$base": "value of type xs:string"
     },
     "errors": [
      "file:is-relative the specified base path is relative."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "path-to-uri",
    "uri": "http://expath.org/ns/file",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Transforms the path specified by <code>$path</code> into a URI with the <code>file://</code> scheme.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "dir-separator",
    "uri": "http://expath.org/ns/file",
    "params": [],
    "comments": {
     "description": " Returns the directory separator used by the operating system, such as <code>/</code> or <code>\\</code>.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "path-separator",
    "uri": "http://expath.org/ns/file",
    "params": [],
    "comments": {
     "description": " Returns the path separator used by the operating system, such as <code>;</code> or <code>:</code>.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "line-separator",
    "uri": "http://expath.org/ns/file",
    "params": [],
    "comments": {
     "description": " Returns the line separator used by the operating system, such as <code>&amp;#10;</code>, <code>&amp;#13;&amp;#10;</code> or <code>&amp;#13;</code>.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "temp-dir",
    "uri": "http://expath.org/ns/file",
    "params": [],
    "comments": {
     "description": " Returns the system’s default temporary-file directory.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "current-dir",
    "uri": "http://expath.org/ns/file",
    "params": [],
    "comments": {
     "description": " Returns the <i>current working directory</i>, i.e., the directory from which the query processor was started. This function returns the same result as the function call <code>file:resolve-path(\"\")</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "base-dir",
    "uri": "http://expath.org/ns/file",
    "params": [],
    "comments": {
     "description": " Returns the parent directory of the static base URI.<br/>If the static base URI is undefined or does not point to a local resource, it returns the empty sequence. Otherwise, it returns the same result as <code>file:parent(static-base-uri())</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string?"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions related to file system operations, such as listing, reading, or writing files."
 },
 "http://basex.org/modules/ft": {
  "moduleNamespace": "http://basex.org/modules/ft",
  "prefixes": [
   "ft"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "search",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$db as xs:string",
     "$terms as item()*"
    ],
    "comments": {
     "description": " Returns all text nodes from the full-text index of the database <code>$db</code> that contain the specified <code>$terms</code>.<br/>The options used for tokenizing the input and building the full-text will also be applied to the search terms. As an example, if the index terms have been stemmed, the search string will be stemmed as well. <p>The <code>$options</code> argument can be used to control full-text processing. The following options are supported (the introduction on <a href=\"https://docs.basex.org/wiki/Full-Text\">Full-Text</a> processing gives you equivalent expressions in the XQuery Full-Text notation): </p> <ul><li><code>mode</code>: determine the mode how tokens are searched. Allowed values are <code>any</code>, <code>any word</code>, <code>all</code>, <code>all words</code>, and <code>phrase</code>. <code>any</code> is the default search mode.</li><li><code>wildcards</code>: turn wildcard querying on or off. Allowed values are <code>true</code> and <code>false</code>. By default, wildcard querying is turned off.</li><li><code>fuzzy</code>: turn fuzzy querying on or off. Allowed values are <code>true</code> and <code>false</code>. By default, fuzzy querying is turned off.</li><li><code>errors</code>: control the maximum number of tolerated errors for fuzzy querying. By default, <code>0</code> is assigned (see <a href=\"https://docs.basex.org/wiki/Full-Text#Fuzzy_Querying\">Fuzzy Querying</a> for more details).</li><li><code>ordered</code>: indicate if all tokens must occur in the order in which they are specified. Allowed values are <code>true</code> and <code>false</code>. The default is <code>false</code>.</li><li><code>content</code>: specify that the matched tokens need to occur at the beginning or end of a searched string, or need to cover the entire string. Allowed values are <code>start</code>, <code>end</code>, and <code>entire</code>. By default, the option is turned off.</li><li><code>scope</code>: define the scope in which tokens must be located. The option has following sub options: <ul><li><code>same</code>: can be set to <code>true</code> or <code>false</code>. It specifies if tokens need to occur in the same or different units.</li><li><code>unit</code>: can be <code>sentence</code> or <code>paragraph</code>. It specifies the unit for finding tokens.</li></ul></li><li><code>window</code>: set up a window in which all tokens must be located. By default, the option is turned off. It has following sub options: <ul><li><code>size</code>: specify the size of the window in terms of <i>units</i>.</li><li><code>unit</code>: can be <code>sentences</code>, <code>sentences</code> or <code>paragraphs</code>. The default is <code>words</code>.</li></ul></li><li><code>distance</code>: specify the distance in which tokens must occur. By default, the option is turned off. It has following sub options: <ul><li><code>min</code>: specify the minimum distance in terms of <i>units</i>. The default is <code>0</code>.</li><li><code>max</code>: specify the maximum distance in terms of <i>units</i>. The default is <code>∞</code>.</li><li><code>unit</code>: can be <code>words</code>, <code>sentences</code> or <code>paragraphs</code>. The default is <code>words</code>.</li></ul></li></ul>",
     "params": {
      "$terms": "value of type item()*"
     },
     "errors": [
      "db:get The addressed database does not exist or could not be opened.",
      "db:no-index the index is not available.",
      "ft:options the fuzzy and wildcard option cannot be both specified."
     ],
     "others": [],
     "return": "value of type text()*"
    }
   },
   {
    "name": "search",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$db as xs:string",
     "$terms as item()*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Returns all text nodes from the full-text index of the database <code>$db</code> that contain the specified <code>$terms</code>.<br/>The options used for tokenizing the input and building the full-text will also be applied to the search terms. As an example, if the index terms have been stemmed, the search string will be stemmed as well. <p>The <code>$options</code> argument can be used to control full-text processing. The following options are supported (the introduction on <a href=\"https://docs.basex.org/wiki/Full-Text\">Full-Text</a> processing gives you equivalent expressions in the XQuery Full-Text notation): </p> <ul><li><code>mode</code>: determine the mode how tokens are searched. Allowed values are <code>any</code>, <code>any word</code>, <code>all</code>, <code>all words</code>, and <code>phrase</code>. <code>any</code> is the default search mode.</li><li><code>wildcards</code>: turn wildcard querying on or off. Allowed values are <code>true</code> and <code>false</code>. By default, wildcard querying is turned off.</li><li><code>fuzzy</code>: turn fuzzy querying on or off. Allowed values are <code>true</code> and <code>false</code>. By default, fuzzy querying is turned off.</li><li><code>errors</code>: control the maximum number of tolerated errors for fuzzy querying. By default, <code>0</code> is assigned (see <a href=\"https://docs.basex.org/wiki/Full-Text#Fuzzy_Querying\">Fuzzy Querying</a> for more details).</li><li><code>ordered</code>: indicate if all tokens must occur in the order in which they are specified. Allowed values are <code>true</code> and <code>false</code>. The default is <code>false</code>.</li><li><code>content</code>: specify that the matched tokens need to occur at the beginning or end of a searched string, or need to cover the entire string. Allowed values are <code>start</code>, <code>end</code>, and <code>entire</code>. By default, the option is turned off.</li><li><code>scope</code>: define the scope in which tokens must be located. The option has following sub options: <ul><li><code>same</code>: can be set to <code>true</code> or <code>false</code>. It specifies if tokens need to occur in the same or different units.</li><li><code>unit</code>: can be <code>sentence</code> or <code>paragraph</code>. It specifies the unit for finding tokens.</li></ul></li><li><code>window</code>: set up a window in which all tokens must be located. By default, the option is turned off. It has following sub options: <ul><li><code>size</code>: specify the size of the window in terms of <i>units</i>.</li><li><code>unit</code>: can be <code>sentences</code>, <code>sentences</code> or <code>paragraphs</code>. The default is <code>words</code>.</li></ul></li><li><code>distance</code>: specify the distance in which tokens must occur. By default, the option is turned off. It has following sub options: <ul><li><code>min</code>: specify the minimum distance in terms of <i>units</i>. The default is <code>0</code>.</li><li><code>max</code>: specify the maximum distance in terms of <i>units</i>. The default is <code>∞</code>.</li><li><code>unit</code>: can be <code>words</code>, <code>sentences</code> or <code>paragraphs</code>. The default is <code>words</code>.</li></ul></li></ul>",
     "params": {
      "$terms": "value of type item()*",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "db:get The addressed database does not exist or could not be opened.",
      "db:no-index the index is not available.",
      "ft:options the fuzzy and wildcard option cannot be both specified."
     ],
     "others": [],
     "return": "value of type text()*"
    }
   },
   {
    "name": "tokens",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$db as xs:string"
    ],
    "comments": {
     "description": " Returns all full-text tokens stored in the index of the database <code>$db</code>, along with their numbers of occurrences.<br/>If <code>$prefix</code> is specified, the returned nodes will be refined to the strings starting with that prefix. The prefix will be tokenized according to the full-text used for creating the index.",
     "params": {},
     "errors": [
      "db:get The addressed database does not exist or could not be opened.",
      "db:no-index the full-text index is not available."
     ],
     "others": [],
     "return": "value of type element(value)*"
    }
   },
   {
    "name": "tokens",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$db as xs:string",
     "$prefix as xs:string"
    ],
    "comments": {
     "description": " Returns all full-text tokens stored in the index of the database <code>$db</code>, along with their numbers of occurrences.<br/>If <code>$prefix</code> is specified, the returned nodes will be refined to the strings starting with that prefix. The prefix will be tokenized according to the full-text used for creating the index.",
     "params": {
      "$prefix": "value of type xs:string"
     },
     "errors": [
      "db:get The addressed database does not exist or could not be opened.",
      "db:no-index the full-text index is not available."
     ],
     "others": [],
     "return": "value of type element(value)*"
    }
   },
   {
    "name": "contains",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$input as item()*",
     "$terms as item()*"
    ],
    "comments": {
     "description": " Checks if the specified <code>$input</code> items contain the specified <code>$terms</code>.<br/>The function does the same as the <a href=\"https://docs.basex.org/wiki/Full-Text\">Full-Text</a> expression <code>contains text</code>, but options can be specified more dynamically. The <code>$options</code> are the same as for <code><a href=\"https://docs.basex.org/wiki/Full-Text_Module#ft:search\">ft:search</a></code>, and the following ones exist: <ul><li><code>case</code>: determines how character case is processed. Allowed values are <code>insensitive</code>, <code>sensitive</code>, <code>upper</code> and <code>lower</code>. By default, search is case-insensitive.</li><li><code>diacritics</code>: determines how diacritical characters are processed. Allowed values are <code>insensitive</code> and <code>sensitive</code>. By default, search is diacritical insensitive.</li><li><code>stemming</code>: determines is tokens are stemmed. Allowed values are <code>true</code> and <code>false</code>. By default, stemming is turned off.</li><li><code>language</code>: determines the language. This option is relevant for stemming tokens. All language codes are supported. The default language is <code>en</code>.</li></ul>",
     "params": {
      "$terms": "value of type item()*"
     },
     "errors": [
      "ft:options specified options are conflicting."
     ],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "contains",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$input as item()*",
     "$terms as item()*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Checks if the specified <code>$input</code> items contain the specified <code>$terms</code>.<br/>The function does the same as the <a href=\"https://docs.basex.org/wiki/Full-Text\">Full-Text</a> expression <code>contains text</code>, but options can be specified more dynamically. The <code>$options</code> are the same as for <code><a href=\"https://docs.basex.org/wiki/Full-Text_Module#ft:search\">ft:search</a></code>, and the following ones exist: <ul><li><code>case</code>: determines how character case is processed. Allowed values are <code>insensitive</code>, <code>sensitive</code>, <code>upper</code> and <code>lower</code>. By default, search is case-insensitive.</li><li><code>diacritics</code>: determines how diacritical characters are processed. Allowed values are <code>insensitive</code> and <code>sensitive</code>. By default, search is diacritical insensitive.</li><li><code>stemming</code>: determines is tokens are stemmed. Allowed values are <code>true</code> and <code>false</code>. By default, stemming is turned off.</li><li><code>language</code>: determines the language. This option is relevant for stemming tokens. All language codes are supported. The default language is <code>en</code>.</li></ul>",
     "params": {
      "$terms": "value of type item()*",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "ft:options specified options are conflicting."
     ],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "count",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$nodes as node()*"
    ],
    "comments": {
     "description": " Returns the number of occurrences of the search terms specified in a full-text expression.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "score",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$item as item()*"
    ],
    "comments": {
     "description": " Returns the score values (0.0 - 1.0) that have been attached to the specified items. <code>0</code> is returned a value if no score was attached.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double*"
    }
   },
   {
    "name": "tokenize",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$string as xs:string?"
    ],
    "comments": {
     "description": " Tokenizes the given <code>$string</code>, using the current default full-text options or the <code>$options</code> specified as second argument, and returns a sequence with the tokenized string. The following options are available: <ul><li><code>case</code>: determines how character case is processed. Allowed values are <code>insensitive</code>, <code>sensitive</code>, <code>upper</code> and <code>lower</code>. By default, search is case insensitive.</li><li><code>diacritics</code>: determines how diacritical characters are processed. Allowed values are <code>insensitive</code> and <code>sensitive</code>. By default, search is diacritical insensitive.</li><li><code>stemming</code>: determines is tokens are stemmed. Allowed values are <code>true</code> and <code>false</code>. By default, stemming is turned off.</li><li><code>language</code>: determines the language. This option is relevant for stemming tokens. All language codes are supported. The default language is <code>en</code>.</li></ul> <p>The <code>$options</code> argument can be used to control full-text processing. </p>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "tokenize",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$string as xs:string?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Tokenizes the given <code>$string</code>, using the current default full-text options or the <code>$options</code> specified as second argument, and returns a sequence with the tokenized string. The following options are available: <ul><li><code>case</code>: determines how character case is processed. Allowed values are <code>insensitive</code>, <code>sensitive</code>, <code>upper</code> and <code>lower</code>. By default, search is case insensitive.</li><li><code>diacritics</code>: determines how diacritical characters are processed. Allowed values are <code>insensitive</code> and <code>sensitive</code>. By default, search is diacritical insensitive.</li><li><code>stemming</code>: determines is tokens are stemmed. Allowed values are <code>true</code> and <code>false</code>. By default, stemming is turned off.</li><li><code>language</code>: determines the language. This option is relevant for stemming tokens. All language codes are supported. The default language is <code>en</code>.</li></ul> <p>The <code>$options</code> argument can be used to control full-text processing. </p>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "normalize",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$string as xs:string?"
    ],
    "comments": {
     "description": " Normalizes the given <code>$string</code>, using the current default full-text options or the <code>$options</code> specified as second argument. The function accepts the same arguments as <code><a href=\"https://docs.basex.org/wiki/Full-Text_Module#ft:tokenize\">ft:tokenize</a></code>; special characters and separators will be preserved.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "normalize",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$string as xs:string?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Normalizes the given <code>$string</code>, using the current default full-text options or the <code>$options</code> specified as second argument. The function accepts the same arguments as <code><a href=\"https://docs.basex.org/wiki/Full-Text_Module#ft:tokenize\">ft:tokenize</a></code>; special characters and separators will be preserved.",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "thesaurus",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$node as node()",
     "$term as xs:string"
    ],
    "comments": {
     "description": " Looks up a <code>$term</code> in a <a href=\"https://docs.basex.org/wiki/Full-Text#Thesaurus\">Thesaurus Structure</a> supplied by <code>$node</code>. The following <code>$options</code> exist: <ul><li><code>relationship</code>: determines the relationship between terms</li><li><code>levels</code>: determines the maximum number of levels to traverse</li></ul>",
     "params": {
      "$term": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "thesaurus",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$node as node()",
     "$term as xs:string",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Looks up a <code>$term</code> in a <a href=\"https://docs.basex.org/wiki/Full-Text#Thesaurus\">Thesaurus Structure</a> supplied by <code>$node</code>. The following <code>$options</code> exist: <ul><li><code>relationship</code>: determines the relationship between terms</li><li><code>levels</code>: determines the maximum number of levels to traverse</li></ul>",
     "params": {
      "$term": "value of type xs:string",
      "$options": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "mark",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$nodes as node()*"
    ],
    "comments": {
     "description": " Puts a marker element around the resulting <code>$nodes</code> of a full-text request.<br/>The default name of the marker element is <code>mark</code>. An alternative name can be chosen via the optional <code>$name</code> argument.<br/>Please note that: <ul><li>The full-text expression that computes the token positions must be specified as argument of the <code>ft:mark()</code> function, as all position information is lost in subsequent processing steps. You may need to specify more than one full-text expression if you want to use the function in a FLWOR expression, as shown in Example 2.</li><li>The supplied node must be a <a href=\"https://docs.basex.org/wiki/Database_Module#Database_Node\">Database Node</a>. As shown in Example 3, <code>update</code> or <code>transform</code> can be utilized to convert a fragment to the required internal representation.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type node()*"
    }
   },
   {
    "name": "mark",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$nodes as node()*",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Puts a marker element around the resulting <code>$nodes</code> of a full-text request.<br/>The default name of the marker element is <code>mark</code>. An alternative name can be chosen via the optional <code>$name</code> argument.<br/>Please note that: <ul><li>The full-text expression that computes the token positions must be specified as argument of the <code>ft:mark()</code> function, as all position information is lost in subsequent processing steps. You may need to specify more than one full-text expression if you want to use the function in a FLWOR expression, as shown in Example 2.</li><li>The supplied node must be a <a href=\"https://docs.basex.org/wiki/Database_Module#Database_Node\">Database Node</a>. As shown in Example 3, <code>update</code> or <code>transform</code> can be utilized to convert a fragment to the required internal representation.</li></ul>",
     "params": {
      "$name": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type node()*"
    }
   },
   {
    "name": "extract",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$nodes as node()*"
    ],
    "comments": {
     "description": " Extracts and returns relevant parts of full-text results. It puts a marker element around the resulting <code>$nodes</code> of a full-text index request and chops irrelevant sections of the result.<br/>The default element name of the marker element is <code>mark</code>. An alternative element name can be chosen via the optional <code>$name</code> argument.<br/>The default length of the returned text is <code>150</code> characters. An alternative length can be specified via the optional <code>$length</code> argument. Note that the effective text length may differ from the specified text due to formatting and readibility issues.<br/>For more details on this function, please have a look at <code><a href=\"https://docs.basex.org/wiki/Full-Text_Module#ft:mark\">ft:mark</a></code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type node()*"
    }
   },
   {
    "name": "extract",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$nodes as node()*",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Extracts and returns relevant parts of full-text results. It puts a marker element around the resulting <code>$nodes</code> of a full-text index request and chops irrelevant sections of the result.<br/>The default element name of the marker element is <code>mark</code>. An alternative element name can be chosen via the optional <code>$name</code> argument.<br/>The default length of the returned text is <code>150</code> characters. An alternative length can be specified via the optional <code>$length</code> argument. Note that the effective text length may differ from the specified text due to formatting and readibility issues.<br/>For more details on this function, please have a look at <code><a href=\"https://docs.basex.org/wiki/Full-Text_Module#ft:mark\">ft:mark</a></code>.",
     "params": {
      "$name": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type node()*"
    }
   },
   {
    "name": "extract",
    "uri": "http://basex.org/modules/ft",
    "params": [
     "$nodes as node()*",
     "$name as xs:string",
     "$length as xs:integer"
    ],
    "comments": {
     "description": " Extracts and returns relevant parts of full-text results. It puts a marker element around the resulting <code>$nodes</code> of a full-text index request and chops irrelevant sections of the result.<br/>The default element name of the marker element is <code>mark</code>. An alternative element name can be chosen via the optional <code>$name</code> argument.<br/>The default length of the returned text is <code>150</code> characters. An alternative length can be specified via the optional <code>$length</code> argument. Note that the effective text length may differ from the specified text due to formatting and readibility issues.<br/>For more details on this function, please have a look at <code><a href=\"https://docs.basex.org/wiki/Full-Text_Module#ft:mark\">ft:mark</a></code>.",
     "params": {
      "$name": "value of type xs:string",
      "$length": "value of type xs:integer"
     },
     "errors": [],
     "others": [],
     "return": "value of type node()*"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> extends the <a href=\"https://docs.basex.org/wiki/Full-Text\">Full-Text</a> features of BaseX: The index can be directly accessed, full-text results can be marked with additional elements, or the relevant parts can be extracted. Moreover, the score value, which is generated by the <code>contains text</code> expression, can be explicitly requested from items."
 },
 "http://basex.org/modules/hash": {
  "moduleNamespace": "http://basex.org/modules/hash",
  "prefixes": [
   "hash"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "md5",
    "uri": "http://basex.org/modules/hash",
    "params": [
     "$value as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Computes the MD5 hash of the given <code>$value</code>, which may be of type <code>xs:string</code>, <code>xs:base64Binary</code>, or <code>xs:hexBinary</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "sha1",
    "uri": "http://basex.org/modules/hash",
    "params": [
     "$value as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Computes the SHA-1 hash of the given <code>$value</code>, which may be of type <code>xs:string</code>, <code>xs:base64Binary</code>, or <code>xs:hexBinary</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "sha256",
    "uri": "http://basex.org/modules/hash",
    "params": [
     "$value as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Computes the SHA-256 hash of the given <code>$value</code>, which may be of type <code>xs:string</code>, <code>xs:base64Binary</code>, or <code>xs:hexBinary</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   },
   {
    "name": "hash",
    "uri": "http://basex.org/modules/hash",
    "params": [
     "$value as xs:anyAtomicType",
     "$algorithm as xs:string"
    ],
    "comments": {
     "description": " Computes the hash of the given <code>$value</code>, using the specified <code>$algorithm</code>. The specified values may be of type <code>xs:string</code>, <code>xs:base64Binary</code>, or <code>xs:hexBinary</code>.<br/>The following three algorithms are supported: <code>MD5</code>, <code>SHA-1</code>, and <code>SHA-256</code>.",
     "params": {
      "$algorithm": "value of type xs:string"
     },
     "errors": [
      "hash:algorithm the specified hashing algorithm is unknown."
     ],
     "others": [],
     "return": "value of type xs:base64Binary"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> provides functions that perform different hash operations."
 },
 "http://basex.org/modules/hof": {
  "moduleNamespace": "http://basex.org/modules/hof",
  "prefixes": [
   "hof"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "fold-left1",
    "uri": "http://basex.org/modules/hof",
    "params": [
     "$input as item()+",
     "$action as function(item()*, item()) as item()*"
    ],
    "comments": {
     "description": " Works the same as <a href=\"https://docs.basex.org/wiki/Higher-Order_Functions#fn:fold-left\">fn:fold-left</a>, but does not need a seed, because the sequence must be non-empty.",
     "params": {
      "$action": "value of type function(item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "until",
    "uri": "http://basex.org/modules/hof",
    "params": [
     "$predicate as function(item()*) as xs:boolean",
     "$action as function(item()*) as item()*",
     "$zero as item()*"
    ],
    "comments": {
     "description": " Applies the predicate function <code>$predicate</code> to <code>$zero</code>. If the result is <code>false</code>, <code>$action</code> is invoked with the start value – or, subsequently, with the result of this function – until the predicate function returns <code>true()</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "scan-left",
    "uri": "http://basex.org/modules/hof",
    "params": [
     "$input as item()*",
     "$zero as item()*",
     "$action as function(item()*, item()) as item()*"
    ],
    "comments": {
     "description": " This function is similar to <a href=\"https://docs.basex.org/wiki/Higher-Order_Functions#fn:fold-left\">fn:fold-left</a>, but it returns a list of successive reduced values from the left. It is equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"kd\">declare</span> <span class=\"kd\">function</span> <span class=\"nf\">hof:scan-left</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">,</span> <span class=\"nv\">$</span><span class=\"n\">acc</span><span class=\"p\">,</span> <span class=\"nv\">$</span><span class=\"n\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nf\">empty</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">))</span> <span class=\"k\">then</span> <span class=\"nv\">$</span><span class=\"n\">acc</span> <span class=\"k\">else</span> <span class=\"p\">(</span> <span class=\"nv\">$</span><span class=\"n\">acc</span><span class=\"p\">,</span> <span class=\"nf\">hof:scan-left</span><span class=\"p\">(</span><span class=\"nf\">tail</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">),</span> <span class=\"nv\">$</span><span class=\"n\">action</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">acc</span><span class=\"p\">,</span> <span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">)),</span> <span class=\"nv\">$</span><span class=\"n\">action</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">};</span> </pre></div>",
     "params": {
      "$zero": "value of type item()*",
      "$action": "value of type function(item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "take-while",
    "uri": "http://basex.org/modules/hof",
    "params": [
     "$input as item()*",
     "$predicate as function(item()) as xs:boolean"
    ],
    "comments": {
     "description": " The function returns items of <code>$input</code> as long as the <code>$predicate</code> is satisfied. It is equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"kd\">declare</span> <span class=\"kd\">function</span> <span class=\"nf\">hof:take-while</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">,</span> <span class=\"nv\">$</span><span class=\"n\">predicate</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nf\">empty</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nf\">not</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">predicate</span><span class=\"p\">(</span><span class=\"err\">head(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">))))</span> <span class=\"k\">then</span> <span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"p\">(</span> <span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">),</span> <span class=\"nf\">hof:take-while</span><span class=\"p\">(</span><span class=\"nf\">tail</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">),</span> <span class=\"nv\">$</span><span class=\"n\">predicate</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">};</span> </pre></div>",
     "params": {
      "$predicate": "value of type function(item()"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "drop-while",
    "uri": "http://basex.org/modules/hof",
    "params": [
     "$input as item()*",
     "$predicate as function(item()*) as xs:boolean"
    ],
    "comments": {
     "description": " The function skips all items of <code>$input</code> until the <code>$predicate</code> is not satisfied anymore. It is equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"kd\">declare</span> <span class=\"kd\">function</span> <span class=\"nf\">hof:drop-while</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">,</span> <span class=\"nv\">$</span><span class=\"n\">predicate</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">predicate</span><span class=\"p\">(</span><span class=\"err\">head(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">)))</span> <span class=\"k\">then</span> <span class=\"p\">(</span> <span class=\"nf\">hof:drop-while</span><span class=\"p\">(</span><span class=\"nf\">tail</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">),</span> <span class=\"nv\">$</span><span class=\"n\">predicate</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">(</span> <span class=\"nv\">$</span><span class=\"n\">input</span> <span class=\"p\">)</span> <span class=\"p\">};</span> </pre></div>",
     "params": {
      "$predicate": "value of type function(item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "top-k-by",
    "uri": "http://basex.org/modules/hof",
    "params": [
     "$input as item()*",
     "$key as function(item()) as item()",
     "$k as xs:integer"
    ],
    "comments": {
     "description": " Returns the <code>$k</code> items in <code>$input</code> that are greatest when sorted by the result of <code>$key</code> applied to the item. The function is a much more efficient implementation of the following scheme: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">$</span><span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"nv\">$</span><span class=\"n\">input</span> <span class=\"k\">order by</span> <span class=\"nv\">$</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"k\">descending</span> <span class=\"k\">return</span> <span class=\"nv\">$</span><span class=\"n\">item</span> <span class=\"p\">)[</span><span class=\"nf\">position</span><span class=\"p\">()</span> <span class=\"o\">&lt;=</span> <span class=\"nv\">$</span><span class=\"n\">k</span><span class=\"p\">]</span> </pre></div>",
     "params": {
      "$key": "value of type function(item()"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "top-k-with",
    "uri": "http://basex.org/modules/hof",
    "params": [
     "$input as item()*",
     "$comparator as function(item(), item()) as xs:boolean",
     "$k as xs:integer"
    ],
    "comments": {
     "description": " Returns the <code>$k</code> items in <code>$input</code> that are greatest when sorted in the order of the <i>less-than</i> predicate <code>$comparator</code>. The function is a general version of <code><a href=\"https://docs.basex.org/wiki/Higher-Order_Functions_Module#hof:top-k-by\">hof:top-k-by</a></code>.",
     "params": {
      "$comparator": "value of type function(item()"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "id",
    "uri": "http://basex.org/modules/hof",
    "params": [
     "$input as item()*"
    ],
    "comments": {
     "description": " Returns its argument unchanged. This function isn’t useful on its own, but can be used as an argument to other higher-order functions.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "const",
    "uri": "http://basex.org/modules/hof",
    "params": [
     "$input as item()*",
     "$ignore as item()*"
    ],
    "comments": {
     "description": " Returns its first argument unchanged and ignores the second. This function isn’t useful on its own, but can be used as argument to other higher-order functions, e.g., when a function combining two values is expected and one only wants to retain the left one.",
     "params": {
      "$ignore": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> adds some useful higher-order functions, additional to the <a href=\"https://docs.basex.org/wiki/Higher-Order_Functions\">Higher-Order Functions</a> provided by the official specification."
 },
 "http://basex.org/modules/html": {
  "moduleNamespace": "http://basex.org/modules/html",
  "prefixes": [
   "html"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "doc",
    "uri": "http://basex.org/modules/html",
    "params": [
     "$href as xs:string?"
    ],
    "comments": {
     "description": " Fetches the HTML document referred to by the given <code>$href</code>, converts it to XML and returns a document node. The <code>$options</code> argument can be used to set <a href=\"https://docs.basex.org/wiki/Parsers#Options\">TagSoup Options</a>.",
     "params": {},
     "errors": [
      "html:parse the input cannot be converted to XML."
     ],
     "others": [],
     "return": "value of type document-node()?"
    }
   },
   {
    "name": "doc",
    "uri": "http://basex.org/modules/html",
    "params": [
     "$href as xs:string?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Fetches the HTML document referred to by the given <code>$href</code>, converts it to XML and returns a document node. The <code>$options</code> argument can be used to set <a href=\"https://docs.basex.org/wiki/Parsers#Options\">TagSoup Options</a>.",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "html:parse the input cannot be converted to XML."
     ],
     "others": [],
     "return": "value of type document-node()?"
    }
   },
   {
    "name": "parse",
    "uri": "http://basex.org/modules/html",
    "params": [
     "$value as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Converts the HTML document specified by <code>$value</code> to XML and returns a document node:<br/> <ul><li>The input may be of type <code>xs:string</code>, <code>xs:base64Binary</code>, or <code>xs:hexBinary</code>.</li><li>If the input is passed on in its binary representation, the HTML parser will try to choose the correct encoding automatically.</li></ul> <p>The <code>$options</code> argument can be used to set <a href=\"https://docs.basex.org/wiki/Parsers#Options\">TagSoup Options</a>. </p>",
     "params": {},
     "errors": [
      "html:parse the input cannot be converted to XML."
     ],
     "others": [],
     "return": "value of type document-node()"
    }
   },
   {
    "name": "parse",
    "uri": "http://basex.org/modules/html",
    "params": [
     "$value as xs:anyAtomicType",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Converts the HTML document specified by <code>$value</code> to XML and returns a document node:<br/> <ul><li>The input may be of type <code>xs:string</code>, <code>xs:base64Binary</code>, or <code>xs:hexBinary</code>.</li><li>If the input is passed on in its binary representation, the HTML parser will try to choose the correct encoding automatically.</li></ul> <p>The <code>$options</code> argument can be used to set <a href=\"https://docs.basex.org/wiki/Parsers#Options\">TagSoup Options</a>. </p>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "html:parse the input cannot be converted to XML."
     ],
     "others": [],
     "return": "value of type document-node()"
    }
   },
   {
    "name": "parser",
    "uri": "http://basex.org/modules/html",
    "params": [],
    "comments": {
     "description": " Returns the name of the applied HTML parser (currently: <code>TagSoup</code>). If an <i>empty string</i> is returned, TagSoup was not found in the classpath, and the input will be treated as well-formed XML.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> provides functions for converting HTML to XML. Conversion will only take place if TagSoup is included in the classpath (see <a href=\"https://docs.basex.org/wiki/Parsers#HTML_Parser\">HTML Parsing</a> for more details)."
 },
 "http://expath.org/ns/http-client": {
  "moduleNamespace": "http://expath.org/ns/http-client",
  "prefixes": [
   "http"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "send-request",
    "uri": "http://expath.org/ns/http-client",
    "params": [
     "$request as element(http:request)?"
    ],
    "comments": {
     "description": " Sends an HTTP request and interprets the corresponding response: <ul><li><code>$request</code> contains the parameters of the HTTP request such as HTTP method and headers.</li><li>In addition to this it can also contain the URI to which the request will be sent and the body of the HTTP method.</li><li>If the URI is not given with the parameter <code>$href</code>, its value in <code>$request</code> is used instead.</li><li>The request body can also be supplied via the <code>$bodies</code> parameter.</li><li>Certificate verification can be globally disabled via the <code><a href=\"https://docs.basex.org/wiki/Options#IGNORECERT\">IGNORECERT</a></code> option.</li></ul> <p>Notes: </p> <ul><li>Both basic and digest authentication is supported.</li><li>While the contents of the request can be supplied as child of the <code>http:body</code> element, it is faster and safer to pass them on via the third argument.</li><li>For further information, please check out the <a href=\"http://expath.org/spec/http-client\">EXPath</a> specification.</li></ul>",
     "params": {},
     "errors": [
      "experr:HC0001 an HTTP error occurred.",
      "experr:HC0002 error parsing the entity content as XML or HTML.",
      "experr:HC0003 with a multipart response, the override-media-type must be either a multipart media type or application/octet-stream.",
      "experr:HC0004 the src attribute on the body element is mutually exclusive with all other attribute (except the media-type).",
      "experr:HC0005 the request element is not valid.",
      "experr:HC0006 a timeout occurred waiting for the response."
     ],
     "others": [],
     "return": "value of type item()+"
    }
   },
   {
    "name": "send-request",
    "uri": "http://expath.org/ns/http-client",
    "params": [
     "$request as element(http:request)?",
     "$href as xs:string?"
    ],
    "comments": {
     "description": " Sends an HTTP request and interprets the corresponding response: <ul><li><code>$request</code> contains the parameters of the HTTP request such as HTTP method and headers.</li><li>In addition to this it can also contain the URI to which the request will be sent and the body of the HTTP method.</li><li>If the URI is not given with the parameter <code>$href</code>, its value in <code>$request</code> is used instead.</li><li>The request body can also be supplied via the <code>$bodies</code> parameter.</li><li>Certificate verification can be globally disabled via the <code><a href=\"https://docs.basex.org/wiki/Options#IGNORECERT\">IGNORECERT</a></code> option.</li></ul> <p>Notes: </p> <ul><li>Both basic and digest authentication is supported.</li><li>While the contents of the request can be supplied as child of the <code>http:body</code> element, it is faster and safer to pass them on via the third argument.</li><li>For further information, please check out the <a href=\"http://expath.org/spec/http-client\">EXPath</a> specification.</li></ul>",
     "params": {
      "$href": "value of type xs:string?"
     },
     "errors": [
      "experr:HC0001 an HTTP error occurred.",
      "experr:HC0002 error parsing the entity content as XML or HTML.",
      "experr:HC0003 with a multipart response, the override-media-type must be either a multipart media type or application/octet-stream.",
      "experr:HC0004 the src attribute on the body element is mutually exclusive with all other attribute (except the media-type).",
      "experr:HC0005 the request element is not valid.",
      "experr:HC0006 a timeout occurred waiting for the response."
     ],
     "others": [],
     "return": "value of type item()+"
    }
   },
   {
    "name": "send-request",
    "uri": "http://expath.org/ns/http-client",
    "params": [
     "$request as element(http:request)?",
     "$href as xs:string?",
     "$bodies as item()*"
    ],
    "comments": {
     "description": " Sends an HTTP request and interprets the corresponding response: <ul><li><code>$request</code> contains the parameters of the HTTP request such as HTTP method and headers.</li><li>In addition to this it can also contain the URI to which the request will be sent and the body of the HTTP method.</li><li>If the URI is not given with the parameter <code>$href</code>, its value in <code>$request</code> is used instead.</li><li>The request body can also be supplied via the <code>$bodies</code> parameter.</li><li>Certificate verification can be globally disabled via the <code><a href=\"https://docs.basex.org/wiki/Options#IGNORECERT\">IGNORECERT</a></code> option.</li></ul> <p>Notes: </p> <ul><li>Both basic and digest authentication is supported.</li><li>While the contents of the request can be supplied as child of the <code>http:body</code> element, it is faster and safer to pass them on via the third argument.</li><li>For further information, please check out the <a href=\"http://expath.org/spec/http-client\">EXPath</a> specification.</li></ul>",
     "params": {
      "$href": "value of type xs:string?",
      "$bodies": "value of type item()*"
     },
     "errors": [
      "experr:HC0001 an HTTP error occurred.",
      "experr:HC0002 error parsing the entity content as XML or HTML.",
      "experr:HC0003 with a multipart response, the override-media-type must be either a multipart media type or application/octet-stream.",
      "experr:HC0004 the src attribute on the body element is mutually exclusive with all other attribute (except the media-type).",
      "experr:HC0005 the request element is not valid.",
      "experr:HC0006 a timeout occurred waiting for the response."
     ],
     "others": [],
     "return": "value of type item()+"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains a single function to send HTTP requests and handle HTTP responses. The function <code>send-request</code> is based on the <a href=\"http://expath.org/spec/http-client\">EXPath HTTP Client Module</a>. It gives full control over the available request and response parameters. For simple GET requests, the <a href=\"https://docs.basex.org/wiki/Fetch_Module\">Fetch Module</a> may be sufficient."
 },
 "http://basex.org/modules/index": {
  "moduleNamespace": "http://basex.org/modules/index",
  "prefixes": [
   "index"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "facets",
    "uri": "http://basex.org/modules/index",
    "params": [
     "$db as xs:string"
    ],
    "comments": {
     "description": " Returns information about all facets and facet values of the database <code>$db</code> in document structure format.<br/>If <code>$type</code> is specified as <code>flat</code>, the function returns this information in a flat summarized version. The returned data is derived from the <a href=\"https://docs.basex.org/wiki/Indexes#Path_Index\">Path Index</a>.",
     "params": {},
     "errors": [
      "db:get The addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "facets",
    "uri": "http://basex.org/modules/index",
    "params": [
     "$db as xs:string",
     "$type as xs:string"
    ],
    "comments": {
     "description": " Returns information about all facets and facet values of the database <code>$db</code> in document structure format.<br/>If <code>$type</code> is specified as <code>flat</code>, the function returns this information in a flat summarized version. The returned data is derived from the <a href=\"https://docs.basex.org/wiki/Indexes#Path_Index\">Path Index</a>.",
     "params": {
      "$type": "value of type xs:string"
     },
     "errors": [
      "db:get The addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "texts",
    "uri": "http://basex.org/modules/index",
    "params": [
     "$db as xs:string"
    ],
    "comments": {
     "description": " Returns all strings stored in the <a href=\"https://docs.basex.org/wiki/Indexes#Text_Index\">Text Index</a> of the database <code>$db</code>, along with their number of occurrences.<br/>If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.<br/>If <code>$prefix</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified entry.",
     "params": {},
     "errors": [
      "db:get The addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type element(value)*"
    }
   },
   {
    "name": "texts",
    "uri": "http://basex.org/modules/index",
    "params": [
     "$db as xs:string",
     "$prefix as xs:string"
    ],
    "comments": {
     "description": " Returns all strings stored in the <a href=\"https://docs.basex.org/wiki/Indexes#Text_Index\">Text Index</a> of the database <code>$db</code>, along with their number of occurrences.<br/>If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.<br/>If <code>$prefix</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified entry.",
     "params": {
      "$prefix": "value of type xs:string"
     },
     "errors": [
      "db:get The addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type element(value)*"
    }
   },
   {
    "name": "texts",
    "uri": "http://basex.org/modules/index",
    "params": [
     "$db as xs:string",
     "$prefix as xs:string",
     "$ascending as xs:boolean?"
    ],
    "comments": {
     "description": " Returns all strings stored in the <a href=\"https://docs.basex.org/wiki/Indexes#Text_Index\">Text Index</a> of the database <code>$db</code>, along with their number of occurrences.<br/>If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.<br/>If <code>$prefix</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified entry.",
     "params": {
      "$prefix": "value of type xs:string",
      "$ascending": "value of type xs:boolean?"
     },
     "errors": [
      "db:get The addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type element(value)*"
    }
   },
   {
    "name": "attributes",
    "uri": "http://basex.org/modules/index",
    "params": [
     "$db as xs:string"
    ],
    "comments": {
     "description": " Returns all strings stored in the <a href=\"https://docs.basex.org/wiki/Indexes#Attribute_Index\">Attribute Index</a> of the database <code>$db</code>, along with their number of occurrences.<br/>If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.<br/>If <code>$prefix</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified start entry.",
     "params": {},
     "errors": [
      "db:get The addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type element(value)*"
    }
   },
   {
    "name": "attributes",
    "uri": "http://basex.org/modules/index",
    "params": [
     "$db as xs:string",
     "$prefix as xs:string"
    ],
    "comments": {
     "description": " Returns all strings stored in the <a href=\"https://docs.basex.org/wiki/Indexes#Attribute_Index\">Attribute Index</a> of the database <code>$db</code>, along with their number of occurrences.<br/>If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.<br/>If <code>$prefix</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified start entry.",
     "params": {
      "$prefix": "value of type xs:string"
     },
     "errors": [
      "db:get The addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type element(value)*"
    }
   },
   {
    "name": "attributes",
    "uri": "http://basex.org/modules/index",
    "params": [
     "$db as xs:string",
     "$prefix as xs:string",
     "$ascending as xs:boolean?"
    ],
    "comments": {
     "description": " Returns all strings stored in the <a href=\"https://docs.basex.org/wiki/Indexes#Attribute_Index\">Attribute Index</a> of the database <code>$db</code>, along with their number of occurrences.<br/>If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.<br/>If <code>$prefix</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified start entry.",
     "params": {
      "$prefix": "value of type xs:string",
      "$ascending": "value of type xs:boolean?"
     },
     "errors": [
      "db:get The addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type element(value)*"
    }
   },
   {
    "name": "tokens",
    "uri": "http://basex.org/modules/index",
    "params": [
     "$db as xs:string"
    ],
    "comments": {
     "description": " Returns all strings stored in the <a href=\"https://docs.basex.org/wiki/Indexes#Token_Index\">Token Index</a> of the database <code>$db</code>, along with their number of occurrences.",
     "params": {},
     "errors": [
      "db:get The addressed database does not exist or could not be opened.",
      "db:no-index the index is not available."
     ],
     "others": [],
     "return": "value of type element(value)*"
    }
   },
   {
    "name": "element-names",
    "uri": "http://basex.org/modules/index",
    "params": [
     "$db as xs:string"
    ],
    "comments": {
     "description": " Returns all element names stored in the <a href=\"https://docs.basex.org/wiki/Indexes#Name_Index\">Name Index</a> of the database <code>$db</code>, along with their number of occurrences.",
     "params": {},
     "errors": [
      "db:get The addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type element(value)*"
    }
   },
   {
    "name": "attribute-names",
    "uri": "http://basex.org/modules/index",
    "params": [
     "$db as xs:string"
    ],
    "comments": {
     "description": " Returns all attribute names stored in the <a href=\"https://docs.basex.org/wiki/Indexes#Name_Index\">Name Index</a> of the database <code>$db</code>, along with their number of occurrences.",
     "params": {},
     "errors": [
      "db:get The addressed database does not exist or could not be opened."
     ],
     "others": [],
     "return": "value of type element(value)*"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> provides functions for displaying information stored in the database index structures."
 },
 "http://basex.org/modules/inspect": {
  "moduleNamespace": "http://basex.org/modules/inspect",
  "prefixes": [
   "inspect"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "functions",
    "uri": "http://basex.org/modules/inspect",
    "params": [],
    "comments": {
     "description": " Returns function items for all user-defined functions (both public and private) that are known in the current query context. If an <code>$href</code> value is specified, the specified resource will be retrieved as a string and compiled, and its functions will be added to the query context and returned to the user. A relative URI will be resolved against the static base URI of the query.",
     "params": {},
     "errors": [
      "inspect:parse Error while parsing a module."
     ],
     "others": [],
     "return": "value of type function(*)*"
    }
   },
   {
    "name": "functions",
    "uri": "http://basex.org/modules/inspect",
    "params": [
     "$href as xs:string"
    ],
    "comments": {
     "description": " Returns function items for all user-defined functions (both public and private) that are known in the current query context. If an <code>$href</code> value is specified, the specified resource will be retrieved as a string and compiled, and its functions will be added to the query context and returned to the user. A relative URI will be resolved against the static base URI of the query.",
     "params": {},
     "errors": [
      "inspect:parse Error while parsing a module."
     ],
     "others": [],
     "return": "value of type function(*)*"
    }
   },
   {
    "name": "function-annotations",
    "uri": "http://basex.org/modules/inspect",
    "params": [
     "$function as function(*)"
    ],
    "comments": {
     "description": " Returns the annotations of the specified <code>$function</code> in a map.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type map(xs:QName, xs:anyAtomicType*)"
    }
   },
   {
    "name": "static-context",
    "uri": "http://basex.org/modules/inspect",
    "params": [
     "$function as function(*)?",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns a component of the <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-context\">static context</a> of a <code>$function</code> with the specified <code>$name</code>. If no function is supplied, the current static context is considered.<br/>The following components can be requested: <ul><li><code>base-uri</code>: Static base URI.</li><li><code>namespaces</code>: Prefix/URI map with all statically known namespaces.</li><li><code>element-namespace</code>: Default element/type namespace URI, or an empty sequence if it is absent.</li><li><code>function-namespace</code>: Default function namespace URI, or an empty sequence if it is absent.</li><li><code>collation</code>: URI of the default collation.</li><li><code>ordering</code>: Ordering mode (<code>ordered</code>/<code>unordered</code>)</li><li><code>construction</code>: Construction mode (<code>preserve</code>/<code>strip</code>)</li><li><code>default-order-empty</code>: Default order for empty sequences (<code>greatest</code>/<code>least</code>)</li><li><code>boundary-space</code>: Boundary-space policy (<code>preserve</code>/<code>strip</code>)</li><li><code>copy-namespaces</code>: Copy-namespaces mode (<code>inherit</code>/<code>no-inherit</code>, <code>preserve</code>/<code>no-preserve</code>)</li><li><code>decimal-formats</code>: Nested map with all statically known decimal formats</li></ul>",
     "params": {
      "$name": "value of type xs:string"
     },
     "errors": [
      "inspect:unknown The specified component does not exist."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "type",
    "uri": "http://basex.org/modules/inspect",
    "params": [
     "$input as item()*"
    ],
    "comments": {
     "description": " Returns a string representation of the type of a the given <code>$input</code>: <ul><li>The string includes the occurrence indicator.</li><li>The type of functions and nodes may be stricter than the returned type.</li><li>For type checking, the standard expressions <code>typeswitch</code> and <code>instance of</code> should be used instead.</li></ul> <p>The following <code>$options</code> are available: </p> <ul><li><code>item</code>: If enabled, only the item type is returned and the occurrence indicator is omitted. The default is <code>false()</code>.</li><li><code>mode</code>: If <code>value</code> is specified, the assigned type of the result value is returned. With <code>expression</code> the type of the input expression is returned (please note that the original expression may already have been rewritten at compile-time). With <code>computed</code>, the exact value is computed at runtime, based on the expression and the result value. The default is <code>computed</code>.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "type",
    "uri": "http://basex.org/modules/inspect",
    "params": [
     "$input as item()*",
     "$options as map(*)"
    ],
    "comments": {
     "description": " Returns a string representation of the type of a the given <code>$input</code>: <ul><li>The string includes the occurrence indicator.</li><li>The type of functions and nodes may be stricter than the returned type.</li><li>For type checking, the standard expressions <code>typeswitch</code> and <code>instance of</code> should be used instead.</li></ul> <p>The following <code>$options</code> are available: </p> <ul><li><code>item</code>: If enabled, only the item type is returned and the occurrence indicator is omitted. The default is <code>false()</code>.</li><li><code>mode</code>: If <code>value</code> is specified, the assigned type of the result value is returned. With <code>expression</code> the type of the input expression is returned (please note that the original expression may already have been rewritten at compile-time). With <code>computed</code>, the exact value is computed at runtime, based on the expression and the result value. The default is <code>computed</code>.</li></ul>",
     "params": {
      "$options": "value of type map(*)"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "function",
    "uri": "http://basex.org/modules/inspect",
    "params": [
     "$function as function(*)"
    ],
    "comments": {
     "description": " Inspects the specified <code>$function</code> and returns an element that describes its structure. The output of this function is similar to eXist-db’s <a href=\"https://exist-db.org/exist/apps/fundocs/view.html?uri=http://exist-db.org/xquery/inspection&amp;location=java:org.exist.xquery.functions.inspect.InspectionModule\">inspect:inspect-function</a> function.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(function)"
    }
   },
   {
    "name": "context",
    "uri": "http://basex.org/modules/inspect",
    "params": [],
    "comments": {
     "description": " Generates an element that describes all variables and functions in the current query context.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(context)"
    }
   },
   {
    "name": "module",
    "uri": "http://basex.org/modules/inspect",
    "params": [
     "$uri as xs:string"
    ],
    "comments": {
     "description": " Retrieves the resource located at the specified <code>$uri</code>, parses it as XQuery module, and generates an element that describes the module's structure. A relative URI will be resolved against the static base URI of the query.",
     "params": {},
     "errors": [
      "inspect:parse Error while parsing a module."
     ],
     "others": [],
     "return": "value of type element(module)"
    }
   },
   {
    "name": "xqdoc",
    "uri": "http://basex.org/modules/inspect",
    "params": [
     "$uri as xs:string"
    ],
    "comments": {
     "description": " Retrieves the resource located at the specified <code>$uri</code>, parses it as XQuery module, and generates an xqDoc element. A relative URI will be resolved against the static base URI of the query.<br/><a href=\"http://xqdoc.org/\">xqDoc</a> provides a simple vendor-neutral solution for generating documentation from XQuery modules. The documentation conventions have been inspired by the JavaDoc standard. Documentation comments begin with <code>(:~</code> and end with <code>:)</code>, and tags start with <code>@</code>. xqDoc comments can be specified for main and library modules and variable and function declarations.<br/> <p>We have slightly extended the xqDoc conventions to do justice to more recent versions of XQuery (Schema: <a href=\"https://files.basex.org/etc/xqdoc-1.1.30052013.xsd\">xqdoc-1.1.30052013.xsd</a>):<br/> </p> <ul><li>an <code>&lt;xqdoc:annotations/&gt;</code> node is added to each variable or function that uses annotations. The xqdoc:annotation child nodes may have additional <code>xqdoc:literal</code> elements with <code>type</code> attributes (xs:string, xs:integer, xs:decimal, xs:double) and values.</li><li>a single <code>&lt;xqdoc:namespaces/&gt;</code> node is added to the root element, which summarizes all prefixes and namespace URIs used or declared in the module.</li><li>name and type elements are added to variables.</li></ul>",
     "params": {},
     "errors": [
      "inspect:parse Error while parsing a module."
     ],
     "others": [],
     "return": "value of type element(xqdoc:xqdoc)"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for extracting internal information about modules and functions and generating documentation."
 },
 "http://basex.org/modules/job": {
  "moduleNamespace": "http://basex.org/modules/job",
  "prefixes": [
   "job"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "eval",
    "uri": "http://basex.org/modules/job",
    "params": [
     "$query as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Schedules the evaluation a new query job for the supplied <code>$query</code> (of type <code>xs:string</code>, or of type <code>xs:anyURI</code> if points to a resource), and returns a job ID. The job will be queued until a free slot is available, and the query result can be cached. Queries can be updating, and variables and the context value can be declared via <code>$bindings</code> (see <code><a href=\"https://docs.basex.org/wiki/XQuery_Module#xquery:eval\">xquery:eval</a></code> for more details). The following <code>$options</code> can be supplied: <ul><li><code>cache</code>: indicates if the query result will be cached or ignored (default: <code>false</code>): <ul><li>The result will be cached in main-memory until it is fetched via <code><a href=\"https://docs.basex.org/wiki/Job_Module#job:result\">job:result</a></code>, or until <code><a href=\"https://docs.basex.org/wiki/Options#CACHETIMEOUT\">CACHETIMEOUT</a></code> is exceeded.</li><li>If the query raises an error, it will be cached and returned instead.</li></ul></li><li><code>start</code>: a dayTimeDuration, time, dateTime or integer can be specified to delay the execution of the query: <ul><li>If a dayTimeDuration is specified, the query will be queued after the specified duration has passed. Examples of valid values are: <code>P1D</code> (1 day), <code>PT5M</code> (5 minutes), <code>PT0.1S</code> (100 ms). An error will be raised if a negative value is specified.</li><li>If a dateTime is specified, the query will be executed at this date. Examples for valid values are: <code>2018-12-31T23:59:59</code> (New Year's Eve 2018, close to midnight). An error will be raised if the specified time lies in the past.</li><li>If a time is specified, the query will be executed at this time of the day. Examples of valid times are: <code>02:00:00</code> (2am local time), <code>12:00:00Z</code> (noon, UTC). If the time lies in the past, the query will be executed the next day.</li><li>An integer will be interpreted as minutes. If the specified number is greater than the elapsed minutes of the current hour, the query will be executed one hour later.</li></ul></li><li><code>interval</code>: a dayTimeDuration string can be specified to execute the query periodically. An error is raised if the specified interval is less than one second (<code>PT1S</code>). If the next scheduled call is due, and if a query with the same ID is still running, it will be skipped.</li><li><code>end</code>: scheduling can be stopped after a given time or duration. The string format is the same as for <code>start</code>. An error is raised if the resulting end time is smaller than the start time.</li><li><code>base-uri</code>: sets the <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-base-uri\">base-uri property</a> for the query. This URI will be used when resolving relative URIs, such as with <code>fn:doc</code>.</li><li><code>id</code>: sets a custom job ID. The ID must not start with the standard <code>job</code> prefix, and it can only be assigned if no job with the same name exists.</li><li><code>service</code>: additionally registers the job as <a href=\"https://docs.basex.org/wiki/Job_Module#Services\">service</a>. Registered services must have no variable bindings.</li><li><code>log</code>: writes the specified string to the <a href=\"https://docs.basex.org/wiki/Logging\">database logs</a>. Two log entries are stored, one at the beginning and another one after the execution of the job.</li></ul>",
     "params": {},
     "errors": [
      "job:overflow Query execution is rejected because too many jobs are queued or being executed. <code><a href=\"https://docs.basex.org/wiki/Options#CACHETIMEOUT\">CACHETIMEOUT</a></code> can be decreased if the default setting is too restrictive.",
      "job:range A specified time or duration is out of range.",
      "job:id The specified ID is invalid or has already been assigned.",
      "job:options The specified options are conflicting."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "eval",
    "uri": "http://basex.org/modules/job",
    "params": [
     "$query as xs:anyAtomicType",
     "$bindings as map(*)?"
    ],
    "comments": {
     "description": " Schedules the evaluation a new query job for the supplied <code>$query</code> (of type <code>xs:string</code>, or of type <code>xs:anyURI</code> if points to a resource), and returns a job ID. The job will be queued until a free slot is available, and the query result can be cached. Queries can be updating, and variables and the context value can be declared via <code>$bindings</code> (see <code><a href=\"https://docs.basex.org/wiki/XQuery_Module#xquery:eval\">xquery:eval</a></code> for more details). The following <code>$options</code> can be supplied: <ul><li><code>cache</code>: indicates if the query result will be cached or ignored (default: <code>false</code>): <ul><li>The result will be cached in main-memory until it is fetched via <code><a href=\"https://docs.basex.org/wiki/Job_Module#job:result\">job:result</a></code>, or until <code><a href=\"https://docs.basex.org/wiki/Options#CACHETIMEOUT\">CACHETIMEOUT</a></code> is exceeded.</li><li>If the query raises an error, it will be cached and returned instead.</li></ul></li><li><code>start</code>: a dayTimeDuration, time, dateTime or integer can be specified to delay the execution of the query: <ul><li>If a dayTimeDuration is specified, the query will be queued after the specified duration has passed. Examples of valid values are: <code>P1D</code> (1 day), <code>PT5M</code> (5 minutes), <code>PT0.1S</code> (100 ms). An error will be raised if a negative value is specified.</li><li>If a dateTime is specified, the query will be executed at this date. Examples for valid values are: <code>2018-12-31T23:59:59</code> (New Year's Eve 2018, close to midnight). An error will be raised if the specified time lies in the past.</li><li>If a time is specified, the query will be executed at this time of the day. Examples of valid times are: <code>02:00:00</code> (2am local time), <code>12:00:00Z</code> (noon, UTC). If the time lies in the past, the query will be executed the next day.</li><li>An integer will be interpreted as minutes. If the specified number is greater than the elapsed minutes of the current hour, the query will be executed one hour later.</li></ul></li><li><code>interval</code>: a dayTimeDuration string can be specified to execute the query periodically. An error is raised if the specified interval is less than one second (<code>PT1S</code>). If the next scheduled call is due, and if a query with the same ID is still running, it will be skipped.</li><li><code>end</code>: scheduling can be stopped after a given time or duration. The string format is the same as for <code>start</code>. An error is raised if the resulting end time is smaller than the start time.</li><li><code>base-uri</code>: sets the <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-base-uri\">base-uri property</a> for the query. This URI will be used when resolving relative URIs, such as with <code>fn:doc</code>.</li><li><code>id</code>: sets a custom job ID. The ID must not start with the standard <code>job</code> prefix, and it can only be assigned if no job with the same name exists.</li><li><code>service</code>: additionally registers the job as <a href=\"https://docs.basex.org/wiki/Job_Module#Services\">service</a>. Registered services must have no variable bindings.</li><li><code>log</code>: writes the specified string to the <a href=\"https://docs.basex.org/wiki/Logging\">database logs</a>. Two log entries are stored, one at the beginning and another one after the execution of the job.</li></ul>",
     "params": {
      "$bindings": "value of type map(*)?"
     },
     "errors": [
      "job:overflow Query execution is rejected because too many jobs are queued or being executed. <code><a href=\"https://docs.basex.org/wiki/Options#CACHETIMEOUT\">CACHETIMEOUT</a></code> can be decreased if the default setting is too restrictive.",
      "job:range A specified time or duration is out of range.",
      "job:id The specified ID is invalid or has already been assigned.",
      "job:options The specified options are conflicting."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "eval",
    "uri": "http://basex.org/modules/job",
    "params": [
     "$query as xs:anyAtomicType",
     "$bindings as map(*)?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Schedules the evaluation a new query job for the supplied <code>$query</code> (of type <code>xs:string</code>, or of type <code>xs:anyURI</code> if points to a resource), and returns a job ID. The job will be queued until a free slot is available, and the query result can be cached. Queries can be updating, and variables and the context value can be declared via <code>$bindings</code> (see <code><a href=\"https://docs.basex.org/wiki/XQuery_Module#xquery:eval\">xquery:eval</a></code> for more details). The following <code>$options</code> can be supplied: <ul><li><code>cache</code>: indicates if the query result will be cached or ignored (default: <code>false</code>): <ul><li>The result will be cached in main-memory until it is fetched via <code><a href=\"https://docs.basex.org/wiki/Job_Module#job:result\">job:result</a></code>, or until <code><a href=\"https://docs.basex.org/wiki/Options#CACHETIMEOUT\">CACHETIMEOUT</a></code> is exceeded.</li><li>If the query raises an error, it will be cached and returned instead.</li></ul></li><li><code>start</code>: a dayTimeDuration, time, dateTime or integer can be specified to delay the execution of the query: <ul><li>If a dayTimeDuration is specified, the query will be queued after the specified duration has passed. Examples of valid values are: <code>P1D</code> (1 day), <code>PT5M</code> (5 minutes), <code>PT0.1S</code> (100 ms). An error will be raised if a negative value is specified.</li><li>If a dateTime is specified, the query will be executed at this date. Examples for valid values are: <code>2018-12-31T23:59:59</code> (New Year's Eve 2018, close to midnight). An error will be raised if the specified time lies in the past.</li><li>If a time is specified, the query will be executed at this time of the day. Examples of valid times are: <code>02:00:00</code> (2am local time), <code>12:00:00Z</code> (noon, UTC). If the time lies in the past, the query will be executed the next day.</li><li>An integer will be interpreted as minutes. If the specified number is greater than the elapsed minutes of the current hour, the query will be executed one hour later.</li></ul></li><li><code>interval</code>: a dayTimeDuration string can be specified to execute the query periodically. An error is raised if the specified interval is less than one second (<code>PT1S</code>). If the next scheduled call is due, and if a query with the same ID is still running, it will be skipped.</li><li><code>end</code>: scheduling can be stopped after a given time or duration. The string format is the same as for <code>start</code>. An error is raised if the resulting end time is smaller than the start time.</li><li><code>base-uri</code>: sets the <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-base-uri\">base-uri property</a> for the query. This URI will be used when resolving relative URIs, such as with <code>fn:doc</code>.</li><li><code>id</code>: sets a custom job ID. The ID must not start with the standard <code>job</code> prefix, and it can only be assigned if no job with the same name exists.</li><li><code>service</code>: additionally registers the job as <a href=\"https://docs.basex.org/wiki/Job_Module#Services\">service</a>. Registered services must have no variable bindings.</li><li><code>log</code>: writes the specified string to the <a href=\"https://docs.basex.org/wiki/Logging\">database logs</a>. Two log entries are stored, one at the beginning and another one after the execution of the job.</li></ul>",
     "params": {
      "$bindings": "value of type map(*)?",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "job:overflow Query execution is rejected because too many jobs are queued or being executed. <code><a href=\"https://docs.basex.org/wiki/Options#CACHETIMEOUT\">CACHETIMEOUT</a></code> can be decreased if the default setting is too restrictive.",
      "job:range A specified time or duration is out of range.",
      "job:id The specified ID is invalid or has already been assigned.",
      "job:options The specified options are conflicting."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "result",
    "uri": "http://basex.org/modules/job",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Returns the cached result of a job with the specified job <code>$id</code>: <ul><li>If the original job has raised an error, the cached error will be raised instead.</li><li>The cached result or error will be dropped after it has been retrieved.</li><li>If the result has not been cached or if it has been dropped, an empty sequence is returned.</li></ul> <p>The following <code>$options</code> can be supplied: </p> <ul><li><code>keep</code>: Keep the cached result or error after retrieval.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "result",
    "uri": "http://basex.org/modules/job",
    "params": [
     "$id as xs:string",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Returns the cached result of a job with the specified job <code>$id</code>: <ul><li>If the original job has raised an error, the cached error will be raised instead.</li><li>The cached result or error will be dropped after it has been retrieved.</li><li>If the result has not been cached or if it has been dropped, an empty sequence is returned.</li></ul> <p>The following <code>$options</code> can be supplied: </p> <ul><li><code>keep</code>: Keep the cached result or error after retrieval.</li></ul>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "remove",
    "uri": "http://basex.org/modules/job",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Triggers the cancelation of a job with the specified <code>$id</code>, cancels a scheduled job or removes a cached result. Unknown IDs are ignored. All jobs are gracefully stopped; it is up to the process to decide when it is safe to shut down. The following <code>$options</code> can be supplied: <ul><li><code>service</code>: additionally removes the job from the <a href=\"https://docs.basex.org/wiki/Job_Module#Services\">job services</a> list.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "remove",
    "uri": "http://basex.org/modules/job",
    "params": [
     "$id as xs:string",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Triggers the cancelation of a job with the specified <code>$id</code>, cancels a scheduled job or removes a cached result. Unknown IDs are ignored. All jobs are gracefully stopped; it is up to the process to decide when it is safe to shut down. The following <code>$options</code> can be supplied: <ul><li><code>service</code>: additionally removes the job from the <a href=\"https://docs.basex.org/wiki/Job_Module#Services\">job services</a> list.</li></ul>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "wait",
    "uri": "http://basex.org/modules/job",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Waits for the completion of a job with the specified <code>$id</code>: <ul><li>The function will terminate immediately if the job ID is unknown. This is the case if a future job has not been queued yet, or if the ID has already been discarded after job evaluation.</li><li>If the function is called with the ID of a queued job, or repeatedly executed job, it may stall and never terminate.</li></ul>",
     "params": {},
     "errors": [
      "job:self The current job is addressed."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "current",
    "uri": "http://basex.org/modules/job",
    "params": [],
    "comments": {
     "description": " Returns the ID of the current job.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "list",
    "uri": "http://basex.org/modules/job",
    "params": [],
    "comments": {
     "description": " Returns the IDs of all jobs that are currently registered. The list includes scheduled, queued, running, stopped, and finished jobs with cached results.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "list-details",
    "uri": "http://basex.org/modules/job",
    "params": [],
    "comments": {
     "description": " Returns information on all jobs that are currently registered, or on a job with the specified <code>$id</code> (or an empty sequence if this job is not found). The list includes scheduled, queued, running jobs, and cached jobs. A string representation of the job, or its URI, will be returned as a value. The returned elements have additional attributes: <ul><li><code>id</code>: job ID</li><li><code>type</code>: type of the job (command, query, REST, RESTXQ, etc.)</li><li><code>state</code>: current state of the job: <code>scheduled</code>, <code>queued</code>, <code>running</code>, <code>cached</code></li><li><code>user</code>: user who started the job</li><li><code>duration</code>: evaluation time (included if a job is running or if the result was cached)</li><li><code>start</code>: next start of job (included if a job will be executed repeatedly)</li><li><code>time</code>: time when job was registered</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(job)*"
    }
   },
   {
    "name": "list-details",
    "uri": "http://basex.org/modules/job",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Returns information on all jobs that are currently registered, or on a job with the specified <code>$id</code> (or an empty sequence if this job is not found). The list includes scheduled, queued, running jobs, and cached jobs. A string representation of the job, or its URI, will be returned as a value. The returned elements have additional attributes: <ul><li><code>id</code>: job ID</li><li><code>type</code>: type of the job (command, query, REST, RESTXQ, etc.)</li><li><code>state</code>: current state of the job: <code>scheduled</code>, <code>queued</code>, <code>running</code>, <code>cached</code></li><li><code>user</code>: user who started the job</li><li><code>duration</code>: evaluation time (included if a job is running or if the result was cached)</li><li><code>start</code>: next start of job (included if a job will be executed repeatedly)</li><li><code>time</code>: time when job was registered</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(job)*"
    }
   },
   {
    "name": "bindings",
    "uri": "http://basex.org/modules/job",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Returns the variable bindings of an existing job with the specified <code>$id</code>. If no variables have been bound to this job, an empty map is returned.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type map(*)"
    }
   },
   {
    "name": "finished",
    "uri": "http://basex.org/modules/job",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Indicates if the evaluation of an already running job with the specified <code>$id</code> has finished. As the IDs of finished jobs will usually be discarded, unless caching is enabled, the function will also return <code>true</code> for unknown jobs. <ul><li><code>false</code> indicates that the job ID is scheduled, queued, or currently running.</li><li><code>true</code> will be returned if the job has either finished, or if the ID is unknown (because the IDs of all finished jobs will not be cached).</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "services",
    "uri": "http://basex.org/modules/job",
    "params": [],
    "comments": {
     "description": " Returns a list of all jobs that have been persistently registered as <a href=\"https://docs.basex.org/wiki/Job_Module#Services\">Services</a>.",
     "params": {},
     "errors": [
      "job:services Registered services cannot be parsed."
     ],
     "others": [],
     "return": "value of type element(job)*"
    }
   }
  ],
  "description": " <font color=\"orangered\">Updated with Version 10:</font> Renamed from <i>Jobs Module</i> to <i>Job Module</i>. The namespace URI has been updated as well."
 },
 "http://basex.org/modules/json": {
  "moduleNamespace": "http://basex.org/modules/json",
  "prefixes": [
   "json"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "doc",
    "uri": "http://basex.org/modules/json",
    "params": [
     "$href as xs:string"
    ],
    "comments": {
     "description": " Fetches the JSON document referred to by the given <code>$href</code> and converts it to an XQuery value. The <code>$options</code> argument can be used to control the way the input is converted.",
     "params": {},
     "errors": [
      "json:parse the specified input cannot be parsed as JSON document.",
      "json:options the specified options are conflicting."
     ],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "doc",
    "uri": "http://basex.org/modules/json",
    "params": [
     "$href as xs:string",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Fetches the JSON document referred to by the given <code>$href</code> and converts it to an XQuery value. The <code>$options</code> argument can be used to control the way the input is converted.",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "json:parse the specified input cannot be parsed as JSON document.",
      "json:options the specified options are conflicting."
     ],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "parse",
    "uri": "http://basex.org/modules/json",
    "params": [
     "$value as xs:string?"
    ],
    "comments": {
     "description": " Converts the JSON <code>$value</code> to an XQuery value. If the input can be successfully parsed, it can be serialized back to the original JSON representation. The <code>$options</code> argument can be used to control the way the input is converted.",
     "params": {},
     "errors": [
      "json:parse the specified input cannot be parsed as JSON document.",
      "json:options the specified options are conflicting."
     ],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "parse",
    "uri": "http://basex.org/modules/json",
    "params": [
     "$value as xs:string?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Converts the JSON <code>$value</code> to an XQuery value. If the input can be successfully parsed, it can be serialized back to the original JSON representation. The <code>$options</code> argument can be used to control the way the input is converted.",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "json:parse the specified input cannot be parsed as JSON document.",
      "json:options the specified options are conflicting."
     ],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "serialize",
    "uri": "http://basex.org/modules/json",
    "params": [
     "$input as item()?"
    ],
    "comments": {
     "description": " Serializes the specified <code>$input</code> as JSON, using the specified <code>$options</code>, and returns the result as string: <ul><li>The input is expected to conform to the results that are created by <code><a href=\"https://docs.basex.org/wiki/JSON_Module#json:parse\">json:parse</a></code>.</li><li>Non-conforming items will be serialized as specified in the <a href=\"https://docs.basex.org/wiki/XQuery_3.1#JSON_Serialization\">json output method</a> of the official recommendation.</li></ul> <p>Values can also be serialized as JSON with the standard <a href=\"https://docs.basex.org/wiki/Serialization\">Serialization</a> feature of XQuery: </p> <ul><li>The parameter <code>method</code> needs to be set to <code>json</code>, and</li><li>the options presented in this article need to be assigned to the <code>json</code> parameter.</li></ul>",
     "params": {},
     "errors": [
      "json:serialize the specified node cannot be serialized as JSON document."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "serialize",
    "uri": "http://basex.org/modules/json",
    "params": [
     "$input as item()?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Serializes the specified <code>$input</code> as JSON, using the specified <code>$options</code>, and returns the result as string: <ul><li>The input is expected to conform to the results that are created by <code><a href=\"https://docs.basex.org/wiki/JSON_Module#json:parse\">json:parse</a></code>.</li><li>Non-conforming items will be serialized as specified in the <a href=\"https://docs.basex.org/wiki/XQuery_3.1#JSON_Serialization\">json output method</a> of the official recommendation.</li></ul> <p>Values can also be serialized as JSON with the standard <a href=\"https://docs.basex.org/wiki/Serialization\">Serialization</a> feature of XQuery: </p> <ul><li>The parameter <code>method</code> needs to be set to <code>json</code>, and</li><li>the options presented in this article need to be assigned to the <code>json</code> parameter.</li></ul>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "json:serialize the specified node cannot be serialized as JSON document."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions to parse and serialize JSON data <a href=\"https://www.json.org/\">JSON (JavaScript Object Notation)</a> is a popular data exchange format for applications written in JavaScript. As there are notable differences between JSON and XML, or XQuery data types, no mapping exists that guarantees a lossless, bidirectional conversion between JSON and XML. For this reason, we offer various mappings, all of which are suited to different use cases."
 },
 "http://basex.org/modules/lazy": {
  "moduleNamespace": "http://basex.org/modules/lazy",
  "prefixes": [
   "lazy"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "cache",
    "uri": "http://basex.org/modules/lazy",
    "params": [
     "$input as item()*"
    ],
    "comments": {
     "description": " Caches the data of lazy <code>$input</code> items:<br/> <ul><li>data of lazy items are retrieved and cached inside the item.</li><li>non-lazy items, or lazy items with cached data, are simply passed through.</li><li>If <code>$lazy</code> is set to <code>true()</code>, caching is deferred until the data is eventually requested. Streaming will be disabled: Data will be cached before a stream is returned.</li></ul> <p>Caching is advisable if an item is processed more than once, or if the data may not be available anymore at a later stage. </p>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "cache",
    "uri": "http://basex.org/modules/lazy",
    "params": [
     "$input as item()*",
     "$lazy as xs:boolean?"
    ],
    "comments": {
     "description": " Caches the data of lazy <code>$input</code> items:<br/> <ul><li>data of lazy items are retrieved and cached inside the item.</li><li>non-lazy items, or lazy items with cached data, are simply passed through.</li><li>If <code>$lazy</code> is set to <code>true()</code>, caching is deferred until the data is eventually requested. Streaming will be disabled: Data will be cached before a stream is returned.</li></ul> <p>Caching is advisable if an item is processed more than once, or if the data may not be available anymore at a later stage. </p>",
     "params": {
      "$lazy": "value of type xs:boolean?"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "is-lazy",
    "uri": "http://basex.org/modules/lazy",
    "params": [
     "$item as item()"
    ],
    "comments": {
     "description": " Checks whether the specified <code>$item</code> is lazy.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "is-cached",
    "uri": "http://basex.org/modules/lazy",
    "params": [
     "$item as item()"
    ],
    "comments": {
     "description": " Checks whether the contents of the specified <code>$item</code> are cached. The function will always return <code>true</code> for non-lazy items.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for handling <i>lazy</i> items."
 },
 "http://www.w3.org/2005/xpath-functions/map": {
  "moduleNamespace": "http://www.w3.org/2005/xpath-functions/map",
  "prefixes": [
   "map"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "contains",
    "uri": "http://www.w3.org/2005/xpath-functions/map",
    "params": [
     "$map as map(*)",
     "$key as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Returns true if the supplied <code>$map</code> contains an entry with a key equal to the supplied value of <code>$key</code>; otherwise it returns false. No error is raised if the map contains keys that are not comparable with the supplied <code>$key</code>. <p>If the supplied key is <code>xs:untypedAtomic</code>, it is compared as an instance of <code>xs:string</code>. If the supplied key is the <code>xs:float</code> or <code>xs:double</code> value <code>NaN</code>, the function returns true if there is an entry whose key is <code>NaN</code>, or false otherwise. </p>",
     "params": {
      "$key": "value of type xs:anyAtomicType"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "entry",
    "uri": "http://www.w3.org/2005/xpath-functions/map",
    "params": [
     "$key as xs:anyAtomicType",
     "$value as item()*"
    ],
    "comments": {
     "description": " Creates a new <i>map</i> containing a single entry. The key of the entry in the new map is <code>$key</code>, and its associated value is <code>$value</code>. <p>The function <code>map:entry</code> is intended primarily for use in conjunction with the function <code><code><a href=\"https://docs.basex.org/wiki/Map_Module#map:merge\">map:merge</a></code></code>. For example, a map containing seven entries may be constructed like this: </p> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nf\">map:merge</span><span class=\"p\">((</span> <span class=\"nf\">map:entry</span><span class=\"p\">(</span><span class=\"s2\">\"Sun\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Sunday\"</span><span class=\"p\">),</span> <span class=\"nf\">map:entry</span><span class=\"p\">(</span><span class=\"s2\">\"Mon\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Monday\"</span><span class=\"p\">),</span> <span class=\"nf\">map:entry</span><span class=\"p\">(</span><span class=\"s2\">\"Tue\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Tuesday\"</span><span class=\"p\">),</span> <span class=\"nf\">map:entry</span><span class=\"p\">(</span><span class=\"s2\">\"Wed\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Wednesday\"</span><span class=\"p\">),</span> <span class=\"nf\">map:entry</span><span class=\"p\">(</span><span class=\"s2\">\"Thu\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Thursday\"</span><span class=\"p\">),</span> <span class=\"nf\">map:entry</span><span class=\"p\">(</span><span class=\"s2\">\"Fri\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Friday\"</span><span class=\"p\">),</span> <span class=\"nf\">map:entry</span><span class=\"p\">(</span><span class=\"s2\">\"Sat\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Saturday\"</span><span class=\"p\">)</span> <span class=\"p\">))</span> </pre></div> <p>Unlike the <code>map { ... }</code> expression, this technique can be used to construct a map with a variable number of entries, for example: </p> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nf\">map:merge</span><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">$</span><span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"p\">//</span><span class=\"nt\">book</span> <span class=\"k\">return</span> <span class=\"nf\">map:entry</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">b</span><span class=\"p\">/</span><span class=\"nt\">isbn</span><span class=\"p\">,</span> <span class=\"nv\">$</span><span class=\"n\">b</span><span class=\"p\">))</span> </pre></div>",
     "params": {
      "$value": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type map(*)"
    }
   },
   {
    "name": "find",
    "uri": "http://www.w3.org/2005/xpath-functions/map",
    "params": [
     "$input as item()*",
     "$key as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Returns all values of maps in the supplied <code>$input</code> with the specified <code>$key</code>. The found values will be returned in an array. Arbitrary input will be processed recursively as follows: <ul><li>In a sequence, each item will be processed in order.</li><li>In an array, all array members will be processed as sequence.</li><li>In a map, all entries whose keys match the specified key. Moreover, all values of the map will be processed as sequence.</li></ul>",
     "params": {
      "$key": "value of type xs:anyAtomicType"
     },
     "errors": [],
     "others": [],
     "return": "value of type array(*)"
    }
   },
   {
    "name": "for-each",
    "uri": "http://www.w3.org/2005/xpath-functions/map",
    "params": [
     "$map as map(*)",
     "$action as function(xs:anyAtomicType, item()*) as item()*"
    ],
    "comments": {
     "description": " Applies the specified <code>$action</code> to every key/value pair of the supplied <code>$map</code> and returns the results as a sequence.",
     "params": {
      "$action": "value of type function(xs:anyAtomicType"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "get",
    "uri": "http://www.w3.org/2005/xpath-functions/map",
    "params": [
     "$map as map(*)",
     "$key as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Returns the value associated with a supplied key in a given map. This function attempts to find an entry within the <code>$map</code> that has a key equal to the supplied value of <code>$key</code>. If there is such an entry, the function returns the associated value; otherwise it returns an empty sequence. No error is raised if the map contains keys that are not comparable with the supplied <code>$key</code>. If the supplied key is <code>xs:untypedAtomic</code>, it is converted to <code>xs:string</code>. <p>A return value of <code>()</code> from <code>map:get</code> could indicate that the key is present in the map with an associated value of <code>()</code>, or it could indicate that the key is not present in the map. The two cases can be distinguished by calling <code>map:contains</code>. Invoking the <i>map</i> as a function item has the same effect as calling <code>get</code>: that is, when <code>$map</code> is a map, the expression <code>$map($K)</code> is equivalent to <code>get($map, $K)</code>. Similarly, the expression <code>get(get(get($map, 'employee'), 'name'), 'first')</code> can be written as <code>$map('employee')('name')('first')</code>. </p>",
     "params": {
      "$key": "value of type xs:anyAtomicType"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "keys",
    "uri": "http://www.w3.org/2005/xpath-functions/map",
    "params": [
     "$map as map(*)"
    ],
    "comments": {
     "description": " Returns a sequence containing all the key values present in a map. The function takes the supplied <code>$map</code> and returns the keys that are present in the map as a sequence of atomic values. The order may differ from the order in which entries were inserted in the map.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:anyAtomicType*"
    }
   },
   {
    "name": "merge",
    "uri": "http://www.w3.org/2005/xpath-functions/map",
    "params": [
     "$maps as map(*)*"
    ],
    "comments": {
     "description": " Constructs and returns a new map. The <i>map</i> is formed by combining the contents of the supplied <code>$maps</code>. The maps are combined as follows: <ol><li>There is one entry in the new map for each distinct key present in the union of the input maps.</li><li>The <code>$options</code> argument defines how duplicate keys are handled. Currently, a single option <code>duplicates</code> exists, and its allowed values are <code>use-first</code>, <code>use-last</code>, <code>combine</code> and <code>reject</code> (default: <code>use-first</code>).</li></ol>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type map(*)"
    }
   },
   {
    "name": "merge",
    "uri": "http://www.w3.org/2005/xpath-functions/map",
    "params": [
     "$maps as map(*)*",
     "$options as map(*)"
    ],
    "comments": {
     "description": " Constructs and returns a new map. The <i>map</i> is formed by combining the contents of the supplied <code>$maps</code>. The maps are combined as follows: <ol><li>There is one entry in the new map for each distinct key present in the union of the input maps.</li><li>The <code>$options</code> argument defines how duplicate keys are handled. Currently, a single option <code>duplicates</code> exists, and its allowed values are <code>use-first</code>, <code>use-last</code>, <code>combine</code> and <code>reject</code> (default: <code>use-first</code>).</li></ol>",
     "params": {
      "$options": "value of type map(*)"
     },
     "errors": [],
     "others": [],
     "return": "value of type map(*)"
    }
   },
   {
    "name": "put",
    "uri": "http://www.w3.org/2005/xpath-functions/map",
    "params": [
     "$map as map(*)",
     "$key as xs:anyAtomicType",
     "$value as item()*"
    ],
    "comments": {
     "description": " Creates a new <i>map</i>, containing the entries of the supplied <code>$map</code> and a new entry composed by <code>$key</code> and <code>$value</code>. The semantics of this function are equivalent to <code>map:merge((map { $key, $value }, $map))</code>",
     "params": {
      "$key": "value of type xs:anyAtomicType",
      "$value": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type map(*)"
    }
   },
   {
    "name": "remove",
    "uri": "http://www.w3.org/2005/xpath-functions/map",
    "params": [
     "$map as map(*)",
     "$keys as xs:anyAtomicType*"
    ],
    "comments": {
     "description": " Constructs a new map by removing entries from an existing map. The entries in the new map correspond to the entries of <code>$map</code>, excluding entries supplied via <code>$keys</code>. <p>No failure occurs if the input map contains no entry with the supplied keys; the input map is returned unchanged. </p>",
     "params": {
      "$keys": "value of type xs:anyAtomicType*"
     },
     "errors": [],
     "others": [],
     "return": "value of type map(*)"
    }
   },
   {
    "name": "size",
    "uri": "http://www.w3.org/2005/xpath-functions/map",
    "params": [
     "$map as map(*)"
    ],
    "comments": {
     "description": " Returns a the number of entries in the supplied map. The function takes the supplied <code>$map</code> and returns the number of entries that are present in the map.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for manipulating maps. <a href=\"https://docs.basex.org/wiki/XQuery_3.1#Maps\">Maps</a> have been introduced with <a href=\"https://docs.basex.org/wiki/XQuery_3.1\">XQuery 3.1</a>."
 },
 "http://www.w3.org/2005/xpath-functions/math": {
  "moduleNamespace": "http://www.w3.org/2005/xpath-functions/math",
  "prefixes": [
   "math"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "pi",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [],
    "comments": {
     "description": " Returns the <code>xs:double</code> value of the mathematical constant π whose lexical representation is 3.141592653589793.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double"
    }
   },
   {
    "name": "sqrt",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the square root of <code>$arg</code>.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the <code>xs:double</code> value of the mathematical square root of <code>$arg</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "sin",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the sine of the <code>$arg</code>, expressed in radians.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the sine of <code>$arg</code>, treated as an angle in radians.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "cos",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the cosine of <code>$arg</code>, expressed in radians.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the cosine of <code>$arg</code>, treated as an angle in radians.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "tan",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the tangent of <code>$arg</code>, expressed in radians.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the tangent of <code>$arg</code>, treated as an angle in radians.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "asin",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the arc sine of <code>$arg</code>.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the arc sine of <code>$arg</code>, returned as an angle in radians in the range -π/2 to +π/2.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "acos",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the arc cosine of <code>$arg</code>.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the arc cosine of <code>$arg</code>, returned as an angle in radians in the range 0 to +π.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "atan",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the arc tangent of <code>$arg</code>.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the arc tangent of <code>$arg</code>, returned as an angle in radians in the range -π/2 to +π/2.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "atan2",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg1 as xs:double?",
     "$arg2 as xs:double"
    ],
    "comments": {
     "description": " Returns the arc tangent of <code>$arg1</code> divided by <code>$arg2</code>, the result being in the range -π/2 to +π/2 radians.<br/>If <code>$arg1</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the arc tangent of <code>$arg1</code> divided by <code>$arg2</code>, returned as an angle in radians in the range -π to +π.",
     "params": {
      "$arg2": "value of type xs:double"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "pow",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg1 as xs:double?",
     "$arg2 as xs:double"
    ],
    "comments": {
     "description": " Returns <code>$arg1</code> raised to the power of <code>$arg2</code>.<br/>If <code>$arg1</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the <code>$arg1</code> raised to the power of <code>$arg2</code>.",
     "params": {
      "$arg2": "value of type xs:double"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "exp",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns <i>e</i> raised to the power of <code>$arg</code>.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the value of <i>e</i> raised to the power of <code>$arg</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "log",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the natural logarithm of <code>$arg</code>.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the natural logarithm (base <i>e</i>) of <code>$arg</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "log10",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the base 10 logarithm of <code>$arg</code>.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the base 10 logarithm of <code>$arg</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "e",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [],
    "comments": {
     "description": " Returns the <code>xs:double</code> value of the mathematical constant <i>e</i> whose lexical representation is 2.718281828459045.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double"
    }
   },
   {
    "name": "sinh",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the hyperbolic sine of <code>$arg</code>.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the hyperbolic sine of <code>$arg</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "cosh",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the hyperbolic cosine of <code>$arg</code>.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the hyperbolic cosine of <code>$arg</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "tanh",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$arg as xs:double?"
    ],
    "comments": {
     "description": " Returns the hyperbolic tangent of <code>$arg</code>.<br/>If <code>$arg</code> is the empty sequence, the empty sequence is returned.<br/>Otherwise the result is the hyperbolic tangent of <code>$arg</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double?"
    }
   },
   {
    "name": "crc32",
    "uri": "http://www.w3.org/2005/xpath-functions/math",
    "params": [
     "$string as xs:string?"
    ],
    "comments": {
     "description": " Calculates the CRC32 check sum of the given <code>$string</code>.<br/>If an empty sequence is supplied, the empty sequence is returned.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:hexBinary?"
    }
   }
  ],
  "description": " The math <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> defines functions to perform mathematical operations, such as <code>pi</code>, <code>asin</code> and <code>acos</code>. Most functions are specified in the <a href=\"https://www.w3.org/TR/xpath-functions-31/\">Functions and Operators Specification</a> of the upcoming XQuery 3.0 Recommendation, and some additional ones have been added in this module."
 },
 "http://basex.org/modules/proc": {
  "moduleNamespace": "http://basex.org/modules/proc",
  "prefixes": [
   "proc"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "system",
    "uri": "http://basex.org/modules/proc",
    "params": [
     "$command as xs:string"
    ],
    "comments": {
     "description": " Executes a <code>$command</code> with the specified <code>$arguments</code> in a separate process and returns the result as a string. The <code>$options</code> parameter contains process options: <ul><li><code>encoding</code>: convert result to the specified encoding. If no encoding is supplied, the system’s default encoding is used.</li><li><code>timeout</code>: abort process execution after the specified number of seconds.</li><li><code>dir</code>: process command in the specified directory.</li><li><code>input</code>: standard string input (<code>stdin</code>) to be passed on to the command.</li></ul>",
     "params": {},
     "errors": [
      "proc:encoding the specified encoding does not exist or is not supported.",
      "proc:timeout the specified timeout was exceeded.",
      "proc:error the command could not be executed, or an I/O exception was raised.",
      "proc:code.... If the commands returns an exit code different to 0, an error will be raised. Its code will consist of the letters <code>code</code> and four digits with the exit code."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "system",
    "uri": "http://basex.org/modules/proc",
    "params": [
     "$command as xs:string",
     "$arguments as xs:string*"
    ],
    "comments": {
     "description": " Executes a <code>$command</code> with the specified <code>$arguments</code> in a separate process and returns the result as a string. The <code>$options</code> parameter contains process options: <ul><li><code>encoding</code>: convert result to the specified encoding. If no encoding is supplied, the system’s default encoding is used.</li><li><code>timeout</code>: abort process execution after the specified number of seconds.</li><li><code>dir</code>: process command in the specified directory.</li><li><code>input</code>: standard string input (<code>stdin</code>) to be passed on to the command.</li></ul>",
     "params": {
      "$arguments": "value of type xs:string*"
     },
     "errors": [
      "proc:encoding the specified encoding does not exist or is not supported.",
      "proc:timeout the specified timeout was exceeded.",
      "proc:error the command could not be executed, or an I/O exception was raised.",
      "proc:code.... If the commands returns an exit code different to 0, an error will be raised. Its code will consist of the letters <code>code</code> and four digits with the exit code."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "system",
    "uri": "http://basex.org/modules/proc",
    "params": [
     "$command as xs:string",
     "$arguments as xs:string*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Executes a <code>$command</code> with the specified <code>$arguments</code> in a separate process and returns the result as a string. The <code>$options</code> parameter contains process options: <ul><li><code>encoding</code>: convert result to the specified encoding. If no encoding is supplied, the system’s default encoding is used.</li><li><code>timeout</code>: abort process execution after the specified number of seconds.</li><li><code>dir</code>: process command in the specified directory.</li><li><code>input</code>: standard string input (<code>stdin</code>) to be passed on to the command.</li></ul>",
     "params": {
      "$arguments": "value of type xs:string*",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "proc:encoding the specified encoding does not exist or is not supported.",
      "proc:timeout the specified timeout was exceeded.",
      "proc:error the command could not be executed, or an I/O exception was raised.",
      "proc:code.... If the commands returns an exit code different to 0, an error will be raised. Its code will consist of the letters <code>code</code> and four digits with the exit code."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "execute",
    "uri": "http://basex.org/modules/proc",
    "params": [
     "$command as xs:string"
    ],
    "comments": {
     "description": " Executes a <code>$command</code> with the specified <code>$arguments</code> in a separate process and returns the result as an element: <ul><li>The same <code>$options</code> are allowed as for <code><a href=\"https://docs.basex.org/wiki/Process_Module#proc:system\">proc:system</a></code>.</li><li>Instead of the <code>proc:error</code> error, the error message and process code will be assigned to the returned elements.</li><li>Instead of the <code>proc:code....</code> error, the error message will be assigned to the returned element (no process code will be returned).</li></ul> <p>The result has the following structure: </p> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nt\">&lt;result&gt;</span> <span class=\"nt\">&lt;output&gt;</span>...output...<span class=\"nt\">&lt;/output&gt;</span> <span class=\"nt\">&lt;error&gt;</span>...error message...<span class=\"nt\">&lt;/error&gt;</span> <span class=\"nt\">&lt;code&gt;</span>...process code...<span class=\"nt\">&lt;/code&gt;</span> <span class=\"nt\">&lt;/result&gt;</span> </pre></div>",
     "params": {},
     "errors": [
      "proc:encoding the specified encoding does not exist or is not supported.",
      "proc:timeout the specified timeout was exceeded."
     ],
     "others": [],
     "return": "value of type element(result)"
    }
   },
   {
    "name": "execute",
    "uri": "http://basex.org/modules/proc",
    "params": [
     "$command as xs:string",
     "$arguments as xs:string*"
    ],
    "comments": {
     "description": " Executes a <code>$command</code> with the specified <code>$arguments</code> in a separate process and returns the result as an element: <ul><li>The same <code>$options</code> are allowed as for <code><a href=\"https://docs.basex.org/wiki/Process_Module#proc:system\">proc:system</a></code>.</li><li>Instead of the <code>proc:error</code> error, the error message and process code will be assigned to the returned elements.</li><li>Instead of the <code>proc:code....</code> error, the error message will be assigned to the returned element (no process code will be returned).</li></ul> <p>The result has the following structure: </p> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nt\">&lt;result&gt;</span> <span class=\"nt\">&lt;output&gt;</span>...output...<span class=\"nt\">&lt;/output&gt;</span> <span class=\"nt\">&lt;error&gt;</span>...error message...<span class=\"nt\">&lt;/error&gt;</span> <span class=\"nt\">&lt;code&gt;</span>...process code...<span class=\"nt\">&lt;/code&gt;</span> <span class=\"nt\">&lt;/result&gt;</span> </pre></div>",
     "params": {
      "$arguments": "value of type xs:string*"
     },
     "errors": [
      "proc:encoding the specified encoding does not exist or is not supported.",
      "proc:timeout the specified timeout was exceeded."
     ],
     "others": [],
     "return": "value of type element(result)"
    }
   },
   {
    "name": "execute",
    "uri": "http://basex.org/modules/proc",
    "params": [
     "$command as xs:string",
     "$arguments as xs:string*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Executes a <code>$command</code> with the specified <code>$arguments</code> in a separate process and returns the result as an element: <ul><li>The same <code>$options</code> are allowed as for <code><a href=\"https://docs.basex.org/wiki/Process_Module#proc:system\">proc:system</a></code>.</li><li>Instead of the <code>proc:error</code> error, the error message and process code will be assigned to the returned elements.</li><li>Instead of the <code>proc:code....</code> error, the error message will be assigned to the returned element (no process code will be returned).</li></ul> <p>The result has the following structure: </p> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nt\">&lt;result&gt;</span> <span class=\"nt\">&lt;output&gt;</span>...output...<span class=\"nt\">&lt;/output&gt;</span> <span class=\"nt\">&lt;error&gt;</span>...error message...<span class=\"nt\">&lt;/error&gt;</span> <span class=\"nt\">&lt;code&gt;</span>...process code...<span class=\"nt\">&lt;/code&gt;</span> <span class=\"nt\">&lt;/result&gt;</span> </pre></div>",
     "params": {
      "$arguments": "value of type xs:string*",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "proc:encoding the specified encoding does not exist or is not supported.",
      "proc:timeout the specified timeout was exceeded."
     ],
     "others": [],
     "return": "value of type element(result)"
    }
   },
   {
    "name": "fork",
    "uri": "http://basex.org/modules/proc",
    "params": [
     "$command as xs:string"
    ],
    "comments": {
     "description": " Executes a <code>$command</code> with the specified <code>$arguments</code> in a separate process and ignores the result. The same <code>$options</code> are allowed as for <code><a href=\"https://docs.basex.org/wiki/Process_Module#proc:system\">proc:system</a></code> with the encoding being ignored.",
     "params": {},
     "errors": [
      "proc:encoding the specified encoding does not exist or is not supported."
     ],
     "others": [],
     "return": "value of type element(result)"
    }
   },
   {
    "name": "fork",
    "uri": "http://basex.org/modules/proc",
    "params": [
     "$command as xs:string",
     "$arguments as xs:string*"
    ],
    "comments": {
     "description": " Executes a <code>$command</code> with the specified <code>$arguments</code> in a separate process and ignores the result. The same <code>$options</code> are allowed as for <code><a href=\"https://docs.basex.org/wiki/Process_Module#proc:system\">proc:system</a></code> with the encoding being ignored.",
     "params": {
      "$arguments": "value of type xs:string*"
     },
     "errors": [
      "proc:encoding the specified encoding does not exist or is not supported."
     ],
     "others": [],
     "return": "value of type element(result)"
    }
   },
   {
    "name": "fork",
    "uri": "http://basex.org/modules/proc",
    "params": [
     "$command as xs:string",
     "$arguments as xs:string*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Executes a <code>$command</code> with the specified <code>$arguments</code> in a separate process and ignores the result. The same <code>$options</code> are allowed as for <code><a href=\"https://docs.basex.org/wiki/Process_Module#proc:system\">proc:system</a></code> with the encoding being ignored.",
     "params": {
      "$arguments": "value of type xs:string*",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "proc:encoding the specified encoding does not exist or is not supported."
     ],
     "others": [],
     "return": "value of type element(result)"
    }
   },
   {
    "name": "property",
    "uri": "http://basex.org/modules/proc",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns the system property, specified by <code>$name</code>, or a context parameter of the <code>web.xml</code> file with that name (see <a href=\"https://docs.basex.org/wiki/Web_Application#Configuration\">Web Applications</a>). An empty sequence is returned if the property does not exist. For environment variables of the operating system, please use <a href=\"https://www.w3.org/TR/xpath-functions-30/#func-environment-variable\">fn:environment-variable</a>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string?"
    }
   },
   {
    "name": "property-names",
    "uri": "http://basex.org/modules/proc",
    "params": [],
    "comments": {
     "description": " Returns the names of all Java system properties and context parameters of the <code>web.xml</code> file (see <a href=\"https://docs.basex.org/wiki/Web_Application#Configuration\">Web Applications</a>). For environment variables of the operating system, please use <a href=\"https://www.w3.org/TR/xpath-functions-30/#func-available-environment-variables\">fn:available-environment-variables</a>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> provides functions for executing system commands from XQuery."
 },
 "http://basex.org/modules/prof": {
  "moduleNamespace": "http://basex.org/modules/prof",
  "prefixes": [
   "prof"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "track",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$input as item()*"
    ],
    "comments": {
     "description": " Measures the execution time and memory consumption required for evaluating the specified <code>$input</code> and returns a map with the results. The following <code>$options</code> are available: <ul><li><code>time</code>: Include execution time in result as <code>xs:decimal</code> (unit: milliseconds; default: true).</li><li><code>memory</code>: Include memory consumption in result as <code>xs:integer</code> (unit: bytes; default: false).</li><li><code>value</code>: Include value in result (default: true).</li></ul> <p>Helpful notes: </p> <ul><li>If you are not interested in some of the returned results, you should disable them to save time and memory.</li><li>Profiling might change the execution behavior of your code: An expression that might be executed iteratively will be cached by the profiling function.</li><li>If a value has a compact internal representation, memory consumption will be very low, even if the serialized result may consume much more memory.</li><li>Please note that memory profiling is only approximative, so it can be quite misleading. If the memory option is enabled, main-memory will be garbage-collected before and after evaluation to improve the quality of the measurement.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "track",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$input as item()*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Measures the execution time and memory consumption required for evaluating the specified <code>$input</code> and returns a map with the results. The following <code>$options</code> are available: <ul><li><code>time</code>: Include execution time in result as <code>xs:decimal</code> (unit: milliseconds; default: true).</li><li><code>memory</code>: Include memory consumption in result as <code>xs:integer</code> (unit: bytes; default: false).</li><li><code>value</code>: Include value in result (default: true).</li></ul> <p>Helpful notes: </p> <ul><li>If you are not interested in some of the returned results, you should disable them to save time and memory.</li><li>Profiling might change the execution behavior of your code: An expression that might be executed iteratively will be cached by the profiling function.</li><li>If a value has a compact internal representation, memory consumption will be very low, even if the serialized result may consume much more memory.</li><li>Please note that memory profiling is only approximative, so it can be quite misleading. If the memory option is enabled, main-memory will be garbage-collected before and after evaluation to improve the quality of the measurement.</li></ul>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "time",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$input as item()"
    ],
    "comments": {
     "description": " Measures the time needed to evaluate <code>$input</code> and outputs a string to standard error or, if the GUI is used, to the Info View. An optional <code>$label</code> may be specified to tag the profiling result. See <code><a href=\"https://docs.basex.org/wiki/Profiling_Module#prof:track\">prof:track</a></code> for further notes.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "time",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$input as item()",
     "$label as xs:string?"
    ],
    "comments": {
     "description": " Measures the time needed to evaluate <code>$input</code> and outputs a string to standard error or, if the GUI is used, to the Info View. An optional <code>$label</code> may be specified to tag the profiling result. See <code><a href=\"https://docs.basex.org/wiki/Profiling_Module#prof:track\">prof:track</a></code> for further notes.",
     "params": {
      "$label": "value of type xs:string?"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "memory",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$input as item()"
    ],
    "comments": {
     "description": " Measures the memory allocated by evaluating <code>$input</code> and outputs a string to standard error or, if the GUI is used, to the Info View. An optional <code>$label</code> may be specified to tag the profiling result. See <code><a href=\"https://docs.basex.org/wiki/Profiling_Module#prof:track\">prof:track</a></code> for further notes.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "memory",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$input as item()",
     "$label as xs:string?"
    ],
    "comments": {
     "description": " Measures the memory allocated by evaluating <code>$input</code> and outputs a string to standard error or, if the GUI is used, to the Info View. An optional <code>$label</code> may be specified to tag the profiling result. See <code><a href=\"https://docs.basex.org/wiki/Profiling_Module#prof:track\">prof:track</a></code> for further notes.",
     "params": {
      "$label": "value of type xs:string?"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "current-ms",
    "uri": "http://basex.org/modules/prof",
    "params": [],
    "comments": {
     "description": " Returns the number of milliseconds passed since 1970/01/01 UTC. The granularity of the value depends on the underlying operating system and may be larger. For example, many operating systems measure time in units of tens of milliseconds.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "current-ns",
    "uri": "http://basex.org/modules/prof",
    "params": [],
    "comments": {
     "description": " Returns the current value of the most precise available system timer in nanoseconds.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "dump",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$input as item()*"
    ],
    "comments": {
     "description": " Dumps a serialized representation of <code>$input</code> to <code>STDERR</code>, optionally prefixed with <code>$label</code>, and returns an empty sequence. If the GUI is used, the dumped result is shown in the <a href=\"https://docs.basex.org/wiki/Graphical_User_Interface#Visualizations\">Info View</a>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "dump",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$input as item()*",
     "$label as xs:string?"
    ],
    "comments": {
     "description": " Dumps a serialized representation of <code>$input</code> to <code>STDERR</code>, optionally prefixed with <code>$label</code>, and returns an empty sequence. If the GUI is used, the dumped result is shown in the <a href=\"https://docs.basex.org/wiki/Graphical_User_Interface#Visualizations\">Info View</a>.",
     "params": {
      "$label": "value of type xs:string?"
     },
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "variables",
    "uri": "http://basex.org/modules/prof",
    "params": [],
    "comments": {
     "description": " Prints a list of all current local and global variable assignments to standard error or, if the GUI is used, to the Info View.<br/>As every query is optimized before being evaluated, not all of the original variables may be visible in the output. Moreover, many variables of function calls will disappear because functions are inlined. Function inlining can be turned off by setting <code><a href=\"https://docs.basex.org/wiki/Options#INLINELIMIT\">INLINELIMIT</a></code> to <code>0</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "type",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$expr as item()*"
    ],
    "comments": {
     "description": " Similar to <code>fn:trace($expr, $msg)</code>, but instead of a user-defined message, it emits the compile-time type and estimated result size of its argument.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "gc",
    "uri": "http://basex.org/modules/prof",
    "params": [],
    "comments": {
     "description": " Enforces Java garbage collection. If no <code>$count</code> is supplied, garbage will be collected once. Please note that this function should only be used for debugging purposes; in productive code, it is best to trust the garbage collecting strategies of Java.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "gc",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$count as xs:integer"
    ],
    "comments": {
     "description": " Enforces Java garbage collection. If no <code>$count</code> is supplied, garbage will be collected once. Please note that this function should only be used for debugging purposes; in productive code, it is best to trust the garbage collecting strategies of Java.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "runtime",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$option as xs:string"
    ],
    "comments": {
     "description": " Returns the value of the specified runtime <code>$option</code>. The following options are available: <ul><li><code>max</code>: Maximum memory that the Java virtual machine will attempt to use.</li><li><code>total</code>: Total memory in the Java virtual machine (varies over time).</li><li><code>used</code>: Currently used memory (varies over time, will shrink after garbage collection).</li><li><code>processors</code>: number of processors available to the Java virtual machine.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "void",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$input as item()*"
    ],
    "comments": {
     "description": " Absorbs the specified <code>$input</code> and returns an empty sequence. This function is helpful if some (often nondeterministic or side-effecting) code needs to be evaluated and if the resulting value is not required.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "sleep",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$ms as xs:integer"
    ],
    "comments": {
     "description": " Sleeps for the specified number of milliseconds.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "human",
    "uri": "http://basex.org/modules/prof",
    "params": [
     "$number as xs:integer"
    ],
    "comments": {
     "description": " Returns a human-readable representation of the specified <code>$number</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains various functions to test and profile code, and to dump information to standard output."
 },
 "http://basex.org/modules/random": {
  "moduleNamespace": "http://basex.org/modules/random",
  "prefixes": [
   "random"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "double",
    "uri": "http://basex.org/modules/random",
    "params": [],
    "comments": {
     "description": " Returns a double value between 0.0 (inclusive) and 1.0 (exclusive).<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double"
    }
   },
   {
    "name": "integer",
    "uri": "http://basex.org/modules/random",
    "params": [],
    "comments": {
     "description": " Returns an integer value, either in the whole integer range or between 0 (inclusive) and the given maximum (exclusive)<br/>",
     "params": {},
     "errors": [
      "random:bounds the maximum value is out of bounds."
     ],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "integer",
    "uri": "http://basex.org/modules/random",
    "params": [
     "$max as xs:integer"
    ],
    "comments": {
     "description": " Returns an integer value, either in the whole integer range or between 0 (inclusive) and the given maximum (exclusive)<br/>",
     "params": {},
     "errors": [
      "random:bounds the maximum value is out of bounds."
     ],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "seeded-double",
    "uri": "http://basex.org/modules/random",
    "params": [
     "$seed as xs:integer",
     "$num as xs:integer"
    ],
    "comments": {
     "description": " Returns a sequence with <code>$num</code> double values between 0.0 (inclusive) and 1.0 (exclusive). The random values are created using the initial seed given in <code>$seed</code>.<br/>",
     "params": {
      "$num": "value of type xs:integer"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:double*"
    }
   },
   {
    "name": "seeded-integer",
    "uri": "http://basex.org/modules/random",
    "params": [
     "$seed as xs:integer",
     "$num as xs:integer"
    ],
    "comments": {
     "description": " Returns a sequence with <code>$num</code> integer values, either in the whole integer range or between 0 (inclusive) and the given maximum (exclusive). The random values are created using the initial seed given in <code>$seed</code>.<br/>",
     "params": {
      "$num": "value of type xs:integer"
     },
     "errors": [
      "random:bounds the maximum value is out of bounds.",
      "random:negative the number of values to be returned is negative."
     ],
     "others": [],
     "return": "value of type xs:integer*"
    }
   },
   {
    "name": "seeded-integer",
    "uri": "http://basex.org/modules/random",
    "params": [
     "$seed as xs:integer",
     "$num as xs:integer",
     "$max as xs:integer"
    ],
    "comments": {
     "description": " Returns a sequence with <code>$num</code> integer values, either in the whole integer range or between 0 (inclusive) and the given maximum (exclusive). The random values are created using the initial seed given in <code>$seed</code>.<br/>",
     "params": {
      "$num": "value of type xs:integer",
      "$max": "value of type xs:integer"
     },
     "errors": [
      "random:bounds the maximum value is out of bounds.",
      "random:negative the number of values to be returned is negative."
     ],
     "others": [],
     "return": "value of type xs:integer*"
    }
   },
   {
    "name": "gaussian",
    "uri": "http://basex.org/modules/random",
    "params": [
     "$num as xs:integer"
    ],
    "comments": {
     "description": " Returns a sequence with <code>$num</code> double values. The random values are Gaussian (i.e. normally) distributed with the mean 0.0. and the derivation 1.0.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:double*"
    }
   },
   {
    "name": "seeded-permutation",
    "uri": "http://basex.org/modules/random",
    "params": [
     "$seed as xs:integer",
     "$items as item()*"
    ],
    "comments": {
     "description": " Returns a random permutation of the specified <code>$items</code>. The random order is created using the initial seed given in <code>$seed</code>.<br/>",
     "params": {
      "$items": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "uuid",
    "uri": "http://basex.org/modules/random",
    "params": [],
    "comments": {
     "description": " Creates a random universally unique identifier (UUID), represented as 128-bit value.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for computing random values. All functions except for <code><a href=\"https://docs.basex.org/wiki/Random_Module#random:seeded-double\">random:seeded-double</a></code> and <code><a href=\"https://docs.basex.org/wiki/Random_Module#random:seeded-integer\">random:seeded-integer</a></code> are non-deterministic, i. e., they return different values for each call."
 },
 "http://basex.org/modules/repo": {
  "moduleNamespace": "http://basex.org/modules/repo",
  "prefixes": [
   "repo"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "install",
    "uri": "http://basex.org/modules/repo",
    "params": [
     "$href as xs:string"
    ],
    "comments": {
     "description": " Retrieves and installs a package from the given <code>$href</code> location. Existing packages are replaced.",
     "params": {},
     "errors": [
      "repo:not-found a package does not exist.",
      "repo:descriptor the package descriptor is invalid.",
      "repo:installed the module contained in the package to be installed is already installed as part of another package.",
      "repo:parse an error occurred while parsing the package.",
      "repo:version the package version is not supported."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "delete",
    "uri": "http://basex.org/modules/repo",
    "params": [
     "$package as xs:string"
    ],
    "comments": {
     "description": " Deletes a <code>$package</code>. The argument contains the package name, optionally suffixed with a dash and the package version.<br/>",
     "params": {},
     "errors": [
      "repo:not-found a package does not exist.",
      "repo:delete the package cannot be deleted."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "list",
    "uri": "http://basex.org/modules/repo",
    "params": [],
    "comments": {
     "description": " Lists the names and versions of all currently installed packages.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(package)*"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for installing, listing and deleting modules contained in the <a href=\"https://docs.basex.org/wiki/Repository\">Repository</a>."
 },
 "http://exquery.org/ns/request": {
  "moduleNamespace": "http://exquery.org/ns/request",
  "prefixes": [
   "request"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "method",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the Method of the HTTP request.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "scheme",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the Scheme component of the URI of an HTTP request.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "hostname",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the Hostname component of the URI of an HTTP request.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "port",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the Port component of the URI of an HTTP request, or a default port if it has not been explicitly specified in the URI.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:integer"
    }
   },
   {
    "name": "path",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the Path component of the URI of an HTTP request.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "query",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the Query component of the URI of an HTTP request. If no query component exists, an empty sequence is returned.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string?"
    }
   },
   {
    "name": "uri",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the complete URI of an HTTP request as it has been specified by the client.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:anyURI"
    }
   },
   {
    "name": "context-path",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the context of the request. For servlets in the default (root) context, this method returns an empty string.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "address",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the IP address of the server.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "remote-hostname",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the fully qualified hostname of the client that sent the request.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "remote-address",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the IP address of the client that sent the request.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "remote-port",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the TCP port of the client socket that triggered the request.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "parameter-names",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the names of all query and form field parameters available from the HTTP request. With <a href=\"https://docs.basex.org/wiki/RESTXQ\">RESTXQ</a>, this function can be used to access parameters that have not been statically bound by <a href=\"https://docs.basex.org/wiki/RESTXQ#Query_Parameters\">%rest:query-param</a>.",
     "params": {},
     "errors": [
      "request:parameter the request has invalid parameters."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "parameter",
    "uri": "http://exquery.org/ns/request",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns the value of the named query or form field parameter in an HTTP request. If the parameter does not exist, an empty sequence or the optionally specified default value is returned instead. If both query and form field parameters with the same name exist, the form field values will be attached to the query values.",
     "params": {},
     "errors": [
      "request:parameter the request has invalid parameters."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "parameter",
    "uri": "http://exquery.org/ns/request",
    "params": [
     "$name as xs:string",
     "$default as xs:string"
    ],
    "comments": {
     "description": " Returns the value of the named query or form field parameter in an HTTP request. If the parameter does not exist, an empty sequence or the optionally specified default value is returned instead. If both query and form field parameters with the same name exist, the form field values will be attached to the query values.",
     "params": {
      "$default": "value of type xs:string"
     },
     "errors": [
      "request:parameter the request has invalid parameters."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "header-names",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the names of all headers available from the HTTP request. If <a href=\"https://docs.basex.org/wiki/RESTXQ\">RESTXQ</a> is used, this function can be used to access headers that have not been statically bound by <a href=\"https://docs.basex.org/wiki/RESTXQ#HTTP_Headers\">%rest:header-param</a>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "header",
    "uri": "http://exquery.org/ns/request",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns the value of the named header in an HTTP request. If the header does not exist, an empty sequence or the optionally specified default value is returned instead.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string?"
    }
   },
   {
    "name": "header",
    "uri": "http://exquery.org/ns/request",
    "params": [
     "$name as xs:string",
     "$default as xs:string"
    ],
    "comments": {
     "description": " Returns the value of the named header in an HTTP request. If the header does not exist, an empty sequence or the optionally specified default value is returned instead.",
     "params": {
      "$default": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string?"
    }
   },
   {
    "name": "cookie-names",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the names of all cookies in the HTTP headers available from the HTTP request. If <a href=\"https://docs.basex.org/wiki/RESTXQ\">RESTXQ</a> is used, this function can be used to access cookies that have not been statically bound by <a href=\"https://docs.basex.org/wiki/RESTXQ#Cookies\">%rest:cookie-param</a>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "cookie",
    "uri": "http://exquery.org/ns/request",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns the value of the named Cookie in an HTTP request. If there is no such cookie, an empty sequence or the optionally specified default value is returned instead.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string?"
    }
   },
   {
    "name": "cookie",
    "uri": "http://exquery.org/ns/request",
    "params": [
     "$name as xs:string",
     "$default as xs:string"
    ],
    "comments": {
     "description": " Returns the value of the named Cookie in an HTTP request. If there is no such cookie, an empty sequence or the optionally specified default value is returned instead.",
     "params": {
      "$default": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string?"
    }
   },
   {
    "name": "attribute-names",
    "uri": "http://exquery.org/ns/request",
    "params": [],
    "comments": {
     "description": " Returns the names of all HTTP request attributes.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "attribute",
    "uri": "http://exquery.org/ns/request",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns the value of an attribute of the HTTP request. If the attribute does not exist, an empty sequence or the optionally specified default value is returned instead.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "attribute",
    "uri": "http://exquery.org/ns/request",
    "params": [
     "$name as xs:string",
     "$default as item()*"
    ],
    "comments": {
     "description": " Returns the value of an attribute of the HTTP request. If the attribute does not exist, an empty sequence or the optionally specified default value is returned instead.",
     "params": {
      "$default": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "set-attribute",
    "uri": "http://exquery.org/ns/request",
    "params": [
     "$name as xs:string",
     "$value as item()*"
    ],
    "comments": {
     "description": " Binds the specified <code>$value</code> to the request attribute with the specified <code>$name</code>.",
     "params": {
      "$value": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for retrieving information on an HTTP request that has triggered the query. It is mostly useful when building <a href=\"https://docs.basex.org/wiki/Web_Application\">Web Applications</a>."
 },
 "http://exquery.org/ns/restxq": {
  "moduleNamespace": "http://exquery.org/ns/restxq",
  "prefixes": [
   "rest"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "base-uri",
    "uri": "http://exquery.org/ns/restxq",
    "params": [],
    "comments": {
     "description": " Returns the implementation-defined base URI of the resource function.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:anyURI"
    }
   },
   {
    "name": "uri",
    "uri": "http://exquery.org/ns/restxq",
    "params": [],
    "comments": {
     "description": " Returns the complete URI that addresses the Resource Function. This is the result of <code><a href=\"https://docs.basex.org/wiki/RESTXQ_Module#rest:base-uri\">rest:base-uri</a></code> appended with the path from the path annotation of the resource function.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:anyURI"
    }
   },
   {
    "name": "wadl",
    "uri": "http://exquery.org/ns/restxq",
    "params": [],
    "comments": {
     "description": " Returns a <a href=\"https://www.w3.org/Submission/wadl\">WADL description</a> of all available REST services.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(wadl:application)"
    }
   },
   {
    "name": "init",
    "uri": "http://exquery.org/ns/restxq",
    "params": [],
    "comments": {
     "description": " Initializes the RESTXQ module cache: <ul><li>By default, the cache will be discarded, and all modules will be parsed and cached again.</li><li>If <code>$update</code> is enabled, the background caching behavior is simulated (see <code><a href=\"https://docs.basex.org/wiki/Options#PARSERESTXQ\">PARSERESTXQ</a></code>): Only updated modules will be parsed.</li><li>This function should be called if new RESTXQ code is deployed at runtime.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "init",
    "uri": "http://exquery.org/ns/restxq",
    "params": [
     "$update as xs:boolean?"
    ],
    "comments": {
     "description": " Initializes the RESTXQ module cache: <ul><li>By default, the cache will be discarded, and all modules will be parsed and cached again.</li><li>If <code>$update</code> is enabled, the background caching behavior is simulated (see <code><a href=\"https://docs.basex.org/wiki/Options#PARSERESTXQ\">PARSERESTXQ</a></code>): Only updated modules will be parsed.</li><li>This function should be called if new RESTXQ code is deployed at runtime.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains helper functions for the <a href=\"https://docs.basex.org/wiki/RESTXQ\">RESTXQ</a> API, some of which are defined in the <a href=\"http://exquery.github.io/exquery/exquery-restxq-specification/restxq-1.0-specification.html\">RESTXQ Draft</a>."
 },
 "http://basex.org/modules/session": {
  "moduleNamespace": "http://basex.org/modules/session",
  "prefixes": [
   "session"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "id",
    "uri": "http://basex.org/modules/session",
    "params": [],
    "comments": {
     "description": " Returns the session ID of a servlet request.",
     "params": {},
     "errors": [
      "session:not-found No session is available for the current client."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "created",
    "uri": "http://basex.org/modules/session",
    "params": [],
    "comments": {
     "description": " Returns the creation time of a session.",
     "params": {},
     "errors": [
      "session:not-found No session is available for the current client."
     ],
     "others": [],
     "return": "value of type xs:dateTime"
    }
   },
   {
    "name": "accessed",
    "uri": "http://basex.org/modules/session",
    "params": [],
    "comments": {
     "description": " Returns the last access time of a session.",
     "params": {},
     "errors": [
      "session:not-found No session is available for the current client."
     ],
     "others": [],
     "return": "value of type xs:dateTime"
    }
   },
   {
    "name": "names",
    "uri": "http://basex.org/modules/session",
    "params": [],
    "comments": {
     "description": " Returns the names of all attributes bound to the current session.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "get",
    "uri": "http://basex.org/modules/session",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns the value of a session attribute with the specified <code>$name</code>. If the attribute is unknown, an empty sequence or the optionally specified <code>$default</code> value will be returned instead.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "get",
    "uri": "http://basex.org/modules/session",
    "params": [
     "$name as xs:string",
     "$default as item()*"
    ],
    "comments": {
     "description": " Returns the value of a session attribute with the specified <code>$name</code>. If the attribute is unknown, an empty sequence or the optionally specified <code>$default</code> value will be returned instead.",
     "params": {
      "$default": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "set",
    "uri": "http://basex.org/modules/session",
    "params": [
     "$name as xs:string",
     "$value as item()*"
    ],
    "comments": {
     "description": " Binds the specified <code>$value</code> to the session attribute with the specified <code>$name</code>.",
     "params": {
      "$value": "value of type item()*"
     },
     "errors": [
      "session:not-found No session is available for the current client."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "delete",
    "uri": "http://basex.org/modules/session",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Deletes a session attribute with the specified <code>$name</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "close",
    "uri": "http://basex.org/modules/session",
    "params": [],
    "comments": {
     "description": " Unregisters a session and all data associated with it.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for accessing and modifying server-side session information. This module is mainly useful in the context of <a href=\"https://docs.basex.org/wiki/Web_Application\">Web Applications</a>."
 },
 "http://basex.org/modules/sessions": {
  "moduleNamespace": "http://basex.org/modules/sessions",
  "prefixes": [
   "sessions"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "ids",
    "uri": "http://basex.org/modules/sessions",
    "params": [],
    "comments": {
     "description": " Returns the IDs of all registered sessions.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "created",
    "uri": "http://basex.org/modules/sessions",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Returns the creation time of the session specified by <code>$id</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:dateTime"
    }
   },
   {
    "name": "accessed",
    "uri": "http://basex.org/modules/sessions",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Returns the last access time of the session specified by <code>$id</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:dateTime"
    }
   },
   {
    "name": "names",
    "uri": "http://basex.org/modules/sessions",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Returns the names of all attributes bound to the session specified by <code>$id</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "get",
    "uri": "http://basex.org/modules/sessions",
    "params": [
     "$id as xs:string",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns the value of an attribute with the specified <code>$name</code> from the session with the specified <code>$id</code>. If the attribute is unknown, an empty sequence or the optionally specified <code>$default</code> value will be returned instead.",
     "params": {
      "$name": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "get",
    "uri": "http://basex.org/modules/sessions",
    "params": [
     "$id as xs:string",
     "$name as xs:string",
     "$default as item()*"
    ],
    "comments": {
     "description": " Returns the value of an attribute with the specified <code>$name</code> from the session with the specified <code>$id</code>. If the attribute is unknown, an empty sequence or the optionally specified <code>$default</code> value will be returned instead.",
     "params": {
      "$name": "value of type xs:string",
      "$default": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "set",
    "uri": "http://basex.org/modules/sessions",
    "params": [
     "$id as xs:string",
     "$name as xs:string",
     "$value as item()*"
    ],
    "comments": {
     "description": " Returns the specified <code>value</code> to the attribute with the specified <code>$name</code> from the session with the specified <code>$id</code>.",
     "params": {
      "$name": "value of type xs:string",
      "$value": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "delete",
    "uri": "http://basex.org/modules/sessions",
    "params": [
     "$id as xs:string",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Deletes an attribute with the specified <code>$name</code> from the session with the specified <code>$id</code>.",
     "params": {
      "$name": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "close",
    "uri": "http://basex.org/modules/sessions",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Unregisters the session specified by <code>$id</code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> can only be called from users with <i>Admin</i> permissions. It contains functions for accessing and modifying all registered server-side sessions. This module is mainly useful in the context of <a href=\"https://docs.basex.org/wiki/Web_Application\">Web Applications</a>."
 },
 "http://basex.org/modules/sql": {
  "moduleNamespace": "http://basex.org/modules/sql",
  "prefixes": [
   "sql"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "init",
    "uri": "http://basex.org/modules/sql",
    "params": [
     "$class as xs:string"
    ],
    "comments": {
     "description": " This function initializes a JDBC driver specified via <code>$class</code>. This step might be superfluous if the SQL database is not embedded.<br/>",
     "params": {},
     "errors": [
      "sql:init the specified driver is not found."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "connect",
    "uri": "http://basex.org/modules/sql",
    "params": [
     "$url as xs:string"
    ],
    "comments": {
     "description": " This function establishes a connection to a relational database and returns a connection id. The parameter <code>$url</code> is the URL of the database and shall be of the form: <code>jdbc:&lt;driver name&gt;:<a href=\"https://docs.basex.org//\">&lt;server&gt; [/&lt;database&gt;</a>]</code>. Values specified for <code>$username</code> and <code>$password</code> are used as credentials for connecting to the database. The <code>$options</code> parameter can be used to set connection options.",
     "params": {},
     "errors": [
      "sql:error an SQL exception occurred when connecting to the database."
     ],
     "others": [],
     "return": "value of type xs:anyURI"
    }
   },
   {
    "name": "connect",
    "uri": "http://basex.org/modules/sql",
    "params": [
     "$url as xs:string",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " This function establishes a connection to a relational database and returns a connection id. The parameter <code>$url</code> is the URL of the database and shall be of the form: <code>jdbc:&lt;driver name&gt;:<a href=\"https://docs.basex.org//\">&lt;server&gt; [/&lt;database&gt;</a>]</code>. Values specified for <code>$username</code> and <code>$password</code> are used as credentials for connecting to the database. The <code>$options</code> parameter can be used to set connection options.",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "sql:error an SQL exception occurred when connecting to the database."
     ],
     "others": [],
     "return": "value of type xs:anyURI"
    }
   },
   {
    "name": "execute",
    "uri": "http://basex.org/modules/sql",
    "params": [
     "$id as xs:anyURI",
     "$statement as xs:string"
    ],
    "comments": {
     "description": " This function executes an SQL <code>$statement</code>, using the connection with the specified <code>$id</code>. The returned result depends on the kind of statement: <ul><li>If an update statement was executed, the number of updated rows will be returned as integer.</li><li>Otherwise, an XML representation of all results will be returned.</li></ul> <p>With <code>$options</code>, the following parameter can be set: </p> <ul><li><code>timeout</code>: query execution will be interrupted after the specified number of seconds.</li></ul>",
     "params": {
      "$statement": "value of type xs:string"
     },
     "errors": [
      "sql:error an error occurred while executing SQL.",
      "sql:id the specified connection does not exist.",
      "sql:timeout query execution exceeded timeout."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "execute",
    "uri": "http://basex.org/modules/sql",
    "params": [
     "$id as xs:anyURI",
     "$statement as xs:string",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " This function executes an SQL <code>$statement</code>, using the connection with the specified <code>$id</code>. The returned result depends on the kind of statement: <ul><li>If an update statement was executed, the number of updated rows will be returned as integer.</li><li>Otherwise, an XML representation of all results will be returned.</li></ul> <p>With <code>$options</code>, the following parameter can be set: </p> <ul><li><code>timeout</code>: query execution will be interrupted after the specified number of seconds.</li></ul>",
     "params": {
      "$statement": "value of type xs:string",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "sql:error an error occurred while executing SQL.",
      "sql:id the specified connection does not exist.",
      "sql:timeout query execution exceeded timeout."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "execute-prepared",
    "uri": "http://basex.org/modules/sql",
    "params": [
     "$id as xs:anyURI",
     "$params as element(sql:parameters)"
    ],
    "comments": {
     "description": " This function executes a prepared statement with the specified <code>$id</code>. The output format is identical to <code><a href=\"https://docs.basex.org/wiki/SQL_Module#sql:execute\">sql:execute</a></code>. The optional parameter <code>$params</code> is an element <code>&lt;sql:parameters/&gt;</code> representing the parameters for a prepared statement along with their types and values. The following schema shall be used:<br/> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"k\">element</span> <span class=\"nv\">sql:parameters</span> <span class=\"p\">{</span> <span class=\"k\">element</span> <span class=\"nv\">sql:parameter</span> <span class=\"p\">{</span> <span class=\"k\">attribute</span> <span class=\"nv\">type</span> <span class=\"p\">{</span> <span class=\"s2\">\"bigdecimal\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"boolean\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"byte\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"date\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"double\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"float\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"int\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"long\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"short\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"sqlxml\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"string\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"time\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"p\">},</span> <span class=\"k\">attribute</span> <span class=\"nv\">null</span> <span class=\"p\">{</span> <span class=\"s2\">\"true\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"false\"</span> <span class=\"p\">}?,</span> <span class=\"nt\">text</span> <span class=\"p\">}</span><span class=\"o\">+</span> <span class=\"p\">}</span><span class=\"err\">?</span> </pre></div> <p>With <code>$options</code>, the following parameter can be set: </p> <ul><li><code>timeout</code>: query execution will be interrupted after the specified number of seconds.</li></ul>",
     "params": {
      "$params": "value of type element(sql:parameters)"
     },
     "errors": [
      "sql:attribute an attribute different from <code>type</code> and <code>null</code> is set for a <code>&lt;sql:parameter/&gt;</code> element.",
      "sql:error an error occurred while executing SQL.",
      "sql:id the specified connection does not exist.",
      "sql:parameters no parameter type specified.",
      "sql:timeout query execution exceeded timeout.",
      "sql:type the value of a parameter cannot be converted to the specified format."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "execute-prepared",
    "uri": "http://basex.org/modules/sql",
    "params": [
     "$id as xs:anyURI",
     "$params as element(sql:parameters)",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " This function executes a prepared statement with the specified <code>$id</code>. The output format is identical to <code><a href=\"https://docs.basex.org/wiki/SQL_Module#sql:execute\">sql:execute</a></code>. The optional parameter <code>$params</code> is an element <code>&lt;sql:parameters/&gt;</code> representing the parameters for a prepared statement along with their types and values. The following schema shall be used:<br/> <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"k\">element</span> <span class=\"nv\">sql:parameters</span> <span class=\"p\">{</span> <span class=\"k\">element</span> <span class=\"nv\">sql:parameter</span> <span class=\"p\">{</span> <span class=\"k\">attribute</span> <span class=\"nv\">type</span> <span class=\"p\">{</span> <span class=\"s2\">\"bigdecimal\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"boolean\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"byte\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"date\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"double\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"float\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"int\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"long\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"short\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"sqlxml\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"string\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"time\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"p\">},</span> <span class=\"k\">attribute</span> <span class=\"nv\">null</span> <span class=\"p\">{</span> <span class=\"s2\">\"true\"</span> <span class=\"o\">|</span> <span class=\"s2\">\"false\"</span> <span class=\"p\">}?,</span> <span class=\"nt\">text</span> <span class=\"p\">}</span><span class=\"o\">+</span> <span class=\"p\">}</span><span class=\"err\">?</span> </pre></div> <p>With <code>$options</code>, the following parameter can be set: </p> <ul><li><code>timeout</code>: query execution will be interrupted after the specified number of seconds.</li></ul>",
     "params": {
      "$params": "value of type element(sql:parameters)",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "sql:attribute an attribute different from <code>type</code> and <code>null</code> is set for a <code>&lt;sql:parameter/&gt;</code> element.",
      "sql:error an error occurred while executing SQL.",
      "sql:id the specified connection does not exist.",
      "sql:parameters no parameter type specified.",
      "sql:timeout query execution exceeded timeout.",
      "sql:type the value of a parameter cannot be converted to the specified format."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "prepare",
    "uri": "http://basex.org/modules/sql",
    "params": [
     "$id as xs:anyURI",
     "$statement as xs:string"
    ],
    "comments": {
     "description": " This function prepares an SQL <code>$statement</code>, using the specified connection <code>$id</code>, and returns the id reference to this statement. The statement is a string with one or more '?' placeholders. If the value of a field has to be set to <code>NULL</code>, then the attribute <code>null</code> of the <code>&lt;sql:parameter/&gt;</code> element must be <code>true</code>.",
     "params": {
      "$statement": "value of type xs:string"
     },
     "errors": [
      "sql:error an error occurred while executing SQL.",
      "sql:id the specified connection does not exist."
     ],
     "others": [],
     "return": "value of type xs:anyURI"
    }
   },
   {
    "name": "commit",
    "uri": "http://basex.org/modules/sql",
    "params": [
     "$id as xs:anyURI"
    ],
    "comments": {
     "description": " This function commits the changes made to a relational database, using the specified connection <code>$id</code>.",
     "params": {},
     "errors": [
      "sql:error an error occurred while executing SQL.",
      "sql:id the specified connection does not exist."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "rollback",
    "uri": "http://basex.org/modules/sql",
    "params": [
     "$id as xs:anyURI"
    ],
    "comments": {
     "description": " This function rolls back the changes made to a relational database, using the specified connection <code>$id</code>.",
     "params": {},
     "errors": [
      "sql:error an error occurred while executing SQL.",
      "sql:id the specified connection does not exist."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "close",
    "uri": "http://basex.org/modules/sql",
    "params": [
     "$id as xs:anyURI"
    ],
    "comments": {
     "description": " This function closes a database connection with the specified <code>$id</code>.<br/>Opened connections will automatically be closed after the XQuery expression has been evaluated, but in order to save memory, it is always recommendable to close connections that are not used anymore.",
     "params": {},
     "errors": [
      "sql:error an error occurred while executing SQL.",
      "sql:id the specified connection does not exist."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions to access relational databases from XQuery using SQL. With this module, you can execute query, update and prepared statements, and the result sets are returned as sequences of XML elements representing tuples. Each element has children representing the columns returned by the SQL statement."
 },
 "http://basex.org/modules/store": {
  "moduleNamespace": "http://basex.org/modules/store",
  "prefixes": [
   "store"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "get",
    "uri": "http://basex.org/modules/store",
    "params": [
     "$key as xs:string"
    ],
    "comments": {
     "description": " Retrieves an entry from the store with the given <code>$key</code>. If the addressed entry does not exist, an empty sequence is returned.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "put",
    "uri": "http://basex.org/modules/store",
    "params": [
     "$key as xs:string",
     "$value as item()*"
    ],
    "comments": {
     "description": " Stores an entry with the given <code>$key</code> and <code>$value</code> in the store: <ul><li>If the value is an empty sequence, the entry is removed.</li><li>If a value refers to an opened database or is <a href=\"https://docs.basex.org/wiki/Lazy_Module\">a lazy item</a>, its contents are materialized in main memory.</li><li>Values with function items are rejected.</li></ul>",
     "params": {
      "$value": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "get-or-put",
    "uri": "http://basex.org/modules/store",
    "params": [
     "$key as xs:string",
     "$put as function(*)"
    ],
    "comments": {
     "description": " Retrieves an entry from the store with the given <code>$key</code>. The <code>$put</code> function will only be invoked if the entry does not exist, and its result will be stored and returned instead.",
     "params": {
      "$put": "value of type function(*)"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "remove",
    "uri": "http://basex.org/modules/store",
    "params": [
     "$key as xs:string"
    ],
    "comments": {
     "description": " Removes an entry with the given <code>$key</code> from the store. No error will be raised if an addressed entry does not exist.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "keys",
    "uri": "http://basex.org/modules/store",
    "params": [],
    "comments": {
     "description": " Lists the names of all keys.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "clear",
    "uri": "http://basex.org/modules/store",
    "params": [],
    "comments": {
     "description": " Resets the store by removing all its entries.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "read",
    "uri": "http://basex.org/modules/store",
    "params": [],
    "comments": {
     "description": " Retrieves the standard store from disk, or a custom store if a <code>$name</code> is supplied.",
     "params": {},
     "errors": [
      "store:io The store could not be read.",
      "store:name The specified name is invalid.",
      "store:not-found A store with the specified name does not exist."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "read",
    "uri": "http://basex.org/modules/store",
    "params": [
     "$name as xs:string?"
    ],
    "comments": {
     "description": " Retrieves the standard store from disk, or a custom store if a <code>$name</code> is supplied.",
     "params": {},
     "errors": [
      "store:io The store could not be read.",
      "store:name The specified name is invalid.",
      "store:not-found A store with the specified name does not exist."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write",
    "uri": "http://basex.org/modules/store",
    "params": [],
    "comments": {
     "description": " Writes the standard store to disk, or to a custom store file if a <code>$name</code> is supplied. If the standard store is empty, the store file will be deleted.",
     "params": {},
     "errors": [
      "store:io The store could not be written.",
      "store:name The specified name is invalid."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "write",
    "uri": "http://basex.org/modules/store",
    "params": [
     "$name as xs:string?"
    ],
    "comments": {
     "description": " Writes the standard store to disk, or to a custom store file if a <code>$name</code> is supplied. If the standard store is empty, the store file will be deleted.",
     "params": {},
     "errors": [
      "store:io The store could not be written.",
      "store:name The specified name is invalid."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "list",
    "uri": "http://basex.org/modules/store",
    "params": [],
    "comments": {
     "description": " Lists the names of all custom stores.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "delete",
    "uri": "http://basex.org/modules/store",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Deletes a custom store from disk.",
     "params": {},
     "errors": [
      "store:name The specified name is invalid.",
      "store:not-found A store with the specified name does not exist."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> provides functions to organize values in a persistent main-memory key-value store."
 },
 "http://basex.org/modules/string": {
  "moduleNamespace": "http://basex.org/modules/string",
  "prefixes": [
   "string"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "levenshtein",
    "uri": "http://basex.org/modules/string",
    "params": [
     "$string1 as xs:string",
     "$string2 as xs:string"
    ],
    "comments": {
     "description": " Computes the <a href=\"https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\">Damerau-Levenshtein Distance</a> for two strings and returns a double value (<code>0.0</code> - <code>1.0</code>). The returned value is computed as follows:<br/> <ul><li><code>1.0</code> – distance / max(length of strings)</li><li><code>1.0</code> is returned if the strings are equal; <code>0.0</code> is returned if the strings are too different.</li></ul>",
     "params": {
      "$string2": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:double"
    }
   },
   {
    "name": "soundex",
    "uri": "http://basex.org/modules/string",
    "params": [
     "$string as xs:string"
    ],
    "comments": {
     "description": " Computes the <a href=\"https://en.wikipedia.org/wiki/Soundex\">Soundex</a> value for the specified string. The algorithm can be used to find and index English words with similar pronouncation.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "cologne-phonetic",
    "uri": "http://basex.org/modules/string",
    "params": [
     "$string as xs:string"
    ],
    "comments": {
     "description": " Computes the <a href=\"https://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\">Kölner Phonetik</a> value for the specified string. Similar to Soundex, the algorithm is used to find similarly pronounced words, but for the German language. As the first returned digit can be <code>0</code>, the value is returned as string.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "format",
    "uri": "http://basex.org/modules/string",
    "params": [
     "$format as xs:string",
     "$inputs as item()"
    ],
    "comments": {
     "description": " Returns a formatted string. The remaining <code>$input</code> are inserted to the <code>$format</code> string, according to <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax\">Java’s printf syntax</a>.",
     "params": {
      "$inputs": "value of type item("
     },
     "errors": [
      "string:format The specified format is not valid."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "cr",
    "uri": "http://basex.org/modules/string",
    "params": [],
    "comments": {
     "description": " Returns a single carriage return character (<code>&amp;#13;</code>).",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "nl",
    "uri": "http://basex.org/modules/string",
    "params": [],
    "comments": {
     "description": " Returns a single newline character (<code>&amp;#10;</code>).",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "tab",
    "uri": "http://basex.org/modules/string",
    "params": [],
    "comments": {
     "description": " Returns a single tabulator character (<code>&amp;#9;</code>).",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   }
  ],
  "description": " <font color=\"orangered\">Updated with Version 10:</font> Renamed from <i>Strings Module</i> to <i>String Module</i>. The namespace URI has been updated as well."
 },
 "http://basex.org/modules/unit": {
  "moduleNamespace": "http://basex.org/modules/unit",
  "prefixes": [
   "unit"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "assert",
    "uri": "http://basex.org/modules/unit",
    "params": [
     "$test as item()*"
    ],
    "comments": {
     "description": " Asserts that the effective boolean value of the specified <code>$test</code> is true and returns an empty sequence. Otherwise, raises an error. The <i>effective boolean value</i> of an expression can be explicitly computed by using the <code>fn:boolean</code> function.<br/>The default failure message can be overridden with the <code>$info</code> argument.",
     "params": {},
     "errors": [
      "unit:fail the assertion failed, or an error was raised."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "assert",
    "uri": "http://basex.org/modules/unit",
    "params": [
     "$test as item()*",
     "$info as item()"
    ],
    "comments": {
     "description": " Asserts that the effective boolean value of the specified <code>$test</code> is true and returns an empty sequence. Otherwise, raises an error. The <i>effective boolean value</i> of an expression can be explicitly computed by using the <code>fn:boolean</code> function.<br/>The default failure message can be overridden with the <code>$info</code> argument.",
     "params": {
      "$info": "value of type item()"
     },
     "errors": [
      "unit:fail the assertion failed, or an error was raised."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "assert-equals",
    "uri": "http://basex.org/modules/unit",
    "params": [
     "$returned as item()*",
     "$expected as item()*"
    ],
    "comments": {
     "description": " Asserts that the specified arguments are equal according to the rules of the <a href=\"https://www.w3.org/TR/xpath-functions-31/#func-deep-equal\"><code>fn:deep-equal</code> function</a>. Otherwise, raises an error.<br/>The default failure message can be overridden with the <code>$info</code> argument.",
     "params": {
      "$expected": "value of type item()*"
     },
     "errors": [
      "unit:fail the assertion failed, or an error was raised."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "assert-equals",
    "uri": "http://basex.org/modules/unit",
    "params": [
     "$returned as item()*",
     "$expected as item()*",
     "$info as item()"
    ],
    "comments": {
     "description": " Asserts that the specified arguments are equal according to the rules of the <a href=\"https://www.w3.org/TR/xpath-functions-31/#func-deep-equal\"><code>fn:deep-equal</code> function</a>. Otherwise, raises an error.<br/>The default failure message can be overridden with the <code>$info</code> argument.",
     "params": {
      "$expected": "value of type item()*",
      "$info": "value of type item()"
     },
     "errors": [
      "unit:fail the assertion failed, or an error was raised."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "fail",
    "uri": "http://basex.org/modules/unit",
    "params": [],
    "comments": {
     "description": " Raises a unit error. The default failure message can be overridden with the <code>$info</code> argument.",
     "params": {},
     "errors": [
      "unit:fail default error raised by this function."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "fail",
    "uri": "http://basex.org/modules/unit",
    "params": [
     "$info as item()"
    ],
    "comments": {
     "description": " Raises a unit error. The default failure message can be overridden with the <code>$info</code> argument.",
     "params": {},
     "errors": [
      "unit:fail default error raised by this function."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains annotations and functions for performing XQUnit tests."
 },
 "http://basex.org/modules/update": {
  "moduleNamespace": "http://basex.org/modules/update",
  "prefixes": [
   "update"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "apply",
    "uri": "http://basex.org/modules/update",
    "params": [
     "$function as function(*)",
     "$arguments as array(*)"
    ],
    "comments": {
     "description": " The updating variant of <a href=\"https://docs.basex.org/wiki/XQuery_3.1#fn:apply\">fn:apply</a> applies the specified updating <code>$function</code> to the specified <code>$arguments</code>.",
     "params": {
      "$arguments": "value of type array(*)"
     },
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "for-each",
    "uri": "http://basex.org/modules/update",
    "params": [
     "$input as item()*",
     "$action as function(item()) as item()*"
    ],
    "comments": {
     "description": " The updating variant of <a href=\"https://docs.basex.org/wiki/Higher-Order_Functions#fn:for-each\">fn:for-each</a> applies the specified updating <code>$action</code> to every item of <code>$input</code>.",
     "params": {
      "$action": "value of type function(item()"
     },
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "for-each-pair",
    "uri": "http://basex.org/modules/update",
    "params": [
     "$input1 as item()*",
     "$input2 as item()*",
     "$action as function(item()) as item()*"
    ],
    "comments": {
     "description": " The updating variant of <a href=\"https://docs.basex.org/wiki/Higher-Order_Functions#fn:for-each-pair\">fn:for-each-pair</a> applies the specified updating <code>$action</code> to the successive pairs of items of <code>$input1</code> and <code>$input2</code>. Evaluation is stopped if one sequence yields no more items.",
     "params": {
      "$input2": "value of type item()*",
      "$action": "value of type function(item()"
     },
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "map-for-each",
    "uri": "http://basex.org/modules/update",
    "params": [
     "$map as map(*)",
     "$action as function(xs:anyAtomicType, item()*) as item()*"
    ],
    "comments": {
     "description": " The updating variant of <code><a href=\"https://docs.basex.org/wiki/Map_Module#map:for-each\">map:for-each</a></code> applies the specified <code>$action</code> to every key/value pair of the supplied <code>$map</code> and returns the results as a sequence.",
     "params": {
      "$action": "value of type function(xs:anyAtomicType"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "output",
    "uri": "http://basex.org/modules/update",
    "params": [
     "$input as item()*"
    ],
    "comments": {
     "description": " This function can be used if <code><a href=\"https://docs.basex.org/wiki/Options#MIXUPDATES\">MIXUPDATES</a></code> is not enabled, and if values need to be returned within an updating expression: The supplied <code>$input</code> will be cached and returned at the very end, i.e., after all updates on the <i>pending update list</i> have been processed. If one of the supplied items is affected by an update, a copy will be created and cached instead.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "cache",
    "uri": "http://basex.org/modules/update",
    "params": [],
    "comments": {
     "description": " Returns the items that have been cached by <code><a href=\"https://docs.basex.org/wiki/Update_Module#update:output\">update:output</a></code>. The output cache can optionally be <code>$reset</code>. The function can be used to check which items will eventually be returned as the result of an updating function.<br/>This function is <i>non-deterministic</i>: It will return different results before and after items have been cached. The function can be useful for writing <a href=\"https://docs.basex.org/wiki/Unit_Module\">unit tests</a>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "cache",
    "uri": "http://basex.org/modules/update",
    "params": [
     "$reset as xs:boolean?"
    ],
    "comments": {
     "description": " Returns the items that have been cached by <code><a href=\"https://docs.basex.org/wiki/Update_Module#update:output\">update:output</a></code>. The output cache can optionally be <code>$reset</code>. The function can be used to check which items will eventually be returned as the result of an updating function.<br/>This function is <i>non-deterministic</i>: It will return different results before and after items have been cached. The function can be useful for writing <a href=\"https://docs.basex.org/wiki/Unit_Module\">unit tests</a>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> provides additional functions for performing updates and returning results in <a href=\"https://docs.basex.org/wiki/XQuery_Update\">updating expressions</a>."
 },
 "http://basex.org/modules/user": {
  "moduleNamespace": "http://basex.org/modules/user",
  "prefixes": [
   "user"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "current",
    "uri": "http://basex.org/modules/user",
    "params": [],
    "comments": {
     "description": " Returns the name of the currently logged-in user.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "list",
    "uri": "http://basex.org/modules/user",
    "params": [],
    "comments": {
     "description": " Returns the names of all registered users who are visible to the current user.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "list-details",
    "uri": "http://basex.org/modules/user",
    "params": [],
    "comments": {
     "description": " Returns an element sequence, containing all registered users who are visible to the current user.<br/>In addition to the <code><a href=\"https://docs.basex.org/wiki/Commands#SHOW_USERS\">SHOW USERS</a></code> command, encoded password strings and database permissions will be output. A user <code>$name</code> can be specified to filter the results in advance.",
     "params": {},
     "errors": [
      "user:unknown The specified username is unknown."
     ],
     "others": [],
     "return": "value of type element(user)*"
    }
   },
   {
    "name": "list-details",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns an element sequence, containing all registered users who are visible to the current user.<br/>In addition to the <code><a href=\"https://docs.basex.org/wiki/Commands#SHOW_USERS\">SHOW USERS</a></code> command, encoded password strings and database permissions will be output. A user <code>$name</code> can be specified to filter the results in advance.",
     "params": {},
     "errors": [
      "user:unknown The specified username is unknown."
     ],
     "others": [],
     "return": "value of type element(user)*"
    }
   },
   {
    "name": "exists",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Checks if a user with the specified <code>$name</code> exists.",
     "params": {},
     "errors": [
      "user:name The specified username is invalid."
     ],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "check",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string",
     "$password as xs:string"
    ],
    "comments": {
     "description": " Checks if the specified user and password is correct. Raises errors otherwise.",
     "params": {
      "$password": "value of type xs:string"
     },
     "errors": [
      "user:name The specified username is invalid.",
      "user:unknown The specified user does not exist.",
      "user:password The specified password is wrong."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "info",
    "uri": "http://basex.org/modules/user",
    "params": [],
    "comments": {
     "description": " Returns an <code>info</code> element, which may contain application-specific data. If a user <code>$name</code> is supplied, a user-specific element is returned. By default, the returned element has no contents. It can be modified via <code><a href=\"https://docs.basex.org/wiki/User_Module#user:update-info\">user:update-info</a></code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(info)"
    }
   },
   {
    "name": "info",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns an <code>info</code> element, which may contain application-specific data. If a user <code>$name</code> is supplied, a user-specific element is returned. By default, the returned element has no contents. It can be modified via <code><a href=\"https://docs.basex.org/wiki/User_Module#user:update-info\">user:update-info</a></code>.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(info)"
    }
   },
   {
    "name": "create",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string",
     "$password as xs:string"
    ],
    "comments": {
     "description": " Creates a new user with the specified <code>$name</code>, <code>$password</code>, and <code>$permissions</code>: <ul><li>Local permissions are granted with non-empty glob <code>$patterns</code>.</li><li>An <code>$info</code> element with application-specific information can be supplied.</li><li>The default global permission (<i>none</i>) can be overwritten with an empty pattern or by omitting the last argument.</li><li>Existing users will be overwritten.</li></ul>",
     "params": {
      "$password": "value of type xs:string"
     },
     "errors": [
      "user:name The specified username is invalid.",
      "user:permission The specified permission is invalid.",
      "user:admin The \"admin\" user cannot be modified.",
      "user:logged-in The specified user is currently logged in.",
      "user:update The operation can only be performed once per user or database pattern."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "create",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string",
     "$password as xs:string",
     "$permissions as xs:string*"
    ],
    "comments": {
     "description": " Creates a new user with the specified <code>$name</code>, <code>$password</code>, and <code>$permissions</code>: <ul><li>Local permissions are granted with non-empty glob <code>$patterns</code>.</li><li>An <code>$info</code> element with application-specific information can be supplied.</li><li>The default global permission (<i>none</i>) can be overwritten with an empty pattern or by omitting the last argument.</li><li>Existing users will be overwritten.</li></ul>",
     "params": {
      "$password": "value of type xs:string",
      "$permissions": "value of type xs:string*"
     },
     "errors": [
      "user:name The specified username is invalid.",
      "user:permission The specified permission is invalid.",
      "user:admin The \"admin\" user cannot be modified.",
      "user:logged-in The specified user is currently logged in.",
      "user:update The operation can only be performed once per user or database pattern."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "create",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string",
     "$password as xs:string",
     "$permissions as xs:string*",
     "$patterns as xs:string*"
    ],
    "comments": {
     "description": " Creates a new user with the specified <code>$name</code>, <code>$password</code>, and <code>$permissions</code>: <ul><li>Local permissions are granted with non-empty glob <code>$patterns</code>.</li><li>An <code>$info</code> element with application-specific information can be supplied.</li><li>The default global permission (<i>none</i>) can be overwritten with an empty pattern or by omitting the last argument.</li><li>Existing users will be overwritten.</li></ul>",
     "params": {
      "$password": "value of type xs:string",
      "$permissions": "value of type xs:string*",
      "$patterns": "value of type xs:string*"
     },
     "errors": [
      "user:name The specified username is invalid.",
      "user:permission The specified permission is invalid.",
      "user:admin The \"admin\" user cannot be modified.",
      "user:logged-in The specified user is currently logged in.",
      "user:update The operation can only be performed once per user or database pattern."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "create",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string",
     "$password as xs:string",
     "$permissions as xs:string*",
     "$patterns as xs:string*",
     "$info as element(info)"
    ],
    "comments": {
     "description": " Creates a new user with the specified <code>$name</code>, <code>$password</code>, and <code>$permissions</code>: <ul><li>Local permissions are granted with non-empty glob <code>$patterns</code>.</li><li>An <code>$info</code> element with application-specific information can be supplied.</li><li>The default global permission (<i>none</i>) can be overwritten with an empty pattern or by omitting the last argument.</li><li>Existing users will be overwritten.</li></ul>",
     "params": {
      "$password": "value of type xs:string",
      "$permissions": "value of type xs:string*",
      "$patterns": "value of type xs:string*",
      "$info": "value of type element(info)"
     },
     "errors": [
      "user:name The specified username is invalid.",
      "user:permission The specified permission is invalid.",
      "user:admin The \"admin\" user cannot be modified.",
      "user:logged-in The specified user is currently logged in.",
      "user:update The operation can only be performed once per user or database pattern."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "grant",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string",
     "$permissions as xs:string*"
    ],
    "comments": {
     "description": " Grants global or local <code>$permissions</code> to a user with the specified <code>$name</code>. Local permissions are granted with non-empty glob <code>$patterns</code>.",
     "params": {
      "$permissions": "value of type xs:string*"
     },
     "errors": [
      "user:unknown The specified username is unknown.",
      "user:name The specified username is invalid.",
      "user:pattern The specified database pattern is invalid.",
      "user:permission The specified permission is invalid.",
      "user:admin The \"admin\" user cannot be modified.",
      "user:local A local permission can only be 'none', 'read' or 'write'.",
      "user:logged-in The specified user is currently logged in.",
      "user:update The operation can only be performed once per user or database pattern."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "grant",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string",
     "$permissions as xs:string*",
     "$patterns as xs:string*"
    ],
    "comments": {
     "description": " Grants global or local <code>$permissions</code> to a user with the specified <code>$name</code>. Local permissions are granted with non-empty glob <code>$patterns</code>.",
     "params": {
      "$permissions": "value of type xs:string*",
      "$patterns": "value of type xs:string*"
     },
     "errors": [
      "user:unknown The specified username is unknown.",
      "user:name The specified username is invalid.",
      "user:pattern The specified database pattern is invalid.",
      "user:permission The specified permission is invalid.",
      "user:admin The \"admin\" user cannot be modified.",
      "user:local A local permission can only be 'none', 'read' or 'write'.",
      "user:logged-in The specified user is currently logged in.",
      "user:update The operation can only be performed once per user or database pattern."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "drop",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string"
    ],
    "comments": {
     "description": " Drops a user with the specified <code>$name</code>. If non-empty glob <code>$patterns</code> are specified, only the database patterns will be removed.",
     "params": {},
     "errors": [
      "user:unknown The specified username is unknown.",
      "user:name The specified username is invalid.",
      "user:pattern The specified database pattern is invalid.",
      "user:admin The \"admin\" user cannot be modified.",
      "user:logged-in The specified user is currently logged in.",
      "user:update The operation can only be performed once per user or database pattern.",
      "user:conflict A user cannot be both altered and dropped."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "drop",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string",
     "$patterns as xs:string*"
    ],
    "comments": {
     "description": " Drops a user with the specified <code>$name</code>. If non-empty glob <code>$patterns</code> are specified, only the database patterns will be removed.",
     "params": {
      "$patterns": "value of type xs:string*"
     },
     "errors": [
      "user:unknown The specified username is unknown.",
      "user:name The specified username is invalid.",
      "user:pattern The specified database pattern is invalid.",
      "user:admin The \"admin\" user cannot be modified.",
      "user:logged-in The specified user is currently logged in.",
      "user:update The operation can only be performed once per user or database pattern.",
      "user:conflict A user cannot be both altered and dropped."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "alter",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string",
     "$newname as xs:string"
    ],
    "comments": {
     "description": " Renames a user with the specified <code>$name</code> to <code>$newname</code>.",
     "params": {
      "$newname": "value of type xs:string"
     },
     "errors": [
      "user:unknown The specified username is unknown.",
      "user:name The specified username is invalid.",
      "user:admin The \"admin\" user cannot be modified.",
      "user:logged-in The specified user is currently logged in.",
      "user:update The operation can only be performed once per user or database pattern.",
      "user:conflict A user cannot be both altered and dropped."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "password",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$name as xs:string",
     "$password as xs:string"
    ],
    "comments": {
     "description": " Changes the <code>password</code> of a user with the specified <code>$name</code>.",
     "params": {
      "$password": "value of type xs:string"
     },
     "errors": [
      "user:unknown The specified username is unknown.",
      "user:name The specified username is invalid.",
      "user:update The operation can only be performed once per user or database pattern."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "update-info",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$info as element(info)"
    ],
    "comments": {
     "description": " Assigns the specified <code>$info</code> element to the user management or, if <code>$name</code> is supplied, to a specific user. This function can be used to manage application-specific data (groups, enhanced user info, etc.).",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "update-info",
    "uri": "http://basex.org/modules/user",
    "params": [
     "$info as element(info)",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Assigns the specified <code>$info</code> element to the user management or, if <code>$name</code> is supplied, to a specific user. This function can be used to manage application-specific data (groups, enhanced user info, etc.).",
     "params": {
      "$name": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for creating and administering database users. The <a href=\"https://docs.basex.org/wiki/User_Management\">User Management</a> article provides more information on database users and permissions."
 },
 "http://basex.org/modules/util": {
  "moduleNamespace": "http://basex.org/modules/util",
  "prefixes": [
   "util"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "if",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$condition as item()*",
     "$then as item()*"
    ],
    "comments": {
     "description": " Alternative writing for the if/then/else expression: <ul><li>If the <i>effective boolean value</i> of <code>$condition</code> is true, the <code>$then</code> branch will be evaluated.</li><li>Otherwise, <code>$else</code> will be evaluated. If no third argument is supplied, an empty sequence will be returned.</li></ul>",
     "params": {
      "$then": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "if",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$condition as item()*",
     "$then as item()*",
     "$else as item()*"
    ],
    "comments": {
     "description": " Alternative writing for the if/then/else expression: <ul><li>If the <i>effective boolean value</i> of <code>$condition</code> is true, the <code>$then</code> branch will be evaluated.</li><li>Otherwise, <code>$else</code> will be evaluated. If no third argument is supplied, an empty sequence will be returned.</li></ul>",
     "params": {
      "$then": "value of type item()*",
      "$else": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "or",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$items as item()*",
     "$default as item()*"
    ],
    "comments": {
     "description": " Returns <code>$items</code> if it is a non-empty sequence. Otherwise, returns <code>$default</code>. Equivalent to the following expressions: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">items</span><span class=\"p\">))</span> <span class=\"k\">then</span> <span class=\"nv\">$</span><span class=\"n\">items</span> <span class=\"k\">else</span> <span class=\"nv\">$</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"c\">(: Elvis operator :)</span> <span class=\"nv\">$</span><span class=\"n\">items</span> <span class=\"p\">?:</span> <span class=\"nv\">$</span><span class=\"n\">default</span> </pre></div>",
     "params": {
      "$default": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "count-within",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$sequence as item()*",
     "$min as xs:integer"
    ],
    "comments": {
     "description": " Checks if the specified <code>$sequence</code> has at least <code>$min</code> and, optionally, at most <code>$max</code> items. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"k\">let</span> <span class=\"nv\">$</span><span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">sequence</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nv\">$</span><span class=\"n\">count</span> <span class=\"o\">&gt;=</span> <span class=\"nv\">$</span><span class=\"n\">min</span> <span class=\"ow\">and</span> <span class=\"nv\">$</span><span class=\"n\">count</span> <span class=\"o\">&lt;=</span> <span class=\"nv\">$</span><span class=\"n\">max</span> </pre></div>",
     "params": {
      "$min": "value of type xs:integer"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "count-within",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$sequence as item()*",
     "$min as xs:integer",
     "$max as xs:integer"
    ],
    "comments": {
     "description": " Checks if the specified <code>$sequence</code> has at least <code>$min</code> and, optionally, at most <code>$max</code> items. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"k\">let</span> <span class=\"nv\">$</span><span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">sequence</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nv\">$</span><span class=\"n\">count</span> <span class=\"o\">&gt;=</span> <span class=\"nv\">$</span><span class=\"n\">min</span> <span class=\"ow\">and</span> <span class=\"nv\">$</span><span class=\"n\">count</span> <span class=\"o\">&lt;=</span> <span class=\"nv\">$</span><span class=\"n\">max</span> </pre></div>",
     "params": {
      "$min": "value of type xs:integer",
      "$max": "value of type xs:integer"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:boolean"
    }
   },
   {
    "name": "item",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$sequence as item()*",
     "$position as xs:double"
    ],
    "comments": {
     "description": " Returns the item from <code>$sequence</code> at the specified <code>$position</code>. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nv\">$</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"nv\">$</span><span class=\"n\">position</span><span class=\"p\">]</span> </pre></div>",
     "params": {
      "$position": "value of type xs:double"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "range",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$sequence as item()*",
     "$first as xs:double",
     "$last as xs:double"
    ],
    "comments": {
     "description": " Returns items from <code>$sequence</code>, starting at position <code>$first</code> and ending at <code>$last</code>. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nf\">subsequence</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">sequence</span><span class=\"p\">,</span> <span class=\"nv\">$</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"nv\">$</span><span class=\"n\">last</span> <span class=\"o\">-</span> <span class=\"nv\">$</span><span class=\"n\">first</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> </pre></div>",
     "params": {
      "$first": "value of type xs:double",
      "$last": "value of type xs:double"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "last",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$sequence as item()*"
    ],
    "comments": {
     "description": " Returns last item of a <code>$sequence</code>. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nv\">$</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"nf\">last</span><span class=\"p\">()]</span> </pre></div>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "init",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$sequence as item()*"
    ],
    "comments": {
     "description": " Returns all items of a <code>$sequence</code> except for the last one. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nv\">$</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"nf\">position</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"nf\">last</span><span class=\"p\">()]</span> </pre></div>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "ddo",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$nodes as node()*"
    ],
    "comments": {
     "description": " Returns nodes in <i>distinct document order</i>: duplicate nodes will be removed, and the remaining nodes will be returned in <a href=\"https://www.w3.org/TR/xquery-31/#dt-document-order\">document order</a>. As results of path expressions are brought distinct document order before they are returned, the function is equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nv\">$</span><span class=\"n\">nodes</span><span class=\"p\">/</span><span class=\"k\">self</span><span class=\"p\">::</span><span class=\"nf\">node</span><span class=\"p\">()</span> </pre></div>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type node()*"
    }
   },
   {
    "name": "root",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$nodes as node()*"
    ],
    "comments": {
     "description": " Returns the document nodes of the specified <code>$nodes</code>. The path expression <code>/abc</code> is internally represented as <code>util:root(.)/abc</code>. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nv\">$</span><span class=\"n\">nodes</span> <span class=\"o\">!</span> <span class=\"p\">/</span> </pre></div>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type document-node()*"
    }
   },
   {
    "name": "strip-namespaces",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$node as node()"
    ],
    "comments": {
     "description": " Removes namespaces with the specified <code>$prefixes</code> from the supplied <code>$node</code>. An empty string can be supplied to remove the default namespace. If no prefixes are specified, all namespaces will be removed.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type node()"
    }
   },
   {
    "name": "strip-namespaces",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$node as node()",
     "$prefixes as xs:string*"
    ],
    "comments": {
     "description": " Removes namespaces with the specified <code>$prefixes</code> from the supplied <code>$node</code>. An empty string can be supplied to remove the default namespace. If no prefixes are specified, all namespaces will be removed.",
     "params": {
      "$prefixes": "value of type xs:string*"
     },
     "errors": [],
     "others": [],
     "return": "value of type node()"
    }
   },
   {
    "name": "array-members",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$array as array(*)"
    ],
    "comments": {
     "description": " Returns each member of an <code>$array</code> as a new array. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"k\">for</span> <span class=\"nv\">$</span><span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"mi\">1</span> <span class=\"k\">to</span> <span class=\"nf\">array:size</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">array</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">[</span> <span class=\"nv\">$</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">]</span> </pre></div>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type array(*)*"
    }
   },
   {
    "name": "array-values",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$array as array(*)"
    ],
    "comments": {
     "description": " Returns all members of an <code>$array</code> as a sequence. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nv\">$</span><span class=\"n\">array</span> <span class=\"p\">?</span> <span class=\"o\">*</span> </pre></div>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "map-entries",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$map as map(*)"
    ],
    "comments": {
     "description": " Returns each entry of a <code>$map</code> as a new map, each with a <code>key</code> and <code>value</code> entry. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nf\">map:for-each</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">map</span><span class=\"p\">,</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"nv\">$</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">map</span> <span class=\"p\">{</span> <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"nv\">$</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"nv\">$</span><span class=\"n\">value</span> <span class=\"p\">}</span> <span class=\"p\">})</span> </pre></div>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type map(xs:string, item()*)*"
    }
   },
   {
    "name": "map-values",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$map as map(*)"
    ],
    "comments": {
     "description": " Returns all values of a <code>$map</code> as a sequence. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nv\">$</span><span class=\"n\">map</span> <span class=\"p\">?</span> <span class=\"o\">*</span> </pre></div>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "replicate",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$input as item()*",
     "$count as xs:integer"
    ],
    "comments": {
     "description": " Evaluates <code>$input</code> and returns the result <code>$count</code> times. Unless <code>$repeat</code> is set to true, the input expression is evaluated multiple times. Equivalent expressions: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nf\">util:replicate</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">,</span> <span class=\"nv\">$</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"nf\">true</span><span class=\"p\">()),</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">to</span> <span class=\"nv\">$</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"o\">!</span> <span class=\"nv\">$</span><span class=\"n\">input</span> </pre></div>",
     "params": {
      "$count": "value of type xs:integer"
     },
     "errors": [
      "util:negative The specified number is negative."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "replicate",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$input as item()*",
     "$count as xs:integer",
     "$repeat as xs:boolean?"
    ],
    "comments": {
     "description": " Evaluates <code>$input</code> and returns the result <code>$count</code> times. Unless <code>$repeat</code> is set to true, the input expression is evaluated multiple times. Equivalent expressions: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nf\">util:replicate</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">input</span><span class=\"p\">,</span> <span class=\"nv\">$</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"nf\">true</span><span class=\"p\">()),</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">to</span> <span class=\"nv\">$</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"o\">!</span> <span class=\"nv\">$</span><span class=\"n\">input</span> </pre></div>",
     "params": {
      "$count": "value of type xs:integer",
      "$repeat": "value of type xs:boolean?"
     },
     "errors": [
      "util:negative The specified number is negative."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "intersperse",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$items as item()*",
     "$separator as item()*"
    ],
    "comments": {
     "description": " Inserts the defined <code>$separator</code> between the <code>$items</code> of a sequence and returns the resulting sequence. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">items</span><span class=\"p\">),</span> <span class=\"k\">for</span> <span class=\"nv\">$</span><span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"nf\">tail</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">separator</span><span class=\"p\">,</span> <span class=\"nv\">$</span><span class=\"n\">item</span><span class=\"p\">)</span> </pre></div>",
     "params": {
      "$separator": "value of type item()*"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "duplicates",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$sequence as item()*"
    ],
    "comments": {
     "description": " Returns duplicate values in a <code>$sequence</code>. See <a href=\"https://www.w3.org/TR/xpath-functions-31/#func-distinct-values\">fn:distinct-values</a> for the applied equality rules and the usage of the <code>$collation</code> argument.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:anyAtomicType*"
    }
   },
   {
    "name": "duplicates",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$sequence as item()*",
     "$collation as xs:string"
    ],
    "comments": {
     "description": " Returns duplicate values in a <code>$sequence</code>. See <a href=\"https://www.w3.org/TR/xpath-functions-31/#func-distinct-values\">fn:distinct-values</a> for the applied equality rules and the usage of the <code>$collation</code> argument.",
     "params": {
      "$collation": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:anyAtomicType*"
    }
   },
   {
    "name": "chars",
    "uri": "http://basex.org/modules/util",
    "params": [
     "$string as xs:string?"
    ],
    "comments": {
     "description": " Returns all characters of a <code>$string</code> as a sequence. Equivalent to: <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span/><span class=\"k\">for</span> <span class=\"nv\">$</span><span class=\"n\">cp</span> <span class=\"ow\">in</span> <span class=\"nf\">string-to-codepoints</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">string</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nf\">codepoints-to-string</span><span class=\"p\">(</span><span class=\"nv\">$</span><span class=\"n\">cp</span><span class=\"p\">)</span> </pre></div>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains various utility and helper functions."
 },
 "http://basex.org/modules/validate": {
  "moduleNamespace": "http://basex.org/modules/validate",
  "prefixes": [
   "validate"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "dtd",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns an empty sequence or an error.",
     "params": {},
     "errors": [
      "validate:error the validation fails.",
      "validate:init the validation process cannot be started.",
      "validate:not-found no DTD validator is available."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "dtd",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as xs:string?"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns an empty sequence or an error.",
     "params": {
      "$schema": "value of type xs:string?"
     },
     "errors": [
      "validate:error the validation fails.",
      "validate:init the validation process cannot be started.",
      "validate:not-found no DTD validator is available."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "dtd-info",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns warnings, errors and fatal errors in a string sequence.",
     "params": {},
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found no DTD validator is available."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "dtd-info",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as xs:string?"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns warnings, errors and fatal errors in a string sequence.",
     "params": {
      "$schema": "value of type xs:string?"
     },
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found no DTD validator is available."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "dtd-report",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns warnings, errors and fatal errors as XML.",
     "params": {},
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found no DTD validator is available."
     ],
     "others": [],
     "return": "value of type element(report)"
    }
   },
   {
    "name": "dtd-report",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as xs:string?"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns warnings, errors and fatal errors as XML.",
     "params": {
      "$schema": "value of type xs:string?"
     },
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found no DTD validator is available."
     ],
     "others": [],
     "return": "value of type element(report)"
    }
   },
   {
    "name": "xsd",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code>. The supported <code>$options</code> are: <ul><li><code>cache</code>: Generated schemas are cached and reused.</li><li>All other options are handled as features and passed on to the validator.</li></ul>",
     "params": {},
     "errors": [
      "validate:error the validation fails.",
      "validate:init the validation process cannot be started.",
      "validate:not-found no XML Schema validator is available."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "xsd",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as item()?"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code>. The supported <code>$options</code> are: <ul><li><code>cache</code>: Generated schemas are cached and reused.</li><li>All other options are handled as features and passed on to the validator.</li></ul>",
     "params": {
      "$schema": "value of type item()?"
     },
     "errors": [
      "validate:error the validation fails.",
      "validate:init the validation process cannot be started.",
      "validate:not-found no XML Schema validator is available."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "xsd",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as item()?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code>. The supported <code>$options</code> are: <ul><li><code>cache</code>: Generated schemas are cached and reused.</li><li>All other options are handled as features and passed on to the validator.</li></ul>",
     "params": {
      "$schema": "value of type item()?",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "validate:error the validation fails.",
      "validate:init the validation process cannot be started.",
      "validate:not-found no XML Schema validator is available."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "xsd-info",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns warnings, errors and fatal errors in a string sequence. See <code><a href=\"https://docs.basex.org/wiki/Validation_Module#validate:xsd\">validate:xsd</a></code> for more information of the <code>$options</code> parameter.",
     "params": {},
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found no XML Schema validator is available."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "xsd-info",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as item()?"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns warnings, errors and fatal errors in a string sequence. See <code><a href=\"https://docs.basex.org/wiki/Validation_Module#validate:xsd\">validate:xsd</a></code> for more information of the <code>$options</code> parameter.",
     "params": {
      "$schema": "value of type item()?"
     },
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found no XML Schema validator is available."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "xsd-info",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as item()?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns warnings, errors and fatal errors in a string sequence. See <code><a href=\"https://docs.basex.org/wiki/Validation_Module#validate:xsd\">validate:xsd</a></code> for more information of the <code>$options</code> parameter.",
     "params": {
      "$schema": "value of type item()?",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found no XML Schema validator is available."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "xsd-report",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns warnings, errors and fatal errors as XML. See <code><a href=\"https://docs.basex.org/wiki/Validation_Module#validate:xsd\">validate:xsd</a></code> for more information of the <code>$options</code> parameter.",
     "params": {},
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found no XML Schema validator is available."
     ],
     "others": [],
     "return": "value of type element(report)"
    }
   },
   {
    "name": "xsd-report",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as xs:string?"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns warnings, errors and fatal errors as XML. See <code><a href=\"https://docs.basex.org/wiki/Validation_Module#validate:xsd\">validate:xsd</a></code> for more information of the <code>$options</code> parameter.",
     "params": {
      "$schema": "value of type xs:string?"
     },
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found no XML Schema validator is available."
     ],
     "others": [],
     "return": "value of type element(report)"
    }
   },
   {
    "name": "xsd-report",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as xs:string?",
     "$options as map(*)"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code> and returns warnings, errors and fatal errors as XML. See <code><a href=\"https://docs.basex.org/wiki/Validation_Module#validate:xsd\">validate:xsd</a></code> for more information of the <code>$options</code> parameter.",
     "params": {
      "$schema": "value of type xs:string?",
      "$options": "value of type map(*)"
     },
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found no XML Schema validator is available."
     ],
     "others": [],
     "return": "value of type element(report)"
    }
   },
   {
    "name": "xsd-processor",
    "uri": "http://basex.org/modules/validate",
    "params": [],
    "comments": {
     "description": " Returns the name of the applied XSD processor.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "xsd-version",
    "uri": "http://basex.org/modules/validate",
    "params": [],
    "comments": {
     "description": " Returns the supported version of XSD Schema.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "rng",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as item()"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code>, using the XML or <code>$compact</code> notation.",
     "params": {
      "$schema": "value of type item()"
     },
     "errors": [
      "validate:error the validation fails.",
      "validate:init the validation process cannot be started.",
      "validate:not-found the RelaxNG validator is not available."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "rng",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as item()",
     "$compact as xs:boolean?"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code>, using the XML or <code>$compact</code> notation.",
     "params": {
      "$schema": "value of type item()",
      "$compact": "value of type xs:boolean?"
     },
     "errors": [
      "validate:error the validation fails.",
      "validate:init the validation process cannot be started.",
      "validate:not-found the RelaxNG validator is not available."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "rng-info",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as item()"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code>, using the XML or <code>$compact</code> notation, and returns warnings, errors and fatal errors in a string sequence.",
     "params": {
      "$schema": "value of type item()"
     },
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found the RelaxNG validator is not available."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "rng-info",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as item()",
     "$compact as xs:boolean?"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code>, using the XML or <code>$compact</code> notation, and returns warnings, errors and fatal errors in a string sequence.",
     "params": {
      "$schema": "value of type item()",
      "$compact": "value of type xs:boolean?"
     },
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found the RelaxNG validator is not available."
     ],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "rng-report",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as xs:string"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code>, using the XML or <code>$compact</code> notation, and returns warnings, errors and fatal errors as XML.",
     "params": {
      "$schema": "value of type xs:string"
     },
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found The RelaxNG validator is not available."
     ],
     "others": [],
     "return": "value of type element(report)"
    }
   },
   {
    "name": "rng-report",
    "uri": "http://basex.org/modules/validate",
    "params": [
     "$input as item()",
     "$schema as xs:string",
     "$compact as xs:boolean?"
    ],
    "comments": {
     "description": " Validates the XML <code>$input</code> document against a <code>$schema</code>, using the XML or <code>$compact</code> notation, and returns warnings, errors and fatal errors as XML.",
     "params": {
      "$schema": "value of type xs:string",
      "$compact": "value of type xs:boolean?"
     },
     "errors": [
      "validate:init the validation process cannot be started.",
      "validate:not-found The RelaxNG validator is not available."
     ],
     "others": [],
     "return": "value of type element(report)"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions to perform validations against DTDs, XML Schema and RelaxNG. The documentation further describes how to use Schematron validation with BaseX."
 },
 "http://basex.org/modules/web": {
  "moduleNamespace": "http://basex.org/modules/web",
  "prefixes": [
   "web"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "content-type",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Returns the content type of a path by analyzing its file suffix. <code>application/octet-stream</code> is returned if the file suffix is unknown.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "create-url",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$href as xs:string",
     "$parameters as map(*)"
    ],
    "comments": {
     "description": " Creates a new URL from the specified <code>$href</code> string, query string <code>$parameters</code> and an optional <code>$anchor</code> reference. The keys and values of the map entries will be converted to strings, URL-encoded (see <code><a href=\"https://docs.basex.org/wiki/Web_Module#web:encode-url\">web:encode-url</a></code>), and appended to the URL as query parameters. If a map entry has more than a single item, all of them will be appended as single parameters.",
     "params": {
      "$parameters": "value of type map(*)"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "create-url",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$href as xs:string",
     "$parameters as map(*)",
     "$anchor as xs:string"
    ],
    "comments": {
     "description": " Creates a new URL from the specified <code>$href</code> string, query string <code>$parameters</code> and an optional <code>$anchor</code> reference. The keys and values of the map entries will be converted to strings, URL-encoded (see <code><a href=\"https://docs.basex.org/wiki/Web_Module#web:encode-url\">web:encode-url</a></code>), and appended to the URL as query parameters. If a map entry has more than a single item, all of them will be appended as single parameters.",
     "params": {
      "$parameters": "value of type map(*)",
      "$anchor": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "encode-url",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$string as xs:string"
    ],
    "comments": {
     "description": " Encodes a string to a URL. Spaces are rewritten to <code>+</code>; <code>*</code>, <code>-</code>, <code>.</code> and <code>_</code> are adopted; and all other non-ASCII characters and special characters are percent-encoded.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "decode-url",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$string as xs:string"
    ],
    "comments": {
     "description": " Decodes a URL to the original string. Percent-encoded characters are decoded to their UTF8 codepoints, and <code>+</code> characters are rewritten to spaces.",
     "params": {},
     "errors": [
      "web:invalid the string contains invalid XML characters."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "forward",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$path as xs:string"
    ],
    "comments": {
     "description": " Creates a server-side <a href=\"https://docs.basex.org/wiki/RESTXQ#Forwards_and_Redirects\">RESTXQ forward request</a> to the specified <code>$path</code>: <ul><li>The client will not get notified of this forwarding.</li><li>Supplied query parameters will be attached to parameters of the current request.</li><li>The <code>$parameter</code> argument is processed as described in <code><a href=\"https://docs.basex.org/wiki/Web_Module#web:create-url\">web:create-url</a></code>.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(rest:forward)"
    }
   },
   {
    "name": "forward",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$path as xs:string",
     "$parameters as map(*)"
    ],
    "comments": {
     "description": " Creates a server-side <a href=\"https://docs.basex.org/wiki/RESTXQ#Forwards_and_Redirects\">RESTXQ forward request</a> to the specified <code>$path</code>: <ul><li>The client will not get notified of this forwarding.</li><li>Supplied query parameters will be attached to parameters of the current request.</li><li>The <code>$parameter</code> argument is processed as described in <code><a href=\"https://docs.basex.org/wiki/Web_Module#web:create-url\">web:create-url</a></code>.</li></ul>",
     "params": {
      "$parameters": "value of type map(*)"
     },
     "errors": [],
     "others": [],
     "return": "value of type element(rest:forward)"
    }
   },
   {
    "name": "redirect",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$url as xs:string"
    ],
    "comments": {
     "description": " Creates a <a href=\"https://docs.basex.org/wiki/RESTXQ#Forwards_and_Redirects\">RESTXQ redirection</a> to the specified <code>$url</code>. The returned response will only work if no other items are returned by the RESTXQ function.<br/>The <code>$parameters</code> and <code>$anchor</code> arguments are processed as described in (see <code><a href=\"https://docs.basex.org/wiki/Web_Module#web:create-url\">web:create-url</a></code>).",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(rest:response)"
    }
   },
   {
    "name": "redirect",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$url as xs:string",
     "$parameters as map(*)"
    ],
    "comments": {
     "description": " Creates a <a href=\"https://docs.basex.org/wiki/RESTXQ#Forwards_and_Redirects\">RESTXQ redirection</a> to the specified <code>$url</code>. The returned response will only work if no other items are returned by the RESTXQ function.<br/>The <code>$parameters</code> and <code>$anchor</code> arguments are processed as described in (see <code><a href=\"https://docs.basex.org/wiki/Web_Module#web:create-url\">web:create-url</a></code>).",
     "params": {
      "$parameters": "value of type map(*)"
     },
     "errors": [],
     "others": [],
     "return": "value of type element(rest:response)"
    }
   },
   {
    "name": "redirect",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$url as xs:string",
     "$parameters as map(*)",
     "$anchor as xs:string"
    ],
    "comments": {
     "description": " Creates a <a href=\"https://docs.basex.org/wiki/RESTXQ#Forwards_and_Redirects\">RESTXQ redirection</a> to the specified <code>$url</code>. The returned response will only work if no other items are returned by the RESTXQ function.<br/>The <code>$parameters</code> and <code>$anchor</code> arguments are processed as described in (see <code><a href=\"https://docs.basex.org/wiki/Web_Module#web:create-url\">web:create-url</a></code>).",
     "params": {
      "$parameters": "value of type map(*)",
      "$anchor": "value of type xs:string"
     },
     "errors": [],
     "others": [],
     "return": "value of type element(rest:response)"
    }
   },
   {
    "name": "response-header",
    "uri": "http://basex.org/modules/web",
    "params": [],
    "comments": {
     "description": " Creates a <a href=\"https://docs.basex.org/wiki/RESTXQ#Response\">RESTXQ response header</a>.<br/> <p>Serialization parameters and header values can be supplied via the <code>$output</code> and <code>$headers</code> arguments, and status and message attributes can be attached to the HTTP response element with the <code>$atts</code> argument. </p> <ul><li><code>media-type</code>: <code>application/octet-stream</code></li></ul> <p>Header options can be supplied via the <code>$headers</code> argument. Empty string values can be specified to invalidate default values. By default, the following header options will be returned: </p> <ul><li><code>Cache-Control</code>: <code>max-age=3600,public</code></li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(rest:response)"
    }
   },
   {
    "name": "response-header",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$output as map(*)?"
    ],
    "comments": {
     "description": " Creates a <a href=\"https://docs.basex.org/wiki/RESTXQ#Response\">RESTXQ response header</a>.<br/> <p>Serialization parameters and header values can be supplied via the <code>$output</code> and <code>$headers</code> arguments, and status and message attributes can be attached to the HTTP response element with the <code>$atts</code> argument. </p> <ul><li><code>media-type</code>: <code>application/octet-stream</code></li></ul> <p>Header options can be supplied via the <code>$headers</code> argument. Empty string values can be specified to invalidate default values. By default, the following header options will be returned: </p> <ul><li><code>Cache-Control</code>: <code>max-age=3600,public</code></li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type element(rest:response)"
    }
   },
   {
    "name": "response-header",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$output as map(*)?",
     "$headers as map(*)?"
    ],
    "comments": {
     "description": " Creates a <a href=\"https://docs.basex.org/wiki/RESTXQ#Response\">RESTXQ response header</a>.<br/> <p>Serialization parameters and header values can be supplied via the <code>$output</code> and <code>$headers</code> arguments, and status and message attributes can be attached to the HTTP response element with the <code>$atts</code> argument. </p> <ul><li><code>media-type</code>: <code>application/octet-stream</code></li></ul> <p>Header options can be supplied via the <code>$headers</code> argument. Empty string values can be specified to invalidate default values. By default, the following header options will be returned: </p> <ul><li><code>Cache-Control</code>: <code>max-age=3600,public</code></li></ul>",
     "params": {
      "$headers": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type element(rest:response)"
    }
   },
   {
    "name": "response-header",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$output as map(*)?",
     "$headers as map(*)?",
     "$atts as map(*)?"
    ],
    "comments": {
     "description": " Creates a <a href=\"https://docs.basex.org/wiki/RESTXQ#Response\">RESTXQ response header</a>.<br/> <p>Serialization parameters and header values can be supplied via the <code>$output</code> and <code>$headers</code> arguments, and status and message attributes can be attached to the HTTP response element with the <code>$atts</code> argument. </p> <ul><li><code>media-type</code>: <code>application/octet-stream</code></li></ul> <p>Header options can be supplied via the <code>$headers</code> argument. Empty string values can be specified to invalidate default values. By default, the following header options will be returned: </p> <ul><li><code>Cache-Control</code>: <code>max-age=3600,public</code></li></ul>",
     "params": {
      "$headers": "value of type map(*)?",
      "$atts": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type element(rest:response)"
    }
   },
   {
    "name": "error",
    "uri": "http://basex.org/modules/web",
    "params": [
     "$status as xs:integer",
     "$message as xs:string"
    ],
    "comments": {
     "description": " Raises an error with the QName <code>rest:error</code>, the specified <code>$message</code> and the specified <code>$status</code> as error value.<br/>Calls to this function are equivalent to <code>fn:error(xs:QName('rest:error'), $message, $status)</code>. <p>See <a href=\"https://docs.basex.org/wiki/RESTXQ#Raise_Errors\">RESTXQ: Raise Errors</a> to learn how the function is helpful in web applications. </p>",
     "params": {
      "$message": "value of type xs:string"
     },
     "errors": [
      "web:status The supplied status code is invalid."
     ],
     "others": [],
     "return": "value of type none"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> provides convenience functions for building web applications with <a href=\"https://docs.basex.org/wiki/RESTXQ\">RESTXQ</a>."
 },
 "http://basex.org/modules/ws": {
  "moduleNamespace": "http://basex.org/modules/ws",
  "prefixes": [
   "ws"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "id",
    "uri": "http://basex.org/modules/ws",
    "params": [],
    "comments": {
     "description": " Returns the ID of the current WebSocket.",
     "params": {},
     "errors": [
      "ws:not-found No WebSocket with the specified id exists."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "ids",
    "uri": "http://basex.org/modules/ws",
    "params": [],
    "comments": {
     "description": " Returns the ids of all currently registered WebSockets.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string*"
    }
   },
   {
    "name": "path",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Returns the path of the WebSocket with the specified <code>$id</code>.",
     "params": {},
     "errors": [
      "ws:not-found No WebSocket with the specified id exists."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "close",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$id as xs:string"
    ],
    "comments": {
     "description": " Closes the connection of the WebSocket with the specified <code>$id</code>.",
     "params": {},
     "errors": [
      "ws:not-found No WebSocket with the specified id exists."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "send",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$message as item()",
     "$ids as xs:string*"
    ],
    "comments": {
     "description": " Sends a <code>$message</code> to the clients with the specified <code>$ids</code>. Ids that cannot be assigned to clients will be ignored. The message will be handled as follows: <ul><li>Items of type <code>xs:base64Binary</code> and <code>xs:hexBinary</code> will be transmitted as binary messages.</li><li>Function items (maps, arrays) will be serialized as JSON and transmitted as string messages.</li><li>All other items will be serialized with the default serialization options and transmitted as string messages.</li></ul>",
     "params": {
      "$ids": "value of type xs:string*"
     },
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "broadcast",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$message as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Broadcasts a <code>$message</code> to all connected clients except to the caller. Invocations of this convenience function are equivalent to <code>ws:send($message, ws:ids()[. != ws:id()])</code>. See <code><a href=\"https://docs.basex.org/wiki/WebSocket_Module#ws:send\">ws:send</a></code> for more details on the message handling.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "emit",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$message as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Emits a <code>$message</code> to all connected clients. Invocations of this function are equivalent to <code>ws:send($message, ws:ids())</code>. See <code><a href=\"https://docs.basex.org/wiki/WebSocket_Module#ws:send\">ws:send</a></code> for more details on the message handling.",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "eval",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$query as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Schedules the evaluation of the supplied <code>$query</code> and returns the result to the calling WebSocket client. The query can be a URI or a string, and variables and context items can be declared via <code>$bindings</code> (see <code><a href=\"https://docs.basex.org/wiki/XQuery_Module#xquery:eval\">xquery:eval</a></code> for more details). The following <code>$options</code> can be supplied: <ul><li><code>base-uri</code>: sets the <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-base-uri\">base-uri property</a> for the query. This URI will be used when resolving relative URIs, such as with <code>fn:doc</code>.</li><li><code>id</code>: sets a custom job id. The id must not start with the standard <code>job</code> prefix, and it can only be assigned if no job with the same name exists.</li></ul> <p>Query scheduling is recommendable if the immediate query execution might be too time consuming and lead to a timeout. </p>",
     "params": {},
     "errors": [
      "ws:overflow Query execution is rejected, because too many jobs are queued or being executed.",
      "ws:id The specified id is invalid or has already been assigned."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "eval",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$query as xs:anyAtomicType",
     "$bindings as map(*)?"
    ],
    "comments": {
     "description": " Schedules the evaluation of the supplied <code>$query</code> and returns the result to the calling WebSocket client. The query can be a URI or a string, and variables and context items can be declared via <code>$bindings</code> (see <code><a href=\"https://docs.basex.org/wiki/XQuery_Module#xquery:eval\">xquery:eval</a></code> for more details). The following <code>$options</code> can be supplied: <ul><li><code>base-uri</code>: sets the <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-base-uri\">base-uri property</a> for the query. This URI will be used when resolving relative URIs, such as with <code>fn:doc</code>.</li><li><code>id</code>: sets a custom job id. The id must not start with the standard <code>job</code> prefix, and it can only be assigned if no job with the same name exists.</li></ul> <p>Query scheduling is recommendable if the immediate query execution might be too time consuming and lead to a timeout. </p>",
     "params": {
      "$bindings": "value of type map(*)?"
     },
     "errors": [
      "ws:overflow Query execution is rejected, because too many jobs are queued or being executed.",
      "ws:id The specified id is invalid or has already been assigned."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "eval",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$query as xs:anyAtomicType",
     "$bindings as map(*)?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Schedules the evaluation of the supplied <code>$query</code> and returns the result to the calling WebSocket client. The query can be a URI or a string, and variables and context items can be declared via <code>$bindings</code> (see <code><a href=\"https://docs.basex.org/wiki/XQuery_Module#xquery:eval\">xquery:eval</a></code> for more details). The following <code>$options</code> can be supplied: <ul><li><code>base-uri</code>: sets the <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-base-uri\">base-uri property</a> for the query. This URI will be used when resolving relative URIs, such as with <code>fn:doc</code>.</li><li><code>id</code>: sets a custom job id. The id must not start with the standard <code>job</code> prefix, and it can only be assigned if no job with the same name exists.</li></ul> <p>Query scheduling is recommendable if the immediate query execution might be too time consuming and lead to a timeout. </p>",
     "params": {
      "$bindings": "value of type map(*)?",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "ws:overflow Query execution is rejected, because too many jobs are queued or being executed.",
      "ws:id The specified id is invalid or has already been assigned."
     ],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "get",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$id as xs:string",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Returns the value of an attribute with the specified <code>$name</code> for the WebSocket with the specified <code>$id</code>. If the attribute is unknown, an empty sequence or the optionally specified <code>$default</code> value will be returned instead.",
     "params": {
      "$name": "value of type xs:string"
     },
     "errors": [
      "ws:not-found No WebSocket with the specified id exists."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "get",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$id as xs:string",
     "$name as xs:string",
     "$default as item()*"
    ],
    "comments": {
     "description": " Returns the value of an attribute with the specified <code>$name</code> for the WebSocket with the specified <code>$id</code>. If the attribute is unknown, an empty sequence or the optionally specified <code>$default</code> value will be returned instead.",
     "params": {
      "$name": "value of type xs:string",
      "$default": "value of type item()*"
     },
     "errors": [
      "ws:not-found No WebSocket with the specified id exists."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "set",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$id as xs:string",
     "$name as xs:string",
     "$value as item()*"
    ],
    "comments": {
     "description": " Assigns the specified <code>$value</code> to the attribute with the specified <code>$name</code> for the WebSocket with the specified <code>$id</code>.",
     "params": {
      "$name": "value of type xs:string",
      "$value": "value of type item()*"
     },
     "errors": [
      "ws:not-found No WebSocket with the specified id exists."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   },
   {
    "name": "delete",
    "uri": "http://basex.org/modules/ws",
    "params": [
     "$id as xs:string",
     "$name as xs:string"
    ],
    "comments": {
     "description": " Deletes an attribute with the specified <code>$name</code> from the WebSocket with the specified <code>$id</code>.",
     "params": {
      "$name": "value of type xs:string"
     },
     "errors": [
      "ws:not-found No WebSocket with the specified id exists."
     ],
     "others": [],
     "return": "value of type empty-sequence()"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for accessing specific WebSocket functions. This module is mainly useful in the context of <a href=\"https://docs.basex.org/wiki/WebSockets\">WebSockets</a>."
 },
 "http://basex.org/modules/xquery": {
  "moduleNamespace": "http://basex.org/modules/xquery",
  "prefixes": [
   "xquery"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "eval",
    "uri": "http://basex.org/modules/xquery",
    "params": [
     "$query as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Evaluates the supplied <code>$query</code> and returns the resulting items. If the query is of type <code>xs:anyURI</code>, the module located at this URI will be retrieved (a relative URI will be resolved against the static base URI). Otherwise, the input is expected to be of type <code>xs:string</code>. <p>Variables and context items can be declared via <code>$bindings</code>. The specified keys must be QNames or strings: </p> <ul><li>If a key is a QName, it will be directly adopted as variable name.</li><li>It a key is a string, it may be prefixed with a dollar sign. Namespace can be specified using the <a href=\"http://www.jclark.com/xml/xmlns.htm\">Clark Notation</a>.</li><li>If the specified string is empty, the value will be bound to the context item.</li></ul> <p>The <code>$options</code> parameter contains evaluation options: </p> <ul><li><code>permission</code>: the query will be evaluated with the specified permissions (see <a href=\"https://docs.basex.org/wiki/User_Management\">User Management</a>).</li><li><code>timeout</code>: query execution will be interrupted after the specified number of seconds.</li><li><code>memory</code>: query execution will be interrupted if the specified number of megabytes will be exceeded. This check works best if only one process is running at the same time. Moreover, please note that this option enforces garbage collection, so it will take some additional time, and it requires GC to be enabled in your JVM.</li><li><code>base-uri</code>: set <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-base-uri\">base-uri property</a> for the query. Overwrites the base URI of the query; will be used when resolving relative URIs by functions such as <code>fn:doc</code>.</li><li><code>pass</code>: passes on the original error info (line and column number, optional file uri). By default, this option is <code>false</code>.</li></ul>",
     "params": {},
     "errors": [
      "xquery:update the query contains <a href=\"https://docs.basex.org/wiki/XQuery_Update#Updating_Expressions\">updating expressions</a>.",
      "xquery:permission insufficient permissions for evaluating the query.",
      "xquery:timeout query execution exceeded timeout.",
      "xquery:limit query execution exceeded memory limit.",
      "xquery:nested nested query evaluation is not allowed."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "eval",
    "uri": "http://basex.org/modules/xquery",
    "params": [
     "$query as xs:anyAtomicType",
     "$bindings as map(*)?"
    ],
    "comments": {
     "description": " Evaluates the supplied <code>$query</code> and returns the resulting items. If the query is of type <code>xs:anyURI</code>, the module located at this URI will be retrieved (a relative URI will be resolved against the static base URI). Otherwise, the input is expected to be of type <code>xs:string</code>. <p>Variables and context items can be declared via <code>$bindings</code>. The specified keys must be QNames or strings: </p> <ul><li>If a key is a QName, it will be directly adopted as variable name.</li><li>It a key is a string, it may be prefixed with a dollar sign. Namespace can be specified using the <a href=\"http://www.jclark.com/xml/xmlns.htm\">Clark Notation</a>.</li><li>If the specified string is empty, the value will be bound to the context item.</li></ul> <p>The <code>$options</code> parameter contains evaluation options: </p> <ul><li><code>permission</code>: the query will be evaluated with the specified permissions (see <a href=\"https://docs.basex.org/wiki/User_Management\">User Management</a>).</li><li><code>timeout</code>: query execution will be interrupted after the specified number of seconds.</li><li><code>memory</code>: query execution will be interrupted if the specified number of megabytes will be exceeded. This check works best if only one process is running at the same time. Moreover, please note that this option enforces garbage collection, so it will take some additional time, and it requires GC to be enabled in your JVM.</li><li><code>base-uri</code>: set <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-base-uri\">base-uri property</a> for the query. Overwrites the base URI of the query; will be used when resolving relative URIs by functions such as <code>fn:doc</code>.</li><li><code>pass</code>: passes on the original error info (line and column number, optional file uri). By default, this option is <code>false</code>.</li></ul>",
     "params": {
      "$bindings": "value of type map(*)?"
     },
     "errors": [
      "xquery:update the query contains <a href=\"https://docs.basex.org/wiki/XQuery_Update#Updating_Expressions\">updating expressions</a>.",
      "xquery:permission insufficient permissions for evaluating the query.",
      "xquery:timeout query execution exceeded timeout.",
      "xquery:limit query execution exceeded memory limit.",
      "xquery:nested nested query evaluation is not allowed."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "eval",
    "uri": "http://basex.org/modules/xquery",
    "params": [
     "$query as xs:anyAtomicType",
     "$bindings as map(*)?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Evaluates the supplied <code>$query</code> and returns the resulting items. If the query is of type <code>xs:anyURI</code>, the module located at this URI will be retrieved (a relative URI will be resolved against the static base URI). Otherwise, the input is expected to be of type <code>xs:string</code>. <p>Variables and context items can be declared via <code>$bindings</code>. The specified keys must be QNames or strings: </p> <ul><li>If a key is a QName, it will be directly adopted as variable name.</li><li>It a key is a string, it may be prefixed with a dollar sign. Namespace can be specified using the <a href=\"http://www.jclark.com/xml/xmlns.htm\">Clark Notation</a>.</li><li>If the specified string is empty, the value will be bound to the context item.</li></ul> <p>The <code>$options</code> parameter contains evaluation options: </p> <ul><li><code>permission</code>: the query will be evaluated with the specified permissions (see <a href=\"https://docs.basex.org/wiki/User_Management\">User Management</a>).</li><li><code>timeout</code>: query execution will be interrupted after the specified number of seconds.</li><li><code>memory</code>: query execution will be interrupted if the specified number of megabytes will be exceeded. This check works best if only one process is running at the same time. Moreover, please note that this option enforces garbage collection, so it will take some additional time, and it requires GC to be enabled in your JVM.</li><li><code>base-uri</code>: set <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-base-uri\">base-uri property</a> for the query. Overwrites the base URI of the query; will be used when resolving relative URIs by functions such as <code>fn:doc</code>.</li><li><code>pass</code>: passes on the original error info (line and column number, optional file uri). By default, this option is <code>false</code>.</li></ul>",
     "params": {
      "$bindings": "value of type map(*)?",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "xquery:update the query contains <a href=\"https://docs.basex.org/wiki/XQuery_Update#Updating_Expressions\">updating expressions</a>.",
      "xquery:permission insufficient permissions for evaluating the query.",
      "xquery:timeout query execution exceeded timeout.",
      "xquery:limit query execution exceeded memory limit.",
      "xquery:nested nested query evaluation is not allowed."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "eval-update",
    "uri": "http://basex.org/modules/xquery",
    "params": [
     "$query as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Evaluates a query as updating expression. All updates will be added to the <a href=\"https://docs.basex.org/wiki/XQuery_Update#Pending_Update_List\">Pending Update List</a> of the main query and performed after the evaluation of the main query.<br/>The rules for all arguments are the same as for <code><a href=\"https://docs.basex.org/wiki/XQuery_Module#xquery:eval\">xquery:eval</a></code>.",
     "params": {},
     "errors": [
      "xquery:update the query contains no <a href=\"https://docs.basex.org/wiki/XQuery_Update#Updating_Expressions\">updating expressions</a>.",
      "xquery:permission insufficient permissions for evaluating the query.",
      "xquery:timeout query execution exceeded timeout.",
      "xquery:limit query execution exceeded memory limit.",
      "xquery:nested nested query evaluation is not allowed."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "eval-update",
    "uri": "http://basex.org/modules/xquery",
    "params": [
     "$query as xs:anyAtomicType",
     "$bindings as map(*)?"
    ],
    "comments": {
     "description": " Evaluates a query as updating expression. All updates will be added to the <a href=\"https://docs.basex.org/wiki/XQuery_Update#Pending_Update_List\">Pending Update List</a> of the main query and performed after the evaluation of the main query.<br/>The rules for all arguments are the same as for <code><a href=\"https://docs.basex.org/wiki/XQuery_Module#xquery:eval\">xquery:eval</a></code>.",
     "params": {
      "$bindings": "value of type map(*)?"
     },
     "errors": [
      "xquery:update the query contains no <a href=\"https://docs.basex.org/wiki/XQuery_Update#Updating_Expressions\">updating expressions</a>.",
      "xquery:permission insufficient permissions for evaluating the query.",
      "xquery:timeout query execution exceeded timeout.",
      "xquery:limit query execution exceeded memory limit.",
      "xquery:nested nested query evaluation is not allowed."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "eval-update",
    "uri": "http://basex.org/modules/xquery",
    "params": [
     "$query as xs:anyAtomicType",
     "$bindings as map(*)?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Evaluates a query as updating expression. All updates will be added to the <a href=\"https://docs.basex.org/wiki/XQuery_Update#Pending_Update_List\">Pending Update List</a> of the main query and performed after the evaluation of the main query.<br/>The rules for all arguments are the same as for <code><a href=\"https://docs.basex.org/wiki/XQuery_Module#xquery:eval\">xquery:eval</a></code>.",
     "params": {
      "$bindings": "value of type map(*)?",
      "$options": "value of type map(*)?"
     },
     "errors": [
      "xquery:update the query contains no <a href=\"https://docs.basex.org/wiki/XQuery_Update#Updating_Expressions\">updating expressions</a>.",
      "xquery:permission insufficient permissions for evaluating the query.",
      "xquery:timeout query execution exceeded timeout.",
      "xquery:limit query execution exceeded memory limit.",
      "xquery:nested nested query evaluation is not allowed."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "parse",
    "uri": "http://basex.org/modules/xquery",
    "params": [
     "$query as xs:anyAtomicType"
    ],
    "comments": {
     "description": " Parses the specified <code>$query</code> as XQuery module and returns the resulting query plan. If the query is of type <code>xs:anyURI</code>, the module located at this URI will be retrieved (a relative URI will be resolved against the static base URI). Otherwise, the input is expected to be of type <code>xs:string</code>. The <code>$options</code> parameter influences the output: <ul><li><code>compile</code>: additionally compiles the query after parsing it. By default, this option is <code>false</code>.</li><li><code>plan</code>: returns an XML representation of the internal query plan. By default, this option is <code>true</code>. The naming of the expressions in the query plan may change over time</li><li><code>pass</code>: by default, the option is <code>false</code>. If an error is raised, the line/column number and the optional file uri will refer to the location of the function call. If the option is enabled, the line/column and file uri will be adopted from the raised error.</li><li><code>base-uri</code>: set <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-base-uri\">base-uri property</a> for the query. This URI will be used when resolving relative URIs by functions such as <code>fn:doc</code>.</li></ul>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "parse",
    "uri": "http://basex.org/modules/xquery",
    "params": [
     "$query as xs:anyAtomicType",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Parses the specified <code>$query</code> as XQuery module and returns the resulting query plan. If the query is of type <code>xs:anyURI</code>, the module located at this URI will be retrieved (a relative URI will be resolved against the static base URI). Otherwise, the input is expected to be of type <code>xs:string</code>. The <code>$options</code> parameter influences the output: <ul><li><code>compile</code>: additionally compiles the query after parsing it. By default, this option is <code>false</code>.</li><li><code>plan</code>: returns an XML representation of the internal query plan. By default, this option is <code>true</code>. The naming of the expressions in the query plan may change over time</li><li><code>pass</code>: by default, the option is <code>false</code>. If an error is raised, the line/column number and the optional file uri will refer to the location of the function call. If the option is enabled, the line/column and file uri will be adopted from the raised error.</li><li><code>base-uri</code>: set <a href=\"https://www.w3.org/TR/xquery-31/#dt-static-base-uri\">base-uri property</a> for the query. This URI will be used when resolving relative URIs by functions such as <code>fn:doc</code>.</li></ul>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type item()?"
    }
   },
   {
    "name": "fork-join",
    "uri": "http://basex.org/modules/xquery",
    "params": [
     "$functions as function(*)*"
    ],
    "comments": {
     "description": " This function executes the supplied (non-updating) <code>$functions</code> in parallel. The following <code>$options</code> are available: <ul><li><code>parallel</code>: Maximum number of parallel threads. If the value is smaller than <code>1</code>, or if the option is omitted, the number of available processors is used.</li><li><code>result</code>: Suppress or return the function results (default: <code>true</code>).</li><li><code>errors</code>: Ignore or raise errors (default: <code>true</code>).</li></ul>",
     "params": {},
     "errors": [
      "xquery:error an unexpected error occurred."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   },
   {
    "name": "fork-join",
    "uri": "http://basex.org/modules/xquery",
    "params": [
     "$functions as function(*)*",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " This function executes the supplied (non-updating) <code>$functions</code> in parallel. The following <code>$options</code> are available: <ul><li><code>parallel</code>: Maximum number of parallel threads. If the value is smaller than <code>1</code>, or if the option is omitted, the number of available processors is used.</li><li><code>result</code>: Suppress or return the function results (default: <code>true</code>).</li><li><code>errors</code>: Ignore or raise errors (default: <code>true</code>).</li></ul>",
     "params": {
      "$options": "value of type map(*)?"
     },
     "errors": [
      "xquery:error an unexpected error occurred."
     ],
     "others": [],
     "return": "value of type item()*"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions for parsing and evaluating XQuery strings at runtime, and to run code in parallel."
 },
 "http://basex.org/modules/xslt": {
  "moduleNamespace": "http://basex.org/modules/xslt",
  "prefixes": [
   "xslt"
  ],
  "namespaces": [],
  "variables": [],
  "functions": [
   {
    "name": "processor",
    "uri": "http://basex.org/modules/xslt",
    "params": [],
    "comments": {
     "description": " Returns the name of the applied XSLT processor (\"Java\", \"Saxon EE\", \"Saxon PE\", \"Saxon HE\"). If a system property was assigned that points to an existing implementation other than Saxon, the classpath is returned instead.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "version",
    "uri": "http://basex.org/modules/xslt",
    "params": [],
    "comments": {
     "description": " Returns the supported XSLT version (\"1.0\", \"3.0\"). An empty string is returned if a classpath in the system property points to an existing implementation other than Saxon.<br/>",
     "params": {},
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "transform",
    "uri": "http://basex.org/modules/xslt",
    "params": [
     "$input as item()",
     "$stylesheet as item()"
    ],
    "comments": {
     "description": " Transforms the document specified by <code>$input</code>, using the XSLT template specified by <code>$stylesheet</code>, and returns the result as node. <code>$input</code> and <code>$stylesheet</code> can be specified as<br/> <ul><li><code>xs:string</code>, containing the stylesheet URI,</li><li><code>xs:string</code>, containing the document in its string representation, or</li><li><code>node()</code>, containing the document itself.</li></ul> <p><a href=\"https://docs.basex.org/wiki/Catalog_Resolver\">XML Catalog files</a> will be considered when resolving URIs. Variables can be bound to a stylesheet via <code>$arguments</code> (only strings are supported when using XSLT 3.0 and Saxon). The following <code>$options</code> are available: </p> <ul><li><code>cache</code>: cache XSLT transformer (speeds up repeated transformations, but increases memory consumption)</li></ul>",
     "params": {
      "$stylesheet": "value of type item()"
     },
     "errors": [],
     "others": [],
     "return": "value of type node()"
    }
   },
   {
    "name": "transform",
    "uri": "http://basex.org/modules/xslt",
    "params": [
     "$input as item()",
     "$stylesheet as item()",
     "$arguments as map(*)?"
    ],
    "comments": {
     "description": " Transforms the document specified by <code>$input</code>, using the XSLT template specified by <code>$stylesheet</code>, and returns the result as node. <code>$input</code> and <code>$stylesheet</code> can be specified as<br/> <ul><li><code>xs:string</code>, containing the stylesheet URI,</li><li><code>xs:string</code>, containing the document in its string representation, or</li><li><code>node()</code>, containing the document itself.</li></ul> <p><a href=\"https://docs.basex.org/wiki/Catalog_Resolver\">XML Catalog files</a> will be considered when resolving URIs. Variables can be bound to a stylesheet via <code>$arguments</code> (only strings are supported when using XSLT 3.0 and Saxon). The following <code>$options</code> are available: </p> <ul><li><code>cache</code>: cache XSLT transformer (speeds up repeated transformations, but increases memory consumption)</li></ul>",
     "params": {
      "$stylesheet": "value of type item()",
      "$arguments": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type node()"
    }
   },
   {
    "name": "transform",
    "uri": "http://basex.org/modules/xslt",
    "params": [
     "$input as item()",
     "$stylesheet as item()",
     "$arguments as map(*)?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Transforms the document specified by <code>$input</code>, using the XSLT template specified by <code>$stylesheet</code>, and returns the result as node. <code>$input</code> and <code>$stylesheet</code> can be specified as<br/> <ul><li><code>xs:string</code>, containing the stylesheet URI,</li><li><code>xs:string</code>, containing the document in its string representation, or</li><li><code>node()</code>, containing the document itself.</li></ul> <p><a href=\"https://docs.basex.org/wiki/Catalog_Resolver\">XML Catalog files</a> will be considered when resolving URIs. Variables can be bound to a stylesheet via <code>$arguments</code> (only strings are supported when using XSLT 3.0 and Saxon). The following <code>$options</code> are available: </p> <ul><li><code>cache</code>: cache XSLT transformer (speeds up repeated transformations, but increases memory consumption)</li></ul>",
     "params": {
      "$stylesheet": "value of type item()",
      "$arguments": "value of type map(*)?",
      "$options": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type node()"
    }
   },
   {
    "name": "transform-text",
    "uri": "http://basex.org/modules/xslt",
    "params": [
     "$input as item()",
     "$stylesheet as item()"
    ],
    "comments": {
     "description": " Transforms the document specified by <code>$input</code>, using the XSLT template specified by <code>$stylesheet</code>, and returns the result as string. The semantics of <code>$params</code> and <code>$options</code> is the same as for <code><a href=\"https://docs.basex.org/wiki/XSLT_Module#xslt:transform\">xslt:transform</a></code>.<br/>",
     "params": {
      "$stylesheet": "value of type item()"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "transform-text",
    "uri": "http://basex.org/modules/xslt",
    "params": [
     "$input as item()",
     "$stylesheet as item()",
     "$arguments as map(*)?"
    ],
    "comments": {
     "description": " Transforms the document specified by <code>$input</code>, using the XSLT template specified by <code>$stylesheet</code>, and returns the result as string. The semantics of <code>$params</code> and <code>$options</code> is the same as for <code><a href=\"https://docs.basex.org/wiki/XSLT_Module#xslt:transform\">xslt:transform</a></code>.<br/>",
     "params": {
      "$stylesheet": "value of type item()",
      "$arguments": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "transform-text",
    "uri": "http://basex.org/modules/xslt",
    "params": [
     "$input as item()",
     "$stylesheet as item()",
     "$arguments as map(*)?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Transforms the document specified by <code>$input</code>, using the XSLT template specified by <code>$stylesheet</code>, and returns the result as string. The semantics of <code>$params</code> and <code>$options</code> is the same as for <code><a href=\"https://docs.basex.org/wiki/XSLT_Module#xslt:transform\">xslt:transform</a></code>.<br/>",
     "params": {
      "$stylesheet": "value of type item()",
      "$arguments": "value of type map(*)?",
      "$options": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "transform-report",
    "uri": "http://basex.org/modules/xslt",
    "params": [
     "$input as item()",
     "$stylesheet as item()"
    ],
    "comments": {
     "description": " Transforms the document specified by <code>$input</code>, using the XSLT template specified by <code>$stylesheet</code>, and returns a map with the following keys: <ul><li><code>result</code>: The transformation result: One or more document nodes, or (if the result cannot be converted to XML) an item of type <code>xs:untypedAtomic</code>.</li><li><code>messages</code>: Informational output generated by <code>xsl:message</code> elements: A sequence of arrays. The arrays consist of XML elements, or (for those messages that cannot be converted to XML) items of type <code>xs:untypedAtomic</code>.</li></ul> <p>The semantics of <code>$params</code> and <code>$options</code> is the same as for <code><a href=\"https://docs.basex.org/wiki/XSLT_Module#xslt:transform\">xslt:transform</a></code>.<br/>For the moment, messages can only be returned with recent versions of Saxon. </p> <ul><li><code>error</code> (optional): An error string, which would be raised as an error by the other functions of this module.</li></ul>",
     "params": {
      "$stylesheet": "value of type item()"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "transform-report",
    "uri": "http://basex.org/modules/xslt",
    "params": [
     "$input as item()",
     "$stylesheet as item()",
     "$arguments as map(*)?"
    ],
    "comments": {
     "description": " Transforms the document specified by <code>$input</code>, using the XSLT template specified by <code>$stylesheet</code>, and returns a map with the following keys: <ul><li><code>result</code>: The transformation result: One or more document nodes, or (if the result cannot be converted to XML) an item of type <code>xs:untypedAtomic</code>.</li><li><code>messages</code>: Informational output generated by <code>xsl:message</code> elements: A sequence of arrays. The arrays consist of XML elements, or (for those messages that cannot be converted to XML) items of type <code>xs:untypedAtomic</code>.</li></ul> <p>The semantics of <code>$params</code> and <code>$options</code> is the same as for <code><a href=\"https://docs.basex.org/wiki/XSLT_Module#xslt:transform\">xslt:transform</a></code>.<br/>For the moment, messages can only be returned with recent versions of Saxon. </p> <ul><li><code>error</code> (optional): An error string, which would be raised as an error by the other functions of this module.</li></ul>",
     "params": {
      "$stylesheet": "value of type item()",
      "$arguments": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   },
   {
    "name": "transform-report",
    "uri": "http://basex.org/modules/xslt",
    "params": [
     "$input as item()",
     "$stylesheet as item()",
     "$arguments as map(*)?",
     "$options as map(*)?"
    ],
    "comments": {
     "description": " Transforms the document specified by <code>$input</code>, using the XSLT template specified by <code>$stylesheet</code>, and returns a map with the following keys: <ul><li><code>result</code>: The transformation result: One or more document nodes, or (if the result cannot be converted to XML) an item of type <code>xs:untypedAtomic</code>.</li><li><code>messages</code>: Informational output generated by <code>xsl:message</code> elements: A sequence of arrays. The arrays consist of XML elements, or (for those messages that cannot be converted to XML) items of type <code>xs:untypedAtomic</code>.</li></ul> <p>The semantics of <code>$params</code> and <code>$options</code> is the same as for <code><a href=\"https://docs.basex.org/wiki/XSLT_Module#xslt:transform\">xslt:transform</a></code>.<br/>For the moment, messages can only be returned with recent versions of Saxon. </p> <ul><li><code>error</code> (optional): An error string, which would be raised as an error by the other functions of this module.</li></ul>",
     "params": {
      "$stylesheet": "value of type item()",
      "$arguments": "value of type map(*)?",
      "$options": "value of type map(*)?"
     },
     "errors": [],
     "others": [],
     "return": "value of type xs:string"
    }
   }
  ],
  "description": " This <a href=\"https://docs.basex.org/wiki/Module_Library\">XQuery Module</a> contains functions and variables to perform XSL transformations."
 }
}