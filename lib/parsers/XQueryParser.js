// This file was generated on Mon Nov 20, 2023 09:59 (UTC) by REx v5.56 which is Copyright (c) 1979-2023 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "XQueryParser.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 264:                       // 'xquery'
      lookahead2W(183);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' |
                                    // 'or' | 'otherwise' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 64264                 // 'xquery' 'encoding'
     || lk == 130312)               // 'xquery' 'version'
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 176:                       // 'module'
      lookahead2W(182);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' |
                                    // 'ne' | 'or' | 'otherwise' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 91312:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(264);                   // 'xquery'
    lookahead1W(110);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 125:                       // 'encoding'
      consume(125);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      break;
    default:
      consume(254);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      lookahead1W(102);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 125)                // 'encoding'
      {
        consume(125);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
    }
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_QueryBody();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(132);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(176);                   // 'module'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(178);                   // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(245);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(188);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'construction' |
                                    // 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'option' | 'or' | 'ordering' | 'otherwise' | 'revalidation' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'updating' | 'variable' | '|' | '||'
        break;
      case 151:                     // 'import'
        lookahead2W(184);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' |
                                    // 'ne' | 'or' | 'otherwise' | 'schema' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 45164               // 'declare' 'base-uri'
       && lk != 46188               // 'declare' 'boundary-space'
       && lk != 50796               // 'declare' 'construction'
       && lk != 53356               // 'declare' 'copy-namespaces'
       && lk != 54380               // 'declare' 'decimal-format'
       && lk != 55916               // 'declare' 'default'
       && lk != 71276               // 'declare' 'ft-option'
       && lk != 90263               // 'import' 'module'
       && lk != 91244               // 'declare' 'namespace'
       && lk != 99948               // 'declare' 'ordering'
       && lk != 109164              // 'declare' 'revalidation'
       && lk != 110743)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(167);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55916)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 91244:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 151:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 71276:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(245);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'otherwise' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16492               // 'declare' '%'
       && lk != 52332               // 'declare' 'context'
       && lk != 73324               // 'declare' 'function'
       && lk != 97900               // 'declare' 'option'
       && lk != 127084              // 'declare' 'updating'
       && lk != 129644)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(161);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 52332:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 97900:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(52);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 108:                       // 'declare'
      lookahead2W(162);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55916)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 46188:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 45164:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50796:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 99948:                     // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 109164:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 53356:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(36);                // S^WS | '(:' | 'boundary-space'
    consume(90);                    // 'boundary-space'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 206:                       // 'preserve'
      consume(206);                 // 'preserve'
      break;
    default:
      consume(232);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consume(97);                    // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consumeT(97);                   // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'base-uri'
    consume(88);                    // 'base-uri'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(99);                    // 'construction'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 232:                       // 'strip'
      consume(232);                 // 'strip'
      break;
    default:
      consume(206);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(62);                // S^WS | '(:' | 'ordering'
    consume(195);                   // 'ordering'
    lookahead1W(125);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 194:                       // 'ordered'
      consume(194);                 // 'ordered'
      break;
    default:
      consume(246);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consume(193);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(123);                   // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 145:                       // 'greatest'
      consume(145);                 // 'greatest'
      break;
    default:
      consume(167);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consumeT(193);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(123);                  // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 145:                       // 'greatest'
      consumeT(145);                // 'greatest'
      break;
    default:
      consumeT(167);                // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(104);                   // 'copy-namespaces'
    lookahead1W(122);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(117);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 206:                       // 'preserve'
      consume(206);                 // 'preserve'
      break;
    default:
      consume(184);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 154:                       // 'inherit'
      consume(154);                 // 'inherit'
      break;
    default:
      consume(183);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(108);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 106:                       // 'decimal-format'
      consume(106);                 // 'decimal-format'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(109);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(106);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(172);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'exponent-separator' | 'grouping-separator' | 'infinity' | 'minus-sign' |
                                    // 'pattern-separator' | 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 52)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 107:                       // 'decimal-separator'
      consume(107);                 // 'decimal-separator'
      break;
    case 147:                       // 'grouping-separator'
      consume(147);                 // 'grouping-separator'
      break;
    case 153:                       // 'infinity'
      consume(153);                 // 'infinity'
      break;
    case 173:                       // 'minus-sign'
      consume(173);                 // 'minus-sign'
      break;
    case 69:                        // 'NaN'
      consume(69);                  // 'NaN'
      break;
    case 202:                       // 'percent'
      consume(202);                 // 'percent'
      break;
    case 201:                       // 'per-mille'
      consume(201);                 // 'per-mille'
      break;
    case 265:                       // 'zero-digit'
      consume(265);                 // 'zero-digit'
      break;
    case 116:                       // 'digit'
      consume(116);                 // 'digit'
      break;
    case 200:                       // 'pattern-separator'
      consume(200);                 // 'pattern-separator'
      break;
    default:
      consume(132);                 // 'exponent-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 151:                       // 'import'
      lookahead2W(120);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 110743:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(151);                   // 'import'
    lookahead1W(65);                // S^WS | '(:' | 'schema'
    consume(216);                   // 'schema'
    lookahead1W(131);               // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 4)                    // StringLiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 86)                   // 'at'
    {
      consume(86);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 178:                       // 'namespace'
      consume(178);                 // 'namespace'
      lookahead1W(175);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(109);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(121);                 // 'element'
      lookahead1W(57);              // S^WS | '(:' | 'namespace'
      consume(178);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(151);                   // 'import'
    lookahead1W(56);                // S^WS | '(:' | 'module'
    consume(176);                   // 'module'
    lookahead1W(82);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 178)                  // 'namespace'
    {
      consume(178);                 // 'namespace'
      lookahead1W(175);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 86)                   // 'at'
    {
      consume(86);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(178);                   // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      consume(121);                 // 'element'
      break;
    default:
      consume(143);                 // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(178);                   // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      consumeT(121);                // 'element'
      break;
    default:
      consumeT(143);                // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consumeT(178);                  // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(51);                // S^WS | '(:' | 'ft-option'
    consume(139);                   // 'ft-option'
    lookahead1W(74);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(108);                   // 'declare'
    for (;;)
    {
      lookahead1W(146);             // S^WS | '%' | '(:' | 'function' | 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 248)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 248:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 253:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    default:
      whitespace();
      parse_FunctionDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(248);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(155);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(144);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(144);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(155);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(144);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(144);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(253);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(138);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(133);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(102);                   // 'context'
    lookahead1W(54);                // S^WS | '(:' | 'item'
    consume(162);                   // 'item'
    lookahead1W(138);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 84)                   // 'as'
    {
      consume(84);                  // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(133);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(143);                   // 'function'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(139);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 84)                   // 'as'
    {
      consume(84);                  // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(113);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 266:                       // '{'
      whitespace();
      parse_FunctionBody();
      break;
    default:
      consume(133);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(136);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(136);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(266);                   // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 270)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(270);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(266);                  // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 270)                  // '}'
    {
      try_Expr();
    }
    consumeT(270);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'option'
    consume(191);                   // 'option'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 212)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 212)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      parse_ForClause();
      break;
    case 168:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      try_ForClause();
      break;
    case 168:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
    case 168:                       // 'let'
      parse_InitialClause();
      break;
    case 257:                       // 'where'
      parse_WhereClause();
      break;
    case 146:                       // 'group'
      parse_GroupByClause();
      break;
    case 105:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
    case 168:                       // 'let'
      try_InitialClause();
      break;
    case 257:                       // 'where'
      try_WhereClause();
      break;
    case 146:                       // 'group'
      try_GroupByClause();
      break;
    case 105:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(137);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(137);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(156);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 78)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 86)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 219)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(152);                   // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(156);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 78)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 86)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 219)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(152);                  // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(78);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(123);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(78);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(123);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(86);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(86);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(219);                   // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(219);                  // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(168);                   // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(168);                  // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 84)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 84)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(137);                   // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 242:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(137);                  // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 242:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(242);                   // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(259);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(152);                   // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 126                   // 'end'
     || l1 == 190)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(242);                  // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(259);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(152);                  // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 126                   // 'end'
     || l1 == 190)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(225);                   // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(259);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(152);                   // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(225);                  // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(259);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(152);                  // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(228);                   // 'start'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(256);                   // 'when'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(228);                  // 'start'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(256);                  // 'when'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 190)                  // 'only'
    {
      consume(190);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(126);                   // 'end'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(256);                   // 'when'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 190)                  // 'only'
    {
      consumeT(190);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(126);                  // 'end'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(256);                  // 'when'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 86)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(143);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 207)                  // 'previous'
    {
      consume(207);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 181)                  // 'next'
    {
      consume(181);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 86)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(143);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 207)                  // 'previous'
    {
      consumeT(207);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 181)                  // 'next'
    {
      consumeT(181);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(105);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(105);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(257);                   // 'where'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(257);                  // 'where'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(146);                   // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consume(91);                    // 'by'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(146);                  // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consumeT(91);                   // 'by'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 40479                 // '$' 'ancestor'
     || lk == 40991                 // '$' 'ancestor-or-self'
     || lk == 41503                 // '$' 'and'
     || lk == 43039                 // '$' 'as'
     || lk == 43551                 // '$' 'ascending'
     || lk == 44063                 // '$' 'at'
     || lk == 44575                 // '$' 'attribute'
     || lk == 47135                 // '$' 'case'
     || lk == 47647                 // '$' 'cast'
     || lk == 48159                 // '$' 'castable'
     || lk == 49183                 // '$' 'child'
     || lk == 49695                 // '$' 'collation'
     || lk == 50207                 // '$' 'comment'
     || lk == 52767                 // '$' 'copy'
     || lk == 53791                 // '$' 'count'
     || lk == 55327                 // '$' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 64543                 // '$' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 69151                 // '$' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 73247                 // '$' 'function'
     || lk == 73759                 // '$' 'ge'
     || lk == 74783                 // '$' 'group'
     || lk == 75807                 // '$' 'gt'
     || lk == 76319                 // '$' 'idiv'
     || lk == 76831                 // '$' 'if'
     || lk == 77343                 // '$' 'import'
     || lk == 79903                 // '$' 'insert'
     || lk == 80415                 // '$' 'instance'
     || lk == 80927                 // '$' 'intersect'
     || lk == 81951                 // '$' 'invoke'
     || lk == 82463                 // '$' 'is'
     || lk == 82975                 // '$' 'item'
     || lk == 85023                 // '$' 'le'
     || lk == 86047                 // '$' 'let'
     || lk == 87583                 // '$' 'lt'
     || lk == 89119                 // '$' 'mod'
     || lk == 89631                 // '$' 'modify'
     || lk == 90143                 // '$' 'module'
     || lk == 91167                 // '$' 'namespace'
     || lk == 91679                 // '$' 'namespace-node'
     || lk == 92191                 // '$' 'ne'
     || lk == 94751                 // '$' 'node'
     || lk == 97311                 // '$' 'only'
     || lk == 98335                 // '$' 'or'
     || lk == 98847                 // '$' 'order'
     || lk == 99359                 // '$' 'ordered'
     || lk == 101919                // '$' 'parent'
     || lk == 104479                // '$' 'preceding'
     || lk == 104991                // '$' 'preceding-sibling'
     || lk == 106527                // '$' 'processing-instruction'
     || lk == 107551                // '$' 'rename'
     || lk == 108063                // '$' 'replace'
     || lk == 108575                // '$' 'return'
     || lk == 110111                // '$' 'satisfies'
     || lk == 111135                // '$' 'schema-attribute'
     || lk == 111647                // '$' 'schema-element'
     || lk == 112671                // '$' 'self'
     || lk == 115743                // '$' 'some'
     || lk == 116255                // '$' 'stable'
     || lk == 116767                // '$' 'start'
     || lk == 119327                // '$' 'switch'
     || lk == 119839                // '$' 'text'
     || lk == 121887                // '$' 'to'
     || lk == 122399                // '$' 'transform'
     || lk == 122911                // '$' 'treat'
     || lk == 123423                // '$' 'try'
     || lk == 124959                // '$' 'typeswitch'
     || lk == 125471                // '$' 'union'
     || lk == 125983                // '$' 'unordered'
     || lk == 126495                // '$' 'update'
     || lk == 127007                // '$' 'updating'
     || lk == 128543                // '$' 'validate'
     || lk == 131615                // '$' 'where'
     || lk == 133151                // '$' 'with'
     || lk == 135199)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 84)             // 'as'
          {
            if (l1 == 84)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(244);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 97)             // 'collation'
          {
            consumeT(97);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 84)                 // 'as'
      {
        if (l1 == 84)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consume(51);                // ':='
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 97)                 // 'collation'
      {
        consume(97);                // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 40479                 // '$' 'ancestor'
     || lk == 40991                 // '$' 'ancestor-or-self'
     || lk == 41503                 // '$' 'and'
     || lk == 43039                 // '$' 'as'
     || lk == 43551                 // '$' 'ascending'
     || lk == 44063                 // '$' 'at'
     || lk == 44575                 // '$' 'attribute'
     || lk == 47135                 // '$' 'case'
     || lk == 47647                 // '$' 'cast'
     || lk == 48159                 // '$' 'castable'
     || lk == 49183                 // '$' 'child'
     || lk == 49695                 // '$' 'collation'
     || lk == 50207                 // '$' 'comment'
     || lk == 52767                 // '$' 'copy'
     || lk == 53791                 // '$' 'count'
     || lk == 55327                 // '$' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 64543                 // '$' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 69151                 // '$' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 73247                 // '$' 'function'
     || lk == 73759                 // '$' 'ge'
     || lk == 74783                 // '$' 'group'
     || lk == 75807                 // '$' 'gt'
     || lk == 76319                 // '$' 'idiv'
     || lk == 76831                 // '$' 'if'
     || lk == 77343                 // '$' 'import'
     || lk == 79903                 // '$' 'insert'
     || lk == 80415                 // '$' 'instance'
     || lk == 80927                 // '$' 'intersect'
     || lk == 81951                 // '$' 'invoke'
     || lk == 82463                 // '$' 'is'
     || lk == 82975                 // '$' 'item'
     || lk == 85023                 // '$' 'le'
     || lk == 86047                 // '$' 'let'
     || lk == 87583                 // '$' 'lt'
     || lk == 89119                 // '$' 'mod'
     || lk == 89631                 // '$' 'modify'
     || lk == 90143                 // '$' 'module'
     || lk == 91167                 // '$' 'namespace'
     || lk == 91679                 // '$' 'namespace-node'
     || lk == 92191                 // '$' 'ne'
     || lk == 94751                 // '$' 'node'
     || lk == 97311                 // '$' 'only'
     || lk == 98335                 // '$' 'or'
     || lk == 98847                 // '$' 'order'
     || lk == 99359                 // '$' 'ordered'
     || lk == 101919                // '$' 'parent'
     || lk == 104479                // '$' 'preceding'
     || lk == 104991                // '$' 'preceding-sibling'
     || lk == 106527                // '$' 'processing-instruction'
     || lk == 107551                // '$' 'rename'
     || lk == 108063                // '$' 'replace'
     || lk == 108575                // '$' 'return'
     || lk == 110111                // '$' 'satisfies'
     || lk == 111135                // '$' 'schema-attribute'
     || lk == 111647                // '$' 'schema-element'
     || lk == 112671                // '$' 'self'
     || lk == 115743                // '$' 'some'
     || lk == 116255                // '$' 'stable'
     || lk == 116767                // '$' 'start'
     || lk == 119327                // '$' 'switch'
     || lk == 119839                // '$' 'text'
     || lk == 121887                // '$' 'to'
     || lk == 122399                // '$' 'transform'
     || lk == 122911                // '$' 'treat'
     || lk == 123423                // '$' 'try'
     || lk == 124959                // '$' 'typeswitch'
     || lk == 125471                // '$' 'union'
     || lk == 125983                // '$' 'unordered'
     || lk == 126495                // '$' 'update'
     || lk == 127007                // '$' 'updating'
     || lk == 128543                // '$' 'validate'
     || lk == 131615                // '$' 'where'
     || lk == 133151                // '$' 'with'
     || lk == 135199)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 84)             // 'as'
          {
            if (l1 == 84)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(244);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 97)             // 'collation'
          {
            consumeT(97);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 84)                 // 'as'
      {
        if (l1 == 84)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consumeT(51);               // ':='
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 97)                 // 'collation'
      {
        consumeT(97);               // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        try_URILiteral();
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 193:                       // 'order'
      consume(193);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(91);                  // 'by'
      break;
    default:
      consume(227);                 // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consume(193);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(91);                  // 'by'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 193:                       // 'order'
      consumeT(193);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(91);                 // 'by'
      break;
    default:
      consumeT(227);                // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consumeT(193);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(91);                 // 'by'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 85                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 85:                      // 'ascending'
        consume(85);                // 'ascending'
        break;
      default:
        consume(113);               // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      consume(123);                 // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 145:                     // 'greatest'
        consume(145);               // 'greatest'
        break;
      default:
        consume(167);               // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 97)                   // 'collation'
    {
      consume(97);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 85                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 85:                      // 'ascending'
        consumeT(85);               // 'ascending'
        break;
      default:
        consumeT(113);              // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      consumeT(123);                // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 145:                     // 'greatest'
        consumeT(145);              // 'greatest'
        break;
      default:
        consumeT(167);              // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 97)                   // 'collation'
    {
      consumeT(97);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(212);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(212);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 226:                       // 'some'
      consume(226);                 // 'some'
      break;
    default:
      consume(129);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    consume(215);                   // 'satisfies'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 226:                       // 'some'
      consumeT(226);                // 'some'
      break;
    default:
      consumeT(129);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    consumeT(215);                  // 'satisfies'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(152);                   // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  function try_QuantifiedVarDecl()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(152);                  // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(233);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 92)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(212);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(233);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 92)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(212);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(92);                  // 'case'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 92)                 // 'case'
      {
        break;
      }
    }
    consume(212);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(92);                 // 'case'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 92)                 // 'case'
      {
        break;
      }
    }
    consumeT(212);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(244);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 92)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(212);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(244);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 92)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(212);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(92);                    // 'case'
    lookahead1W(239);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
    }
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(212);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(92);                   // 'case'
    lookahead1W(239);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
    }
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceTypeUnion();
    consumeT(212);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 268)                // '|'
      {
        break;
      }
      consume(268);                 // '|'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 268)                // '|'
      {
        break;
      }
      consumeT(268);                // '|'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(150);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consume(235);                   // 'then'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(122);                   // 'else'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(150);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consumeT(235);                  // 'then'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(122);                  // 'else'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_BasexIfExpr()
  {
    eventHandler.startNonterminal("BasexIfExpr", e0);
    consume(150);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consume(235);                   // 'then'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("BasexIfExpr", e0);
  }

  function try_BasexIfExpr()
  {
    consumeT(150);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consumeT(235);                  // 'then'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(174);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '}' |
                                    // '}`'
      if (l1 != 95)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(174);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '}' |
                                    // '}`'
      if (l1 != 95)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(241);                   // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedTryTargetExpr();
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(241);                  // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedTryTargetExpr();
  }

  function parse_EnclosedTryTargetExpr()
  {
    eventHandler.startNonterminal("EnclosedTryTargetExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedTryTargetExpr", e0);
  }

  function try_EnclosedTryTargetExpr()
  {
    try_EnclosedExpr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(95);                    // 'catch'
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(95);                   // 'catch'
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    try_CatchErrorList();
    try_EnclosedExpr();
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 268)                // '|'
      {
        break;
      }
      consume(268);                 // '|'
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 268)                // '|'
      {
        break;
      }
      consumeT(268);                // '|'
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 192)                // 'or'
      {
        break;
      }
      consume(192);                 // 'or'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 192)                // 'or'
      {
        break;
      }
      consumeT(192);                // 'or'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 81)                 // 'and'
      {
        break;
      }
      consume(81);                  // 'and'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 81)                 // 'and'
      {
        break;
      }
      consumeT(81);                 // 'and'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 53                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 144                   // 'ge'
     || l1 == 148                   // 'gt'
     || l1 == 161                   // 'is'
     || l1 == 166                   // 'le'
     || l1 == 171                   // 'lt'
     || l1 == 180)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 144:                     // 'ge'
      case 148:                     // 'gt'
      case 166:                     // 'le'
      case 171:                     // 'lt'
      case 180:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 161:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 53                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 144                   // 'ge'
     || l1 == 148                   // 'gt'
     || l1 == 161                   // 'is'
     || l1 == 166                   // 'le'
     || l1 == 171                   // 'lt'
     || l1 == 180)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 144:                     // 'ge'
      case 148:                     // 'gt'
      case 166:                     // 'le'
      case 171:                     // 'lt'
      case 180:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 161:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 100)                  // 'contains'
    {
      consume(100);                 // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consume(234);                 // 'text'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 261)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 100)                  // 'contains'
    {
      consumeT(100);                // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consumeT(234);                // 'text'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 261)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 269)                // '||'
      {
        break;
      }
      consume(269);                 // '||'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 269)                // '||'
      {
        break;
      }
      consumeT(269);                // '||'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 238)                  // 'to'
    {
      consume(238);                 // 'to'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 238)                  // 'to'
    {
      consumeT(238);                // 'to'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consume(39);                // '+'
        break;
      default:
        consume(41);                // '-'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consumeT(39);               // '+'
        break;
      default:
        consumeT(41);               // '-'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_OtherwiseExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 149                 // 'idiv'
       && l1 != 174)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 118:                     // 'div'
        consume(118);               // 'div'
        break;
      case 149:                     // 'idiv'
        consume(149);               // 'idiv'
        break;
      default:
        consume(174);               // 'mod'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_OtherwiseExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_OtherwiseExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 149                 // 'idiv'
       && l1 != 174)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 118:                     // 'div'
        consumeT(118);              // 'div'
        break;
      case 149:                     // 'idiv'
        consumeT(149);              // 'idiv'
        break;
      default:
        consumeT(174);              // 'mod'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_OtherwiseExpr();
    }
  }

  function parse_OtherwiseExpr()
  {
    eventHandler.startNonterminal("OtherwiseExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 66                  // '?:'
       && l1 != 196)                // 'otherwise'
      {
        break;
      }
      switch (l1)
      {
      case 196:                     // 'otherwise'
        consume(196);               // 'otherwise'
        break;
      default:
        consume(66);                // '?:'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("OtherwiseExpr", e0);
  }

  function try_OtherwiseExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 66                  // '?:'
       && l1 != 196)                // 'otherwise'
      {
        break;
      }
      switch (l1)
      {
      case 196:                     // 'otherwise'
        consumeT(196);              // 'otherwise'
        break;
      default:
        consumeT(66);               // '?:'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 245                 // 'union'
       && l1 != 268)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 245:                     // 'union'
        consume(245);               // 'union'
        break;
      default:
        consume(268);               // '|'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 245                 // 'union'
       && l1 != 268)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 245:                     // 'union'
        consumeT(245);              // 'union'
        break;
      default:
        consumeT(268);              // '|'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(197);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 131                 // 'except'
       && l1 != 158)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 158:                     // 'intersect'
        consume(158);               // 'intersect'
        break;
      default:
        consume(131);               // 'except'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(197);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 131                 // 'except'
       && l1 != 158)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 158:                     // 'intersect'
        consumeT(158);              // 'intersect'
        break;
      default:
        consumeT(131);              // 'except'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(198);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}' | '}`'
    if (l1 == 157)                  // 'instance'
    {
      consume(157);                 // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(189);                 // 'of'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(198);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}' | '}`'
    if (l1 == 157)                  // 'instance'
    {
      consumeT(157);                // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(189);                // 'of'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(199);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
    if (l1 == 240)                  // 'treat'
    {
      consume(240);                 // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(199);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
    if (l1 == 240)                  // 'treat'
    {
      consumeT(240);                // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(200);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 94)                   // 'castable'
    {
      consume(94);                  // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(200);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 94)                   // 'castable'
    {
      consumeT(94);                 // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_TransformWithExpr();
    lookahead1W(202);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 93)                   // 'cast'
    {
      consume(93);                  // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_TransformWithExpr();
    lookahead1W(202);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 93)                   // 'cast'
    {
      consumeT(93);                 // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_TransformWithExpr()
  {
    eventHandler.startNonterminal("TransformWithExpr", e0);
    parse_BasexUpdate1Expr();
    lookahead1W(203);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 239)                  // 'transform'
    {
      consume(239);                 // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consume(260);                 // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(266);                 // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 270)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(270);                 // '}'
    }
    eventHandler.endNonterminal("TransformWithExpr", e0);
  }

  function try_TransformWithExpr()
  {
    try_BasexUpdate1Expr();
    lookahead1W(203);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 239)                  // 'transform'
    {
      consumeT(239);                // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consumeT(260);                // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(266);                // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 270)                // '}'
      {
        try_Expr();
      }
      consumeT(270);                // '}'
    }
  }

  function parse_BasexUpdate1Expr()
  {
    eventHandler.startNonterminal("BasexUpdate1Expr", e0);
    parse_BasexUpdateExpr();
    if (l1 == 247)                  // 'update'
    {
      consume(247);                 // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(266);                 // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 270)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(270);                 // '}'
    }
    eventHandler.endNonterminal("BasexUpdate1Expr", e0);
  }

  function try_BasexUpdate1Expr()
  {
    try_BasexUpdateExpr();
    if (l1 == 247)                  // 'update'
    {
      consumeT(247);                // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(266);                // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 270)                // '}'
      {
        try_Expr();
      }
      consumeT(270);                // '}'
    }
  }

  function parse_BasexUpdateExpr()
  {
    eventHandler.startNonterminal("BasexUpdateExpr", e0);
    parse_ArrowExpr();
    for (;;)
    {
      lookahead1W(204);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 247:                     // 'update'
        lookahead2W(80);            // S^WS | '(:' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk == 136439)             // 'update' '{'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(247);          // 'update'
            lookahead1W(80);        // S^WS | '(:' | '{'
            consumeT(266);          // '{'
            lookahead1W(248);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
            if (l1 != 270)          // '}'
            {
              try_Expr();
            }
            consumeT(270);          // '}'
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(247);                 // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(266);                 // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 270)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(270);                 // '}'
    }
    eventHandler.endNonterminal("BasexUpdateExpr", e0);
  }

  function try_BasexUpdateExpr()
  {
    try_ArrowExpr();
    for (;;)
    {
      lookahead1W(204);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 247:                     // 'update'
        lookahead2W(80);            // S^WS | '(:' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk == 136439)             // 'update' '{'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(247);          // 'update'
            lookahead1W(80);        // S^WS | '(:' | '{'
            consumeT(266);          // '{'
            lookahead1W(248);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
            if (l1 != 270)          // '}'
            {
              try_Expr();
            }
            consumeT(270);          // '}'
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(247);                // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(266);                // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 270)                // '}'
      {
        try_Expr();
      }
      consumeT(270);                // '}'
    }
  }

  function parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(205);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consume(61);                  // '=>'
      lookahead1W(236);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  function try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(205);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consumeT(61);                 // '=>'
      lookahead1W(236);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consume(41);                // '-'
        break;
      default:
        consume(39);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consumeT(41);               // '-'
        break;
      default:
        consumeT(39);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 251:                       // 'validate'
      lookahead2W(227);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'strict' | 'times' | 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' |
                                    // 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84731:                     // 'validate' 'lax'
    case 118523:                    // 'validate' 'strict'
    case 124667:                    // 'validate' 'type'
    case 136443:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 251:                       // 'validate'
      lookahead2W(227);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'strict' | 'times' | 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' |
                                    // 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84731:                     // 'validate' 'lax'
    case 118523:                    // 'validate' 'strict'
    case 124667:                    // 'validate' 'type'
    case 136443:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(243);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(243);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 53:                        // '<'
      consume(53);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 62:                        // '>'
      consume(62);                  // '>'
      break;
    default:
      consume(63);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 53:                        // '<'
      consumeT(53);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 62:                        // '>'
      consumeT(62);                 // '>'
      break;
    default:
      consumeT(63);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 180:                       // 'ne'
      consume(180);                 // 'ne'
      break;
    case 171:                       // 'lt'
      consume(171);                 // 'lt'
      break;
    case 166:                       // 'le'
      consume(166);                 // 'le'
      break;
    case 148:                       // 'gt'
      consume(148);                 // 'gt'
      break;
    default:
      consume(144);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 180:                       // 'ne'
      consumeT(180);                // 'ne'
      break;
    case 171:                       // 'lt'
      consumeT(171);                // 'lt'
      break;
    case 166:                       // 'le'
      consumeT(166);                // 'le'
      break;
    case 148:                       // 'gt'
      consumeT(148);                // 'gt'
      break;
    default:
      consumeT(144);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 161:                       // 'is'
      consume(161);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(64);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 161:                       // 'is'
      consumeT(161);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(64);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(251);                   // 'validate'
    lookahead1W(151);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 266)                  // '{'
    {
      switch (l1)
      {
      case 243:                     // 'type'
        consume(243);               // 'type'
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(266);                   // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(270);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(251);                  // 'validate'
    lookahead1W(151);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 266)                  // '{'
    {
      switch (l1)
      {
      case 243:                     // 'type'
        consumeT(243);              // 'type'
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(266);                  // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(270);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 165:                       // 'lax'
      consume(165);                 // 'lax'
      break;
    default:
      consume(231);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 165:                       // 'lax'
      consumeT(165);                // 'lax'
      break;
    default:
      consumeT(231);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(266);                   // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 270)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(270);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(266);                  // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 270)                  // '}'
    {
      try_Expr();
    }
    consumeT(270);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(230);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
    }
    parse_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(2);                // PragmaContents
      consume(20);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(230);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
    }
    try_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(2);                // PragmaContents
      consumeT(20);                 // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(30);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 45:                        // '/'
      consume(45);                  // '/'
      lookahead1W(253);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '?:' | '@' |
                                    // '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'otherwise' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'updating' | 'validate' | 'where' | 'with' | 'words' | 'xquery' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 66:                      // '?:'
      case 71:                      // ']'
      case 76:                      // 'after'
      case 89:                      // 'before'
      case 100:                     // 'contains'
      case 159:                     // 'into'
      case 196:                     // 'otherwise'
      case 198:                     // 'paragraphs'
      case 223:                     // 'sentences'
      case 237:                     // 'times'
      case 263:                     // 'words'
      case 268:                     // '|'
      case 269:                     // '||'
      case 270:                     // '}'
      case 271:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consume(46);                  // '//'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 45:                        // '/'
      consumeT(45);                 // '/'
      lookahead1W(253);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '?:' | '@' |
                                    // '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'otherwise' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'updating' | 'validate' | 'where' | 'with' | 'words' | 'xquery' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 66:                      // '?:'
      case 71:                      // ']'
      case 76:                      // 'after'
      case 89:                      // 'before'
      case 100:                     // 'contains'
      case 159:                     // 'into'
      case 196:                     // 'otherwise'
      case 198:                     // 'paragraphs'
      case 223:                     // 'sentences'
      case 237:                     // 'times'
      case 263:                     // 'words'
      case 268:                     // '|'
      case 269:                     // '||'
      case 270:                     // '}'
      case 271:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consumeT(46);                 // '//'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(243);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 66                  // '?:'
       && lk != 71                  // ']'
       && lk != 76                  // 'after'
       && lk != 81                  // 'and'
       && lk != 84                  // 'as'
       && lk != 85                  // 'ascending'
       && lk != 89                  // 'before'
       && lk != 92                  // 'case'
       && lk != 93                  // 'cast'
       && lk != 94                  // 'castable'
       && lk != 97                  // 'collation'
       && lk != 100                 // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 144                 // 'ge'
       && lk != 146                 // 'group'
       && lk != 148                 // 'gt'
       && lk != 149                 // 'idiv'
       && lk != 157                 // 'instance'
       && lk != 158                 // 'intersect'
       && lk != 159                 // 'into'
       && lk != 161                 // 'is'
       && lk != 166                 // 'le'
       && lk != 168                 // 'let'
       && lk != 171                 // 'lt'
       && lk != 174                 // 'mod'
       && lk != 175                 // 'modify'
       && lk != 180                 // 'ne'
       && lk != 190                 // 'only'
       && lk != 192                 // 'or'
       && lk != 193                 // 'order'
       && lk != 196                 // 'otherwise'
       && lk != 198                 // 'paragraphs'
       && lk != 212                 // 'return'
       && lk != 215                 // 'satisfies'
       && lk != 223                 // 'sentences'
       && lk != 227                 // 'stable'
       && lk != 228                 // 'start'
       && lk != 237                 // 'times'
       && lk != 238                 // 'to'
       && lk != 239                 // 'transform'
       && lk != 240                 // 'treat'
       && lk != 245                 // 'union'
       && lk != 247                 // 'update'
       && lk != 257                 // 'where'
       && lk != 260                 // 'with'
       && lk != 263                 // 'words'
       && lk != 268                 // '|'
       && lk != 269                 // '||'
       && lk != 270                 // '}'
       && lk != 271                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(242);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consume(45);                // '/'
        break;
      case 46:                      // '//'
        consume(46);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(243);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 66                  // '?:'
       && lk != 71                  // ']'
       && lk != 76                  // 'after'
       && lk != 81                  // 'and'
       && lk != 84                  // 'as'
       && lk != 85                  // 'ascending'
       && lk != 89                  // 'before'
       && lk != 92                  // 'case'
       && lk != 93                  // 'cast'
       && lk != 94                  // 'castable'
       && lk != 97                  // 'collation'
       && lk != 100                 // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 144                 // 'ge'
       && lk != 146                 // 'group'
       && lk != 148                 // 'gt'
       && lk != 149                 // 'idiv'
       && lk != 157                 // 'instance'
       && lk != 158                 // 'intersect'
       && lk != 159                 // 'into'
       && lk != 161                 // 'is'
       && lk != 166                 // 'le'
       && lk != 168                 // 'let'
       && lk != 171                 // 'lt'
       && lk != 174                 // 'mod'
       && lk != 175                 // 'modify'
       && lk != 180                 // 'ne'
       && lk != 190                 // 'only'
       && lk != 192                 // 'or'
       && lk != 193                 // 'order'
       && lk != 196                 // 'otherwise'
       && lk != 198                 // 'paragraphs'
       && lk != 212                 // 'return'
       && lk != 215                 // 'satisfies'
       && lk != 223                 // 'sentences'
       && lk != 227                 // 'stable'
       && lk != 228                 // 'start'
       && lk != 237                 // 'times'
       && lk != 238                 // 'to'
       && lk != 239                 // 'transform'
       && lk != 240                 // 'treat'
       && lk != 245                 // 'union'
       && lk != 247                 // 'update'
       && lk != 257                 // 'where'
       && lk != 260                 // 'with'
       && lk != 263                 // 'words'
       && lk != 268                 // '|'
       && lk != 269                 // '||'
       && lk != 270                 // '}'
       && lk != 271                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(242);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
            try_StepExpr();
            memoize(4, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consumeT(45);               // '/'
        break;
      case 46:                      // '//'
        consumeT(46);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 87:                        // 'attribute'
      lookahead2W(251);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'otherwise' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'updating' | 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 121:                       // 'element'
      lookahead2W(250);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '?:' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'otherwise' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'updating' | 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 178:                       // 'namespace'
    case 208:                       // 'processing-instruction'
      lookahead2W(226);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '?:' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // 'updating' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 98:                        // 'comment'
    case 119:                       // 'document'
    case 194:                       // 'ordered'
    case 234:                       // 'text'
    case 246:                       // 'unordered'
      lookahead2W(225);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' |
                                    // '|' | '||' | '}' | '}`'
      break;
    case 124:                       // 'empty-sequence'
    case 150:                       // 'if'
    case 162:                       // 'item'
    case 233:                       // 'switch'
    case 244:                       // 'typeswitch'
      lookahead2W(218);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 79:                        // 'ancestor'
    case 80:                        // 'ancestor-or-self'
    case 96:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 199:                       // 'parent'
    case 204:                       // 'preceding'
    case 205:                       // 'preceding-sibling'
    case 220:                       // 'self'
      lookahead2W(224);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?:' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 81:                        // 'and'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 92:                        // 'case'
    case 93:                        // 'cast'
    case 94:                        // 'castable'
    case 97:                        // 'collation'
    case 103:                       // 'copy'
    case 105:                       // 'count'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 137:                       // 'for'
    case 143:                       // 'function'
    case 144:                       // 'ge'
    case 146:                       // 'group'
    case 148:                       // 'gt'
    case 149:                       // 'idiv'
    case 151:                       // 'import'
    case 156:                       // 'insert'
    case 157:                       // 'instance'
    case 158:                       // 'intersect'
    case 160:                       // 'invoke'
    case 161:                       // 'is'
    case 166:                       // 'le'
    case 168:                       // 'let'
    case 171:                       // 'lt'
    case 174:                       // 'mod'
    case 175:                       // 'modify'
    case 176:                       // 'module'
    case 179:                       // 'namespace-node'
    case 180:                       // 'ne'
    case 185:                       // 'node'
    case 190:                       // 'only'
    case 192:                       // 'or'
    case 193:                       // 'order'
    case 210:                       // 'rename'
    case 211:                       // 'replace'
    case 212:                       // 'return'
    case 215:                       // 'satisfies'
    case 217:                       // 'schema-attribute'
    case 218:                       // 'schema-element'
    case 226:                       // 'some'
    case 227:                       // 'stable'
    case 228:                       // 'start'
    case 238:                       // 'to'
    case 239:                       // 'transform'
    case 240:                       // 'treat'
    case 241:                       // 'try'
    case 245:                       // 'union'
    case 247:                       // 'update'
    case 248:                       // 'updating'
    case 251:                       // 'validate'
    case 257:                       // 'where'
    case 260:                       // 'with'
    case 264:                       // 'xquery'
      lookahead2W(221);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41559                 // 'attribute' 'and'
     || lk == 41593                 // 'element' 'and'
     || lk == 41650                 // 'namespace' 'and'
     || lk == 41680                 // 'processing-instruction' 'and'
     || lk == 43095                 // 'attribute' 'as'
     || lk == 43129                 // 'element' 'as'
     || lk == 43186                 // 'namespace' 'as'
     || lk == 43216                 // 'processing-instruction' 'as'
     || lk == 43607                 // 'attribute' 'ascending'
     || lk == 43641                 // 'element' 'ascending'
     || lk == 43698                 // 'namespace' 'ascending'
     || lk == 43728                 // 'processing-instruction' 'ascending'
     || lk == 47191                 // 'attribute' 'case'
     || lk == 47225                 // 'element' 'case'
     || lk == 47282                 // 'namespace' 'case'
     || lk == 47312                 // 'processing-instruction' 'case'
     || lk == 47703                 // 'attribute' 'cast'
     || lk == 47737                 // 'element' 'cast'
     || lk == 47794                 // 'namespace' 'cast'
     || lk == 47824                 // 'processing-instruction' 'cast'
     || lk == 48215                 // 'attribute' 'castable'
     || lk == 48249                 // 'element' 'castable'
     || lk == 48306                 // 'namespace' 'castable'
     || lk == 48336                 // 'processing-instruction' 'castable'
     || lk == 49751                 // 'attribute' 'collation'
     || lk == 49785                 // 'element' 'collation'
     || lk == 49842                 // 'namespace' 'collation'
     || lk == 49872                 // 'processing-instruction' 'collation'
     || lk == 53847                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53938                 // 'namespace' 'count'
     || lk == 53968                 // 'processing-instruction' 'count'
     || lk == 55895                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55986                 // 'namespace' 'default'
     || lk == 56016                 // 'processing-instruction' 'default'
     || lk == 57943                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58034                 // 'namespace' 'descending'
     || lk == 58064                 // 'processing-instruction' 'descending'
     || lk == 60503                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60594                 // 'namespace' 'div'
     || lk == 60624                 // 'processing-instruction' 'div'
     || lk == 62551                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62642                 // 'namespace' 'else'
     || lk == 62672                 // 'processing-instruction' 'else'
     || lk == 63063                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63154                 // 'namespace' 'empty'
     || lk == 63184                 // 'processing-instruction' 'empty'
     || lk == 64599                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64690                 // 'namespace' 'end'
     || lk == 64720                 // 'processing-instruction' 'end'
     || lk == 65623                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65714                 // 'namespace' 'eq'
     || lk == 65744                 // 'processing-instruction' 'eq'
     || lk == 67159                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67250                 // 'namespace' 'except'
     || lk == 67280                 // 'processing-instruction' 'except'
     || lk == 70231                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70322                 // 'namespace' 'for'
     || lk == 70352                 // 'processing-instruction' 'for'
     || lk == 73815                 // 'attribute' 'ge'
     || lk == 73849                 // 'element' 'ge'
     || lk == 73906                 // 'namespace' 'ge'
     || lk == 73936                 // 'processing-instruction' 'ge'
     || lk == 74839                 // 'attribute' 'group'
     || lk == 74873                 // 'element' 'group'
     || lk == 74930                 // 'namespace' 'group'
     || lk == 74960                 // 'processing-instruction' 'group'
     || lk == 75863                 // 'attribute' 'gt'
     || lk == 75897                 // 'element' 'gt'
     || lk == 75954                 // 'namespace' 'gt'
     || lk == 75984                 // 'processing-instruction' 'gt'
     || lk == 76375                 // 'attribute' 'idiv'
     || lk == 76409                 // 'element' 'idiv'
     || lk == 76466                 // 'namespace' 'idiv'
     || lk == 76496                 // 'processing-instruction' 'idiv'
     || lk == 80471                 // 'attribute' 'instance'
     || lk == 80505                 // 'element' 'instance'
     || lk == 80562                 // 'namespace' 'instance'
     || lk == 80592                 // 'processing-instruction' 'instance'
     || lk == 80983                 // 'attribute' 'intersect'
     || lk == 81017                 // 'element' 'intersect'
     || lk == 81074                 // 'namespace' 'intersect'
     || lk == 81104                 // 'processing-instruction' 'intersect'
     || lk == 82519                 // 'attribute' 'is'
     || lk == 82553                 // 'element' 'is'
     || lk == 82610                 // 'namespace' 'is'
     || lk == 82640                 // 'processing-instruction' 'is'
     || lk == 85079                 // 'attribute' 'le'
     || lk == 85113                 // 'element' 'le'
     || lk == 85170                 // 'namespace' 'le'
     || lk == 85200                 // 'processing-instruction' 'le'
     || lk == 86103                 // 'attribute' 'let'
     || lk == 86137                 // 'element' 'let'
     || lk == 86194                 // 'namespace' 'let'
     || lk == 86224                 // 'processing-instruction' 'let'
     || lk == 87639                 // 'attribute' 'lt'
     || lk == 87673                 // 'element' 'lt'
     || lk == 87730                 // 'namespace' 'lt'
     || lk == 87760                 // 'processing-instruction' 'lt'
     || lk == 89175                 // 'attribute' 'mod'
     || lk == 89209                 // 'element' 'mod'
     || lk == 89266                 // 'namespace' 'mod'
     || lk == 89296                 // 'processing-instruction' 'mod'
     || lk == 89687                 // 'attribute' 'modify'
     || lk == 89721                 // 'element' 'modify'
     || lk == 92247                 // 'attribute' 'ne'
     || lk == 92281                 // 'element' 'ne'
     || lk == 92338                 // 'namespace' 'ne'
     || lk == 92368                 // 'processing-instruction' 'ne'
     || lk == 97367                 // 'attribute' 'only'
     || lk == 97401                 // 'element' 'only'
     || lk == 97458                 // 'namespace' 'only'
     || lk == 97488                 // 'processing-instruction' 'only'
     || lk == 98391                 // 'attribute' 'or'
     || lk == 98425                 // 'element' 'or'
     || lk == 98482                 // 'namespace' 'or'
     || lk == 98512                 // 'processing-instruction' 'or'
     || lk == 98903                 // 'attribute' 'order'
     || lk == 98937                 // 'element' 'order'
     || lk == 98994                 // 'namespace' 'order'
     || lk == 99024                 // 'processing-instruction' 'order'
     || lk == 108631                // 'attribute' 'return'
     || lk == 108665                // 'element' 'return'
     || lk == 108722                // 'namespace' 'return'
     || lk == 108752                // 'processing-instruction' 'return'
     || lk == 110167                // 'attribute' 'satisfies'
     || lk == 110201                // 'element' 'satisfies'
     || lk == 110258                // 'namespace' 'satisfies'
     || lk == 110288                // 'processing-instruction' 'satisfies'
     || lk == 116311                // 'attribute' 'stable'
     || lk == 116345                // 'element' 'stable'
     || lk == 116402                // 'namespace' 'stable'
     || lk == 116432                // 'processing-instruction' 'stable'
     || lk == 116823                // 'attribute' 'start'
     || lk == 116857                // 'element' 'start'
     || lk == 116914                // 'namespace' 'start'
     || lk == 116944                // 'processing-instruction' 'start'
     || lk == 121943                // 'attribute' 'to'
     || lk == 121977                // 'element' 'to'
     || lk == 122034                // 'namespace' 'to'
     || lk == 122064                // 'processing-instruction' 'to'
     || lk == 122455                // 'attribute' 'transform'
     || lk == 122489                // 'element' 'transform'
     || lk == 122967                // 'attribute' 'treat'
     || lk == 123001                // 'element' 'treat'
     || lk == 123058                // 'namespace' 'treat'
     || lk == 123088                // 'processing-instruction' 'treat'
     || lk == 125527                // 'attribute' 'union'
     || lk == 125561                // 'element' 'union'
     || lk == 125618                // 'namespace' 'union'
     || lk == 125648                // 'processing-instruction' 'union'
     || lk == 126551                // 'attribute' 'update'
     || lk == 126585                // 'element' 'update'
     || lk == 131671                // 'attribute' 'where'
     || lk == 131705                // 'element' 'where'
     || lk == 131762                // 'namespace' 'where'
     || lk == 131792                // 'processing-instruction' 'where'
     || lk == 133207                // 'attribute' 'with'
     || lk == 133241)               // 'element' 'with'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 70:                        // '['
    case 74:                        // '``['
    case 83:                        // 'array'
    case 172:                       // 'map'
    case 2647:                      // 'attribute' URIQualifiedName
    case 2681:                      // 'element' URIQualifiedName
    case 7346:                      // 'namespace' NCName^Token
    case 7376:                      // 'processing-instruction' NCName^Token
    case 7767:                      // 'attribute' QName^Token
    case 7801:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14927:                     // 'ancestor' '#'
    case 14928:                     // 'ancestor-or-self' '#'
    case 14929:                     // 'and' '#'
    case 14932:                     // 'as' '#'
    case 14933:                     // 'ascending' '#'
    case 14934:                     // 'at' '#'
    case 14935:                     // 'attribute' '#'
    case 14940:                     // 'case' '#'
    case 14941:                     // 'cast' '#'
    case 14942:                     // 'castable' '#'
    case 14944:                     // 'child' '#'
    case 14945:                     // 'collation' '#'
    case 14946:                     // 'comment' '#'
    case 14951:                     // 'copy' '#'
    case 14953:                     // 'count' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14991:                     // 'function' '#'
    case 14992:                     // 'ge' '#'
    case 14994:                     // 'group' '#'
    case 14996:                     // 'gt' '#'
    case 14997:                     // 'idiv' '#'
    case 14998:                     // 'if' '#'
    case 14999:                     // 'import' '#'
    case 15004:                     // 'insert' '#'
    case 15005:                     // 'instance' '#'
    case 15006:                     // 'intersect' '#'
    case 15008:                     // 'invoke' '#'
    case 15009:                     // 'is' '#'
    case 15010:                     // 'item' '#'
    case 15014:                     // 'le' '#'
    case 15016:                     // 'let' '#'
    case 15019:                     // 'lt' '#'
    case 15022:                     // 'mod' '#'
    case 15023:                     // 'modify' '#'
    case 15024:                     // 'module' '#'
    case 15026:                     // 'namespace' '#'
    case 15027:                     // 'namespace-node' '#'
    case 15028:                     // 'ne' '#'
    case 15033:                     // 'node' '#'
    case 15038:                     // 'only' '#'
    case 15040:                     // 'or' '#'
    case 15041:                     // 'order' '#'
    case 15042:                     // 'ordered' '#'
    case 15047:                     // 'parent' '#'
    case 15052:                     // 'preceding' '#'
    case 15053:                     // 'preceding-sibling' '#'
    case 15056:                     // 'processing-instruction' '#'
    case 15058:                     // 'rename' '#'
    case 15059:                     // 'replace' '#'
    case 15060:                     // 'return' '#'
    case 15063:                     // 'satisfies' '#'
    case 15065:                     // 'schema-attribute' '#'
    case 15066:                     // 'schema-element' '#'
    case 15068:                     // 'self' '#'
    case 15074:                     // 'some' '#'
    case 15075:                     // 'stable' '#'
    case 15076:                     // 'start' '#'
    case 15081:                     // 'switch' '#'
    case 15082:                     // 'text' '#'
    case 15086:                     // 'to' '#'
    case 15087:                     // 'transform' '#'
    case 15088:                     // 'treat' '#'
    case 15089:                     // 'try' '#'
    case 15092:                     // 'typeswitch' '#'
    case 15093:                     // 'union' '#'
    case 15094:                     // 'unordered' '#'
    case 15095:                     // 'update' '#'
    case 15096:                     // 'updating' '#'
    case 15099:                     // 'validate' '#'
    case 15105:                     // 'where' '#'
    case 15108:                     // 'with' '#'
    case 15112:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17487:                     // 'ancestor' '('
    case 17488:                     // 'ancestor-or-self' '('
    case 17489:                     // 'and' '('
    case 17492:                     // 'as' '('
    case 17493:                     // 'ascending' '('
    case 17494:                     // 'at' '('
    case 17500:                     // 'case' '('
    case 17501:                     // 'cast' '('
    case 17502:                     // 'castable' '('
    case 17504:                     // 'child' '('
    case 17505:                     // 'collation' '('
    case 17511:                     // 'copy' '('
    case 17513:                     // 'count' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17551:                     // 'function' '('
    case 17552:                     // 'ge' '('
    case 17554:                     // 'group' '('
    case 17556:                     // 'gt' '('
    case 17557:                     // 'idiv' '('
    case 17559:                     // 'import' '('
    case 17564:                     // 'insert' '('
    case 17565:                     // 'instance' '('
    case 17566:                     // 'intersect' '('
    case 17568:                     // 'invoke' '('
    case 17569:                     // 'is' '('
    case 17574:                     // 'le' '('
    case 17576:                     // 'let' '('
    case 17579:                     // 'lt' '('
    case 17582:                     // 'mod' '('
    case 17583:                     // 'modify' '('
    case 17584:                     // 'module' '('
    case 17586:                     // 'namespace' '('
    case 17588:                     // 'ne' '('
    case 17598:                     // 'only' '('
    case 17600:                     // 'or' '('
    case 17601:                     // 'order' '('
    case 17602:                     // 'ordered' '('
    case 17607:                     // 'parent' '('
    case 17612:                     // 'preceding' '('
    case 17613:                     // 'preceding-sibling' '('
    case 17618:                     // 'rename' '('
    case 17619:                     // 'replace' '('
    case 17620:                     // 'return' '('
    case 17623:                     // 'satisfies' '('
    case 17628:                     // 'self' '('
    case 17634:                     // 'some' '('
    case 17635:                     // 'stable' '('
    case 17636:                     // 'start' '('
    case 17646:                     // 'to' '('
    case 17647:                     // 'transform' '('
    case 17648:                     // 'treat' '('
    case 17649:                     // 'try' '('
    case 17653:                     // 'union' '('
    case 17654:                     // 'unordered' '('
    case 17655:                     // 'update' '('
    case 17656:                     // 'updating' '('
    case 17659:                     // 'validate' '('
    case 17665:                     // 'where' '('
    case 17668:                     // 'with' '('
    case 17672:                     // 'xquery' '('
    case 40535:                     // 'attribute' 'ancestor'
    case 40569:                     // 'element' 'ancestor'
    case 41047:                     // 'attribute' 'ancestor-or-self'
    case 41081:                     // 'element' 'ancestor-or-self'
    case 44119:                     // 'attribute' 'at'
    case 44153:                     // 'element' 'at'
    case 44631:                     // 'attribute' 'attribute'
    case 44665:                     // 'element' 'attribute'
    case 49239:                     // 'attribute' 'child'
    case 49273:                     // 'element' 'child'
    case 50263:                     // 'attribute' 'comment'
    case 50297:                     // 'element' 'comment'
    case 52823:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 55383:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 56407:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56919:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57431:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 61015:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61527:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 62039:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 63575:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 66135:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 69207:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69719:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 73303:                     // 'attribute' 'function'
    case 73337:                     // 'element' 'function'
    case 76887:                     // 'attribute' 'if'
    case 76921:                     // 'element' 'if'
    case 77399:                     // 'attribute' 'import'
    case 77433:                     // 'element' 'import'
    case 79959:                     // 'attribute' 'insert'
    case 79993:                     // 'element' 'insert'
    case 82007:                     // 'attribute' 'invoke'
    case 82041:                     // 'element' 'invoke'
    case 83031:                     // 'attribute' 'item'
    case 83065:                     // 'element' 'item'
    case 90199:                     // 'attribute' 'module'
    case 90233:                     // 'element' 'module'
    case 91223:                     // 'attribute' 'namespace'
    case 91257:                     // 'element' 'namespace'
    case 91735:                     // 'attribute' 'namespace-node'
    case 91769:                     // 'element' 'namespace-node'
    case 94807:                     // 'attribute' 'node'
    case 94841:                     // 'element' 'node'
    case 99415:                     // 'attribute' 'ordered'
    case 99449:                     // 'element' 'ordered'
    case 101975:                    // 'attribute' 'parent'
    case 102009:                    // 'element' 'parent'
    case 104535:                    // 'attribute' 'preceding'
    case 104569:                    // 'element' 'preceding'
    case 105047:                    // 'attribute' 'preceding-sibling'
    case 105081:                    // 'element' 'preceding-sibling'
    case 106583:                    // 'attribute' 'processing-instruction'
    case 106617:                    // 'element' 'processing-instruction'
    case 107607:                    // 'attribute' 'rename'
    case 107641:                    // 'element' 'rename'
    case 108119:                    // 'attribute' 'replace'
    case 108153:                    // 'element' 'replace'
    case 111191:                    // 'attribute' 'schema-attribute'
    case 111225:                    // 'element' 'schema-attribute'
    case 111703:                    // 'attribute' 'schema-element'
    case 111737:                    // 'element' 'schema-element'
    case 112727:                    // 'attribute' 'self'
    case 112761:                    // 'element' 'self'
    case 115799:                    // 'attribute' 'some'
    case 115833:                    // 'element' 'some'
    case 119383:                    // 'attribute' 'switch'
    case 119417:                    // 'element' 'switch'
    case 119895:                    // 'attribute' 'text'
    case 119929:                    // 'element' 'text'
    case 123479:                    // 'attribute' 'try'
    case 123513:                    // 'element' 'try'
    case 125015:                    // 'attribute' 'typeswitch'
    case 125049:                    // 'element' 'typeswitch'
    case 126039:                    // 'attribute' 'unordered'
    case 126073:                    // 'element' 'unordered'
    case 127063:                    // 'attribute' 'updating'
    case 127097:                    // 'element' 'updating'
    case 127154:                    // 'namespace' 'updating'
    case 127184:                    // 'processing-instruction' 'updating'
    case 128599:                    // 'attribute' 'validate'
    case 128633:                    // 'element' 'validate'
    case 135255:                    // 'attribute' 'xquery'
    case 135289:                    // 'element' 'xquery'
    case 136279:                    // 'attribute' '{'
    case 136290:                    // 'comment' '{'
    case 136311:                    // 'document' '{'
    case 136313:                    // 'element' '{'
    case 136370:                    // 'namespace' '{'
    case 136386:                    // 'ordered' '{'
    case 136400:                    // 'processing-instruction' '{'
    case 136426:                    // 'text' '{'
    case 136438:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 87:                        // 'attribute'
      lookahead2W(251);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'otherwise' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'updating' | 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 121:                       // 'element'
      lookahead2W(250);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '?:' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'otherwise' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'updating' | 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 178:                       // 'namespace'
    case 208:                       // 'processing-instruction'
      lookahead2W(226);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '?:' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // 'updating' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 98:                        // 'comment'
    case 119:                       // 'document'
    case 194:                       // 'ordered'
    case 234:                       // 'text'
    case 246:                       // 'unordered'
      lookahead2W(225);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' |
                                    // '|' | '||' | '}' | '}`'
      break;
    case 124:                       // 'empty-sequence'
    case 150:                       // 'if'
    case 162:                       // 'item'
    case 233:                       // 'switch'
    case 244:                       // 'typeswitch'
      lookahead2W(218);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 79:                        // 'ancestor'
    case 80:                        // 'ancestor-or-self'
    case 96:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 199:                       // 'parent'
    case 204:                       // 'preceding'
    case 205:                       // 'preceding-sibling'
    case 220:                       // 'self'
      lookahead2W(224);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?:' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 81:                        // 'and'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 92:                        // 'case'
    case 93:                        // 'cast'
    case 94:                        // 'castable'
    case 97:                        // 'collation'
    case 103:                       // 'copy'
    case 105:                       // 'count'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 137:                       // 'for'
    case 143:                       // 'function'
    case 144:                       // 'ge'
    case 146:                       // 'group'
    case 148:                       // 'gt'
    case 149:                       // 'idiv'
    case 151:                       // 'import'
    case 156:                       // 'insert'
    case 157:                       // 'instance'
    case 158:                       // 'intersect'
    case 160:                       // 'invoke'
    case 161:                       // 'is'
    case 166:                       // 'le'
    case 168:                       // 'let'
    case 171:                       // 'lt'
    case 174:                       // 'mod'
    case 175:                       // 'modify'
    case 176:                       // 'module'
    case 179:                       // 'namespace-node'
    case 180:                       // 'ne'
    case 185:                       // 'node'
    case 190:                       // 'only'
    case 192:                       // 'or'
    case 193:                       // 'order'
    case 210:                       // 'rename'
    case 211:                       // 'replace'
    case 212:                       // 'return'
    case 215:                       // 'satisfies'
    case 217:                       // 'schema-attribute'
    case 218:                       // 'schema-element'
    case 226:                       // 'some'
    case 227:                       // 'stable'
    case 228:                       // 'start'
    case 238:                       // 'to'
    case 239:                       // 'transform'
    case 240:                       // 'treat'
    case 241:                       // 'try'
    case 245:                       // 'union'
    case 247:                       // 'update'
    case 248:                       // 'updating'
    case 251:                       // 'validate'
    case 257:                       // 'where'
    case 260:                       // 'with'
    case 264:                       // 'xquery'
      lookahead2W(221);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41559                 // 'attribute' 'and'
     || lk == 41593                 // 'element' 'and'
     || lk == 41650                 // 'namespace' 'and'
     || lk == 41680                 // 'processing-instruction' 'and'
     || lk == 43095                 // 'attribute' 'as'
     || lk == 43129                 // 'element' 'as'
     || lk == 43186                 // 'namespace' 'as'
     || lk == 43216                 // 'processing-instruction' 'as'
     || lk == 43607                 // 'attribute' 'ascending'
     || lk == 43641                 // 'element' 'ascending'
     || lk == 43698                 // 'namespace' 'ascending'
     || lk == 43728                 // 'processing-instruction' 'ascending'
     || lk == 47191                 // 'attribute' 'case'
     || lk == 47225                 // 'element' 'case'
     || lk == 47282                 // 'namespace' 'case'
     || lk == 47312                 // 'processing-instruction' 'case'
     || lk == 47703                 // 'attribute' 'cast'
     || lk == 47737                 // 'element' 'cast'
     || lk == 47794                 // 'namespace' 'cast'
     || lk == 47824                 // 'processing-instruction' 'cast'
     || lk == 48215                 // 'attribute' 'castable'
     || lk == 48249                 // 'element' 'castable'
     || lk == 48306                 // 'namespace' 'castable'
     || lk == 48336                 // 'processing-instruction' 'castable'
     || lk == 49751                 // 'attribute' 'collation'
     || lk == 49785                 // 'element' 'collation'
     || lk == 49842                 // 'namespace' 'collation'
     || lk == 49872                 // 'processing-instruction' 'collation'
     || lk == 53847                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53938                 // 'namespace' 'count'
     || lk == 53968                 // 'processing-instruction' 'count'
     || lk == 55895                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55986                 // 'namespace' 'default'
     || lk == 56016                 // 'processing-instruction' 'default'
     || lk == 57943                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58034                 // 'namespace' 'descending'
     || lk == 58064                 // 'processing-instruction' 'descending'
     || lk == 60503                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60594                 // 'namespace' 'div'
     || lk == 60624                 // 'processing-instruction' 'div'
     || lk == 62551                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62642                 // 'namespace' 'else'
     || lk == 62672                 // 'processing-instruction' 'else'
     || lk == 63063                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63154                 // 'namespace' 'empty'
     || lk == 63184                 // 'processing-instruction' 'empty'
     || lk == 64599                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64690                 // 'namespace' 'end'
     || lk == 64720                 // 'processing-instruction' 'end'
     || lk == 65623                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65714                 // 'namespace' 'eq'
     || lk == 65744                 // 'processing-instruction' 'eq'
     || lk == 67159                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67250                 // 'namespace' 'except'
     || lk == 67280                 // 'processing-instruction' 'except'
     || lk == 70231                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70322                 // 'namespace' 'for'
     || lk == 70352                 // 'processing-instruction' 'for'
     || lk == 73815                 // 'attribute' 'ge'
     || lk == 73849                 // 'element' 'ge'
     || lk == 73906                 // 'namespace' 'ge'
     || lk == 73936                 // 'processing-instruction' 'ge'
     || lk == 74839                 // 'attribute' 'group'
     || lk == 74873                 // 'element' 'group'
     || lk == 74930                 // 'namespace' 'group'
     || lk == 74960                 // 'processing-instruction' 'group'
     || lk == 75863                 // 'attribute' 'gt'
     || lk == 75897                 // 'element' 'gt'
     || lk == 75954                 // 'namespace' 'gt'
     || lk == 75984                 // 'processing-instruction' 'gt'
     || lk == 76375                 // 'attribute' 'idiv'
     || lk == 76409                 // 'element' 'idiv'
     || lk == 76466                 // 'namespace' 'idiv'
     || lk == 76496                 // 'processing-instruction' 'idiv'
     || lk == 80471                 // 'attribute' 'instance'
     || lk == 80505                 // 'element' 'instance'
     || lk == 80562                 // 'namespace' 'instance'
     || lk == 80592                 // 'processing-instruction' 'instance'
     || lk == 80983                 // 'attribute' 'intersect'
     || lk == 81017                 // 'element' 'intersect'
     || lk == 81074                 // 'namespace' 'intersect'
     || lk == 81104                 // 'processing-instruction' 'intersect'
     || lk == 82519                 // 'attribute' 'is'
     || lk == 82553                 // 'element' 'is'
     || lk == 82610                 // 'namespace' 'is'
     || lk == 82640                 // 'processing-instruction' 'is'
     || lk == 85079                 // 'attribute' 'le'
     || lk == 85113                 // 'element' 'le'
     || lk == 85170                 // 'namespace' 'le'
     || lk == 85200                 // 'processing-instruction' 'le'
     || lk == 86103                 // 'attribute' 'let'
     || lk == 86137                 // 'element' 'let'
     || lk == 86194                 // 'namespace' 'let'
     || lk == 86224                 // 'processing-instruction' 'let'
     || lk == 87639                 // 'attribute' 'lt'
     || lk == 87673                 // 'element' 'lt'
     || lk == 87730                 // 'namespace' 'lt'
     || lk == 87760                 // 'processing-instruction' 'lt'
     || lk == 89175                 // 'attribute' 'mod'
     || lk == 89209                 // 'element' 'mod'
     || lk == 89266                 // 'namespace' 'mod'
     || lk == 89296                 // 'processing-instruction' 'mod'
     || lk == 89687                 // 'attribute' 'modify'
     || lk == 89721                 // 'element' 'modify'
     || lk == 92247                 // 'attribute' 'ne'
     || lk == 92281                 // 'element' 'ne'
     || lk == 92338                 // 'namespace' 'ne'
     || lk == 92368                 // 'processing-instruction' 'ne'
     || lk == 97367                 // 'attribute' 'only'
     || lk == 97401                 // 'element' 'only'
     || lk == 97458                 // 'namespace' 'only'
     || lk == 97488                 // 'processing-instruction' 'only'
     || lk == 98391                 // 'attribute' 'or'
     || lk == 98425                 // 'element' 'or'
     || lk == 98482                 // 'namespace' 'or'
     || lk == 98512                 // 'processing-instruction' 'or'
     || lk == 98903                 // 'attribute' 'order'
     || lk == 98937                 // 'element' 'order'
     || lk == 98994                 // 'namespace' 'order'
     || lk == 99024                 // 'processing-instruction' 'order'
     || lk == 108631                // 'attribute' 'return'
     || lk == 108665                // 'element' 'return'
     || lk == 108722                // 'namespace' 'return'
     || lk == 108752                // 'processing-instruction' 'return'
     || lk == 110167                // 'attribute' 'satisfies'
     || lk == 110201                // 'element' 'satisfies'
     || lk == 110258                // 'namespace' 'satisfies'
     || lk == 110288                // 'processing-instruction' 'satisfies'
     || lk == 116311                // 'attribute' 'stable'
     || lk == 116345                // 'element' 'stable'
     || lk == 116402                // 'namespace' 'stable'
     || lk == 116432                // 'processing-instruction' 'stable'
     || lk == 116823                // 'attribute' 'start'
     || lk == 116857                // 'element' 'start'
     || lk == 116914                // 'namespace' 'start'
     || lk == 116944                // 'processing-instruction' 'start'
     || lk == 121943                // 'attribute' 'to'
     || lk == 121977                // 'element' 'to'
     || lk == 122034                // 'namespace' 'to'
     || lk == 122064                // 'processing-instruction' 'to'
     || lk == 122455                // 'attribute' 'transform'
     || lk == 122489                // 'element' 'transform'
     || lk == 122967                // 'attribute' 'treat'
     || lk == 123001                // 'element' 'treat'
     || lk == 123058                // 'namespace' 'treat'
     || lk == 123088                // 'processing-instruction' 'treat'
     || lk == 125527                // 'attribute' 'union'
     || lk == 125561                // 'element' 'union'
     || lk == 125618                // 'namespace' 'union'
     || lk == 125648                // 'processing-instruction' 'union'
     || lk == 126551                // 'attribute' 'update'
     || lk == 126585                // 'element' 'update'
     || lk == 131671                // 'attribute' 'where'
     || lk == 131705                // 'element' 'where'
     || lk == 131762                // 'namespace' 'where'
     || lk == 131792                // 'processing-instruction' 'where'
     || lk == 133207                // 'attribute' 'with'
     || lk == 133241)               // 'element' 'with'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(5, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 70:                        // '['
    case 74:                        // '``['
    case 83:                        // 'array'
    case 172:                       // 'map'
    case 2647:                      // 'attribute' URIQualifiedName
    case 2681:                      // 'element' URIQualifiedName
    case 7346:                      // 'namespace' NCName^Token
    case 7376:                      // 'processing-instruction' NCName^Token
    case 7767:                      // 'attribute' QName^Token
    case 7801:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14927:                     // 'ancestor' '#'
    case 14928:                     // 'ancestor-or-self' '#'
    case 14929:                     // 'and' '#'
    case 14932:                     // 'as' '#'
    case 14933:                     // 'ascending' '#'
    case 14934:                     // 'at' '#'
    case 14935:                     // 'attribute' '#'
    case 14940:                     // 'case' '#'
    case 14941:                     // 'cast' '#'
    case 14942:                     // 'castable' '#'
    case 14944:                     // 'child' '#'
    case 14945:                     // 'collation' '#'
    case 14946:                     // 'comment' '#'
    case 14951:                     // 'copy' '#'
    case 14953:                     // 'count' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14991:                     // 'function' '#'
    case 14992:                     // 'ge' '#'
    case 14994:                     // 'group' '#'
    case 14996:                     // 'gt' '#'
    case 14997:                     // 'idiv' '#'
    case 14998:                     // 'if' '#'
    case 14999:                     // 'import' '#'
    case 15004:                     // 'insert' '#'
    case 15005:                     // 'instance' '#'
    case 15006:                     // 'intersect' '#'
    case 15008:                     // 'invoke' '#'
    case 15009:                     // 'is' '#'
    case 15010:                     // 'item' '#'
    case 15014:                     // 'le' '#'
    case 15016:                     // 'let' '#'
    case 15019:                     // 'lt' '#'
    case 15022:                     // 'mod' '#'
    case 15023:                     // 'modify' '#'
    case 15024:                     // 'module' '#'
    case 15026:                     // 'namespace' '#'
    case 15027:                     // 'namespace-node' '#'
    case 15028:                     // 'ne' '#'
    case 15033:                     // 'node' '#'
    case 15038:                     // 'only' '#'
    case 15040:                     // 'or' '#'
    case 15041:                     // 'order' '#'
    case 15042:                     // 'ordered' '#'
    case 15047:                     // 'parent' '#'
    case 15052:                     // 'preceding' '#'
    case 15053:                     // 'preceding-sibling' '#'
    case 15056:                     // 'processing-instruction' '#'
    case 15058:                     // 'rename' '#'
    case 15059:                     // 'replace' '#'
    case 15060:                     // 'return' '#'
    case 15063:                     // 'satisfies' '#'
    case 15065:                     // 'schema-attribute' '#'
    case 15066:                     // 'schema-element' '#'
    case 15068:                     // 'self' '#'
    case 15074:                     // 'some' '#'
    case 15075:                     // 'stable' '#'
    case 15076:                     // 'start' '#'
    case 15081:                     // 'switch' '#'
    case 15082:                     // 'text' '#'
    case 15086:                     // 'to' '#'
    case 15087:                     // 'transform' '#'
    case 15088:                     // 'treat' '#'
    case 15089:                     // 'try' '#'
    case 15092:                     // 'typeswitch' '#'
    case 15093:                     // 'union' '#'
    case 15094:                     // 'unordered' '#'
    case 15095:                     // 'update' '#'
    case 15096:                     // 'updating' '#'
    case 15099:                     // 'validate' '#'
    case 15105:                     // 'where' '#'
    case 15108:                     // 'with' '#'
    case 15112:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17487:                     // 'ancestor' '('
    case 17488:                     // 'ancestor-or-self' '('
    case 17489:                     // 'and' '('
    case 17492:                     // 'as' '('
    case 17493:                     // 'ascending' '('
    case 17494:                     // 'at' '('
    case 17500:                     // 'case' '('
    case 17501:                     // 'cast' '('
    case 17502:                     // 'castable' '('
    case 17504:                     // 'child' '('
    case 17505:                     // 'collation' '('
    case 17511:                     // 'copy' '('
    case 17513:                     // 'count' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17551:                     // 'function' '('
    case 17552:                     // 'ge' '('
    case 17554:                     // 'group' '('
    case 17556:                     // 'gt' '('
    case 17557:                     // 'idiv' '('
    case 17559:                     // 'import' '('
    case 17564:                     // 'insert' '('
    case 17565:                     // 'instance' '('
    case 17566:                     // 'intersect' '('
    case 17568:                     // 'invoke' '('
    case 17569:                     // 'is' '('
    case 17574:                     // 'le' '('
    case 17576:                     // 'let' '('
    case 17579:                     // 'lt' '('
    case 17582:                     // 'mod' '('
    case 17583:                     // 'modify' '('
    case 17584:                     // 'module' '('
    case 17586:                     // 'namespace' '('
    case 17588:                     // 'ne' '('
    case 17598:                     // 'only' '('
    case 17600:                     // 'or' '('
    case 17601:                     // 'order' '('
    case 17602:                     // 'ordered' '('
    case 17607:                     // 'parent' '('
    case 17612:                     // 'preceding' '('
    case 17613:                     // 'preceding-sibling' '('
    case 17618:                     // 'rename' '('
    case 17619:                     // 'replace' '('
    case 17620:                     // 'return' '('
    case 17623:                     // 'satisfies' '('
    case 17628:                     // 'self' '('
    case 17634:                     // 'some' '('
    case 17635:                     // 'stable' '('
    case 17636:                     // 'start' '('
    case 17646:                     // 'to' '('
    case 17647:                     // 'transform' '('
    case 17648:                     // 'treat' '('
    case 17649:                     // 'try' '('
    case 17653:                     // 'union' '('
    case 17654:                     // 'unordered' '('
    case 17655:                     // 'update' '('
    case 17656:                     // 'updating' '('
    case 17659:                     // 'validate' '('
    case 17665:                     // 'where' '('
    case 17668:                     // 'with' '('
    case 17672:                     // 'xquery' '('
    case 40535:                     // 'attribute' 'ancestor'
    case 40569:                     // 'element' 'ancestor'
    case 41047:                     // 'attribute' 'ancestor-or-self'
    case 41081:                     // 'element' 'ancestor-or-self'
    case 44119:                     // 'attribute' 'at'
    case 44153:                     // 'element' 'at'
    case 44631:                     // 'attribute' 'attribute'
    case 44665:                     // 'element' 'attribute'
    case 49239:                     // 'attribute' 'child'
    case 49273:                     // 'element' 'child'
    case 50263:                     // 'attribute' 'comment'
    case 50297:                     // 'element' 'comment'
    case 52823:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 55383:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 56407:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56919:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57431:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 61015:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61527:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 62039:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 63575:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 66135:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 69207:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69719:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 73303:                     // 'attribute' 'function'
    case 73337:                     // 'element' 'function'
    case 76887:                     // 'attribute' 'if'
    case 76921:                     // 'element' 'if'
    case 77399:                     // 'attribute' 'import'
    case 77433:                     // 'element' 'import'
    case 79959:                     // 'attribute' 'insert'
    case 79993:                     // 'element' 'insert'
    case 82007:                     // 'attribute' 'invoke'
    case 82041:                     // 'element' 'invoke'
    case 83031:                     // 'attribute' 'item'
    case 83065:                     // 'element' 'item'
    case 90199:                     // 'attribute' 'module'
    case 90233:                     // 'element' 'module'
    case 91223:                     // 'attribute' 'namespace'
    case 91257:                     // 'element' 'namespace'
    case 91735:                     // 'attribute' 'namespace-node'
    case 91769:                     // 'element' 'namespace-node'
    case 94807:                     // 'attribute' 'node'
    case 94841:                     // 'element' 'node'
    case 99415:                     // 'attribute' 'ordered'
    case 99449:                     // 'element' 'ordered'
    case 101975:                    // 'attribute' 'parent'
    case 102009:                    // 'element' 'parent'
    case 104535:                    // 'attribute' 'preceding'
    case 104569:                    // 'element' 'preceding'
    case 105047:                    // 'attribute' 'preceding-sibling'
    case 105081:                    // 'element' 'preceding-sibling'
    case 106583:                    // 'attribute' 'processing-instruction'
    case 106617:                    // 'element' 'processing-instruction'
    case 107607:                    // 'attribute' 'rename'
    case 107641:                    // 'element' 'rename'
    case 108119:                    // 'attribute' 'replace'
    case 108153:                    // 'element' 'replace'
    case 111191:                    // 'attribute' 'schema-attribute'
    case 111225:                    // 'element' 'schema-attribute'
    case 111703:                    // 'attribute' 'schema-element'
    case 111737:                    // 'element' 'schema-element'
    case 112727:                    // 'attribute' 'self'
    case 112761:                    // 'element' 'self'
    case 115799:                    // 'attribute' 'some'
    case 115833:                    // 'element' 'some'
    case 119383:                    // 'attribute' 'switch'
    case 119417:                    // 'element' 'switch'
    case 119895:                    // 'attribute' 'text'
    case 119929:                    // 'element' 'text'
    case 123479:                    // 'attribute' 'try'
    case 123513:                    // 'element' 'try'
    case 125015:                    // 'attribute' 'typeswitch'
    case 125049:                    // 'element' 'typeswitch'
    case 126039:                    // 'attribute' 'unordered'
    case 126073:                    // 'element' 'unordered'
    case 127063:                    // 'attribute' 'updating'
    case 127097:                    // 'element' 'updating'
    case 127154:                    // 'namespace' 'updating'
    case 127184:                    // 'processing-instruction' 'updating'
    case 128599:                    // 'attribute' 'validate'
    case 128633:                    // 'element' 'validate'
    case 135255:                    // 'attribute' 'xquery'
    case 135289:                    // 'element' 'xquery'
    case 136279:                    // 'attribute' '{'
    case 136290:                    // 'comment' '{'
    case 136311:                    // 'document' '{'
    case 136313:                    // 'element' '{'
    case 136370:                    // 'namespace' '{'
    case 136386:                    // 'ordered' '{'
    case 136400:                    // 'processing-instruction' '{'
    case 136426:                    // 'text' '{'
    case 136438:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 79:                        // 'ancestor'
    case 80:                        // 'ancestor-or-self'
    case 199:                       // 'parent'
    case 204:                       // 'preceding'
    case 205:                       // 'preceding-sibling'
      lookahead2W(220);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25679:                     // 'ancestor' '::'
    case 25680:                     // 'ancestor-or-self' '::'
    case 25799:                     // 'parent' '::'
    case 25804:                     // 'preceding' '::'
    case 25805:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(216);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 79:                        // 'ancestor'
    case 80:                        // 'ancestor-or-self'
    case 199:                       // 'parent'
    case 204:                       // 'preceding'
    case 205:                       // 'preceding-sibling'
      lookahead2W(220);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25679:                     // 'ancestor' '::'
    case 25680:                     // 'ancestor-or-self' '::'
    case 25799:                     // 'parent' '::'
    case 25804:                     // 'preceding' '::'
    case 25805:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(216);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 87:                        // 'attribute'
      lookahead2W(222);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 96:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 220:                       // 'self'
      lookahead2W(220);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25687:                     // 'attribute' '::'
    case 25696:                     // 'child' '::'
    case 25711:                     // 'descendant' '::'
    case 25712:                     // 'descendant-or-self' '::'
    case 25735:                     // 'following' '::'
    case 25736:                     // 'following-sibling' '::'
    case 25820:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 87:                        // 'attribute'
      lookahead2W(222);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 96:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 220:                       // 'self'
      lookahead2W(220);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25687:                     // 'attribute' '::'
    case 25696:                     // 'child' '::'
    case 25711:                     // 'descendant' '::'
    case 25712:                     // 'descendant-or-self' '::'
    case 25735:                     // 'following' '::'
    case 25736:                     // 'following-sibling' '::'
    case 25820:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 96:                        // 'child'
      consume(96);                  // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 111:                       // 'descendant'
      consume(111);                 // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 87:                        // 'attribute'
      consume(87);                  // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 220:                       // 'self'
      consume(220);                 // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 112:                       // 'descendant-or-self'
      consume(112);                 // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 136:                       // 'following-sibling'
      consume(136);                 // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(135);                 // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 96:                        // 'child'
      consumeT(96);                 // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 111:                       // 'descendant'
      consumeT(111);                // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 87:                        // 'attribute'
      consumeT(87);                 // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 220:                       // 'self'
      consumeT(220);                // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 112:                       // 'descendant-or-self'
      consumeT(112);                // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 136:                       // 'following-sibling'
      consumeT(136);                // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(135);                // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 68)                   // '@'
    {
      consume(68);                  // '@'
    }
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 68)                   // '@'
    {
      consumeT(68);                 // '@'
    }
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 44:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 44:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 199:                       // 'parent'
      consume(199);                 // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 79:                        // 'ancestor'
      consume(79);                  // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 205:                       // 'preceding-sibling'
      consume(205);                 // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 204:                       // 'preceding'
      consume(204);                 // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(80);                  // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 199:                       // 'parent'
      consumeT(199);                // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 79:                        // 'ancestor'
      consumeT(79);                 // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 205:                       // 'preceding-sibling'
      consumeT(205);                // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 204:                       // 'preceding'
      consumeT(204);                // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(80);                 // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(44);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(44);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 87:                        // 'attribute'
    case 98:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 179:                       // 'namespace-node'
    case 185:                       // 'node'
    case 208:                       // 'processing-instruction'
    case 217:                       // 'schema-attribute'
    case 218:                       // 'schema-element'
    case 234:                       // 'text'
      lookahead2W(219);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17495:                     // 'attribute' '('
    case 17506:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17587:                     // 'namespace-node' '('
    case 17593:                     // 'node' '('
    case 17616:                     // 'processing-instruction' '('
    case 17625:                     // 'schema-attribute' '('
    case 17626:                     // 'schema-element' '('
    case 17642:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 87:                        // 'attribute'
    case 98:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 179:                       // 'namespace-node'
    case 185:                       // 'node'
    case 208:                       // 'processing-instruction'
    case 217:                       // 'schema-attribute'
    case 218:                       // 'schema-element'
    case 234:                       // 'text'
      lookahead2W(219);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17495:                     // 'attribute' '('
    case 17506:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17587:                     // 'namespace-node' '('
    case 17593:                     // 'node' '('
    case 17616:                     // 'processing-instruction' '('
    case 17625:                     // 'schema-attribute' '('
    case 17626:                     // 'schema-element' '('
    case 17642:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 21:                        // Wildcard
      consume(21);                  // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 21:                        // Wildcard
      consumeT(21);                 // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 70)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 70:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 34:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 70)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 70:                      // '['
        try_Predicate();
        break;
      case 34:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(216);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 70)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(216);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 70)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(70);                    // '['
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(71);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(70);                   // '['
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(71);                   // ']'
  }

  function parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(65);                    // '?'
    lookahead1W(179);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  function try_Lookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(179);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
    try_KeySpecifier();
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(65);                    // '?'
    lookahead1W(179);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(179);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  function try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consume(2);                   // DecimalLiteral
      break;
    default:
      consume(3);                   // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consumeT(2);                  // DecimalLiteral
      break;
    default:
      consumeT(3);                  // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(43);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(43);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(194);                   // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(266);                   // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(270);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(194);                  // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(266);                  // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(270);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(246);                   // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(266);                   // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(270);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(246);                  // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(266);                  // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(270);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(181);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(181);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(65);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(65);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
      parse_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
      try_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(53);                    // '<'
    parse_QName();
    parse_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consume(47);                  // '/>'
      break;
    default:
      consume(62);                  // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      parse_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consume(17);                // S
      }
      lookahead1(9);                // '>'
      consume(62);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(53);                   // '<'
    try_QName();
    try_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consumeT(47);                 // '/>'
      break;
    default:
      consumeT(62);                 // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      try_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consumeT(17);               // S
      }
      lookahead1(9);                // '>'
      consumeT(62);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consume(17);                  // S
      lookahead1(232);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        parse_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        lookahead1(8);              // '='
        consume(60);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consumeT(17);                 // S
      lookahead1(232);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        try_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        lookahead1(8);              // '='
        consumeT(60);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(158);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consume(7);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consume(8);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(158);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consumeT(7);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consumeT(8);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consume(10);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consumeT(10);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consume(11);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consumeT(11);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      parse_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consume(9);                   // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      try_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consumeT(9);                  // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(54);                    // '<!--'
    lookahead1(3);                  // DirCommentContents
    consume(22);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(42);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(54);                   // '<!--'
    lookahead1(3);                  // DirCommentContents
    consumeT(22);                   // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(42);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(0);                  // PITarget
    consume(12);                    // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(4);                // DirPIContents
      consume(23);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(67);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(0);                  // PITarget
    consumeT(12);                   // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(4);                // DirPIContents
      consumeT(23);                 // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(67);                   // '?>'
  }

  function parse_CDataSection()
  {
    eventHandler.startNonterminal("CDataSection", e0);
    consume(55);                    // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consume(24);                    // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consume(72);                    // ']]>'
    eventHandler.endNonterminal("CDataSection", e0);
  }

  function try_CDataSection()
  {
    consumeT(55);                   // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consumeT(24);                   // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consumeT(72);                   // ']]>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 119:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 121:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 87:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 178:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 234:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 98:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 119:                       // 'document'
      try_CompDocConstructor();
      break;
    case 121:                       // 'element'
      try_CompElemConstructor();
      break;
    case 87:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 178:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 234:                       // 'text'
      try_CompTextConstructor();
      break;
    case 98:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(121);                   // 'element'
    lookahead1W(234);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 266:                       // '{'
      consume(266);                 // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(270);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedContentExpr();
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(121);                  // 'element'
    lookahead1W(234);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 266:                       // '{'
      consumeT(266);                // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(270);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedContentExpr();
  }

  function parse_EnclosedContentExpr()
  {
    eventHandler.startNonterminal("EnclosedContentExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedContentExpr", e0);
  }

  function try_EnclosedContentExpr()
  {
    try_EnclosedExpr();
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(178);                   // 'namespace'
    lookahead1W(176);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
    switch (l1)
    {
    case 266:                       // '{'
      consume(266);                 // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PrefixExpr();
      consume(270);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(266);                   // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_URIExpr();
    consume(270);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(178);                  // 'namespace'
    lookahead1W(176);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
    switch (l1)
    {
    case 266:                       // '{'
      consumeT(266);                // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_PrefixExpr();
      consumeT(270);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(266);                  // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_URIExpr();
    consumeT(270);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 143:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17551:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 143:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17551:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(1);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(1);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(143);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 84)                   // 'as'
    {
      consume(84);                  // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(143);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 84)                   // 'as'
    {
      consumeT(84);                 // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(172);                   // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(266);                   // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 270)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(270);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(172);                  // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(266);                  // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 270)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_MapConstructorEntry();
      }
    }
    consumeT(270);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consume(48);                    // ':'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consumeT(48);                   // ':'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_MapValueExpr();
  }

  function parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  function try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  function parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  function try_MapValueExpr()
  {
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 70:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    switch (l1)
    {
    case 70:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  function parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(70);                    // '['
    lookahead1W(247);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 71)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(71);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  function try_SquareArrayConstructor()
  {
    consumeT(70);                   // '['
    lookahead1W(247);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 71)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(71);                   // ']'
  }

  function parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(83);                    // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  function try_CurlyArrayConstructor()
  {
    consumeT(83);                   // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(74);                    // '``['
    parse_StringConstructorContent();
    consume(73);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  function try_StringConstructor()
  {
    consumeT(74);                   // '``['
    try_StringConstructorContent();
    consumeT(73);                   // ']``'
  }

  function parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(1);                  // StringConstructorChars
    consume(16);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 75)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consume(16);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  function try_StringConstructorContent()
  {
    lookahead1(1);                  // StringConstructorChars
    consumeT(16);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 75)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consumeT(16);                 // StringConstructorChars
    }
  }

  function parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(75);                    // '`{'
    lookahead1W(249);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}`'
    if (l1 != 271)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(271);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  function try_StringConstructorInterpolation()
  {
    consumeT(75);                   // '`{'
    lookahead1W(249);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}`'
    if (l1 != 271)                  // '}`'
    {
      try_Expr();
    }
    consumeT(271);                  // '}`'
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(201);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consume(65);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(201);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | '?:' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'otherwise' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consumeT(65);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(84);                    // 'as'
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(84);                   // 'as'
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(212);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '?:' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      consume(124);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(207);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '?:' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(212);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '?:' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      consumeT(124);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(207);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '?:' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 87:                        // 'attribute'
    case 98:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 143:                       // 'function'
    case 162:                       // 'item'
    case 179:                       // 'namespace-node'
    case 185:                       // 'node'
    case 208:                       // 'processing-instruction'
    case 217:                       // 'schema-attribute'
    case 218:                       // 'schema-element'
    case 234:                       // 'text'
      lookahead2W(212);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '?:' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17495:                     // 'attribute' '('
    case 17506:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17587:                     // 'namespace-node' '('
    case 17593:                     // 'node' '('
    case 17616:                     // 'processing-instruction' '('
    case 17625:                     // 'schema-attribute' '('
    case 17626:                     // 'schema-element' '('
    case 17642:                     // 'text' '('
      parse_KindTest();
      break;
    case 17570:                     // 'item' '('
      consume(162);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17551:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 172:                       // 'map'
      parse_MapTest();
      break;
    case 83:                        // 'array'
      parse_ArrayTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 87:                        // 'attribute'
    case 98:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 143:                       // 'function'
    case 162:                       // 'item'
    case 179:                       // 'namespace-node'
    case 185:                       // 'node'
    case 208:                       // 'processing-instruction'
    case 217:                       // 'schema-attribute'
    case 218:                       // 'schema-element'
    case 234:                       // 'text'
      lookahead2W(212);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '?:' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17495:                     // 'attribute' '('
    case 17506:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17587:                     // 'namespace-node' '('
    case 17593:                     // 'node' '('
    case 17616:                     // 'processing-instruction' '('
    case 17625:                     // 'schema-attribute' '('
    case 17626:                     // 'schema-element' '('
    case 17642:                     // 'text' '('
      try_KindTest();
      break;
    case 17570:                     // 'item' '('
      consumeT(162);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17551:                     // 'function' '('
      try_FunctionTest();
      break;
    case 172:                       // 'map'
      try_MapTest();
      break;
    case 83:                        // 'array'
      try_ArrayTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      consume(65);                  // '?'
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      consume(39);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      consumeT(65);                 // '?'
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      consumeT(39);                 // '+'
    }
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 120:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 121:                       // 'element'
      parse_ElementTest();
      break;
    case 87:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 218:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 217:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 208:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 98:                        // 'comment'
      parse_CommentTest();
      break;
    case 234:                       // 'text'
      parse_TextTest();
      break;
    case 179:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 120:                       // 'document-node'
      try_DocumentTest();
      break;
    case 121:                       // 'element'
      try_ElementTest();
      break;
    case 87:                        // 'attribute'
      try_AttributeTest();
      break;
    case 218:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 217:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 208:                       // 'processing-instruction'
      try_PITest();
      break;
    case 98:                        // 'comment'
      try_CommentTest();
      break;
    case 234:                       // 'text'
      try_TextTest();
      break;
    case 179:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(185);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(185);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(120);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(137);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(120);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(137);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(234);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(234);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(98);                    // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(98);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(179);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(179);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(208);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(177);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consume(4);                 // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(208);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(177);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consumeT(4);                // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(87);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(237);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(87);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(237);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(217);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(217);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(121);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(237);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consume(65);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(121);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(237);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consumeT(65);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(218);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(218);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 143:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(6, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(6, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 143:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(6, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(6, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(143);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(143);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(143);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(240);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(238);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(84);                    // 'as'
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(143);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(240);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(238);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(84);                   // 'as'
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
  }

  function parse_MapTest()
  {
    eventHandler.startNonterminal("MapTest", e0);
    switch (l1)
    {
    case 172:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(7, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyMapTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(7, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyMapTest();
      break;
    default:
      parse_TypedMapTest();
    }
    eventHandler.endNonterminal("MapTest", e0);
  }

  function try_MapTest()
  {
    switch (l1)
    {
    case 172:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(7, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyMapTest();
        memoize(7, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyMapTest();
      break;
    case -3:
      break;
    default:
      try_TypedMapTest();
    }
  }

  function parse_AnyMapTest()
  {
    eventHandler.startNonterminal("AnyMapTest", e0);
    consume(172);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyMapTest", e0);
  }

  function try_AnyMapTest()
  {
    consumeT(172);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedMapTest()
  {
    eventHandler.startNonterminal("TypedMapTest", e0);
    consume(172);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedMapTest", e0);
  }

  function try_TypedMapTest()
  {
    consumeT(172);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consumeT(40);                   // ','
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ArrayTest()
  {
    eventHandler.startNonterminal("ArrayTest", e0);
    switch (l1)
    {
    case 83:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(8, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(8, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyArrayTest();
      break;
    default:
      parse_TypedArrayTest();
    }
    eventHandler.endNonterminal("ArrayTest", e0);
  }

  function try_ArrayTest()
  {
    switch (l1)
    {
    case 83:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(8, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        memoize(8, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyArrayTest();
      break;
    case -3:
      break;
    default:
      try_TypedArrayTest();
    }
  }

  function parse_AnyArrayTest()
  {
    eventHandler.startNonterminal("AnyArrayTest", e0);
    consume(83);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyArrayTest", e0);
  }

  function try_AnyArrayTest()
  {
    consumeT(83);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedArrayTest()
  {
    eventHandler.startNonterminal("TypedArrayTest", e0);
    consume(83);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedArrayTest", e0);
  }

  function try_TypedArrayTest()
  {
    consumeT(83);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_URILiteral()
  {
    eventHandler.startNonterminal("URILiteral", e0);
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("URILiteral", e0);
  }

  function try_URILiteral()
  {
    consumeT(4);                    // StringLiteral
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(229);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_QName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(229);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_QName();
    }
  }

  function parse_FunctionEQName()
  {
    eventHandler.startNonterminal("FunctionEQName", e0);
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("FunctionEQName", e0);
  }

  function try_FunctionEQName()
  {
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_QName()
  {
    eventHandler.startNonterminal("QName", e0);
    lookahead1(228);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 87:                        // 'attribute'
      consume(87);                  // 'attribute'
      break;
    case 98:                        // 'comment'
      consume(98);                  // 'comment'
      break;
    case 120:                       // 'document-node'
      consume(120);                 // 'document-node'
      break;
    case 121:                       // 'element'
      consume(121);                 // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consume(124);                 // 'empty-sequence'
      break;
    case 143:                       // 'function'
      consume(143);                 // 'function'
      break;
    case 150:                       // 'if'
      consume(150);                 // 'if'
      break;
    case 162:                       // 'item'
      consume(162);                 // 'item'
      break;
    case 179:                       // 'namespace-node'
      consume(179);                 // 'namespace-node'
      break;
    case 185:                       // 'node'
      consume(185);                 // 'node'
      break;
    case 208:                       // 'processing-instruction'
      consume(208);                 // 'processing-instruction'
      break;
    case 217:                       // 'schema-attribute'
      consume(217);                 // 'schema-attribute'
      break;
    case 218:                       // 'schema-element'
      consume(218);                 // 'schema-element'
      break;
    case 233:                       // 'switch'
      consume(233);                 // 'switch'
      break;
    case 234:                       // 'text'
      consume(234);                 // 'text'
      break;
    case 244:                       // 'typeswitch'
      consume(244);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("QName", e0);
  }

  function try_QName()
  {
    lookahead1(228);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 87:                        // 'attribute'
      consumeT(87);                 // 'attribute'
      break;
    case 98:                        // 'comment'
      consumeT(98);                 // 'comment'
      break;
    case 120:                       // 'document-node'
      consumeT(120);                // 'document-node'
      break;
    case 121:                       // 'element'
      consumeT(121);                // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consumeT(124);                // 'empty-sequence'
      break;
    case 143:                       // 'function'
      consumeT(143);                // 'function'
      break;
    case 150:                       // 'if'
      consumeT(150);                // 'if'
      break;
    case 162:                       // 'item'
      consumeT(162);                // 'item'
      break;
    case 179:                       // 'namespace-node'
      consumeT(179);                // 'namespace-node'
      break;
    case 185:                       // 'node'
      consumeT(185);                // 'node'
      break;
    case 208:                       // 'processing-instruction'
      consumeT(208);                // 'processing-instruction'
      break;
    case 217:                       // 'schema-attribute'
      consumeT(217);                // 'schema-attribute'
      break;
    case 218:                       // 'schema-element'
      consumeT(218);                // 'schema-element'
      break;
    case 233:                       // 'switch'
      consumeT(233);                // 'switch'
      break;
    case 234:                       // 'text'
      consumeT(234);                // 'text'
      break;
    case 244:                       // 'typeswitch'
      consumeT(244);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 15:                        // QName^Token
      consume(15);                  // QName^Token
      break;
    case 79:                        // 'ancestor'
      consume(79);                  // 'ancestor'
      break;
    case 80:                        // 'ancestor-or-self'
      consume(80);                  // 'ancestor-or-self'
      break;
    case 81:                        // 'and'
      consume(81);                  // 'and'
      break;
    case 84:                        // 'as'
      consume(84);                  // 'as'
      break;
    case 85:                        // 'ascending'
      consume(85);                  // 'ascending'
      break;
    case 86:                        // 'at'
      consume(86);                  // 'at'
      break;
    case 92:                        // 'case'
      consume(92);                  // 'case'
      break;
    case 93:                        // 'cast'
      consume(93);                  // 'cast'
      break;
    case 94:                        // 'castable'
      consume(94);                  // 'castable'
      break;
    case 96:                        // 'child'
      consume(96);                  // 'child'
      break;
    case 97:                        // 'collation'
      consume(97);                  // 'collation'
      break;
    case 103:                       // 'copy'
      consume(103);                 // 'copy'
      break;
    case 105:                       // 'count'
      consume(105);                 // 'count'
      break;
    case 108:                       // 'declare'
      consume(108);                 // 'declare'
      break;
    case 109:                       // 'default'
      consume(109);                 // 'default'
      break;
    case 110:                       // 'delete'
      consume(110);                 // 'delete'
      break;
    case 111:                       // 'descendant'
      consume(111);                 // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consume(112);                 // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      consume(113);                 // 'descending'
      break;
    case 118:                       // 'div'
      consume(118);                 // 'div'
      break;
    case 119:                       // 'document'
      consume(119);                 // 'document'
      break;
    case 122:                       // 'else'
      consume(122);                 // 'else'
      break;
    case 123:                       // 'empty'
      consume(123);                 // 'empty'
      break;
    case 126:                       // 'end'
      consume(126);                 // 'end'
      break;
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 129:                       // 'every'
      consume(129);                 // 'every'
      break;
    case 131:                       // 'except'
      consume(131);                 // 'except'
      break;
    case 135:                       // 'following'
      consume(135);                 // 'following'
      break;
    case 136:                       // 'following-sibling'
      consume(136);                 // 'following-sibling'
      break;
    case 137:                       // 'for'
      consume(137);                 // 'for'
      break;
    case 144:                       // 'ge'
      consume(144);                 // 'ge'
      break;
    case 146:                       // 'group'
      consume(146);                 // 'group'
      break;
    case 148:                       // 'gt'
      consume(148);                 // 'gt'
      break;
    case 149:                       // 'idiv'
      consume(149);                 // 'idiv'
      break;
    case 151:                       // 'import'
      consume(151);                 // 'import'
      break;
    case 156:                       // 'insert'
      consume(156);                 // 'insert'
      break;
    case 157:                       // 'instance'
      consume(157);                 // 'instance'
      break;
    case 158:                       // 'intersect'
      consume(158);                 // 'intersect'
      break;
    case 160:                       // 'invoke'
      consume(160);                 // 'invoke'
      break;
    case 161:                       // 'is'
      consume(161);                 // 'is'
      break;
    case 166:                       // 'le'
      consume(166);                 // 'le'
      break;
    case 168:                       // 'let'
      consume(168);                 // 'let'
      break;
    case 171:                       // 'lt'
      consume(171);                 // 'lt'
      break;
    case 174:                       // 'mod'
      consume(174);                 // 'mod'
      break;
    case 176:                       // 'module'
      consume(176);                 // 'module'
      break;
    case 175:                       // 'modify'
      consume(175);                 // 'modify'
      break;
    case 178:                       // 'namespace'
      consume(178);                 // 'namespace'
      break;
    case 180:                       // 'ne'
      consume(180);                 // 'ne'
      break;
    case 190:                       // 'only'
      consume(190);                 // 'only'
      break;
    case 192:                       // 'or'
      consume(192);                 // 'or'
      break;
    case 193:                       // 'order'
      consume(193);                 // 'order'
      break;
    case 194:                       // 'ordered'
      consume(194);                 // 'ordered'
      break;
    case 199:                       // 'parent'
      consume(199);                 // 'parent'
      break;
    case 204:                       // 'preceding'
      consume(204);                 // 'preceding'
      break;
    case 205:                       // 'preceding-sibling'
      consume(205);                 // 'preceding-sibling'
      break;
    case 210:                       // 'rename'
      consume(210);                 // 'rename'
      break;
    case 211:                       // 'replace'
      consume(211);                 // 'replace'
      break;
    case 212:                       // 'return'
      consume(212);                 // 'return'
      break;
    case 215:                       // 'satisfies'
      consume(215);                 // 'satisfies'
      break;
    case 220:                       // 'self'
      consume(220);                 // 'self'
      break;
    case 226:                       // 'some'
      consume(226);                 // 'some'
      break;
    case 227:                       // 'stable'
      consume(227);                 // 'stable'
      break;
    case 228:                       // 'start'
      consume(228);                 // 'start'
      break;
    case 238:                       // 'to'
      consume(238);                 // 'to'
      break;
    case 239:                       // 'transform'
      consume(239);                 // 'transform'
      break;
    case 240:                       // 'treat'
      consume(240);                 // 'treat'
      break;
    case 241:                       // 'try'
      consume(241);                 // 'try'
      break;
    case 245:                       // 'union'
      consume(245);                 // 'union'
      break;
    case 246:                       // 'unordered'
      consume(246);                 // 'unordered'
      break;
    case 247:                       // 'update'
      consume(247);                 // 'update'
      break;
    case 248:                       // 'updating'
      consume(248);                 // 'updating'
      break;
    case 251:                       // 'validate'
      consume(251);                 // 'validate'
      break;
    case 257:                       // 'where'
      consume(257);                 // 'where'
      break;
    case 260:                       // 'with'
      consume(260);                 // 'with'
      break;
    default:
      consume(264);                 // 'xquery'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 15:                        // QName^Token
      consumeT(15);                 // QName^Token
      break;
    case 79:                        // 'ancestor'
      consumeT(79);                 // 'ancestor'
      break;
    case 80:                        // 'ancestor-or-self'
      consumeT(80);                 // 'ancestor-or-self'
      break;
    case 81:                        // 'and'
      consumeT(81);                 // 'and'
      break;
    case 84:                        // 'as'
      consumeT(84);                 // 'as'
      break;
    case 85:                        // 'ascending'
      consumeT(85);                 // 'ascending'
      break;
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      break;
    case 92:                        // 'case'
      consumeT(92);                 // 'case'
      break;
    case 93:                        // 'cast'
      consumeT(93);                 // 'cast'
      break;
    case 94:                        // 'castable'
      consumeT(94);                 // 'castable'
      break;
    case 96:                        // 'child'
      consumeT(96);                 // 'child'
      break;
    case 97:                        // 'collation'
      consumeT(97);                 // 'collation'
      break;
    case 103:                       // 'copy'
      consumeT(103);                // 'copy'
      break;
    case 105:                       // 'count'
      consumeT(105);                // 'count'
      break;
    case 108:                       // 'declare'
      consumeT(108);                // 'declare'
      break;
    case 109:                       // 'default'
      consumeT(109);                // 'default'
      break;
    case 110:                       // 'delete'
      consumeT(110);                // 'delete'
      break;
    case 111:                       // 'descendant'
      consumeT(111);                // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consumeT(112);                // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      consumeT(113);                // 'descending'
      break;
    case 118:                       // 'div'
      consumeT(118);                // 'div'
      break;
    case 119:                       // 'document'
      consumeT(119);                // 'document'
      break;
    case 122:                       // 'else'
      consumeT(122);                // 'else'
      break;
    case 123:                       // 'empty'
      consumeT(123);                // 'empty'
      break;
    case 126:                       // 'end'
      consumeT(126);                // 'end'
      break;
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 129:                       // 'every'
      consumeT(129);                // 'every'
      break;
    case 131:                       // 'except'
      consumeT(131);                // 'except'
      break;
    case 135:                       // 'following'
      consumeT(135);                // 'following'
      break;
    case 136:                       // 'following-sibling'
      consumeT(136);                // 'following-sibling'
      break;
    case 137:                       // 'for'
      consumeT(137);                // 'for'
      break;
    case 144:                       // 'ge'
      consumeT(144);                // 'ge'
      break;
    case 146:                       // 'group'
      consumeT(146);                // 'group'
      break;
    case 148:                       // 'gt'
      consumeT(148);                // 'gt'
      break;
    case 149:                       // 'idiv'
      consumeT(149);                // 'idiv'
      break;
    case 151:                       // 'import'
      consumeT(151);                // 'import'
      break;
    case 156:                       // 'insert'
      consumeT(156);                // 'insert'
      break;
    case 157:                       // 'instance'
      consumeT(157);                // 'instance'
      break;
    case 158:                       // 'intersect'
      consumeT(158);                // 'intersect'
      break;
    case 160:                       // 'invoke'
      consumeT(160);                // 'invoke'
      break;
    case 161:                       // 'is'
      consumeT(161);                // 'is'
      break;
    case 166:                       // 'le'
      consumeT(166);                // 'le'
      break;
    case 168:                       // 'let'
      consumeT(168);                // 'let'
      break;
    case 171:                       // 'lt'
      consumeT(171);                // 'lt'
      break;
    case 174:                       // 'mod'
      consumeT(174);                // 'mod'
      break;
    case 176:                       // 'module'
      consumeT(176);                // 'module'
      break;
    case 175:                       // 'modify'
      consumeT(175);                // 'modify'
      break;
    case 178:                       // 'namespace'
      consumeT(178);                // 'namespace'
      break;
    case 180:                       // 'ne'
      consumeT(180);                // 'ne'
      break;
    case 190:                       // 'only'
      consumeT(190);                // 'only'
      break;
    case 192:                       // 'or'
      consumeT(192);                // 'or'
      break;
    case 193:                       // 'order'
      consumeT(193);                // 'order'
      break;
    case 194:                       // 'ordered'
      consumeT(194);                // 'ordered'
      break;
    case 199:                       // 'parent'
      consumeT(199);                // 'parent'
      break;
    case 204:                       // 'preceding'
      consumeT(204);                // 'preceding'
      break;
    case 205:                       // 'preceding-sibling'
      consumeT(205);                // 'preceding-sibling'
      break;
    case 210:                       // 'rename'
      consumeT(210);                // 'rename'
      break;
    case 211:                       // 'replace'
      consumeT(211);                // 'replace'
      break;
    case 212:                       // 'return'
      consumeT(212);                // 'return'
      break;
    case 215:                       // 'satisfies'
      consumeT(215);                // 'satisfies'
      break;
    case 220:                       // 'self'
      consumeT(220);                // 'self'
      break;
    case 226:                       // 'some'
      consumeT(226);                // 'some'
      break;
    case 227:                       // 'stable'
      consumeT(227);                // 'stable'
      break;
    case 228:                       // 'start'
      consumeT(228);                // 'start'
      break;
    case 238:                       // 'to'
      consumeT(238);                // 'to'
      break;
    case 239:                       // 'transform'
      consumeT(239);                // 'transform'
      break;
    case 240:                       // 'treat'
      consumeT(240);                // 'treat'
      break;
    case 241:                       // 'try'
      consumeT(241);                // 'try'
      break;
    case 245:                       // 'union'
      consumeT(245);                // 'union'
      break;
    case 246:                       // 'unordered'
      consumeT(246);                // 'unordered'
      break;
    case 247:                       // 'update'
      consumeT(247);                // 'update'
      break;
    case 248:                       // 'updating'
      consumeT(248);                // 'updating'
      break;
    case 251:                       // 'validate'
      consumeT(251);                // 'validate'
      break;
    case 257:                       // 'where'
      consumeT(257);                // 'where'
      break;
    case 260:                       // 'with'
      consumeT(260);                // 'with'
      break;
    default:
      consumeT(264);                // 'xquery'
    }
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(64);                // S^WS | '(:' | 'revalidation'
    consume(213);                   // 'revalidation'
    lookahead1W(142);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 231:                       // 'strict'
      consume(231);                 // 'strict'
      break;
    case 165:                       // 'lax'
      consume(165);                 // 'lax'
      break;
    default:
      consume(224);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 76:                        // 'after'
      consume(76);                  // 'after'
      break;
    case 89:                        // 'before'
      consume(89);                  // 'before'
      break;
    default:
      if (l1 == 84)                 // 'as'
      {
        consume(84);                // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          consume(134);             // 'first'
          break;
        default:
          consume(164);             // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consume(159);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 76:                        // 'after'
      consumeT(76);                 // 'after'
      break;
    case 89:                        // 'before'
      consumeT(89);                 // 'before'
      break;
    default:
      if (l1 == 84)                 // 'as'
      {
        consumeT(84);               // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          consumeT(134);            // 'first'
          break;
        default:
          consumeT(164);            // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consumeT(159);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(156);                   // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 185:                       // 'node'
      consume(185);                 // 'node'
      break;
    default:
      consume(186);                 // 'nodes'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SourceExpr();
    lookahead1W(147);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(156);                  // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 185:                       // 'node'
      consumeT(185);                // 'node'
      break;
    default:
      consumeT(186);                // 'nodes'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_SourceExpr();
    lookahead1W(147);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    try_InsertExprTargetChoice();
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(110);                   // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 185:                       // 'node'
      consume(185);                 // 'node'
      break;
    default:
      consume(186);                 // 'nodes'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(110);                  // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 185:                       // 'node'
      consumeT(185);                // 'node'
      break;
    default:
      consumeT(186);                // 'nodes'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(211);                   // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 252)                  // 'value'
    {
      consume(252);                 // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(189);                 // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(185);                   // 'node'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consume(260);                   // 'with'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(211);                  // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 252)                  // 'value'
    {
      consumeT(252);                // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(189);                // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(185);                  // 'node'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consumeT(260);                  // 'with'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(210);                   // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(185);                   // 'node'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(84);                    // 'as'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(210);                  // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(185);                  // 'node'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(84);                   // 'as'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_UpdatingFunctionCall()
  {
    eventHandler.startNonterminal("UpdatingFunctionCall", e0);
    if (l1 == 160)                  // 'invoke'
    {
      consume(160);                 // 'invoke'
    }
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consume(248);                   // 'updating'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("UpdatingFunctionCall", e0);
  }

  function try_UpdatingFunctionCall()
  {
    if (l1 == 160)                  // 'invoke'
    {
      consumeT(160);                // 'invoke'
    }
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consumeT(248);                  // 'updating'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_CopyModifyExpr()
  {
    eventHandler.startNonterminal("CopyModifyExpr", e0);
    consume(103);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_CopyModifySpec();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_CopyModifySpec();
    }
    consume(175);                   // 'modify'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(212);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifyExpr", e0);
  }

  function try_CopyModifyExpr()
  {
    consumeT(103);                  // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_CopyModifySpec();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_CopyModifySpec();
    }
    consumeT(175);                  // 'modify'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(212);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_CopyModifySpec()
  {
    eventHandler.startNonterminal("CopyModifySpec", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifySpec", e0);
  }

  function try_CopyModifySpec()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 != 86                  // 'at'
       && l1 != 115                 // 'different'
       && l1 != 117                 // 'distance'
       && l1 != 127                 // 'entire'
       && l1 != 194                 // 'ordered'
       && l1 != 214                 // 'same'
       && l1 != 259)                // 'window'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 != 86                  // 'at'
       && l1 != 115                 // 'different'
       && l1 != 117                 // 'distance'
       && l1 != 127                 // 'entire'
       && l1 != 194                 // 'ordered'
       && l1 != 214                 // 'same'
       && l1 != 259)                // 'window'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(255);                   // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(266);                   // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(270);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(255);                  // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(266);                  // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(270);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 142)                // 'ftor'
      {
        break;
      }
      consume(142);                 // 'ftor'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 142)                // 'ftor'
      {
        break;
      }
      consumeT(142);                // 'ftor'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 140)                // 'ftand'
      {
        break;
      }
      consume(140);                 // 'ftand'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 140)                // 'ftand'
      {
        break;
      }
      consumeT(140);                // 'ftand'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(187);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '}' | '}`'
      if (l1 != 187)                // 'not'
      {
        break;
      }
      consume(187);                 // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consume(152);                 // 'in'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(187);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '}' | '}`'
      if (l1 != 187)                // 'not'
      {
        break;
      }
      consumeT(187);                // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consumeT(152);                // 'in'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 141)                  // 'ftnot'
    {
      consume(141);                 // 'ftnot'
    }
    lookahead1W(145);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 141)                  // 'ftnot'
    {
      consumeT(141);                // 'ftnot'
    }
    lookahead1W(145);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(189);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '}' | '}`'
    if (l1 == 250)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 255)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(189);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '}' | '}`'
    if (l1 == 250)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 255)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 == 188)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 == 188)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(196);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
    if (l1 == 77                    // 'all'
     || l1 == 82                    // 'any'
     || l1 == 203)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(196);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
    if (l1 == 77                    // 'all'
     || l1 == 82                    // 'any'
     || l1 == 203)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      consume(266);                 // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(270);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      consumeT(266);                // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(270);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(266);                   // '{'
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 270)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(270);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(266);                  // '{'
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 270)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(270);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 82:                        // 'any'
      consume(82);                  // 'any'
      lookahead1W(193);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '}' | '}`'
      if (l1 == 262)                // 'word'
      {
        consume(262);               // 'word'
      }
      break;
    case 77:                        // 'all'
      consume(77);                  // 'all'
      lookahead1W(194);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '}' | '}`'
      if (l1 == 263)                // 'words'
      {
        consume(263);               // 'words'
      }
      break;
    default:
      consume(203);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 82:                        // 'any'
      consumeT(82);                 // 'any'
      lookahead1W(193);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '}' | '}`'
      if (l1 == 262)                // 'word'
      {
        consumeT(262);              // 'word'
      }
      break;
    case 77:                        // 'all'
      consumeT(77);                 // 'all'
      lookahead1W(194);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '}' | '}`'
      if (l1 == 263)                // 'words'
      {
        consumeT(263);              // 'words'
      }
      break;
    default:
      consumeT(203);                // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(188);                   // 'occurs'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(237);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(188);                  // 'occurs'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(237);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      consume(130);                 // 'exactly'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 167:                     // 'least'
        consume(167);               // 'least'
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(177);               // 'most'
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(138);                 // 'from'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      consume(238);                 // 'to'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      consumeT(130);                // 'exactly'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_AdditiveExpr();
      break;
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 167:                     // 'least'
        consumeT(167);              // 'least'
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_AdditiveExpr();
        break;
      default:
        consumeT(177);              // 'most'
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(138);                // 'from'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_AdditiveExpr();
      consumeT(238);                // 'to'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 194:                       // 'ordered'
      parse_FTOrder();
      break;
    case 259:                       // 'window'
      parse_FTWindow();
      break;
    case 117:                       // 'distance'
      parse_FTDistance();
      break;
    case 115:                       // 'different'
    case 214:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 194:                       // 'ordered'
      try_FTOrder();
      break;
    case 259:                       // 'window'
      try_FTWindow();
      break;
    case 117:                       // 'distance'
      try_FTDistance();
      break;
    case 115:                       // 'different'
    case 214:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(194);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(194);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(259);                   // 'window'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(259);                  // 'window'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(117);                   // 'distance'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(117);                  // 'distance'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 263:                       // 'words'
      consume(263);                 // 'words'
      break;
    case 223:                       // 'sentences'
      consume(223);                 // 'sentences'
      break;
    default:
      consume(198);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 263:                       // 'words'
      consumeT(263);                // 'words'
      break;
    case 223:                       // 'sentences'
      consumeT(223);                // 'sentences'
      break;
    default:
      consumeT(198);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 214:                       // 'same'
      consume(214);                 // 'same'
      break;
    default:
      consume(115);                 // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 214:                       // 'same'
      consumeT(214);                // 'same'
      break;
    default:
      consumeT(115);                // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 222:                       // 'sentence'
      consume(222);                 // 'sentence'
      break;
    default:
      consume(197);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 222:                       // 'sentence'
      consumeT(222);                // 'sentence'
      break;
    default:
      consumeT(197);                // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 228:                     // 'start'
        consume(228);               // 'start'
        break;
      default:
        consume(126);               // 'end'
      }
      break;
    default:
      consume(127);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(101);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 228:                     // 'start'
        consumeT(228);              // 'start'
        break;
      default:
        consumeT(126);              // 'end'
      }
      break;
    default:
      consumeT(127);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(101);                // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(250);                 // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 != 250)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(250);                // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 != 250)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 182:                       // 'no'
      lookahead2W(152);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 163:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 258:                       // 'wildcards'
    case 132278:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 236:                       // 'thesaurus'
    case 121014:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 229:                       // 'stemming'
    case 117430:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 230:                       // 'stop'
    case 117942:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 191:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 182:                       // 'no'
      lookahead2W(152);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 163:                       // 'language'
      try_FTLanguageOption();
      break;
    case 258:                       // 'wildcards'
    case 132278:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 236:                       // 'thesaurus'
    case 121014:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 229:                       // 'stemming'
    case 117430:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 230:                       // 'stop'
    case 117942:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 191:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 92:                        // 'case'
      consume(92);                  // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 155:                     // 'insensitive'
        consume(155);               // 'insensitive'
        break;
      default:
        consume(221);               // 'sensitive'
      }
      break;
    case 170:                       // 'lowercase'
      consume(170);                 // 'lowercase'
      break;
    default:
      consume(249);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 92:                        // 'case'
      consumeT(92);                 // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 155:                     // 'insensitive'
        consumeT(155);              // 'insensitive'
        break;
      default:
        consumeT(221);              // 'sensitive'
      }
      break;
    case 170:                       // 'lowercase'
      consumeT(170);                // 'lowercase'
      break;
    default:
      consumeT(249);                // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(114);                   // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 155:                       // 'insensitive'
      consume(155);                 // 'insensitive'
      break;
    default:
      consume(221);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(114);                  // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 155:                       // 'insensitive'
      consumeT(155);                // 'insensitive'
      break;
    default:
      consumeT(221);                // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 229:                       // 'stemming'
      consume(229);                 // 'stemming'
      break;
    default:
      consume(182);                 // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consume(229);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 229:                       // 'stemming'
      consumeT(229);                // 'stemming'
      break;
    default:
      consumeT(182);                // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consumeT(229);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 236:                       // 'thesaurus'
      consume(236);                 // 'thesaurus'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 86:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 109:                     // 'default'
        consume(109);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 86:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(109);             // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consume(40);              // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(182);                 // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consume(236);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 236:                       // 'thesaurus'
      consumeT(236);                // 'thesaurus'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 86:                      // 'at'
        try_FTThesaurusID();
        break;
      case 109:                     // 'default'
        consumeT(109);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 86:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(109);            // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consumeT(40);             // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(182);                // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consumeT(236);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(86);                    // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(195);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' |
                                    // '}`'
    if (l1 == 209)                  // 'relationship'
    {
      consume(209);                 // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    lookahead1W(191);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
    switch (l1)
    {
    case 86:                        // 'at'
      lookahead2W(150);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 138                   // 'from'
     || lk == 85590                 // 'at' 'least'
     || lk == 90710)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consume(169);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(86);                   // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
    lookahead1W(195);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' |
                                    // '}`'
    if (l1 == 209)                  // 'relationship'
    {
      consumeT(209);                // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
    }
    lookahead1W(191);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
    switch (l1)
    {
    case 86:                        // 'at'
      lookahead2W(150);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 138                   // 'from'
     || lk == 85590                 // 'at' 'least'
     || lk == 90710)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consumeT(169);                // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      consume(130);                 // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      break;
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 167:                     // 'least'
        consume(167);               // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
        break;
      default:
        consume(177);               // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
      }
      break;
    default:
      consume(138);                 // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consume(238);                 // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      consumeT(130);                // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      break;
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 167:                     // 'least'
        consumeT(167);              // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
        break;
      default:
        consumeT(177);              // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
      }
      break;
    default:
      consumeT(138);                // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consumeT(238);                // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 230:                       // 'stop'
      consume(230);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(263);                 // 'words'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        consume(109);               // 'default'
        for (;;)
        {
          lookahead1W(192);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
          if (l1 != 131             // 'except'
           && l1 != 245)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(192);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
          if (l1 != 131             // 'except'
           && l1 != 245)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(182);                 // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consume(230);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(263);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 230:                       // 'stop'
      consumeT(230);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(263);                // 'words'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        consumeT(109);              // 'default'
        for (;;)
        {
          lookahead1W(192);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
          if (l1 != 131             // 'except'
           && l1 != 245)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(192);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
          if (l1 != 131             // 'except'
           && l1 != 245)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(182);                // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consumeT(230);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(263);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      break;
    default:
      consume(34);                  // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consumeT(4);                // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 245:                       // 'union'
      consume(245);                 // 'union'
      break;
    default:
      consume(131);                 // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 245:                       // 'union'
      consumeT(245);                // 'union'
      break;
    default:
      consumeT(131);                // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(163);                   // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(163);                  // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 258:                       // 'wildcards'
      consume(258);                 // 'wildcards'
      break;
    default:
      consume(182);                 // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consume(258);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 258:                       // 'wildcards'
      consumeT(258);                // 'wildcards'
      break;
    default:
      consumeT(182);                // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consumeT(258);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(191);                   // 'option'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(191);                  // 'option'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(261);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(101);                   // 'content'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_OtherwiseExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(261);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(101);                  // 'content'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_OtherwiseExpr();
  }

  function try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(81);               // CommentContents | '(:' | ':)'
      if (l1 == 49)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 19:                      // CommentContents
        consumeT(19);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(49);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 18:                        // S^WS
      consumeT(18);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 14:                        // NCName^Token
      consume(14);                  // NCName^Token
      break;
    case 81:                        // 'and'
      consume(81);                  // 'and'
      break;
    case 84:                        // 'as'
      consume(84);                  // 'as'
      break;
    case 85:                        // 'ascending'
      consume(85);                  // 'ascending'
      break;
    case 92:                        // 'case'
      consume(92);                  // 'case'
      break;
    case 93:                        // 'cast'
      consume(93);                  // 'cast'
      break;
    case 94:                        // 'castable'
      consume(94);                  // 'castable'
      break;
    case 97:                        // 'collation'
      consume(97);                  // 'collation'
      break;
    case 105:                       // 'count'
      consume(105);                 // 'count'
      break;
    case 109:                       // 'default'
      consume(109);                 // 'default'
      break;
    case 113:                       // 'descending'
      consume(113);                 // 'descending'
      break;
    case 118:                       // 'div'
      consume(118);                 // 'div'
      break;
    case 122:                       // 'else'
      consume(122);                 // 'else'
      break;
    case 123:                       // 'empty'
      consume(123);                 // 'empty'
      break;
    case 126:                       // 'end'
      consume(126);                 // 'end'
      break;
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 131:                       // 'except'
      consume(131);                 // 'except'
      break;
    case 137:                       // 'for'
      consume(137);                 // 'for'
      break;
    case 144:                       // 'ge'
      consume(144);                 // 'ge'
      break;
    case 146:                       // 'group'
      consume(146);                 // 'group'
      break;
    case 148:                       // 'gt'
      consume(148);                 // 'gt'
      break;
    case 149:                       // 'idiv'
      consume(149);                 // 'idiv'
      break;
    case 157:                       // 'instance'
      consume(157);                 // 'instance'
      break;
    case 158:                       // 'intersect'
      consume(158);                 // 'intersect'
      break;
    case 161:                       // 'is'
      consume(161);                 // 'is'
      break;
    case 166:                       // 'le'
      consume(166);                 // 'le'
      break;
    case 168:                       // 'let'
      consume(168);                 // 'let'
      break;
    case 171:                       // 'lt'
      consume(171);                 // 'lt'
      break;
    case 174:                       // 'mod'
      consume(174);                 // 'mod'
      break;
    case 180:                       // 'ne'
      consume(180);                 // 'ne'
      break;
    case 190:                       // 'only'
      consume(190);                 // 'only'
      break;
    case 192:                       // 'or'
      consume(192);                 // 'or'
      break;
    case 193:                       // 'order'
      consume(193);                 // 'order'
      break;
    case 212:                       // 'return'
      consume(212);                 // 'return'
      break;
    case 215:                       // 'satisfies'
      consume(215);                 // 'satisfies'
      break;
    case 227:                       // 'stable'
      consume(227);                 // 'stable'
      break;
    case 228:                       // 'start'
      consume(228);                 // 'start'
      break;
    case 238:                       // 'to'
      consume(238);                 // 'to'
      break;
    case 240:                       // 'treat'
      consume(240);                 // 'treat'
      break;
    case 245:                       // 'union'
      consume(245);                 // 'union'
      break;
    case 248:                       // 'updating'
      consume(248);                 // 'updating'
      break;
    default:
      consume(257);                 // 'where'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 14:                        // NCName^Token
      consumeT(14);                 // NCName^Token
      break;
    case 81:                        // 'and'
      consumeT(81);                 // 'and'
      break;
    case 84:                        // 'as'
      consumeT(84);                 // 'as'
      break;
    case 85:                        // 'ascending'
      consumeT(85);                 // 'ascending'
      break;
    case 92:                        // 'case'
      consumeT(92);                 // 'case'
      break;
    case 93:                        // 'cast'
      consumeT(93);                 // 'cast'
      break;
    case 94:                        // 'castable'
      consumeT(94);                 // 'castable'
      break;
    case 97:                        // 'collation'
      consumeT(97);                 // 'collation'
      break;
    case 105:                       // 'count'
      consumeT(105);                // 'count'
      break;
    case 109:                       // 'default'
      consumeT(109);                // 'default'
      break;
    case 113:                       // 'descending'
      consumeT(113);                // 'descending'
      break;
    case 118:                       // 'div'
      consumeT(118);                // 'div'
      break;
    case 122:                       // 'else'
      consumeT(122);                // 'else'
      break;
    case 123:                       // 'empty'
      consumeT(123);                // 'empty'
      break;
    case 126:                       // 'end'
      consumeT(126);                // 'end'
      break;
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 131:                       // 'except'
      consumeT(131);                // 'except'
      break;
    case 137:                       // 'for'
      consumeT(137);                // 'for'
      break;
    case 144:                       // 'ge'
      consumeT(144);                // 'ge'
      break;
    case 146:                       // 'group'
      consumeT(146);                // 'group'
      break;
    case 148:                       // 'gt'
      consumeT(148);                // 'gt'
      break;
    case 149:                       // 'idiv'
      consumeT(149);                // 'idiv'
      break;
    case 157:                       // 'instance'
      consumeT(157);                // 'instance'
      break;
    case 158:                       // 'intersect'
      consumeT(158);                // 'intersect'
      break;
    case 161:                       // 'is'
      consumeT(161);                // 'is'
      break;
    case 166:                       // 'le'
      consumeT(166);                // 'le'
      break;
    case 168:                       // 'let'
      consumeT(168);                // 'let'
      break;
    case 171:                       // 'lt'
      consumeT(171);                // 'lt'
      break;
    case 174:                       // 'mod'
      consumeT(174);                // 'mod'
      break;
    case 180:                       // 'ne'
      consumeT(180);                // 'ne'
      break;
    case 190:                       // 'only'
      consumeT(190);                // 'only'
      break;
    case 192:                       // 'or'
      consumeT(192);                // 'or'
      break;
    case 193:                       // 'order'
      consumeT(193);                // 'order'
      break;
    case 212:                       // 'return'
      consumeT(212);                // 'return'
      break;
    case 215:                       // 'satisfies'
      consumeT(215);                // 'satisfies'
      break;
    case 227:                       // 'stable'
      consumeT(227);                // 'stable'
      break;
    case 228:                       // 'start'
      consumeT(228);                // 'start'
      break;
    case 238:                       // 'to'
      consumeT(238);                // 'to'
      break;
    case 240:                       // 'treat'
      consumeT(240);                // 'treat'
      break;
    case 245:                       // 'union'
      consumeT(245);                // 'union'
      break;
    case 248:                       // 'updating'
      consumeT(248);                // 'updating'
      break;
    default:
      consumeT(257);                // 'where'
    }
  }

  function parse_QueryBody()
  {
    eventHandler.startNonterminal("QueryBody", e0);
    parse_Expr();
    eventHandler.endNonterminal("QueryBody", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(160);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(160);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(217);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?:' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'return' | 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
      break;
    case 160:                       // 'invoke'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'updating' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 168:                       // 'let'
      lookahead2W(213);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?:' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'return' | 'satisfies' | 'score' | 'stable' | 'start' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 210:                       // 'rename'
      lookahead2W(209);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'otherwise' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 211:                       // 'replace'
      lookahead2W(215);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'otherwise' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'value' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 241:                       // 'try'
      lookahead2W(211);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 248:                       // 'updating'
      lookahead2W(252);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '//' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '?:' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'otherwise' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '|' | '||' | '}' | '}`'
      break;
    case 110:                       // 'delete'
    case 156:                       // 'insert'
      lookahead2W(214);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 226:                       // 'some'
      lookahead2W(208);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?:' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 150:                       // 'if'
    case 233:                       // 'switch'
    case 244:                       // 'typeswitch'
      lookahead2W(206);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17558                 // 'if' '('
     || lk == 17656                 // 'updating' '('
     || lk == 27384                 // 'updating' '<'
     || lk == 36088                 // 'updating' '['
     || lk == 41720                 // 'updating' 'and'
     || lk == 43256                 // 'updating' 'as'
     || lk == 43768                 // 'updating' 'ascending'
     || lk == 47352                 // 'updating' 'case'
     || lk == 47864                 // 'updating' 'cast'
     || lk == 48376                 // 'updating' 'castable'
     || lk == 49912                 // 'updating' 'collation'
     || lk == 54008                 // 'updating' 'count'
     || lk == 56056                 // 'updating' 'default'
     || lk == 58104                 // 'updating' 'descending'
     || lk == 60664                 // 'updating' 'div'
     || lk == 62712                 // 'updating' 'else'
     || lk == 63224                 // 'updating' 'empty'
     || lk == 64760                 // 'updating' 'end'
     || lk == 65784                 // 'updating' 'eq'
     || lk == 67320                 // 'updating' 'except'
     || lk == 70392                 // 'updating' 'for'
     || lk == 73976                 // 'updating' 'ge'
     || lk == 75000                 // 'updating' 'group'
     || lk == 76024                 // 'updating' 'gt'
     || lk == 76536                 // 'updating' 'idiv'
     || lk == 80632                 // 'updating' 'instance'
     || lk == 81144                 // 'updating' 'intersect'
     || lk == 82680                 // 'updating' 'is'
     || lk == 85240                 // 'updating' 'le'
     || lk == 86264                 // 'updating' 'let'
     || lk == 87800                 // 'updating' 'lt'
     || lk == 89336                 // 'updating' 'mod'
     || lk == 89848                 // 'updating' 'modify'
     || lk == 92408                 // 'updating' 'ne'
     || lk == 97528                 // 'updating' 'only'
     || lk == 98552                 // 'updating' 'or'
     || lk == 99064                 // 'updating' 'order'
     || lk == 108792                // 'updating' 'return'
     || lk == 110328                // 'updating' 'satisfies'
     || lk == 116472                // 'updating' 'stable'
     || lk == 116984                // 'updating' 'start'
     || lk == 122104                // 'updating' 'to'
     || lk == 122616                // 'updating' 'transform'
     || lk == 123128                // 'updating' 'treat'
     || lk == 125688                // 'updating' 'union'
     || lk == 126712                // 'updating' 'update'
     || lk == 131832                // 'updating' 'where'
     || lk == 133368)               // 'updating' 'with'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_IfExpr();
          lk = -5;
        }
        catch (p5A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_BasexIfExpr();
            lk = -6;
          }
          catch (p6A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_UpdatingFunctionCall();
              lk = -12;
            }
            catch (p12A)
            {
              lk = -14;
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16040:                     // 'let' '$'
    case 112296:                    // 'let' 'score'
    case 115337:                    // 'for' 'sliding'
    case 124041:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 16001:                     // 'every' '$'
    case 16098:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 17641:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 17652:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    case -5:
      parse_IfExpr();
      break;
    case -6:
      parse_BasexIfExpr();
      break;
    case 136433:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 94876:                     // 'insert' 'node'
    case 95388:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 94830:                     // 'delete' 'node'
    case 95342:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 94930:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 94931:                     // 'replace' 'node'
    case 129235:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case -12:
    case 760:                       // 'updating' IntegerLiteral
    case 1272:                      // 'updating' DecimalLiteral
    case 1784:                      // 'updating' DoubleLiteral
    case 2296:                      // 'updating' StringLiteral
    case 2808:                      // 'updating' URIQualifiedName
    case 7928:                      // 'updating' QName^Token
    case 16120:                     // 'updating' '$'
    case 16632:                     // 'updating' '%'
    case 22264:                     // 'updating' '.'
    case 27896:                     // 'updating' '<!--'
    case 30456:                     // 'updating' '<?'
    case 33528:                     // 'updating' '?'
    case 38136:                     // 'updating' '``['
    case 40696:                     // 'updating' 'ancestor'
    case 41208:                     // 'updating' 'ancestor-or-self'
    case 42744:                     // 'updating' 'array'
    case 44280:                     // 'updating' 'at'
    case 44792:                     // 'updating' 'attribute'
    case 49400:                     // 'updating' 'child'
    case 50424:                     // 'updating' 'comment'
    case 52984:                     // 'updating' 'copy'
    case 55544:                     // 'updating' 'declare'
    case 56568:                     // 'updating' 'delete'
    case 57080:                     // 'updating' 'descendant'
    case 57592:                     // 'updating' 'descendant-or-self'
    case 61176:                     // 'updating' 'document'
    case 61688:                     // 'updating' 'document-node'
    case 62200:                     // 'updating' 'element'
    case 63736:                     // 'updating' 'empty-sequence'
    case 66296:                     // 'updating' 'every'
    case 69368:                     // 'updating' 'following'
    case 69880:                     // 'updating' 'following-sibling'
    case 73464:                     // 'updating' 'function'
    case 77048:                     // 'updating' 'if'
    case 77560:                     // 'updating' 'import'
    case 80120:                     // 'updating' 'insert'
    case 82168:                     // 'updating' 'invoke'
    case 83192:                     // 'updating' 'item'
    case 88312:                     // 'updating' 'map'
    case 90360:                     // 'updating' 'module'
    case 91384:                     // 'updating' 'namespace'
    case 91896:                     // 'updating' 'namespace-node'
    case 94968:                     // 'updating' 'node'
    case 99576:                     // 'updating' 'ordered'
    case 102136:                    // 'updating' 'parent'
    case 104696:                    // 'updating' 'preceding'
    case 105208:                    // 'updating' 'preceding-sibling'
    case 106744:                    // 'updating' 'processing-instruction'
    case 107768:                    // 'updating' 'rename'
    case 108280:                    // 'updating' 'replace'
    case 111352:                    // 'updating' 'schema-attribute'
    case 111864:                    // 'updating' 'schema-element'
    case 112888:                    // 'updating' 'self'
    case 115960:                    // 'updating' 'some'
    case 119544:                    // 'updating' 'switch'
    case 120056:                    // 'updating' 'text'
    case 123640:                    // 'updating' 'try'
    case 125176:                    // 'updating' 'typeswitch'
    case 126200:                    // 'updating' 'unordered'
    case 127136:                    // 'invoke' 'updating'
    case 127224:                    // 'updating' 'updating'
    case 128760:                    // 'updating' 'validate'
    case 135416:                    // 'updating' 'xquery'
      parse_UpdatingFunctionCall();
      break;
    case 15975:                     // 'copy' '$'
      parse_CopyModifyExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(217);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?:' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'return' | 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
      break;
    case 160:                       // 'invoke'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'updating' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 168:                       // 'let'
      lookahead2W(213);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?:' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'return' | 'satisfies' | 'score' | 'stable' | 'start' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 210:                       // 'rename'
      lookahead2W(209);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'otherwise' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 211:                       // 'replace'
      lookahead2W(215);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'otherwise' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'value' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 241:                       // 'try'
      lookahead2W(211);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 248:                       // 'updating'
      lookahead2W(252);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '//' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '?:' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'otherwise' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '|' | '||' | '}' | '}`'
      break;
    case 110:                       // 'delete'
    case 156:                       // 'insert'
      lookahead2W(214);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 226:                       // 'some'
      lookahead2W(208);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?:' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'otherwise' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 150:                       // 'if'
    case 233:                       // 'switch'
    case 244:                       // 'typeswitch'
      lookahead2W(206);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?:' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'otherwise' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17558                 // 'if' '('
     || lk == 17656                 // 'updating' '('
     || lk == 27384                 // 'updating' '<'
     || lk == 36088                 // 'updating' '['
     || lk == 41720                 // 'updating' 'and'
     || lk == 43256                 // 'updating' 'as'
     || lk == 43768                 // 'updating' 'ascending'
     || lk == 47352                 // 'updating' 'case'
     || lk == 47864                 // 'updating' 'cast'
     || lk == 48376                 // 'updating' 'castable'
     || lk == 49912                 // 'updating' 'collation'
     || lk == 54008                 // 'updating' 'count'
     || lk == 56056                 // 'updating' 'default'
     || lk == 58104                 // 'updating' 'descending'
     || lk == 60664                 // 'updating' 'div'
     || lk == 62712                 // 'updating' 'else'
     || lk == 63224                 // 'updating' 'empty'
     || lk == 64760                 // 'updating' 'end'
     || lk == 65784                 // 'updating' 'eq'
     || lk == 67320                 // 'updating' 'except'
     || lk == 70392                 // 'updating' 'for'
     || lk == 73976                 // 'updating' 'ge'
     || lk == 75000                 // 'updating' 'group'
     || lk == 76024                 // 'updating' 'gt'
     || lk == 76536                 // 'updating' 'idiv'
     || lk == 80632                 // 'updating' 'instance'
     || lk == 81144                 // 'updating' 'intersect'
     || lk == 82680                 // 'updating' 'is'
     || lk == 85240                 // 'updating' 'le'
     || lk == 86264                 // 'updating' 'let'
     || lk == 87800                 // 'updating' 'lt'
     || lk == 89336                 // 'updating' 'mod'
     || lk == 89848                 // 'updating' 'modify'
     || lk == 92408                 // 'updating' 'ne'
     || lk == 97528                 // 'updating' 'only'
     || lk == 98552                 // 'updating' 'or'
     || lk == 99064                 // 'updating' 'order'
     || lk == 108792                // 'updating' 'return'
     || lk == 110328                // 'updating' 'satisfies'
     || lk == 116472                // 'updating' 'stable'
     || lk == 116984                // 'updating' 'start'
     || lk == 122104                // 'updating' 'to'
     || lk == 122616                // 'updating' 'transform'
     || lk == 123128                // 'updating' 'treat'
     || lk == 125688                // 'updating' 'union'
     || lk == 126712                // 'updating' 'update'
     || lk == 131832                // 'updating' 'where'
     || lk == 133368)               // 'updating' 'with'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_IfExpr();
          memoize(9, e0A, -5);
          lk = -15;
        }
        catch (p5A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_BasexIfExpr();
            memoize(9, e0A, -6);
            lk = -15;
          }
          catch (p6A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_UpdatingFunctionCall();
              memoize(9, e0A, -12);
              lk = -15;
            }
            catch (p12A)
            {
              lk = -14;
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(9, e0A, -14);
            }
          }
        }
      }
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16040:                     // 'let' '$'
    case 112296:                    // 'let' 'score'
    case 115337:                    // 'for' 'sliding'
    case 124041:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 16001:                     // 'every' '$'
    case 16098:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 17641:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 17652:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    case -5:
      try_IfExpr();
      break;
    case -6:
      try_BasexIfExpr();
      break;
    case 136433:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 94876:                     // 'insert' 'node'
    case 95388:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 94830:                     // 'delete' 'node'
    case 95342:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 94930:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 94931:                     // 'replace' 'node'
    case 129235:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case -12:
    case 760:                       // 'updating' IntegerLiteral
    case 1272:                      // 'updating' DecimalLiteral
    case 1784:                      // 'updating' DoubleLiteral
    case 2296:                      // 'updating' StringLiteral
    case 2808:                      // 'updating' URIQualifiedName
    case 7928:                      // 'updating' QName^Token
    case 16120:                     // 'updating' '$'
    case 16632:                     // 'updating' '%'
    case 22264:                     // 'updating' '.'
    case 27896:                     // 'updating' '<!--'
    case 30456:                     // 'updating' '<?'
    case 33528:                     // 'updating' '?'
    case 38136:                     // 'updating' '``['
    case 40696:                     // 'updating' 'ancestor'
    case 41208:                     // 'updating' 'ancestor-or-self'
    case 42744:                     // 'updating' 'array'
    case 44280:                     // 'updating' 'at'
    case 44792:                     // 'updating' 'attribute'
    case 49400:                     // 'updating' 'child'
    case 50424:                     // 'updating' 'comment'
    case 52984:                     // 'updating' 'copy'
    case 55544:                     // 'updating' 'declare'
    case 56568:                     // 'updating' 'delete'
    case 57080:                     // 'updating' 'descendant'
    case 57592:                     // 'updating' 'descendant-or-self'
    case 61176:                     // 'updating' 'document'
    case 61688:                     // 'updating' 'document-node'
    case 62200:                     // 'updating' 'element'
    case 63736:                     // 'updating' 'empty-sequence'
    case 66296:                     // 'updating' 'every'
    case 69368:                     // 'updating' 'following'
    case 69880:                     // 'updating' 'following-sibling'
    case 73464:                     // 'updating' 'function'
    case 77048:                     // 'updating' 'if'
    case 77560:                     // 'updating' 'import'
    case 80120:                     // 'updating' 'insert'
    case 82168:                     // 'updating' 'invoke'
    case 83192:                     // 'updating' 'item'
    case 88312:                     // 'updating' 'map'
    case 90360:                     // 'updating' 'module'
    case 91384:                     // 'updating' 'namespace'
    case 91896:                     // 'updating' 'namespace-node'
    case 94968:                     // 'updating' 'node'
    case 99576:                     // 'updating' 'ordered'
    case 102136:                    // 'updating' 'parent'
    case 104696:                    // 'updating' 'preceding'
    case 105208:                    // 'updating' 'preceding-sibling'
    case 106744:                    // 'updating' 'processing-instruction'
    case 107768:                    // 'updating' 'rename'
    case 108280:                    // 'updating' 'replace'
    case 111352:                    // 'updating' 'schema-attribute'
    case 111864:                    // 'updating' 'schema-element'
    case 112888:                    // 'updating' 'self'
    case 115960:                    // 'updating' 'some'
    case 119544:                    // 'updating' 'switch'
    case 120056:                    // 'updating' 'text'
    case 123640:                    // 'updating' 'try'
    case 125176:                    // 'updating' 'typeswitch'
    case 126200:                    // 'updating' 'unordered'
    case 127136:                    // 'invoke' 'updating'
    case 127224:                    // 'updating' 'updating'
    case 128760:                    // 'updating' 'validate'
    case 135416:                    // 'updating' 'xquery'
      try_UpdatingFunctionCall();
      break;
    case 15975:                     // 'copy' '$'
      try_CopyModifyExpr();
      break;
    case -15:
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consume(6);                   // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consume(13);                  // CharRef
      break;
    case 267:                       // '{{'
      consume(267);                 // '{{'
      break;
    case 272:                       // '}}'
      consume(272);                 // '}}'
      break;
    default:
      parse_EnclosedExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consumeT(6);                  // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consumeT(13);                 // CharRef
      break;
    case 267:                       // '{{'
      consumeT(267);                // '{{'
      break;
    case 272:                       // '}}'
      consumeT(272);                // '}}'
      break;
    default:
      try_EnclosedExpr();
    }
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(119);                   // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(119);                  // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(87);                    // 'attribute'
    lookahead1W(234);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 266:                       // '{'
      consume(266);                 // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(270);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(87);                   // 'attribute'
    lookahead1W(234);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 266:                       // '{'
      consumeT(266);                // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(270);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(208);                   // 'processing-instruction'
    lookahead1W(176);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
    switch (l1)
    {
    case 266:                       // '{'
      consume(266);                 // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(270);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(208);                  // 'processing-instruction'
    lookahead1W(176);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
    switch (l1)
    {
    case 266:                       // '{'
      consumeT(266);                // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(270);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(98);                    // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(98);                   // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(234);                   // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(234);                  // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 178:                       // 'namespace'
      lookahead2W(180);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'updating' | 'where' | '{'
      break;
    case 208:                       // 'processing-instruction'
      lookahead2W(178);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
      break;
    case 87:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(235);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 98:                        // 'comment'
    case 234:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 194:                       // 'ordered'
    case 246:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 79:                        // 'ancestor'
    case 80:                        // 'ancestor-or-self'
    case 81:                        // 'and'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 92:                        // 'case'
    case 93:                        // 'cast'
    case 94:                        // 'castable'
    case 96:                        // 'child'
    case 97:                        // 'collation'
    case 103:                       // 'copy'
    case 105:                       // 'count'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 144:                       // 'ge'
    case 146:                       // 'group'
    case 148:                       // 'gt'
    case 149:                       // 'idiv'
    case 151:                       // 'import'
    case 156:                       // 'insert'
    case 157:                       // 'instance'
    case 158:                       // 'intersect'
    case 160:                       // 'invoke'
    case 161:                       // 'is'
    case 166:                       // 'le'
    case 168:                       // 'let'
    case 171:                       // 'lt'
    case 174:                       // 'mod'
    case 175:                       // 'modify'
    case 176:                       // 'module'
    case 180:                       // 'ne'
    case 190:                       // 'only'
    case 192:                       // 'or'
    case 193:                       // 'order'
    case 199:                       // 'parent'
    case 204:                       // 'preceding'
    case 205:                       // 'preceding-sibling'
    case 210:                       // 'rename'
    case 211:                       // 'replace'
    case 212:                       // 'return'
    case 215:                       // 'satisfies'
    case 220:                       // 'self'
    case 226:                       // 'some'
    case 227:                       // 'stable'
    case 228:                       // 'start'
    case 238:                       // 'to'
    case 239:                       // 'transform'
    case 240:                       // 'treat'
    case 241:                       // 'try'
    case 245:                       // 'union'
    case 247:                       // 'update'
    case 248:                       // 'updating'
    case 251:                       // 'validate'
    case 257:                       // 'where'
    case 260:                       // 'with'
    case 264:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17487:                     // 'ancestor' '('
    case 17488:                     // 'ancestor-or-self' '('
    case 17489:                     // 'and' '('
    case 17492:                     // 'as' '('
    case 17493:                     // 'ascending' '('
    case 17494:                     // 'at' '('
    case 17500:                     // 'case' '('
    case 17501:                     // 'cast' '('
    case 17502:                     // 'castable' '('
    case 17504:                     // 'child' '('
    case 17505:                     // 'collation' '('
    case 17511:                     // 'copy' '('
    case 17513:                     // 'count' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17552:                     // 'ge' '('
    case 17554:                     // 'group' '('
    case 17556:                     // 'gt' '('
    case 17557:                     // 'idiv' '('
    case 17559:                     // 'import' '('
    case 17564:                     // 'insert' '('
    case 17565:                     // 'instance' '('
    case 17566:                     // 'intersect' '('
    case 17568:                     // 'invoke' '('
    case 17569:                     // 'is' '('
    case 17574:                     // 'le' '('
    case 17576:                     // 'let' '('
    case 17579:                     // 'lt' '('
    case 17582:                     // 'mod' '('
    case 17583:                     // 'modify' '('
    case 17584:                     // 'module' '('
    case 17586:                     // 'namespace' '('
    case 17588:                     // 'ne' '('
    case 17598:                     // 'only' '('
    case 17600:                     // 'or' '('
    case 17601:                     // 'order' '('
    case 17602:                     // 'ordered' '('
    case 17607:                     // 'parent' '('
    case 17612:                     // 'preceding' '('
    case 17613:                     // 'preceding-sibling' '('
    case 17618:                     // 'rename' '('
    case 17619:                     // 'replace' '('
    case 17620:                     // 'return' '('
    case 17623:                     // 'satisfies' '('
    case 17628:                     // 'self' '('
    case 17634:                     // 'some' '('
    case 17635:                     // 'stable' '('
    case 17636:                     // 'start' '('
    case 17646:                     // 'to' '('
    case 17647:                     // 'transform' '('
    case 17648:                     // 'treat' '('
    case 17649:                     // 'try' '('
    case 17653:                     // 'union' '('
    case 17654:                     // 'unordered' '('
    case 17655:                     // 'update' '('
    case 17656:                     // 'updating' '('
    case 17659:                     // 'validate' '('
    case 17665:                     // 'where' '('
    case 17668:                     // 'with' '('
    case 17672:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 136386:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 136438:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 143:                       // 'function'
    case 150:                       // 'if'
    case 162:                       // 'item'
    case 179:                       // 'namespace-node'
    case 185:                       // 'node'
    case 217:                       // 'schema-attribute'
    case 218:                       // 'schema-element'
    case 233:                       // 'switch'
    case 244:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14927:                     // 'ancestor' '#'
    case 14928:                     // 'ancestor-or-self' '#'
    case 14929:                     // 'and' '#'
    case 14932:                     // 'as' '#'
    case 14933:                     // 'ascending' '#'
    case 14934:                     // 'at' '#'
    case 14935:                     // 'attribute' '#'
    case 14940:                     // 'case' '#'
    case 14941:                     // 'cast' '#'
    case 14942:                     // 'castable' '#'
    case 14944:                     // 'child' '#'
    case 14945:                     // 'collation' '#'
    case 14946:                     // 'comment' '#'
    case 14951:                     // 'copy' '#'
    case 14953:                     // 'count' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14992:                     // 'ge' '#'
    case 14994:                     // 'group' '#'
    case 14996:                     // 'gt' '#'
    case 14997:                     // 'idiv' '#'
    case 14999:                     // 'import' '#'
    case 15004:                     // 'insert' '#'
    case 15005:                     // 'instance' '#'
    case 15006:                     // 'intersect' '#'
    case 15008:                     // 'invoke' '#'
    case 15009:                     // 'is' '#'
    case 15014:                     // 'le' '#'
    case 15016:                     // 'let' '#'
    case 15019:                     // 'lt' '#'
    case 15022:                     // 'mod' '#'
    case 15023:                     // 'modify' '#'
    case 15024:                     // 'module' '#'
    case 15026:                     // 'namespace' '#'
    case 15028:                     // 'ne' '#'
    case 15038:                     // 'only' '#'
    case 15040:                     // 'or' '#'
    case 15041:                     // 'order' '#'
    case 15042:                     // 'ordered' '#'
    case 15047:                     // 'parent' '#'
    case 15052:                     // 'preceding' '#'
    case 15053:                     // 'preceding-sibling' '#'
    case 15056:                     // 'processing-instruction' '#'
    case 15058:                     // 'rename' '#'
    case 15059:                     // 'replace' '#'
    case 15060:                     // 'return' '#'
    case 15063:                     // 'satisfies' '#'
    case 15068:                     // 'self' '#'
    case 15074:                     // 'some' '#'
    case 15075:                     // 'stable' '#'
    case 15076:                     // 'start' '#'
    case 15082:                     // 'text' '#'
    case 15086:                     // 'to' '#'
    case 15087:                     // 'transform' '#'
    case 15088:                     // 'treat' '#'
    case 15089:                     // 'try' '#'
    case 15093:                     // 'union' '#'
    case 15094:                     // 'unordered' '#'
    case 15095:                     // 'update' '#'
    case 15096:                     // 'updating' '#'
    case 15099:                     // 'validate' '#'
    case 15105:                     // 'where' '#'
    case 15108:                     // 'with' '#'
    case 15112:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 172:                       // 'map'
      parse_MapConstructor();
      break;
    case 70:                        // '['
    case 83:                        // 'array'
      parse_ArrayConstructor();
      break;
    case 74:                        // '``['
      parse_StringConstructor();
      break;
    case 65:                        // '?'
      parse_UnaryLookup();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 178:                       // 'namespace'
      lookahead2W(180);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'updating' | 'where' | '{'
      break;
    case 208:                       // 'processing-instruction'
      lookahead2W(178);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
      break;
    case 87:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(235);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 98:                        // 'comment'
    case 234:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 194:                       // 'ordered'
    case 246:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 79:                        // 'ancestor'
    case 80:                        // 'ancestor-or-self'
    case 81:                        // 'and'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 92:                        // 'case'
    case 93:                        // 'cast'
    case 94:                        // 'castable'
    case 96:                        // 'child'
    case 97:                        // 'collation'
    case 103:                       // 'copy'
    case 105:                       // 'count'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 144:                       // 'ge'
    case 146:                       // 'group'
    case 148:                       // 'gt'
    case 149:                       // 'idiv'
    case 151:                       // 'import'
    case 156:                       // 'insert'
    case 157:                       // 'instance'
    case 158:                       // 'intersect'
    case 160:                       // 'invoke'
    case 161:                       // 'is'
    case 166:                       // 'le'
    case 168:                       // 'let'
    case 171:                       // 'lt'
    case 174:                       // 'mod'
    case 175:                       // 'modify'
    case 176:                       // 'module'
    case 180:                       // 'ne'
    case 190:                       // 'only'
    case 192:                       // 'or'
    case 193:                       // 'order'
    case 199:                       // 'parent'
    case 204:                       // 'preceding'
    case 205:                       // 'preceding-sibling'
    case 210:                       // 'rename'
    case 211:                       // 'replace'
    case 212:                       // 'return'
    case 215:                       // 'satisfies'
    case 220:                       // 'self'
    case 226:                       // 'some'
    case 227:                       // 'stable'
    case 228:                       // 'start'
    case 238:                       // 'to'
    case 239:                       // 'transform'
    case 240:                       // 'treat'
    case 241:                       // 'try'
    case 245:                       // 'union'
    case 247:                       // 'update'
    case 248:                       // 'updating'
    case 251:                       // 'validate'
    case 257:                       // 'where'
    case 260:                       // 'with'
    case 264:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      try_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17487:                     // 'ancestor' '('
    case 17488:                     // 'ancestor-or-self' '('
    case 17489:                     // 'and' '('
    case 17492:                     // 'as' '('
    case 17493:                     // 'ascending' '('
    case 17494:                     // 'at' '('
    case 17500:                     // 'case' '('
    case 17501:                     // 'cast' '('
    case 17502:                     // 'castable' '('
    case 17504:                     // 'child' '('
    case 17505:                     // 'collation' '('
    case 17511:                     // 'copy' '('
    case 17513:                     // 'count' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17552:                     // 'ge' '('
    case 17554:                     // 'group' '('
    case 17556:                     // 'gt' '('
    case 17557:                     // 'idiv' '('
    case 17559:                     // 'import' '('
    case 17564:                     // 'insert' '('
    case 17565:                     // 'instance' '('
    case 17566:                     // 'intersect' '('
    case 17568:                     // 'invoke' '('
    case 17569:                     // 'is' '('
    case 17574:                     // 'le' '('
    case 17576:                     // 'let' '('
    case 17579:                     // 'lt' '('
    case 17582:                     // 'mod' '('
    case 17583:                     // 'modify' '('
    case 17584:                     // 'module' '('
    case 17586:                     // 'namespace' '('
    case 17588:                     // 'ne' '('
    case 17598:                     // 'only' '('
    case 17600:                     // 'or' '('
    case 17601:                     // 'order' '('
    case 17602:                     // 'ordered' '('
    case 17607:                     // 'parent' '('
    case 17612:                     // 'preceding' '('
    case 17613:                     // 'preceding-sibling' '('
    case 17618:                     // 'rename' '('
    case 17619:                     // 'replace' '('
    case 17620:                     // 'return' '('
    case 17623:                     // 'satisfies' '('
    case 17628:                     // 'self' '('
    case 17634:                     // 'some' '('
    case 17635:                     // 'stable' '('
    case 17636:                     // 'start' '('
    case 17646:                     // 'to' '('
    case 17647:                     // 'transform' '('
    case 17648:                     // 'treat' '('
    case 17649:                     // 'try' '('
    case 17653:                     // 'union' '('
    case 17654:                     // 'unordered' '('
    case 17655:                     // 'update' '('
    case 17656:                     // 'updating' '('
    case 17659:                     // 'validate' '('
    case 17665:                     // 'where' '('
    case 17668:                     // 'with' '('
    case 17672:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 136386:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 136438:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 143:                       // 'function'
    case 150:                       // 'if'
    case 162:                       // 'item'
    case 179:                       // 'namespace-node'
    case 185:                       // 'node'
    case 217:                       // 'schema-attribute'
    case 218:                       // 'schema-element'
    case 233:                       // 'switch'
    case 244:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14927:                     // 'ancestor' '#'
    case 14928:                     // 'ancestor-or-self' '#'
    case 14929:                     // 'and' '#'
    case 14932:                     // 'as' '#'
    case 14933:                     // 'ascending' '#'
    case 14934:                     // 'at' '#'
    case 14935:                     // 'attribute' '#'
    case 14940:                     // 'case' '#'
    case 14941:                     // 'cast' '#'
    case 14942:                     // 'castable' '#'
    case 14944:                     // 'child' '#'
    case 14945:                     // 'collation' '#'
    case 14946:                     // 'comment' '#'
    case 14951:                     // 'copy' '#'
    case 14953:                     // 'count' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14992:                     // 'ge' '#'
    case 14994:                     // 'group' '#'
    case 14996:                     // 'gt' '#'
    case 14997:                     // 'idiv' '#'
    case 14999:                     // 'import' '#'
    case 15004:                     // 'insert' '#'
    case 15005:                     // 'instance' '#'
    case 15006:                     // 'intersect' '#'
    case 15008:                     // 'invoke' '#'
    case 15009:                     // 'is' '#'
    case 15014:                     // 'le' '#'
    case 15016:                     // 'let' '#'
    case 15019:                     // 'lt' '#'
    case 15022:                     // 'mod' '#'
    case 15023:                     // 'modify' '#'
    case 15024:                     // 'module' '#'
    case 15026:                     // 'namespace' '#'
    case 15028:                     // 'ne' '#'
    case 15038:                     // 'only' '#'
    case 15040:                     // 'or' '#'
    case 15041:                     // 'order' '#'
    case 15042:                     // 'ordered' '#'
    case 15047:                     // 'parent' '#'
    case 15052:                     // 'preceding' '#'
    case 15053:                     // 'preceding-sibling' '#'
    case 15056:                     // 'processing-instruction' '#'
    case 15058:                     // 'rename' '#'
    case 15059:                     // 'replace' '#'
    case 15060:                     // 'return' '#'
    case 15063:                     // 'satisfies' '#'
    case 15068:                     // 'self' '#'
    case 15074:                     // 'some' '#'
    case 15075:                     // 'stable' '#'
    case 15076:                     // 'start' '#'
    case 15082:                     // 'text' '#'
    case 15086:                     // 'to' '#'
    case 15087:                     // 'transform' '#'
    case 15088:                     // 'treat' '#'
    case 15089:                     // 'try' '#'
    case 15093:                     // 'union' '#'
    case 15094:                     // 'unordered' '#'
    case 15095:                     // 'update' '#'
    case 15096:                     // 'updating' '#'
    case 15099:                     // 'validate' '#'
    case 15105:                     // 'where' '#'
    case 15108:                     // 'with' '#'
    case 15112:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 172:                       // 'map'
      try_MapConstructor();
      break;
    case 70:                        // '['
    case 83:                        // 'array'
      try_ArrayConstructor();
      break;
    case 74:                        // '``['
      try_StringConstructor();
      break;
    case 65:                        // '?'
      try_UnaryLookup();
      break;
    default:
      try_Constructor();
    }
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 18)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

}

XQueryParser.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 273; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 2647 + s - 1;
    var i1 = i0 >> 2;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 3) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 31) + XQueryParser.EXPECTED[i2 >> 5]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

XQueryParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

XQueryParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

XQueryParser.MAP0 =
[
  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  /* 452 */ 69, 69, 69, 69
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 2, 3, 94212, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254
];

XQueryParser.TRANSITION =
[
  /*     0 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*    15 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*    30 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*    45 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*    60 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*    75 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*    90 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   105 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   120 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   135 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   150 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   165 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   180 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   195 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   210 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   225 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   240 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   255 */ 18664, 18176, 18192, 18221, 18221, 18221, 18239, 18221, 18221, 18221, 18241, 18216, 18221, 18221, 18221,
  /*   270 */ 18204, 18223, 18257, 18273, 18664, 18664, 40607, 18664, 20808, 18664, 18664, 26362, 18616, 18664, 18664,
  /*   285 */ 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572, 18291, 29130, 34392, 18307, 18664, 18664, 18353,
  /*   300 */ 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918, 18476, 18499, 23777, 19925, 18483, 18506,
  /*   315 */ 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573, 29197, 18607, 18639, 18663, 18647, 18681,
  /*   330 */ 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486, 33564, 41537, 35161, 43130, 41547, 36712,
  /*   345 */ 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779, 18845, 18866, 18887, 18908, 19801, 29424,
  /*   360 */ 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086, 19105, 19124, 19147, 19089, 19108, 19199,
  /*   375 */ 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372, 19337, 19356, 19407, 19832, 38262, 19438,
  /*   390 */ 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699, 19534, 19595, 18513, 19603, 19627, 19670,
  /*   405 */ 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799, 19170, 19898, 19941, 19972, 19183, 20012,
  /*   420 */ 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   435 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   450 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   465 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   480 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   495 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   510 */ 18664, 18664, 20134, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 20156, 24685, 20177,
  /*   525 */ 20193, 20205, 42351, 20225, 18273, 18664, 18664, 40607, 18664, 20808, 18664, 28592, 26362, 18616, 18664,
  /*   540 */ 18664, 18664, 18664, 26363, 18623, 19801, 19800, 19611, 18934, 18291, 29130, 34392, 18307, 18664, 18664,
  /*   555 */ 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918, 18476, 18499, 23777, 19925, 18483,
  /*   570 */ 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573, 29197, 18607, 18639, 18663, 18647,
  /*   585 */ 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486, 33564, 41537, 35161, 43130, 41547,
  /*   600 */ 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779, 18845, 18866, 18887, 18908, 19801,
  /*   615 */ 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086, 19105, 19124, 19147, 19089, 19108,
  /*   630 */ 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372, 19337, 19356, 19407, 19832, 38262,
  /*   645 */ 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699, 19534, 19595, 18513, 19603, 19627,
  /*   660 */ 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799, 19170, 19898, 19941, 19972, 19183,
  /*   675 */ 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   690 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   705 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   720 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   735 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   750 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   765 */ 18664, 18664, 18664, 20134, 20241, 18664, 18664, 18664, 20262, 18664, 18664, 20281, 20313, 20156, 20283,
  /*   780 */ 18664, 18664, 18664, 20301, 20225, 20329, 18664, 18664, 40607, 18664, 20808, 36328, 18664, 26362, 18616,
  /*   795 */ 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572, 20347, 29130, 34392, 18307, 18664,
  /*   810 */ 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918, 18476, 18499, 23777, 19925,
  /*   825 */ 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573, 29197, 18607, 18639, 18663,
  /*   840 */ 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486, 33564, 41537, 35161, 43130,
  /*   855 */ 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779, 18845, 18866, 18887, 18908,
  /*   870 */ 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086, 19105, 19124, 19147, 19089,
  /*   885 */ 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372, 19337, 19356, 19407, 19832,
  /*   900 */ 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699, 19534, 19595, 18513, 19603,
  /*   915 */ 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799, 19170, 19898, 19941, 19972,
  /*   930 */ 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   945 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   960 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   975 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*   990 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1005 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1020 */ 18664, 18664, 18664, 18664, 20363, 20495, 18664, 18664, 18664, 20398, 18664, 18664, 20496, 43069, 20156,
  /*  1035 */ 20419, 41550, 20454, 20490, 21176, 20512, 18273, 18664, 18664, 19685, 18664, 20808, 26021, 18664, 26362,
  /*  1050 */ 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572, 20528, 29130, 34392, 18307,
  /*  1065 */ 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918, 18476, 18499, 23777,
  /*  1080 */ 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573, 29197, 18607, 18639,
  /*  1095 */ 18663, 18647, 18681, 24328, 18708, 42970, 19561, 24325, 18705, 42967, 19767, 19486, 33564, 41537, 35161,
  /*  1110 */ 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779, 18845, 18866, 18887,
  /*  1125 */ 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086, 19105, 19124, 19147,
  /*  1140 */ 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372, 19337, 19356, 19407,
  /*  1155 */ 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699, 19534, 19595, 18513,
  /*  1170 */ 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799, 19170, 19898, 19941,
  /*  1185 */ 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1200 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1215 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1230 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1245 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1260 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1275 */ 18664, 18664, 18664, 18664, 18664, 20134, 25035, 18664, 18664, 18664, 20544, 18664, 18664, 25036, 42590,
  /*  1290 */ 20156, 18664, 18664, 20581, 35756, 20568, 20225, 18273, 18664, 18664, 40607, 18664, 20808, 18664, 18664,
  /*  1305 */ 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572, 18291, 29130, 34392,
  /*  1320 */ 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918, 18476, 18499,
  /*  1335 */ 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573, 29197, 18607,
  /*  1350 */ 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486, 33564, 41537,
  /*  1365 */ 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779, 18845, 18866,
  /*  1380 */ 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086, 19105, 19124,
  /*  1395 */ 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372, 19337, 19356,
  /*  1410 */ 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699, 19534, 19595,
  /*  1425 */ 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799, 19170, 19898,
  /*  1440 */ 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1455 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1470 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1485 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1500 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1515 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1530 */ 18664, 18664, 18664, 18664, 18664, 18664, 20134, 18664, 18664, 18664, 18664, 20607, 18664, 18664, 18664,
  /*  1545 */ 20613, 20629, 31373, 18664, 18664, 20265, 20656, 20225, 18273, 18664, 18664, 40607, 18664, 20808, 18664,
  /*  1560 */ 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572, 18291, 29130,
  /*  1575 */ 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918, 18476,
  /*  1590 */ 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573, 29197,
  /*  1605 */ 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486, 33564,
  /*  1620 */ 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779, 18845,
  /*  1635 */ 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086, 19105,
  /*  1650 */ 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372, 19337,
  /*  1665 */ 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699, 19534,
  /*  1680 */ 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799, 19170,
  /*  1695 */ 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1710 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1725 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1740 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1755 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1770 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1785 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 18664, 18664, 18664, 18664, 21139, 18664, 18664,
  /*  1800 */ 18664, 22219, 23808, 18664, 18664, 18664, 18664, 18664, 20225, 20700, 18664, 18664, 40607, 18664, 20808,
  /*  1815 */ 18664, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572, 18291,
  /*  1830 */ 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918,
  /*  1845 */ 18476, 18499, 19733, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573,
  /*  1860 */ 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486,
  /*  1875 */ 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779,
  /*  1890 */ 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086,
  /*  1905 */ 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372,
  /*  1920 */ 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699,
  /*  1935 */ 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799,
  /*  1950 */ 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1965 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1980 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  1995 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2010 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2025 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2040 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 20718, 18664, 18664, 18664, 20739, 18664,
  /*  2055 */ 18664, 20758, 20790, 20156, 20760, 18664, 18664, 18664, 20778, 20225, 20806, 18664, 18664, 40607, 18664,
  /*  2070 */ 20808, 21440, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572,
  /*  2085 */ 20824, 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453,
  /*  2100 */ 19918, 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529,
  /*  2115 */ 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767,
  /*  2130 */ 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892,
  /*  2145 */ 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856,
  /*  2160 */ 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353,
  /*  2175 */ 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518,
  /*  2190 */ 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579,
  /*  2205 */ 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2220 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2235 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2250 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2265 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2280 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2295 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 20840, 20915, 20915, 20915, 20898,
  /*  2310 */ 20915, 20915, 20851, 20867, 20910, 20883, 20917, 20933, 20956, 20946, 20225, 18273, 18664, 18664, 20972,
  /*  2325 */ 18664, 20808, 18664, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689,
  /*  2340 */ 19572, 18291, 29130, 34392, 20995, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025,
  /*  2355 */ 18453, 19918, 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274,
  /*  2370 */ 18529, 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967,
  /*  2385 */ 19767, 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871,
  /*  2400 */ 18892, 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059,
  /*  2415 */ 26856, 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334,
  /*  2430 */ 19353, 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502,
  /*  2445 */ 19518, 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179,
  /*  2460 */ 19579, 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664,
  /*  2475 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2490 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2505 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2520 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2535 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2550 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 21056, 18664, 18664, 18664,
  /*  2565 */ 21030, 18664, 18664, 42038, 43069, 21072, 21085, 21098, 21098, 21052, 21042, 21114, 18273, 18664, 18664,
  /*  2580 */ 23200, 18664, 20808, 18664, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800,
  /*  2595 */ 18689, 19572, 18291, 29130, 34392, 21130, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284,
  /*  2610 */ 19025, 18453, 19918, 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664,
  /*  2625 */ 34274, 18529, 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705,
  /*  2640 */ 42967, 19767, 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850,
  /*  2655 */ 18871, 18892, 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016,
  /*  2670 */ 19059, 26856, 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278,
  /*  2685 */ 19334, 19353, 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483,
  /*  2700 */ 19502, 19518, 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095,
  /*  2715 */ 19179, 19579, 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664,
  /*  2730 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2745 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2760 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2775 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2790 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  2805 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 42861, 18664, 18664,
  /*  2820 */ 18664, 21139, 18664, 18664, 18664, 43069, 20156, 21157, 25712, 25717, 21192, 21231, 20225, 18273, 18664,
  /*  2835 */ 18664, 40607, 18664, 20808, 18664, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801,
  /*  2850 */ 19800, 18689, 19572, 18291, 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424,
  /*  2865 */ 24284, 19025, 18453, 19918, 18476, 18499, 18921, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664,
  /*  2880 */ 18664, 34274, 18529, 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 23766, 24325,
  /*  2895 */ 18705, 42967, 19767, 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548,
  /*  2910 */ 18850, 18871, 18892, 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408,
  /*  2925 */ 19016, 19059, 26856, 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070,
  /*  2940 */ 19278, 19334, 19353, 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463,
  /*  2955 */ 19483, 19502, 19518, 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882,
  /*  2970 */ 20095, 19179, 19579, 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664,
  /*  2985 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3000 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3015 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3030 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3045 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3060 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 18664, 18664,
  /*  3075 */ 18664, 18664, 21139, 18664, 18664, 18664, 43069, 20156, 25165, 27216, 27221, 21290, 21280, 20225, 18273,
  /*  3090 */ 18664, 18664, 40607, 18664, 20808, 18664, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623,
  /*  3105 */ 19801, 19800, 18689, 19572, 18291, 29130, 34392, 18307, 18664, 18664, 21310, 18664, 30742, 18373, 18389,
  /*  3120 */ 18424, 24284, 19025, 18453, 19918, 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664,
  /*  3135 */ 18664, 18664, 34274, 18529, 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159,
  /*  3150 */ 24325, 18705, 42967, 19767, 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329,
  /*  3165 */ 19548, 18850, 18871, 18892, 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979,
  /*  3180 */ 18408, 19016, 19059, 26856, 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258,
  /*  3195 */ 19070, 19278, 19334, 19353, 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479,
  /*  3210 */ 19463, 19483, 19502, 19518, 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866,
  /*  3225 */ 19882, 20095, 19179, 19579, 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664,
  /*  3240 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3255 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3270 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3285 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3300 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3315 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 32828,
  /*  3330 */ 18664, 18664, 18664, 21331, 21346, 18664, 32831, 43069, 21364, 27251, 27256, 27256, 21344, 20057, 20225,
  /*  3345 */ 18273, 18664, 18664, 40607, 18664, 20808, 18664, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363,
  /*  3360 */ 18623, 19801, 19800, 18689, 19572, 18291, 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373,
  /*  3375 */ 18389, 18424, 24284, 19025, 18453, 19918, 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958,
  /*  3390 */ 18664, 18664, 18664, 34274, 18529, 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970,
  /*  3405 */ 19159, 24325, 18705, 42967, 19767, 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753,
  /*  3420 */ 18329, 19548, 18850, 18871, 18892, 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958,
  /*  3435 */ 18979, 18408, 19016, 19059, 26856, 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594,
  /*  3450 */ 19258, 19070, 19278, 19334, 19353, 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459,
  /*  3465 */ 19479, 19463, 19483, 19502, 19518, 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818,
  /*  3480 */ 19866, 19882, 20095, 19179, 19579, 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664,
  /*  3495 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3510 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3525 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3540 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3555 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3570 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21412,
  /*  3585 */ 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 20156, 19654, 27546, 27551, 21436, 21456,
  /*  3600 */ 21493, 18273, 18664, 18664, 40607, 18664, 20808, 18664, 18664, 28380, 32590, 18664, 18664, 18664, 18664,
  /*  3615 */ 28381, 40063, 21872, 25199, 35008, 24515, 21509, 33693, 18664, 20140, 32226, 18664, 21310, 36068, 28381,
  /*  3630 */ 32589, 21619, 18664, 18664, 18664, 21617, 21871, 21872, 21872, 37917, 30386, 30386, 25200, 21529, 39823,
  /*  3645 */ 18664, 18664, 18664, 18664, 18664, 21576, 21593, 21613, 32589, 32922, 18664, 25316, 34321, 21872, 21872,
  /*  3660 */ 21872, 28780, 30386, 30386, 30386, 29972, 21799, 40188, 21635, 18664, 18664, 18664, 18664, 27497, 32589,
  /*  3675 */ 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 18664, 18664, 18664,
  /*  3690 */ 18664, 39180, 42712, 32610, 28379, 25811, 30814, 21872, 21657, 25196, 40645, 30386, 37394, 31548, 18664,
  /*  3705 */ 19262, 18664, 42713, 28381, 25815, 21872, 21653, 30386, 30386, 21673, 30992, 18664, 42882, 21719, 25311,
  /*  3720 */ 25816, 34328, 30386, 31109, 25605, 18664, 23884, 28638, 21739, 38130, 21773, 32800, 18664, 32124, 21792,
  /*  3735 */ 38236, 28379, 21816, 36675, 24358, 39821, 41830, 36295, 25971, 27740, 21800, 21851, 21851, 21889, 40677,
  /*  3750 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3765 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3780 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3795 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3810 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3825 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  3840 */ 20134, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 21926, 20156, 18664, 18664, 18664, 18664,
  /*  3855 */ 21942, 20225, 18273, 18664, 18664, 40607, 18664, 21348, 18664, 18664, 28380, 32590, 18664, 18664, 18664,
  /*  3870 */ 18664, 28381, 40063, 21872, 25199, 29367, 24515, 21509, 18664, 18664, 20140, 18664, 18664, 18353, 18664,
  /*  3885 */ 28381, 32589, 21619, 18664, 18664, 18664, 21617, 21871, 21872, 21872, 37917, 30386, 30386, 25200, 25591,
  /*  3900 */ 39823, 18664, 18664, 18664, 18664, 18664, 21576, 18664, 42711, 32589, 32922, 18664, 25316, 34321, 21872,
  /*  3915 */ 21872, 21872, 28780, 30386, 30386, 30386, 29972, 21799, 18664, 18664, 18664, 18664, 18664, 18664, 28380,
  /*  3930 */ 32589, 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 18664, 18664,
  /*  3945 */ 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657, 25196, 30386, 30386, 37394, 31548,
  /*  3960 */ 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110, 31548, 18664, 18664, 25315,
  /*  3975 */ 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124,
  /*  3990 */ 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851, 21889,
  /*  4005 */ 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4020 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4035 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4050 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4065 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4080 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4095 */ 18664, 20134, 32028, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 20156, 25230, 20742, 21976,
  /*  4110 */ 22001, 21992, 20225, 18273, 18664, 18664, 40607, 18664, 20808, 18664, 24214, 26362, 18616, 22026, 18664,
  /*  4125 */ 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572, 18291, 29130, 34392, 18307, 18664, 18664, 18353,
  /*  4140 */ 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918, 18476, 18499, 23777, 19925, 18483, 18506,
  /*  4155 */ 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573, 29197, 18607, 18639, 18663, 18647, 18681,
  /*  4170 */ 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486, 33564, 41537, 35161, 43130, 41547, 36712,
  /*  4185 */ 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779, 18845, 18866, 18887, 18908, 19801, 29424,
  /*  4200 */ 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086, 19105, 19124, 19147, 19089, 19108, 19199,
  /*  4215 */ 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372, 19337, 19356, 19407, 19832, 38262, 19438,
  /*  4230 */ 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699, 19534, 19595, 18513, 19603, 19627, 19670,
  /*  4245 */ 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799, 19170, 19898, 19941, 19972, 19183, 20012,
  /*  4260 */ 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4275 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4290 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4305 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4320 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4335 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4350 */ 18664, 18664, 20134, 22043, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 22062, 20156, 22106, 18664,
  /*  4365 */ 18664, 18664, 22078, 22094, 18273, 18664, 18664, 40607, 18664, 24703, 18664, 18664, 28380, 32590, 18664,
  /*  4380 */ 18664, 18664, 18664, 28381, 40063, 21872, 25199, 28485, 24515, 21509, 18664, 18664, 20140, 18664, 18664,
  /*  4395 */ 22128, 18664, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 21871, 21872, 21872, 37917, 30386, 30386,
  /*  4410 */ 25200, 25591, 34001, 18664, 18664, 18664, 18664, 37049, 22163, 18664, 42711, 32589, 32922, 18664, 25316,
  /*  4425 */ 34321, 21872, 21872, 21872, 28780, 30386, 30386, 30386, 29972, 37327, 22196, 18664, 18664, 18664, 18664,
  /*  4440 */ 36446, 28380, 32589, 32613, 18664, 35918, 21872, 21872, 21872, 28823, 25198, 30386, 30386, 25201, 41755,
  /*  4455 */ 25679, 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 40302, 25196, 30386, 30386,
  /*  4470 */ 37394, 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 36134, 30386, 30386, 31110, 31548, 18664,
  /*  4485 */ 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800,
  /*  4500 */ 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851,
  /*  4515 */ 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4530 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4545 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4560 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4575 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4590 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4605 */ 18664, 18664, 18664, 20134, 36759, 18664, 18664, 18664, 22217, 22235, 18664, 34398, 43069, 22256, 43051,
  /*  4620 */ 22295, 22306, 22322, 43164, 22342, 22358, 18664, 18664, 22378, 18664, 20808, 18664, 18664, 26362, 18616,
  /*  4635 */ 22414, 18664, 18664, 18664, 26363, 18460, 22574, 22435, 22873, 23497, 23267, 29130, 34392, 22453, 18664,
  /*  4650 */ 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 22492, 23341, 23472, 22641, 23310,
  /*  4665 */ 22530, 22542, 19308, 22606, 27958, 18664, 18664, 18664, 34274, 18529, 18573, 29197, 18607, 18639, 18663,
  /*  4680 */ 18647, 22566, 22684, 22506, 22579, 22862, 22725, 22595, 22437, 22550, 19318, 33564, 41537, 35161, 43130,
  /*  4695 */ 41547, 36712, 27759, 18724, 18753, 18329, 22628, 22670, 22698, 22514, 23236, 22714, 22741, 23146, 22995,
  /*  4710 */ 19314, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 19293, 23486, 23105, 22757, 22781, 22810,
  /*  4725 */ 22834, 23133, 22612, 19223, 41594, 19258, 19070, 19278, 22850, 22889, 22905, 23505, 22933, 22982, 22948,
  /*  4740 */ 38262, 19438, 26843, 18400, 23031, 23119, 22654, 23060, 23074, 19518, 29699, 19534, 23090, 23044, 23162,
  /*  4755 */ 23185, 19670, 23223, 23252, 22794, 19866, 23283, 22818, 33495, 23169, 33498, 23411, 23299, 23326, 23357,
  /*  4770 */ 23404, 23427, 23457, 23008, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4785 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4800 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4815 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4830 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4845 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  4860 */ 18664, 18664, 18664, 18664, 20134, 20331, 18664, 18664, 18664, 23521, 23532, 18664, 18664, 43069, 23555,
  /*  4875 */ 43186, 23586, 23586, 23598, 40614, 20225, 18273, 18664, 18664, 40607, 18664, 20808, 18664, 18664, 26362,
  /*  4890 */ 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572, 18291, 29130, 34392, 18307,
  /*  4905 */ 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918, 18476, 18499, 23777,
  /*  4920 */ 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 23618, 18573, 29197, 18607, 18639,
  /*  4935 */ 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 24641, 23667, 41537, 35161,
  /*  4950 */ 43130, 41547, 38292, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779, 18845, 18866, 18887,
  /*  4965 */ 18908, 19801, 23701, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086, 19105, 23717, 23754,
  /*  4980 */ 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 23793, 19337, 19356, 19407,
  /*  4995 */ 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699, 19534, 19595, 18513,
  /*  5010 */ 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799, 19170, 19898, 19941,
  /*  5025 */ 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5040 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5055 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5070 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5085 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5100 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5115 */ 18664, 18664, 18664, 18664, 18664, 20134, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 18664,
  /*  5130 */ 23829, 34771, 34777, 34777, 23850, 23870, 20225, 18273, 18664, 18664, 40607, 18664, 20808, 18664, 18664,
  /*  5145 */ 26362, 18616, 23909, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19759, 18291, 29130, 34392,
  /*  5160 */ 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918, 18476, 18499,
  /*  5175 */ 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573, 29197, 18607,
  /*  5190 */ 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486, 33564, 41537,
  /*  5205 */ 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779, 18845, 18866,
  /*  5220 */ 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086, 19105, 19124,
  /*  5235 */ 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372, 19337, 19356,
  /*  5250 */ 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699, 19534, 19595,
  /*  5265 */ 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799, 19170, 19898,
  /*  5280 */ 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5295 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5310 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5325 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5340 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5355 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5370 */ 18664, 18664, 18664, 18664, 18664, 18664, 23928, 18664, 23941, 18664, 18664, 21139, 18664, 18664, 18664,
  /*  5385 */ 43069, 20156, 26700, 23958, 23974, 23986, 20118, 20225, 24006, 18664, 18664, 40607, 18664, 20808, 18664,
  /*  5400 */ 18664, 26362, 18737, 24027, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 20087, 18291, 29130,
  /*  5415 */ 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918, 18476,
  /*  5430 */ 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573, 29197,
  /*  5445 */ 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486, 33564,
  /*  5460 */ 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779, 18845,
  /*  5475 */ 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086, 19105,
  /*  5490 */ 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372, 19337,
  /*  5505 */ 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699, 19534,
  /*  5520 */ 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799, 19170,
  /*  5535 */ 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5550 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5565 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5580 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5595 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5610 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5625 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 24047, 28318, 18664, 18664, 18664, 21139, 18664, 18664,
  /*  5640 */ 18664, 43069, 20156, 27875, 27881, 27881, 24078, 20979, 24120, 24136, 18664, 18664, 40607, 18664, 20808,
  /*  5655 */ 18664, 18664, 26362, 18616, 24155, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572, 19956,
  /*  5670 */ 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918,
  /*  5685 */ 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573,
  /*  5700 */ 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486,
  /*  5715 */ 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779,
  /*  5730 */ 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086,
  /*  5745 */ 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372,
  /*  5760 */ 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699,
  /*  5775 */ 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799,
  /*  5790 */ 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5805 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5820 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5835 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5850 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5865 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  5880 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 24175, 18664, 18664, 18664, 18664, 24191, 18664,
  /*  5895 */ 18664, 18664, 43069, 20156, 25392, 40251, 40262, 24238, 24258, 24300, 18273, 18664, 18664, 40607, 18664,
  /*  5910 */ 20808, 18664, 25448, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18942, 24316,
  /*  5925 */ 18291, 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453,
  /*  5940 */ 19918, 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529,
  /*  5955 */ 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767,
  /*  5970 */ 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892,
  /*  5985 */ 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856,
  /*  6000 */ 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353,
  /*  6015 */ 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518,
  /*  6030 */ 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579,
  /*  6045 */ 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6060 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6075 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6090 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6105 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6120 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6135 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 18664, 18664, 18664, 18664, 21139,
  /*  6150 */ 18664, 18664, 18664, 43069, 20156, 18664, 18664, 18664, 18664, 24344, 20225, 18273, 18664, 18664, 40607,
  /*  6165 */ 18664, 20808, 18664, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689,
  /*  6180 */ 19572, 18291, 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025,
  /*  6195 */ 18453, 19918, 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274,
  /*  6210 */ 18529, 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967,
  /*  6225 */ 19767, 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871,
  /*  6240 */ 18892, 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059,
  /*  6255 */ 26856, 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334,
  /*  6270 */ 19353, 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502,
  /*  6285 */ 19518, 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179,
  /*  6300 */ 19579, 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664,
  /*  6315 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6330 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6345 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6360 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6375 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6390 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664, 18664, 18664,
  /*  6405 */ 21139, 18664, 18664, 18664, 43069, 24374, 32613, 18664, 18664, 24505, 39340, 24407, 18273, 18664, 18664,
  /*  6420 */ 40607, 18664, 18664, 18664, 18664, 28380, 32590, 18664, 18664, 18664, 18664, 28381, 40063, 21872, 25199,
  /*  6435 */ 35008, 24515, 21509, 18664, 18664, 20140, 18664, 18664, 18664, 18664, 28381, 32589, 21619, 18664, 18664,
  /*  6450 */ 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386, 25200, 25591, 39823, 18664, 18664, 18664, 18664,
  /*  6465 */ 18664, 36445, 18664, 42711, 32589, 32922, 18664, 25316, 34321, 21872, 21872, 21872, 33992, 30386, 30386,
  /*  6480 */ 30386, 29972, 37444, 24429, 18664, 18664, 18664, 18664, 36446, 28380, 32589, 32613, 18664, 35918, 21872,
  /*  6495 */ 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 25679, 18664, 18664, 18664, 24450, 42712, 32610,
  /*  6510 */ 28379, 25811, 21872, 21872, 30369, 25196, 30386, 30386, 37394, 31548, 18664, 18664, 18664, 42713, 28381,
  /*  6525 */ 25815, 21872, 36134, 30386, 30386, 31110, 31548, 18664, 38300, 25315, 25311, 25816, 34328, 30386, 31109,
  /*  6540 */ 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124, 21960, 25202, 28379, 21958, 39821,
  /*  6555 */ 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664,
  /*  6570 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6585 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6600 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6615 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6630 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6645 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664, 18664,
  /*  6660 */ 18664, 21139, 18664, 18664, 18664, 43069, 24374, 32613, 18664, 18664, 24505, 39340, 24407, 18273, 18664,
  /*  6675 */ 18664, 40607, 18664, 18664, 18664, 18664, 28380, 32590, 18664, 18664, 18664, 18664, 28381, 40063, 21872,
  /*  6690 */ 25199, 35008, 24515, 21509, 18664, 18664, 20140, 18664, 18664, 18664, 18664, 28381, 32589, 21619, 18664,
  /*  6705 */ 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386, 25200, 25591, 39823, 18664, 18664, 18664,
  /*  6720 */ 18664, 18664, 36445, 18664, 42711, 32589, 32922, 18664, 25316, 34321, 21872, 21872, 21872, 33992, 30386,
  /*  6735 */ 30386, 30386, 29972, 37444, 24429, 18664, 18664, 18664, 18664, 36446, 28380, 32589, 32613, 18664, 35918,
  /*  6750 */ 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 25679, 18664, 18664, 18664, 18664, 42712,
  /*  6765 */ 32610, 28379, 25811, 21872, 21872, 30369, 25196, 30386, 30386, 37394, 31548, 18664, 18664, 18664, 42713,
  /*  6780 */ 28381, 25815, 21872, 36134, 30386, 30386, 31110, 31548, 18664, 18664, 25315, 25311, 25816, 34328, 30386,
  /*  6795 */ 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124, 21960, 25202, 28379, 21958,
  /*  6810 */ 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664,
  /*  6825 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6840 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6855 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6870 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6885 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  6900 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664,
  /*  6915 */ 18664, 18664, 21139, 18664, 18664, 18664, 43069, 24374, 32613, 18664, 18664, 24505, 39340, 24407, 18273,
  /*  6930 */ 18664, 18664, 40607, 18664, 18664, 18664, 18664, 28380, 32590, 18664, 18664, 18664, 18664, 28381, 40063,
  /*  6945 */ 21872, 25199, 35008, 24515, 21509, 18664, 18664, 20140, 18664, 18664, 18664, 18664, 28381, 32589, 21619,
  /*  6960 */ 18664, 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386, 25200, 25591, 39823, 18664, 18664,
  /*  6975 */ 18664, 18664, 18664, 36445, 24471, 42711, 32589, 32922, 18664, 25316, 34321, 21872, 21872, 21872, 33992,
  /*  6990 */ 30386, 30386, 30386, 29972, 37444, 24429, 18664, 18664, 18664, 18664, 36446, 28380, 32589, 32613, 18664,
  /*  7005 */ 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 25679, 18664, 18664, 18664, 18664,
  /*  7020 */ 42712, 32610, 28379, 25811, 21872, 21872, 30369, 25196, 30386, 30386, 37394, 31548, 18664, 18664, 18664,
  /*  7035 */ 42713, 28381, 25815, 21872, 36134, 30386, 30386, 31110, 31548, 18664, 18664, 25315, 25311, 25816, 34328,
  /*  7050 */ 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124, 21960, 25202, 28379,
  /*  7065 */ 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664,
  /*  7080 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7095 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7110 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7125 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7140 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7155 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664,
  /*  7170 */ 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 24374, 32613, 18664, 18664, 24505, 39340, 24407,
  /*  7185 */ 18273, 18664, 18664, 40607, 18664, 18664, 18664, 18664, 28380, 32590, 18664, 18664, 18664, 18664, 28381,
  /*  7200 */ 40063, 21872, 25199, 35008, 24515, 21509, 18664, 18664, 20140, 18664, 18664, 18664, 18664, 28381, 32589,
  /*  7215 */ 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386, 25200, 25591, 39823, 18664,
  /*  7230 */ 18664, 18664, 18664, 18664, 36445, 18664, 42711, 32589, 32922, 18664, 25316, 34321, 21872, 21872, 21872,
  /*  7245 */ 33992, 30386, 30386, 30386, 29972, 37444, 24429, 18664, 18664, 18664, 18664, 39399, 28380, 32589, 32613,
  /*  7260 */ 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 25679, 18664, 18664, 18664,
  /*  7275 */ 18664, 42712, 32610, 28379, 25811, 21872, 21872, 30369, 25196, 30386, 30386, 37394, 31548, 18664, 18664,
  /*  7290 */ 18664, 42713, 28381, 25815, 21872, 36134, 30386, 30386, 31110, 31548, 18664, 18664, 25315, 25311, 25816,
  /*  7305 */ 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124, 21960, 25202,
  /*  7320 */ 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851, 21889, 40677, 18664,
  /*  7335 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7350 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7365 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7380 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7395 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7410 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471,
  /*  7425 */ 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 24374, 32613, 18664, 18664, 24505, 39340,
  /*  7440 */ 24407, 18273, 18664, 18664, 40607, 18664, 33824, 18664, 18664, 28380, 32590, 18664, 18664, 18664, 18664,
  /*  7455 */ 28381, 40063, 21872, 25199, 35008, 24515, 21509, 18664, 18664, 20140, 18664, 18664, 27935, 18664, 28381,
  /*  7470 */ 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386, 25200, 25591, 39823,
  /*  7485 */ 18664, 18664, 18664, 18664, 18664, 36445, 18664, 42711, 32589, 32922, 18664, 25316, 34321, 21872, 21872,
  /*  7500 */ 21872, 33992, 30386, 30386, 30386, 29972, 37444, 24429, 18664, 18664, 18664, 18664, 36446, 28380, 32589,
  /*  7515 */ 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 25679, 18664, 18664,
  /*  7530 */ 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 30369, 25196, 30386, 30386, 37394, 31548, 18664,
  /*  7545 */ 18664, 18664, 42713, 28381, 25815, 21872, 36134, 30386, 30386, 31110, 31548, 18664, 18664, 25315, 25311,
  /*  7560 */ 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124, 21960,
  /*  7575 */ 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851, 21889, 40677,
  /*  7590 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7605 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7620 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7635 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7650 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7665 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7680 */ 21471, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 24374, 32613, 18664, 18664, 24505,
  /*  7695 */ 39340, 24407, 18273, 18664, 18664, 40607, 18664, 18664, 18664, 18664, 28380, 32590, 18664, 18664, 18664,
  /*  7710 */ 18664, 28381, 40063, 21872, 25199, 35008, 24515, 21509, 18664, 18664, 20140, 18664, 18664, 18664, 18664,
  /*  7725 */ 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386, 25200, 25591,
  /*  7740 */ 39823, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 42711, 32589, 32922, 18664, 25316, 34321, 21872,
  /*  7755 */ 21872, 21872, 33992, 30386, 30386, 30386, 29972, 21799, 18664, 18664, 18664, 18664, 18664, 18664, 28380,
  /*  7770 */ 32589, 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 18664, 18664,
  /*  7785 */ 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657, 25196, 30386, 30386, 37394, 31548,
  /*  7800 */ 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110, 31548, 18664, 18664, 25315,
  /*  7815 */ 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124,
  /*  7830 */ 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851, 21889,
  /*  7845 */ 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7860 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7875 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7890 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7905 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7920 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  7935 */ 18664, 21471, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 24374, 32613, 18664, 18664,
  /*  7950 */ 24505, 39340, 24407, 18273, 18664, 18664, 40607, 18664, 18664, 18664, 18664, 28380, 32590, 18664, 18664,
  /*  7965 */ 18664, 18664, 28381, 40063, 21872, 25199, 35008, 24515, 21831, 18664, 18664, 20140, 18664, 18664, 18664,
  /*  7980 */ 18664, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386, 25200,
  /*  7995 */ 25591, 39823, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 42711, 32589, 32922, 18664, 25316, 34321,
  /*  8010 */ 21872, 21872, 21872, 33992, 30386, 30386, 30386, 29972, 21799, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8025 */ 28380, 32589, 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 18664,
  /*  8040 */ 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657, 25196, 30386, 30386, 37394,
  /*  8055 */ 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110, 31548, 18664, 18664,
  /*  8070 */ 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664,
  /*  8085 */ 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851,
  /*  8100 */ 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8115 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8130 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8145 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8160 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8175 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8190 */ 18664, 18664, 21471, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 24374, 32613, 18664,
  /*  8205 */ 18664, 24505, 40963, 24407, 18273, 18664, 18664, 40607, 18664, 18664, 18664, 18664, 28380, 32590, 18664,
  /*  8220 */ 18664, 18664, 18664, 28381, 40063, 21872, 25199, 35008, 24515, 21509, 18664, 18664, 20140, 18664, 18664,
  /*  8235 */ 18664, 18664, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386,
  /*  8250 */ 25200, 25591, 39823, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 42711, 32589, 32922, 18664, 25316,
  /*  8265 */ 34321, 21872, 21872, 21872, 33992, 30386, 30386, 30386, 29972, 21799, 18664, 18664, 18664, 18664, 18664,
  /*  8280 */ 18664, 28380, 32589, 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755,
  /*  8295 */ 18664, 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657, 25196, 30386, 30386,
  /*  8310 */ 37394, 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110, 31548, 18664,
  /*  8325 */ 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800,
  /*  8340 */ 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851,
  /*  8355 */ 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8370 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8385 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8400 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8415 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8430 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8445 */ 18664, 18664, 18664, 21471, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 24492, 32613,
  /*  8460 */ 18664, 18664, 24505, 39340, 24407, 18273, 18664, 18664, 40607, 18664, 18664, 18664, 18664, 28380, 32590,
  /*  8475 */ 18664, 18664, 18664, 18664, 28381, 40063, 21872, 25199, 35008, 24515, 21509, 18664, 18664, 20140, 18664,
  /*  8490 */ 18664, 18664, 37507, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386,
  /*  8505 */ 30386, 25200, 25591, 39823, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 42711, 32589, 32922, 18664,
  /*  8520 */ 25316, 34321, 21872, 21872, 21872, 33992, 30386, 30386, 30386, 29972, 21799, 18664, 18664, 18664, 18664,
  /*  8535 */ 18664, 18664, 28380, 32589, 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201,
  /*  8550 */ 41755, 18664, 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657, 25196, 30386,
  /*  8565 */ 30386, 37394, 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110, 31548,
  /*  8580 */ 18664, 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386,
  /*  8595 */ 32800, 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800,
  /*  8610 */ 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8625 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8640 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8655 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8670 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8685 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8700 */ 18664, 18664, 18664, 18664, 21471, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 24374,
  /*  8715 */ 32613, 18664, 18664, 28026, 24539, 24407, 18273, 18664, 18664, 40607, 18664, 18664, 18664, 18664, 28380,
  /*  8730 */ 32590, 18664, 18664, 18664, 18664, 28381, 40063, 21872, 25199, 35008, 24515, 21509, 18664, 18664, 20140,
  /*  8745 */ 18664, 18664, 18664, 18664, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872, 34998,
  /*  8760 */ 30386, 30386, 25200, 25591, 39823, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 42711, 32589, 32922,
  /*  8775 */ 18664, 25316, 34321, 21872, 21872, 21872, 33992, 30386, 30386, 30386, 29972, 21799, 18664, 18664, 18664,
  /*  8790 */ 18664, 18664, 18664, 28380, 32589, 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386,
  /*  8805 */ 25201, 41755, 18664, 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657, 25196,
  /*  8820 */ 30386, 30386, 37394, 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110,
  /*  8835 */ 31548, 18664, 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960,
  /*  8850 */ 30386, 32800, 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740,
  /*  8865 */ 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8880 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8895 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8910 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8925 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8940 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  8955 */ 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069,
  /*  8970 */ 24374, 32613, 18664, 18664, 24505, 39340, 24407, 18273, 18664, 18664, 40607, 18664, 18664, 18664, 18664,
  /*  8985 */ 28380, 32590, 18664, 18664, 18664, 18664, 28381, 40063, 21872, 25199, 35008, 24515, 21509, 18664, 18664,
  /*  9000 */ 20140, 18664, 18664, 18664, 18664, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872,
  /*  9015 */ 34998, 30386, 30386, 25200, 25591, 39823, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 42711, 32589,
  /*  9030 */ 32922, 18664, 25316, 34321, 21872, 21872, 21872, 33992, 30386, 30386, 30386, 29972, 21799, 18664, 18664,
  /*  9045 */ 18664, 18664, 18664, 18664, 28380, 32589, 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386,
  /*  9060 */ 30386, 25201, 41755, 18664, 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657,
  /*  9075 */ 25196, 30386, 30386, 37394, 31548, 18664, 18664, 24555, 42713, 28381, 25815, 21872, 29090, 30386, 30386,
  /*  9090 */ 31110, 31548, 18664, 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815,
  /*  9105 */ 21960, 30386, 32800, 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755,
  /*  9120 */ 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9135 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9150 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9165 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9180 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9195 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9210 */ 18664, 18664, 18664, 18664, 18664, 18664, 24576, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664,
  /*  9225 */ 43069, 24374, 32613, 18664, 18664, 24505, 39340, 24407, 18273, 18664, 18664, 40607, 18664, 18664, 18664,
  /*  9240 */ 18664, 28380, 32590, 18664, 18664, 18664, 18664, 28381, 40063, 21872, 25199, 35008, 24515, 21509, 18664,
  /*  9255 */ 18664, 20140, 18664, 18664, 18664, 18664, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872,
  /*  9270 */ 21872, 34998, 30386, 30386, 25200, 25591, 39823, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 42711,
  /*  9285 */ 32589, 32922, 18664, 25316, 34321, 21872, 21872, 21872, 33992, 30386, 30386, 30386, 29972, 21799, 18664,
  /*  9300 */ 18664, 18664, 18664, 18664, 18664, 28380, 32589, 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198,
  /*  9315 */ 30386, 30386, 25201, 41755, 18664, 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872,
  /*  9330 */ 21657, 25196, 30386, 30386, 37394, 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386,
  /*  9345 */ 30386, 31110, 31548, 18664, 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638,
  /*  9360 */ 25815, 21960, 30386, 32800, 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720,
  /*  9375 */ 41755, 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9390 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9405 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9420 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9435 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9450 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9465 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 18664, 18664, 18664, 18664, 21139, 18664, 18664,
  /*  9480 */ 18664, 43069, 20156, 28126, 22046, 24598, 24618, 24602, 20225, 18273, 18664, 18664, 40607, 18664, 20808,
  /*  9495 */ 18664, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572, 18291,
  /*  9510 */ 29130, 34392, 18307, 18664, 18664, 18353, 36320, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918,
  /*  9525 */ 18476, 18499, 23777, 19925, 18483, 18506, 24638, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573,
  /*  9540 */ 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486,
  /*  9555 */ 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779,
  /*  9570 */ 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086,
  /*  9585 */ 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372,
  /*  9600 */ 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 24657,
  /*  9615 */ 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799,
  /*  9630 */ 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9645 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9660 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9675 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9690 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9705 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9720 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 18664, 18664, 18664, 18664, 21139, 18664,
  /*  9735 */ 18664, 18664, 43069, 20156, 18664, 18664, 18664, 18664, 18664, 20225, 18273, 18664, 18664, 40607, 18664,
  /*  9750 */ 20808, 18664, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572,
  /*  9765 */ 18291, 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453,
  /*  9780 */ 19918, 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529,
  /*  9795 */ 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767,
  /*  9810 */ 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892,
  /*  9825 */ 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856,
  /*  9840 */ 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353,
  /*  9855 */ 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518,
  /*  9870 */ 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579,
  /*  9885 */ 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9900 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9915 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9930 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9945 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9960 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /*  9975 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 24673, 24701, 18664, 18664, 18664, 24719,
  /*  9990 */ 18664, 18664, 18664, 43069, 24742, 23207, 24801, 24801, 24813, 24726, 24833, 18273, 18664, 18664, 40607,
  /* 10005 */ 18664, 20808, 18664, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689,
  /* 10020 */ 19572, 24849, 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025,
  /* 10035 */ 18453, 19918, 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274,
  /* 10050 */ 18529, 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967,
  /* 10065 */ 19767, 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871,
  /* 10080 */ 18892, 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059,
  /* 10095 */ 26856, 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334,
  /* 10110 */ 19353, 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502,
  /* 10125 */ 19518, 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179,
  /* 10140 */ 19579, 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664,
  /* 10155 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10170 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10185 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10200 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10215 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10230 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 24865, 24887, 18664, 18664, 18664,
  /* 10245 */ 21139, 18664, 18664, 18664, 43069, 20156, 18664, 18664, 18664, 18664, 24905, 24948, 18273, 18664, 18664,
  /* 10260 */ 40607, 18664, 20808, 26343, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800,
  /* 10275 */ 19207, 19572, 24964, 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284,
  /* 10290 */ 19025, 18453, 19918, 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664,
  /* 10305 */ 34274, 18529, 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705,
  /* 10320 */ 42967, 19767, 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850,
  /* 10335 */ 18871, 18892, 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016,
  /* 10350 */ 19059, 26856, 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278,
  /* 10365 */ 19334, 19353, 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483,
  /* 10380 */ 19502, 19518, 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095,
  /* 10395 */ 19179, 19579, 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664,
  /* 10410 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10425 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10440 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10455 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10470 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10485 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 24980, 18664,
  /* 10500 */ 18664, 24999, 25025, 18664, 22010, 25052, 25068, 25083, 25096, 25107, 25123, 25137, 24407, 25153, 32635,
  /* 10515 */ 18664, 19642, 25181, 25218, 25246, 20723, 38426, 25298, 28362, 24204, 25262, 34759, 25283, 25332, 37354,
  /* 10530 */ 25367, 25422, 25408, 25438, 18664, 24159, 20140, 22180, 34844, 18664, 29689, 24622, 32589, 32116, 27677,
  /* 10545 */ 20474, 18664, 19996, 34326, 21872, 39886, 34998, 30386, 30386, 29964, 25591, 39823, 37466, 37488, 25472,
  /* 10560 */ 25491, 25511, 36445, 18664, 28718, 41988, 25529, 25545, 25561, 25625, 25647, 21873, 37677, 36412, 39369,
  /* 10575 */ 30386, 35548, 36621, 25665, 25698, 18664, 31365, 18664, 25789, 25733, 28380, 25757, 38835, 25784, 25805,
  /* 10590 */ 25832, 28870, 39880, 29093, 25856, 36114, 29607, 25201, 25885, 27436, 36076, 18664, 31000, 18319, 42712,
  /* 10605 */ 32610, 28379, 25811, 21872, 37554, 36878, 25196, 30386, 26430, 25919, 30505, 30345, 19842, 19695, 42713,
  /* 10620 */ 32430, 25945, 31132, 36134, 30386, 32160, 27363, 40683, 18664, 18664, 25315, 25311, 36520, 41406, 39814,
  /* 10635 */ 34920, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124, 21960, 25202, 28379, 21958,
  /* 10650 */ 24523, 25964, 34671, 25987, 42839, 41755, 21862, 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664,
  /* 10665 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10680 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10695 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10710 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10725 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10740 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 26015,
  /* 10755 */ 18664, 18664, 21139, 18664, 18664, 18664, 26037, 26053, 26621, 26634, 26634, 26090, 25929, 24407, 18273,
  /* 10770 */ 18664, 18664, 40607, 18664, 18664, 18664, 18664, 28380, 32590, 18664, 18664, 18664, 18664, 28381, 40063,
  /* 10785 */ 21872, 25199, 35008, 24515, 21509, 18664, 18664, 20140, 18664, 18664, 18664, 18664, 28381, 32589, 21619,
  /* 10800 */ 18664, 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386, 25200, 25591, 39823, 18664, 18664,
  /* 10815 */ 18664, 18664, 39600, 36445, 26124, 40007, 36562, 32922, 18664, 25316, 34321, 21872, 21872, 21750, 33992,
  /* 10830 */ 30386, 30386, 37722, 29972, 37444, 24429, 18664, 18664, 18664, 18664, 36446, 28380, 32589, 32613, 18664,
  /* 10845 */ 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 25679, 18664, 18664, 18357, 18664,
  /* 10860 */ 24384, 40154, 28379, 27659, 21872, 21872, 30369, 29161, 30386, 30386, 37394, 31548, 18664, 18664, 18664,
  /* 10875 */ 42713, 28381, 25815, 21872, 36134, 30386, 30386, 31110, 31548, 18664, 18664, 25315, 25311, 25816, 34328,
  /* 10890 */ 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124, 21960, 25202, 28379,
  /* 10905 */ 21958, 39821, 41827, 39821, 26142, 26187, 41755, 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664,
  /* 10920 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10935 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10950 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10965 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10980 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 10995 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664,
  /* 11010 */ 27907, 18664, 18664, 21139, 36718, 18664, 18664, 43069, 26212, 26227, 26240, 26251, 26267, 26281, 24407,
  /* 11025 */ 18273, 18664, 20376, 22271, 18664, 30567, 18664, 18664, 28380, 32590, 18664, 18664, 21910, 18664, 27281,
  /* 11040 */ 40063, 41903, 25199, 26311, 26297, 21509, 30734, 18664, 20140, 26340, 34093, 18664, 27634, 31652, 39970,
  /* 11055 */ 21619, 26359, 37739, 18664, 26379, 26397, 21872, 21872, 36541, 26413, 30386, 25200, 25591, 39823, 26446,
  /* 11070 */ 18664, 38338, 18664, 37032, 36445, 21258, 26466, 32589, 32922, 18664, 25316, 34321, 26520, 27329, 21872,
  /* 11085 */ 33992, 35838, 26572, 26590, 29972, 37444, 24429, 18664, 25267, 18664, 40700, 36446, 28380, 32589, 32613,
  /* 11100 */ 18664, 35918, 21872, 21872, 31184, 29093, 25198, 30386, 30386, 37385, 41755, 25679, 18664, 18664, 18664,
  /* 11115 */ 19233, 42712, 32610, 28379, 25811, 21872, 40724, 30369, 25196, 30386, 34065, 37394, 31548, 18664, 39676,
  /* 11130 */ 18664, 33018, 26608, 26650, 32860, 36134, 30386, 26669, 32273, 26688, 18664, 18664, 30785, 28711, 25816,
  /* 11145 */ 26716, 39142, 31109, 31547, 18664, 26763, 28638, 25815, 42144, 33619, 32800, 18664, 32124, 21960, 25202,
  /* 11160 */ 28379, 21958, 39821, 41827, 32168, 26784, 27720, 41755, 27740, 21800, 21851, 21851, 26800, 40677, 18664,
  /* 11175 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11190 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11205 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11220 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11235 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11250 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471,
  /* 11265 */ 18664, 30087, 18664, 18664, 21139, 31047, 18664, 26872, 43069, 26896, 26911, 26924, 26929, 26945, 26959,
  /* 11280 */ 24407, 18273, 18664, 18664, 40607, 18664, 18664, 18664, 18664, 28380, 40429, 21212, 18664, 18664, 21215,
  /* 11295 */ 28560, 26975, 27000, 27019, 35008, 27045, 21509, 24031, 27073, 27105, 18664, 27182, 18664, 18664, 37611,
  /* 11310 */ 26068, 27202, 34484, 27237, 27272, 22476, 27297, 27003, 27326, 27345, 33381, 33524, 29485, 25591, 39823,
  /* 11325 */ 18664, 18664, 39031, 18664, 27379, 36445, 18664, 42711, 32589, 32922, 24983, 25316, 27400, 21872, 21872,
  /* 11340 */ 21872, 33992, 30386, 30386, 30386, 29972, 27422, 27465, 18664, 18664, 27492, 35175, 36446, 28380, 32589,
  /* 11355 */ 32613, 43010, 35918, 27513, 21872, 21872, 27532, 27567, 30386, 30386, 31165, 41755, 25679, 18664, 18664,
  /* 11370 */ 18664, 18664, 27591, 32610, 28379, 40508, 21872, 37671, 30369, 29479, 30386, 27613, 37394, 31548, 27632,
  /* 11385 */ 21206, 18664, 27650, 28381, 33893, 37575, 36134, 41942, 39436, 31110, 31548, 27675, 18664, 25315, 25311,
  /* 11400 */ 25816, 34328, 30386, 31109, 31547, 25456, 28380, 28638, 25815, 40841, 30386, 27693, 18664, 32124, 21960,
  /* 11415 */ 25202, 28379, 21958, 39821, 42910, 27717, 37881, 27736, 41755, 27740, 21800, 21851, 21851, 21889, 40677,
  /* 11430 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11445 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11460 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11475 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11490 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11505 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11520 */ 21471, 18664, 18665, 27756, 18664, 21139, 23633, 23648, 38766, 29725, 27775, 27790, 27806, 27817, 27833,
  /* 11535 */ 27847, 24407, 18273, 27863, 27897, 40993, 35348, 27923, 27955, 37842, 40044, 27974, 35366, 28042, 28098,
  /* 11550 */ 28114, 30068, 28142, 28196, 28223, 28239, 28288, 21509, 26556, 28304, 28340, 30559, 28378, 28397, 34818,
  /* 11565 */ 28381, 32589, 24391, 23650, 18664, 23651, 30765, 28424, 25631, 42568, 28475, 36035, 29812, 30867, 25591,
  /* 11580 */ 39823, 28501, 28538, 39067, 39504, 21396, 28583, 41320, 28616, 28660, 38440, 38793, 28697, 28734, 28768,
  /* 11595 */ 28803, 28839, 28894, 37978, 38729, 38701, 40750, 28924, 28973, 28989, 20702, 18664, 29010, 37776, 38002,
  /* 11610 */ 29034, 40932, 29055, 30013, 39867, 21872, 29086, 28207, 28787, 29109, 30858, 31068, 29281, 25679, 29127,
  /* 11625 */ 18763, 29146, 29185, 42712, 29213, 29236, 39247, 29252, 29268, 29297, 27120, 29313, 29357, 29383, 31548,
  /* 11640 */ 18664, 29412, 18664, 33083, 29440, 37907, 41097, 29464, 34664, 34906, 31110, 31548, 29501, 29517, 28644,
  /* 11655 */ 29545, 29574, 29623, 29663, 36021, 29715, 38452, 29741, 29558, 29776, 29798, 40901, 28171, 24272, 32124,
  /* 11670 */ 41574, 28459, 31579, 29860, 29898, 26196, 26108, 29914, 27057, 29950, 27740, 21800, 29988, 21851, 21889,
  /* 11685 */ 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11700 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11715 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11730 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11745 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11760 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11775 */ 18664, 21471, 18664, 18664, 30039, 18664, 30059, 41346, 30084, 25609, 30103, 30119, 30148, 30164, 30169,
  /* 11790 */ 30132, 30185, 24407, 18273, 31722, 18664, 40607, 18664, 18664, 30203, 18664, 29018, 32590, 18664, 38801,
  /* 11805 */ 18664, 30201, 38805, 40063, 30221, 30240, 27029, 30266, 21509, 41337, 18664, 20140, 41343, 18664, 21552,
  /* 11820 */ 18664, 30294, 30322, 21619, 18664, 30340, 18664, 36241, 30361, 21872, 21872, 34998, 30385, 30386, 25200,
  /* 11835 */ 34530, 39823, 18664, 18664, 18664, 18664, 18664, 36445, 18664, 42711, 32589, 32922, 30403, 25316, 34321,
  /* 11850 */ 21872, 21872, 31995, 33992, 30386, 30386, 31157, 29972, 37444, 24429, 18664, 18664, 30423, 18664, 36446,
  /* 11865 */ 28380, 32589, 32613, 18664, 33883, 21872, 36739, 21872, 29093, 25198, 30386, 30441, 25201, 41755, 25679,
  /* 11880 */ 18664, 30458, 18664, 18664, 42712, 30477, 28379, 41896, 21872, 29782, 30369, 25196, 30386, 41260, 37394,
  /* 11895 */ 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 36134, 30386, 30386, 31110, 31548, 18664, 18664,
  /* 11910 */ 25315, 25311, 25816, 34328, 30386, 31109, 21693, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664,
  /* 11925 */ 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 30493, 21851,
  /* 11940 */ 30521, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11955 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11970 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 11985 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12000 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12015 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12030 */ 18664, 18664, 21471, 18664, 18664, 18664, 18664, 21139, 18664, 30583, 18664, 43069, 30603, 30618, 30631,
  /* 12045 */ 30631, 30647, 30661, 24407, 18273, 18664, 18664, 40607, 18664, 18664, 39606, 18664, 28380, 32590, 18664,
  /* 12060 */ 18664, 18664, 18664, 28381, 40063, 21872, 25199, 35008, 24515, 30677, 18664, 18664, 20140, 18664, 18664,
  /* 12075 */ 18664, 37592, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386,
  /* 12090 */ 25200, 25591, 39823, 18664, 18664, 18664, 18664, 18664, 18664, 20037, 42711, 32589, 32922, 27186, 25316,
  /* 12105 */ 34321, 21872, 21872, 21872, 27149, 30386, 30386, 30386, 29972, 21799, 18664, 18664, 25741, 18664, 40388,
  /* 12120 */ 18664, 28380, 32589, 32613, 43029, 18819, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41073,
  /* 12135 */ 18664, 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657, 25196, 30386, 30386,
  /* 12150 */ 37394, 31548, 18664, 24222, 21007, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110, 32311, 30703,
  /* 12165 */ 30725, 30758, 30781, 25816, 36154, 30386, 31705, 31547, 18664, 42395, 28638, 30801, 30836, 29637, 32800,
  /* 12180 */ 20285, 30883, 38647, 30932, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851,
  /* 12195 */ 30980, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12210 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12225 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12240 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12255 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12270 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12285 */ 18664, 18664, 18664, 21471, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 24374, 32613,
  /* 12300 */ 18664, 18664, 24505, 39340, 24407, 18273, 18664, 24413, 40607, 18664, 18664, 18664, 31040, 32572, 40454,
  /* 12315 */ 18664, 18664, 31016, 31032, 28381, 40793, 25948, 31063, 36276, 37704, 31084, 18664, 21315, 20140, 19391,
  /* 12330 */ 27939, 18664, 18664, 28381, 32589, 21619, 38086, 18664, 18664, 35783, 34326, 21872, 41485, 34998, 30386,
  /* 12345 */ 30386, 31104, 26535, 31542, 18664, 18664, 26163, 18664, 18664, 18664, 18664, 42711, 32589, 32922, 39639,
  /* 12360 */ 25316, 31126, 21872, 21872, 21872, 31148, 30386, 30386, 30386, 41086, 21799, 30043, 18664, 18664, 18664,
  /* 12375 */ 18664, 18664, 28380, 32589, 32613, 20552, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201,
  /* 12390 */ 41755, 18664, 18664, 39941, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 34362, 21657, 25196, 30386,
  /* 12405 */ 28957, 37394, 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110, 31548,
  /* 12420 */ 18664, 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 38459, 28380, 22398, 31181, 21960, 30386,
  /* 12435 */ 29873, 18664, 41476, 40086, 34036, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800,
  /* 12450 */ 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12465 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12480 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12495 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12510 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12525 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12540 */ 18664, 18664, 18664, 18664, 21471, 18664, 18664, 38759, 18664, 21139, 23738, 39116, 23732, 31200, 31216,
  /* 12555 */ 31231, 31244, 31255, 31271, 31285, 24407, 18273, 18664, 18664, 31301, 31324, 18664, 18664, 21264, 31342,
  /* 12570 */ 31389, 41329, 30709, 31407, 27449, 31423, 25576, 26653, 31446, 37658, 42329, 31468, 18664, 18664, 43118,
  /* 12585 */ 18664, 32335, 31488, 18664, 28381, 40013, 37811, 34559, 30205, 18664, 21617, 31505, 38918, 25351, 31527,
  /* 12600 */ 26574, 30386, 36922, 25591, 39823, 39571, 34187, 24455, 35393, 31565, 31612, 38569, 42711, 26074, 32922,
  /* 12615 */ 41859, 31630, 34321, 21872, 32702, 31668, 31688, 30386, 31452, 29838, 28071, 21799, 18664, 18664, 18664,
  /* 12630 */ 18557, 28600, 31721, 28380, 32589, 32613, 18664, 30306, 21872, 21872, 21872, 29093, 31738, 30386, 30386,
  /* 12645 */ 25201, 41755, 18664, 35220, 31759, 41969, 20670, 31785, 34807, 31802, 31831, 36193, 21872, 31854, 25196,
  /* 12660 */ 27356, 30386, 31878, 38250, 41675, 31908, 18664, 31927, 23441, 31957, 31981, 32016, 32050, 33674, 28908,
  /* 12675 */ 32084, 18664, 42174, 32102, 25311, 32140, 29341, 33125, 32184, 31547, 32220, 32553, 28638, 25815, 21960,
  /* 12690 */ 30386, 29396, 18664, 32124, 21960, 25202, 28379, 32242, 39821, 41653, 30550, 41830, 27720, 41755, 32807,
  /* 12705 */ 21683, 21851, 21851, 32289, 32305, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12720 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12735 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12750 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12765 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12780 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12795 */ 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069,
  /* 12810 */ 24374, 32613, 18664, 18664, 24505, 39340, 24407, 18273, 18664, 18664, 40607, 18664, 23602, 18664, 18664,
  /* 12825 */ 28380, 32590, 18664, 18664, 18664, 18664, 28381, 40063, 21872, 25199, 35008, 24515, 21509, 18664, 18664,
  /* 12840 */ 20140, 18664, 18664, 18664, 18664, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872,
  /* 12855 */ 34998, 30386, 30386, 25200, 25591, 39823, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 42711, 32589,
  /* 12870 */ 32922, 18664, 25316, 34321, 21872, 21872, 21872, 33992, 30386, 30386, 30386, 29972, 21799, 18664, 18664,
  /* 12885 */ 18664, 18664, 18664, 18664, 28380, 32589, 32613, 18664, 35918, 21872, 41026, 21872, 29093, 25198, 32942,
  /* 12900 */ 30386, 25201, 41755, 18664, 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657,
  /* 12915 */ 25196, 30386, 30386, 37394, 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386,
  /* 12930 */ 31110, 31548, 18664, 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815,
  /* 12945 */ 21960, 30386, 32800, 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755,
  /* 12960 */ 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12975 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 12990 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13005 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13020 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13035 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13050 */ 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664, 22172, 18664, 21139, 18664, 32327, 21637,
  /* 13065 */ 30687, 32351, 32366, 32379, 32379, 32395, 32409, 24407, 18273, 32425, 18664, 40607, 18664, 41801, 32446,
  /* 13080 */ 18664, 20403, 32480, 18664, 20246, 28324, 32502, 35724, 33307, 21872, 32525, 35008, 24515, 25382, 32632,
  /* 13095 */ 18664, 38846, 32548, 32569, 39048, 26171, 28381, 32588, 32606, 18664, 18664, 32629, 40056, 32651, 32675,
  /* 13110 */ 32693, 32726, 32762, 33387, 32788, 28254, 32741, 32823, 18664, 18664, 18664, 30957, 18664, 18664, 31430,
  /* 13125 */ 32589, 32922, 18664, 25316, 36865, 32847, 21872, 32882, 34589, 31892, 30386, 28268, 29972, 21799, 18664,
  /* 13140 */ 18337, 32900, 18664, 38868, 27384, 28380, 32589, 32918, 18664, 35918, 21872, 33639, 36780, 29093, 25198,
  /* 13155 */ 30386, 32940, 32958, 41755, 43205, 18664, 18664, 20438, 18664, 29448, 32610, 28379, 25811, 32975, 21872,
  /* 13170 */ 21657, 28057, 30386, 30386, 37394, 27701, 18664, 18664, 32993, 31590, 33009, 33034, 21872, 29090, 30912,
  /* 13185 */ 30386, 31110, 31548, 33057, 18664, 33078, 25311, 25816, 34328, 30386, 31109, 31547, 35693, 28380, 28638,
  /* 13200 */ 25815, 37437, 41736, 32800, 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720,
  /* 13215 */ 33099, 36682, 33148, 21851, 33170, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13230 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13245 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13260 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13275 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13290 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13305 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664, 26880, 18664, 33205, 18664, 24087,
  /* 13320 */ 18664, 31769, 33221, 33236, 33249, 33254, 33270, 33284, 24407, 18273, 20640, 18664, 40607, 18664, 39040,
  /* 13335 */ 18664, 18664, 23813, 33300, 18664, 20634, 21477, 20639, 19985, 36955, 33323, 33343, 35008, 33369, 21509,
  /* 13350 */ 18664, 33403, 20140, 18664, 32464, 37169, 18664, 28381, 32589, 21619, 18664, 34442, 23834, 34147, 33423,
  /* 13365 */ 32677, 33041, 28681, 30386, 26422, 29929, 28439, 33446, 24434, 33481, 18664, 18664, 23015, 18664, 18664,
  /* 13380 */ 42711, 32589, 32922, 18664, 25316, 36398, 41019, 28816, 21872, 33992, 33514, 36043, 30386, 29972, 21799,
  /* 13395 */ 18664, 33540, 33559, 18664, 35084, 18664, 33580, 32589, 32613, 18664, 35918, 35976, 21872, 40824, 39254,
  /* 13410 */ 25198, 33618, 36999, 25201, 41755, 18664, 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872,
  /* 13425 */ 21872, 21657, 25196, 30386, 30386, 37394, 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090,
  /* 13440 */ 30386, 30386, 31110, 33182, 18664, 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380,
  /* 13455 */ 28013, 33635, 37320, 42056, 32800, 18664, 32124, 21960, 25202, 25009, 33655, 32772, 41827, 39821, 41830,
  /* 13470 */ 27720, 41755, 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13485 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13500 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13515 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13530 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13545 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13560 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664, 39123, 18664, 33690, 18664,
  /* 13575 */ 39732, 33709, 33719, 33735, 33750, 33763, 33779, 33793, 33807, 24407, 18273, 41301, 18664, 41523, 33924,
  /* 13590 */ 33823, 18664, 35400, 33840, 33856, 23370, 33909, 32509, 33948, 40485, 33964, 33980, 34017, 27135, 34052,
  /* 13605 */ 21509, 34087, 18664, 29882, 24242, 35359, 22240, 34109, 34136, 32589, 26381, 18664, 34163, 34176, 33592,
  /* 13620 */ 34326, 34210, 38044, 34998, 34071, 26592, 25200, 30898, 34228, 34251, 18664, 34269, 18664, 18664, 39086,
  /* 13635 */ 18664, 28567, 32589, 27987, 42098, 25316, 34290, 21872, 21872, 33430, 33992, 32065, 30386, 34418, 29972,
  /* 13650 */ 21799, 18664, 18664, 18664, 30587, 18664, 18664, 34306, 32589, 34344, 18664, 35736, 21872, 21872, 34360,
  /* 13665 */ 34378, 34414, 30386, 25896, 34628, 41755, 21420, 34434, 34458, 34478, 18664, 34500, 34546, 20684, 34575,
  /* 13680 */ 34605, 37950, 21657, 29070, 34653, 37715, 34637, 34687, 34703, 40336, 34744, 31786, 34793, 30023, 21872,
  /* 13695 */ 28752, 32204, 30386, 35051, 31548, 34841, 18664, 22388, 42757, 34860, 34876, 42629, 34892, 21543, 18664,
  /* 13710 */ 21294, 34959, 34988, 35024, 35040, 32800, 42196, 33602, 21960, 35067, 28379, 35100, 26829, 42821, 35147,
  /* 13725 */ 26984, 41644, 41755, 27740, 21800, 35197, 21851, 21889, 21903, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13740 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13755 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13770 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13785 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13800 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 13815 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664, 18963, 18664, 21139,
  /* 13830 */ 22027, 30461, 18664, 43069, 35236, 35251, 35266, 35271, 35287, 35301, 24407, 35317, 35333, 22326, 35382,
  /* 13845 */ 37211, 18664, 31489, 35416, 33189, 35457, 19000, 41291, 35486, 41786, 35502, 35518, 35590, 35617, 35673,
  /* 13860 */ 35659, 35689, 18664, 25513, 32034, 18664, 35709, 41865, 35752, 35772, 31596, 21619, 18664, 35897, 18664,
  /* 13875 */ 21617, 34326, 35808, 25346, 35828, 28272, 40648, 25903, 25591, 39823, 38379, 35861, 30425, 18664, 38594,
  /* 13890 */ 35878, 26450, 35913, 41382, 29220, 18664, 35934, 34321, 21872, 35971, 27516, 33992, 30386, 39428, 30386,
  /* 13905 */ 35992, 42921, 36059, 42490, 30407, 18664, 18664, 18664, 28380, 32589, 32613, 21388, 35918, 21872, 36092,
  /* 13920 */ 21872, 29093, 25198, 26740, 30386, 25201, 41755, 18664, 18664, 20468, 34462, 18664, 42712, 32610, 28379,
  /* 13935 */ 25811, 21872, 21872, 25840, 36110, 30386, 30386, 37394, 31548, 24104, 18664, 18664, 42713, 22465, 36130,
  /* 13950 */ 36150, 28082, 36170, 30386, 36662, 30946, 18664, 18664, 26768, 25311, 36186, 34328, 36209, 31109, 31547,
  /* 13965 */ 18664, 28380, 28638, 25815, 21960, 30386, 25869, 18664, 28671, 38675, 25202, 36228, 36263, 36292, 18437,
  /* 13980 */ 36311, 41830, 27720, 41755, 27740, 42152, 36344, 21851, 21889, 36360, 18664, 18664, 18664, 18664, 18664,
  /* 13995 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14010 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14025 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14040 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14055 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14070 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664, 18664, 18664,
  /* 14085 */ 21139, 18664, 22112, 23942, 35441, 36383, 32613, 24062, 24757, 24771, 24785, 24407, 18273, 18664, 27089,
  /* 14100 */ 40607, 18664, 18664, 18664, 33543, 28380, 41614, 18664, 36437, 27082, 18664, 28381, 37872, 32000, 25199,
  /* 14115 */ 29328, 24515, 21509, 34728, 18664, 20140, 18664, 22201, 38986, 36462, 36497, 36557, 21619, 18664, 23990,
  /* 14130 */ 18664, 21617, 36578, 40517, 35574, 38171, 28952, 36606, 29169, 36648, 36698, 18664, 24139, 18664, 24476,
  /* 14145 */ 39162, 39459, 18664, 42711, 32589, 32922, 18664, 25316, 34321, 21872, 21872, 21872, 33992, 30386, 30386,
  /* 14160 */ 30386, 29972, 38654, 35891, 39631, 18664, 18664, 28522, 36481, 18793, 40499, 31643, 18664, 35918, 21872,
  /* 14175 */ 36734, 21872, 41104, 25198, 30849, 30386, 25201, 41755, 18664, 36755, 18664, 18664, 18664, 42712, 32610,
  /* 14190 */ 28379, 25811, 21872, 36775, 28878, 36796, 30442, 30386, 37394, 31548, 18664, 18664, 18664, 42713, 28381,
  /* 14205 */ 25815, 21872, 29090, 30386, 30386, 31110, 31548, 18664, 36816, 25315, 35470, 25816, 34328, 30386, 29934,
  /* 14220 */ 36833, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124, 21960, 32959, 36850, 21958, 39821,
  /* 14235 */ 36894, 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664,
  /* 14250 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14265 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14280 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14295 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14310 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14325 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664, 18664,
  /* 14340 */ 18664, 21139, 18664, 18664, 18664, 43069, 24374, 32613, 18664, 18664, 24505, 39340, 24407, 18273, 18664,
  /* 14355 */ 18664, 40607, 18664, 18664, 20382, 18664, 28380, 36948, 36974, 36971, 35181, 36976, 26492, 42448, 25649,
  /* 14370 */ 36992, 30278, 24515, 37015, 18664, 18664, 20140, 18664, 18664, 18664, 18664, 28381, 32589, 21619, 18664,
  /* 14385 */ 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386, 25200, 25591, 39823, 18664, 18664, 18664,
  /* 14400 */ 18664, 18664, 18664, 18664, 42711, 32589, 32922, 18664, 25316, 34321, 21872, 21872, 21872, 34619, 30386,
  /* 14415 */ 30386, 30386, 29972, 21799, 18664, 18664, 18664, 18664, 18664, 18664, 28380, 32589, 32613, 18664, 35918,
  /* 14430 */ 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 18664, 18664, 18664, 18664, 18664, 42712,
  /* 14445 */ 32610, 28379, 25811, 21872, 21872, 21657, 25196, 30386, 30386, 37394, 31548, 18664, 18664, 18664, 42713,
  /* 14460 */ 28381, 25815, 21872, 29090, 30386, 30386, 31110, 31548, 18664, 18664, 25315, 25311, 25816, 34328, 30386,
  /* 14475 */ 31109, 31547, 18664, 28380, 28638, 18829, 21960, 38201, 32800, 18664, 32124, 21960, 25202, 28379, 21958,
  /* 14490 */ 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664,
  /* 14505 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14520 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14535 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14550 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14565 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14580 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664,
  /* 14595 */ 21577, 37048, 37065, 19443, 18664, 37071, 43069, 37088, 37117, 37130, 37134, 37101, 37150, 24407, 18273,
  /* 14610 */ 18664, 37166, 40607, 37185, 24871, 18664, 37201, 37227, 42744, 24889, 41448, 28180, 36367, 37270, 37309,
  /* 14625 */ 37343, 37370, 37424, 37410, 21509, 18664, 18664, 38109, 37460, 28514, 37482, 37504, 30001, 39978, 21619,
  /* 14640 */ 18664, 18664, 37523, 42768, 34326, 37549, 37570, 34998, 32532, 30916, 30387, 36007, 26549, 18664, 25495,
  /* 14655 */ 23388, 18664, 37591, 18664, 37608, 37805, 42119, 37627, 23539, 25316, 38161, 32866, 21872, 36632, 37645,
  /* 14670 */ 26672, 30386, 26747, 37693, 21799, 18664, 32902, 37738, 37755, 37792, 37827, 37858, 27597, 26479, 20026,
  /* 14685 */ 37897, 21872, 28852, 37943, 40877, 25198, 35131, 32255, 32068, 37966, 22966, 18664, 37629, 37994, 42607,
  /* 14700 */ 42712, 32610, 38018, 38067, 21872, 21872, 21657, 28939, 30386, 30386, 34943, 38083, 38102, 19384, 18664,
  /* 14715 */ 42713, 28381, 25815, 21872, 41235, 30386, 30386, 35630, 31548, 22765, 18664, 25315, 18807, 38125, 39315,
  /* 14730 */ 30386, 35643, 31547, 22958, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124, 21960, 25202, 38146,
  /* 14745 */ 38187, 26154, 41827, 35845, 38222, 33154, 41755, 27740, 21800, 38278, 38316, 21889, 40677, 18664, 18664,
  /* 14760 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14775 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14790 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14805 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14820 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 14835 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471, 18664,
  /* 14850 */ 18664, 18664, 38332, 38354, 38378, 38395, 38411, 23570, 38475, 38490, 38503, 38519, 38533, 38547, 24407,
  /* 14865 */ 38563, 18664, 23911, 40607, 18664, 18664, 38585, 18664, 37533, 42441, 40938, 21560, 23912, 38618, 40133,
  /* 14880 */ 38634, 38670, 38691, 33353, 38717, 38745, 38782, 18664, 20140, 27476, 18664, 18664, 18664, 33932, 38821,
  /* 14895 */ 31391, 32457, 38862, 24817, 38884, 38907, 41493, 21872, 39787, 38940, 38961, 25200, 26815, 38979, 36475,
  /* 14910 */ 18664, 39002, 39018, 18664, 18664, 18664, 42711, 32589, 32922, 24011, 25316, 34321, 21872, 21872, 21872,
  /* 14925 */ 33992, 30386, 30386, 30386, 29972, 21799, 18664, 24560, 25475, 39064, 39083, 39460, 40361, 30324, 35792,
  /* 14940 */ 31088, 26504, 21872, 30224, 35955, 39102, 39139, 30386, 36909, 34934, 35601, 39158, 39178, 28994, 18664,
  /* 14955 */ 18664, 21723, 36247, 34825, 25811, 34212, 28745, 21657, 25196, 31743, 34031, 37394, 31548, 42647, 39196,
  /* 14970 */ 20209, 42713, 28381, 42371, 36094, 31672, 36800, 38206, 31110, 31548, 18664, 22917, 25315, 31941, 25816,
  /* 14985 */ 34328, 30386, 33132, 32746, 39216, 39233, 39270, 39308, 39331, 38945, 29676, 28352, 35946, 21960, 42075,
  /* 15000 */ 28379, 39356, 39390, 41827, 39821, 39415, 27720, 39761, 35562, 42833, 21851, 21851, 21889, 40677, 18664,
  /* 15015 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15030 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15045 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15060 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15075 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15090 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 21471,
  /* 15105 */ 18664, 18664, 18664, 37767, 21139, 18664, 18664, 39452, 19704, 39476, 39491, 40553, 39520, 39534, 39548,
  /* 15120 */ 24407, 39564, 19242, 41311, 40607, 18664, 39587, 39622, 22141, 23854, 39655, 34235, 42539, 39692, 39720,
  /* 15135 */ 33871, 39748, 39777, 39803, 39853, 39839, 21509, 39902, 18990, 31862, 39918, 18664, 28408, 39935, 39957,
  /* 15150 */ 29039, 28631, 23381, 35429, 39994, 40029, 40079, 32710, 40869, 29588, 30386, 40102, 21776, 35533, 40118,
  /* 15165 */ 34120, 39217, 18664, 40170, 40204, 18664, 18664, 40223, 39285, 31356, 40239, 40278, 38033, 32659, 40294,
  /* 15180 */ 28861, 36590, 39374, 35125, 29844, 27166, 40318, 32086, 18664, 40352, 40377, 34253, 28550, 40415, 40451,
  /* 15195 */ 40470, 40541, 36509, 36531, 40569, 35812, 40593, 40630, 31697, 30386, 40664, 41755, 18583, 40699, 33407,
  /* 15210 */ 38362, 18664, 23893, 32486, 19850, 37241, 41717, 40716, 21657, 40740, 26730, 40766, 37394, 35209, 18275,
  /* 15225 */ 18664, 21245, 40784, 22279, 40809, 21872, 31511, 35113, 30386, 30250, 31548, 20591, 21141, 25315, 25311,
  /* 15240 */ 40857, 38924, 40893, 25999, 42932, 18664, 28380, 40917, 42667, 40954, 29647, 32800, 40979, 25768, 42692,
  /* 15255 */ 42513, 28379, 21958, 39821, 41827, 39821, 41830, 37927, 26100, 41009, 41042, 21851, 21851, 41058, 40677,
  /* 15270 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15285 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15300 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15315 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15330 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15345 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15360 */ 21471, 18664, 18664, 18664, 31308, 21139, 18664, 31911, 18664, 41120, 41136, 41151, 41167, 41183, 41197,
  /* 15375 */ 41211, 24407, 18273, 18664, 18664, 21379, 18664, 20432, 18664, 18664, 28380, 32590, 18664, 18664, 37025,
  /* 15390 */ 18664, 22362, 40063, 41227, 41251, 35008, 24515, 41276, 18664, 18664, 20140, 18664, 18664, 37072, 41362,
  /* 15405 */ 28381, 41381, 21619, 18664, 18664, 41365, 29753, 41398, 21872, 21872, 26324, 30386, 30386, 29111, 30536,
  /* 15420 */ 41422, 18664, 41438, 18664, 31326, 18664, 39919, 40207, 42711, 41464, 32922, 41509, 25316, 34321, 27310,
  /* 15435 */ 40833, 41566, 33992, 27575, 33114, 29601, 29972, 21799, 18664, 41590, 18664, 18664, 18664, 41692, 28380,
  /* 15450 */ 41610, 32613, 18664, 35918, 40525, 21872, 21872, 21757, 41630, 30386, 30386, 25201, 41755, 41669, 31472,
  /* 15465 */ 18664, 18664, 18664, 42712, 32610, 18591, 25811, 21872, 21872, 21657, 25196, 30386, 30386, 37394, 40330,
  /* 15480 */ 18664, 18664, 41691, 42713, 28381, 41708, 21872, 29090, 41733, 30386, 31110, 36834, 18664, 18664, 25315,
  /* 15495 */ 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124,
  /* 15510 */ 41752, 41771, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 32151, 41822, 21800, 21851, 41846, 21889,
  /* 15525 */ 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15540 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15555 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15570 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15585 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15600 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15615 */ 18664, 21471, 18664, 18664, 18664, 18664, 21139, 32924, 21597, 18664, 37293, 41881, 37283, 18664, 24096,
  /* 15630 */ 31815, 41919, 24407, 18273, 18664, 18664, 40607, 18664, 18664, 18664, 18664, 28380, 32590, 18664, 18664,
  /* 15645 */ 18664, 18664, 28381, 38891, 21872, 41935, 35008, 24515, 21509, 18664, 41958, 20140, 18664, 18664, 18664,
  /* 15660 */ 18664, 28381, 41985, 21619, 42004, 18664, 18664, 21617, 42021, 31965, 21872, 34998, 42054, 42072, 25200,
  /* 15675 */ 28157, 42091, 18664, 18664, 18664, 18664, 31614, 18664, 18664, 42711, 42114, 39668, 18664, 25316, 34321,
  /* 15690 */ 21872, 42135, 21872, 33992, 30386, 32198, 30386, 29972, 21799, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15705 */ 28380, 32589, 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755, 18664,
  /* 15720 */ 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657, 25196, 30386, 30386, 37394,
  /* 15735 */ 31548, 18664, 42168, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110, 31548, 41806, 18664,
  /* 15750 */ 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800, 42190,
  /* 15765 */ 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851,
  /* 15780 */ 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15795 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15810 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15825 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15840 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15855 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 15870 */ 18664, 18664, 21471, 18664, 18664, 18664, 20161, 21139, 18664, 34194, 31549, 39704, 42212, 42227, 42242,
  /* 15885 */ 42258, 42272, 42286, 24407, 18273, 18664, 18664, 40607, 18664, 18664, 18664, 18664, 28380, 32590, 18664,
  /* 15900 */ 18664, 18664, 18664, 28381, 40063, 31838, 25199, 42316, 42302, 21509, 18664, 18664, 20140, 18664, 18664,
  /* 15915 */ 18664, 22419, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872, 34998, 30386, 30386,
  /* 15930 */ 25200, 25591, 39823, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 42711, 32589, 32922, 18664, 25316,
  /* 15945 */ 34321, 21872, 21872, 21872, 33992, 30386, 30386, 30386, 29972, 21799, 18664, 18664, 18664, 18664, 18664,
  /* 15960 */ 42345, 28380, 32589, 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386, 30386, 25201, 41755,
  /* 15975 */ 18664, 42005, 18664, 18664, 18664, 42712, 40435, 28379, 42367, 40577, 21872, 42387, 25196, 33668, 40768,
  /* 15990 */ 36932, 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110, 31548, 18664,
  /* 16005 */ 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386, 32800,
  /* 16020 */ 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800, 21851,
  /* 16035 */ 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16050 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16065 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16080 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16095 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16110 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16125 */ 18664, 18664, 18664, 24576, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 24374, 32613,
  /* 16140 */ 18664, 18664, 34972, 42411, 24407, 18273, 18664, 18664, 18544, 18664, 30964, 18664, 18664, 42427, 42464,
  /* 16155 */ 21701, 42487, 24582, 21703, 28000, 29760, 21872, 42506, 35008, 24515, 21509, 18664, 35862, 20140, 26126,
  /* 16170 */ 36817, 21835, 18664, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 33327, 34998, 30386,
  /* 16185 */ 30386, 32267, 25591, 36421, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 42711, 32589, 32922, 18664,
  /* 16200 */ 25316, 34321, 21872, 21872, 21872, 33992, 30386, 30386, 30386, 29972, 21799, 18664, 18664, 18664, 18664,
  /* 16215 */ 18664, 18664, 28380, 32589, 32613, 18664, 35918, 21872, 21872, 21872, 38051, 25198, 30386, 30386, 25201,
  /* 16230 */ 41755, 22147, 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657, 25196, 30386,
  /* 16245 */ 30386, 37394, 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110, 31548,
  /* 16260 */ 18664, 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960, 30386,
  /* 16275 */ 32800, 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740, 21800,
  /* 16290 */ 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16305 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16320 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16335 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16350 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16365 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16380 */ 18664, 18664, 18664, 18664, 21471, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069, 24374,
  /* 16395 */ 32613, 18664, 18664, 24505, 39340, 24407, 42529, 18664, 18664, 40607, 18664, 18664, 21170, 18664, 28380,
  /* 16410 */ 32590, 18664, 18664, 18664, 18664, 28381, 42471, 30820, 25199, 42555, 37254, 21509, 18664, 18664, 20140,
  /* 16425 */ 18664, 18664, 18664, 18664, 28381, 32589, 21619, 18664, 18664, 42584, 21617, 34326, 21872, 32884, 34998,
  /* 16440 */ 30386, 30386, 27158, 25591, 39823, 38602, 18664, 18664, 42606, 18664, 18664, 18664, 42711, 39292, 32922,
  /* 16455 */ 18664, 25316, 34515, 21872, 27406, 21872, 33992, 42623, 27616, 30386, 29972, 21799, 18664, 40181, 18664,
  /* 16470 */ 18664, 18664, 18664, 28380, 40147, 32613, 18664, 35918, 32977, 21872, 21872, 29093, 25198, 28453, 30386,
  /* 16485 */ 38963, 41755, 18664, 18664, 42645, 18664, 18664, 42712, 32610, 28379, 42663, 21872, 42683, 42030, 25196,
  /* 16500 */ 36212, 30386, 29826, 31548, 18664, 25682, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386, 31110,
  /* 16515 */ 35081, 18664, 18664, 42708, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815, 21960,
  /* 16530 */ 30386, 32800, 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755, 27740,
  /* 16545 */ 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16560 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16575 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16590 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16605 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16620 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16635 */ 18664, 18664, 18664, 18664, 18664, 21471, 18664, 18664, 18664, 18664, 21139, 18664, 18664, 18664, 43069,
  /* 16650 */ 42729, 32613, 18664, 18664, 24505, 39340, 24407, 18273, 18664, 18664, 40607, 18664, 18664, 18664, 18664,
  /* 16665 */ 28380, 32590, 18664, 18664, 18664, 18664, 28381, 40063, 21872, 25199, 35008, 24515, 21509, 18664, 18664,
  /* 16680 */ 20140, 18664, 18664, 18664, 18664, 28381, 32589, 21619, 18664, 18664, 18664, 21617, 34326, 21872, 21872,
  /* 16695 */ 34998, 30386, 30386, 25200, 25591, 39823, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 42711, 32589,
  /* 16710 */ 32922, 18664, 25316, 34321, 21872, 21872, 21872, 33992, 30386, 30386, 30386, 29972, 21799, 18664, 18664,
  /* 16725 */ 18664, 18664, 18664, 18664, 28380, 32589, 32613, 18664, 35918, 21872, 21872, 21872, 29093, 25198, 30386,
  /* 16740 */ 30386, 25201, 41755, 18664, 18664, 18664, 18664, 18664, 42712, 32610, 28379, 25811, 21872, 21872, 21657,
  /* 16755 */ 25196, 30386, 30386, 37394, 31548, 18664, 18664, 18664, 42713, 28381, 25815, 21872, 29090, 30386, 30386,
  /* 16770 */ 31110, 31548, 18664, 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547, 18664, 28380, 28638, 25815,
  /* 16785 */ 21960, 30386, 32800, 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827, 39821, 41830, 27720, 41755,
  /* 16800 */ 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16815 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16830 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16845 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16860 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16875 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 16890 */ 18664, 18664, 18664, 18664, 18664, 18664, 20134, 18664, 18664, 18664, 18664, 42784, 19034, 42880, 42809,
  /* 16905 */ 42793, 42855, 42877, 20762, 20051, 42898, 20044, 42948, 18273, 18664, 18664, 40607, 18664, 20808, 33062,
  /* 16920 */ 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19802, 42964, 18689, 19572, 42986, 29130,
  /* 16935 */ 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918, 18476,
  /* 16950 */ 18499, 19909, 19925, 18483, 18506, 19798, 43002, 27958, 18664, 18664, 18664, 34274, 18529, 18573, 29197,
  /* 16965 */ 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486, 33564,
  /* 16980 */ 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779, 18845,
  /* 16995 */ 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086, 19105,
  /* 17010 */ 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372, 19337,
  /* 17025 */ 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699, 19534,
  /* 17040 */ 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799, 19170,
  /* 17055 */ 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17070 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17085 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17100 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17115 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17130 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17145 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 18664, 18664, 18664, 18664, 21139, 18664, 18664,
  /* 17160 */ 43026, 43069, 20156, 40399, 33460, 33465, 43045, 40395, 20225, 18273, 18664, 18664, 40607, 18664, 20808,
  /* 17175 */ 18664, 18664, 26362, 18616, 18664, 43067, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572, 18291,
  /* 17190 */ 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453, 19918,
  /* 17205 */ 18476, 18499, 23777, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529, 18573,
  /* 17220 */ 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767, 19486,
  /* 17235 */ 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892, 18779,
  /* 17250 */ 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856, 19086,
  /* 17265 */ 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353, 19372,
  /* 17280 */ 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518, 29699,
  /* 17295 */ 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579, 19799,
  /* 17310 */ 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17325 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17340 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17355 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17370 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17385 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17400 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 18664, 18664, 18664, 18664, 21139, 43085,
  /* 17415 */ 18664, 18664, 21513, 43103, 21014, 43146, 43146, 43158, 19043, 20225, 18273, 18664, 18664, 40607, 18664,
  /* 17430 */ 20808, 39200, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800, 18689, 19572,
  /* 17445 */ 18291, 29130, 34392, 18307, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284, 19025, 18453,
  /* 17460 */ 19918, 18476, 18499, 19746, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664, 34274, 18529,
  /* 17475 */ 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705, 42967, 19767,
  /* 17490 */ 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850, 18871, 18892,
  /* 17505 */ 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016, 19059, 26856,
  /* 17520 */ 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278, 19334, 19353,
  /* 17535 */ 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483, 19502, 19518,
  /* 17550 */ 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095, 19179, 19579,
  /* 17565 */ 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17580 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17595 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17610 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17625 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17640 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17655 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 20134, 18664, 18664, 18664, 18664, 21139,
  /* 17670 */ 18664, 18664, 18664, 43069, 20156, 18664, 18664, 18664, 18664, 43087, 24407, 18273, 18664, 18664, 40607,
  /* 17685 */ 18664, 18664, 18664, 18664, 28380, 32590, 18664, 18664, 18664, 18664, 28381, 40063, 21872, 25199, 35008,
  /* 17700 */ 24515, 21509, 18664, 18664, 20140, 18664, 18664, 18664, 18664, 28381, 32589, 21619, 18664, 18664, 18664,
  /* 17715 */ 21617, 21871, 21872, 21872, 37917, 30386, 30386, 25200, 25591, 39823, 18664, 18664, 18664, 18664, 18664,
  /* 17730 */ 18664, 18664, 42711, 32589, 32922, 18664, 25316, 34321, 21872, 21872, 21872, 28780, 30386, 30386, 30386,
  /* 17745 */ 29972, 21799, 18664, 18664, 18664, 18664, 18664, 18664, 28380, 32589, 32613, 18664, 35918, 21872, 21872,
  /* 17760 */ 21872, 29093, 25198, 30386, 30386, 25201, 41755, 18664, 18664, 18664, 18664, 18664, 42712, 32610, 28379,
  /* 17775 */ 25811, 21872, 21872, 21657, 25196, 30386, 30386, 37394, 31548, 18664, 18664, 18664, 42713, 28381, 25815,
  /* 17790 */ 21872, 29090, 30386, 30386, 31110, 31548, 18664, 18664, 25315, 25311, 25816, 34328, 30386, 31109, 31547,
  /* 17805 */ 18664, 28380, 28638, 25815, 21960, 30386, 32800, 18664, 32124, 21960, 25202, 28379, 21958, 39821, 41827,
  /* 17820 */ 39821, 41830, 27720, 41755, 27740, 21800, 21851, 21851, 21889, 40677, 18664, 18664, 18664, 18664, 18664,
  /* 17835 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17850 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17865 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17880 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17895 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17910 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 17925 */ 18664, 18664, 18664, 43180, 18664, 24932, 23679, 23685, 23685, 24929, 24919, 20808, 18664, 18664, 18664,
  /* 17940 */ 18664, 18664, 20808, 18664, 18664, 26362, 18616, 18664, 18664, 18664, 18664, 26363, 18623, 19801, 19800,
  /* 17955 */ 18689, 19572, 19131, 29130, 34392, 43202, 18664, 18664, 18353, 18664, 30742, 18373, 18389, 18424, 24284,
  /* 17970 */ 19025, 18453, 19918, 18476, 18499, 19909, 19925, 18483, 18506, 19798, 19416, 27958, 18664, 18664, 18664,
  /* 17985 */ 34274, 18529, 18573, 29197, 18607, 18639, 18663, 18647, 18681, 24328, 18708, 42970, 19159, 24325, 18705,
  /* 18000 */ 42967, 19767, 19486, 33564, 41537, 35161, 43130, 41547, 36712, 27759, 18724, 18753, 18329, 19548, 18850,
  /* 18015 */ 18871, 18892, 18779, 18845, 18866, 18887, 18908, 19801, 29424, 34717, 29529, 18958, 18979, 18408, 19016,
  /* 18030 */ 19059, 26856, 19086, 19105, 19124, 19147, 19089, 19108, 19199, 19422, 19223, 41594, 19258, 19070, 19278,
  /* 18045 */ 19334, 19353, 19372, 19337, 19356, 19407, 19832, 38262, 19438, 26843, 18400, 19459, 19479, 19463, 19483,
  /* 18060 */ 19502, 19518, 29699, 19534, 19595, 18513, 19603, 19627, 19670, 19720, 19783, 19818, 19866, 19882, 20095,
  /* 18075 */ 19179, 19579, 19799, 19170, 19898, 19941, 19972, 19183, 20012, 20073, 20111, 18664, 18664, 18664, 18664,
  /* 18090 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 18105 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 18120 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 18135 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 18150 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664,
  /* 18165 */ 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 18664, 0, 2, 3, 94212, 5, 6, 0, 0,
  /* 18184 */ 0, 0, 0, 0, 73995, 73995, 73995, 73995, 0, 0, 78094, 78094, 73995, 73995, 78094, 78094, 78094, 78094,
  /* 18202 */ 78094, 78094, 78094, 78094, 78094, 78094, 0, 0, 73995, 78094, 73995, 78094, 78094, 78094, 78094, 78094,
  /* 18218 */ 78094, 78094, 40960, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094,
  /* 18233 */ 78094, 78094, 78094, 78094, 0, 0, 78094, 325, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094,
  /* 18249 */ 78094, 78094, 78094, 78094, 78094, 78094, 45056, 49152, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 73995, 0, 0,
  /* 18270 */ 78094, 0, 2105344, 273, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2121, 2162688, 0, 2, 6, 0, 0, 0,
  /* 18298 */ 0, 0, 0, 0, 2445312, 2453504, 0, 0, 2473984, 0, 0, 3076096, 0, 0, 0, 0, 0, 0, 0, 325, 325, 0, 0, 0, 0, 0,
  /* 18324 */ 0, 1959, 0, 0, 1962, 0, 0, 0, 0, 0, 0, 0, 3166208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1666, 1667, 0, 0, 0, 0, 0,
  /* 18353 */ 0, 0, 0, 2109440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1954, 0, 0, 2158592, 2158592, 2158592, 2158592,
  /* 18377 */ 2158592, 2158592, 2625536, 2158592, 2158592, 2691072, 2158592, 2707456, 2158592, 2158592, 2760704,
  /* 18388 */ 2781184, 2801664, 2158592, 2838528, 2158592, 2887680, 2158592, 2158592, 2158592, 3076096, 2158592,
  /* 18399 */ 2158592, 2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2531328, 2158592,
  /* 18418 */ 2158592, 2605056, 2158592, 2699264, 2158592, 2158592, 0, 2625536, 0, 2691072, 2707456, 0, 0, 2760704,
  /* 18432 */ 2781184, 2801664, 0, 2838528, 2887680, 0, 0, 0, 0, 0, 524, 2516, 524, 524, 524, 2520, 524, 524, 524, 524,
  /* 18452 */ 546, 0, 2723840, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18465 */ 2158592, 2158592, 2158592, 0, 0, 0, 2163521, 2163521, 2163521, 2163521, 2163521, 2162688, 2162688,
  /* 18478 */ 2691072, 2162688, 2707456, 2162688, 2715648, 2162688, 2162688, 2760704, 2162688, 2781184, 2801664,
  /* 18489 */ 2162688, 2162688, 2838528, 2162688, 2162688, 2887680, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18500 */ 2162688, 2887680, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18511 */ 2162688, 3076096, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18522 */ 3117056, 3129344, 2424832, 2162688, 2162688, 2486272, 2162688, 2113536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18541 */ 0, 0, 2662400, 0, 0, 0, 0, 325, 325, 325, 0, 0, 0, 0, 0, 657, 0, 0, 0, 0, 0, 1686, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18571 */ 1693, 0, 2789376, 0, 0, 0, 0, 0, 0, 0, 0, 2383872, 0, 0, 0, 0, 0, 0, 0, 1908, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18599 */ 1994, 0, 0, 0, 0, 0, 0, 415, 2617344, 2158592, 2662400, 2158592, 2158592, 2158592, 2158592, 2789376,
  /* 18615 */ 2813952, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18626 */ 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18639 */ 2158592, 2158592, 2433024, 0, 0, 2584576, 0, 0, 0, 0, 2813952, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592,
  /* 18658 */ 2158592, 2813952, 2158592, 2158592, 2158592, 2813952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292,
  /* 18681 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2162688, 2162688, 2433024, 2162688, 2162688, 2162688,
  /* 18692 */ 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18705 */ 2662400, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2789376, 2813952,
  /* 18716 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2482176, 2158592, 2158592,
  /* 18727 */ 2158592, 2158592, 2600960, 2158592, 2158592, 2158592, 2711552, 2158592, 2158592, 2879488, 2158592,
  /* 18738 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18749 */ 2158592, 2158592, 2158592, 114688, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2482176, 0, 0,
  /* 18762 */ 2711552, 0, 0, 0, 0, 0, 0, 0, 1935, 0, 0, 0, 0, 0, 1940, 0, 0, 2162688, 2162688, 2162688, 2162688,
  /* 18783 */ 2162688, 2162688, 2162688, 3166208, 2162688, 0, 0, 0, 0, 2121728, 0, 0, 0, 0, 0, 1725, 0, 0, 0, 0, 0, 0,
  /* 18805 */ 0, 0, 415, 415, 0, 0, 0, 0, 0, 2299, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 1780, 415, 415, 415, 415,
  /* 18830 */ 415, 415, 524, 524, 524, 524, 524, 524, 524, 524, 2401, 524, 524, 524, 524, 0, 0, 2162688, 2162688,
  /* 18849 */ 2162688, 2478080, 2482176, 2162688, 2162688, 2162688, 2523136, 2162688, 2162688, 2162688, 2162688,
  /* 18860 */ 2162688, 2162688, 2162688, 2600960, 2162688, 2162688, 2162688, 2162688, 2600960, 2162688, 2162688,
  /* 18871 */ 2162688, 2162688, 2162688, 2162688, 2711552, 2162688, 2162688, 2162688, 2162688, 2162688, 2764800,
  /* 18882 */ 2162688, 2162688, 2162688, 2859008, 2879488, 2162688, 2162688, 2162688, 2859008, 2879488, 2162688,
  /* 18893 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3002368, 3026944, 2162688,
  /* 18904 */ 2162688, 2162688, 3059712, 2162688, 2162688, 2162688, 2162688, 3059712, 2162688, 2162688, 2162688,
  /* 18915 */ 2162688, 2162688, 2162688, 2162688, 2162688, 3166208, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18926 */ 2162688, 887, 0, 90112, 890, 2162688, 2445312, 2453504, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18939 */ 2162688, 946, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 245760, 0,
  /* 18952 */ 0, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 3051520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
  /* 18975 */ 305, 306, 307, 0, 2531328, 2699264, 0, 3153920, 0, 0, 0, 0, 0, 0, 2576384, 0, 0, 0, 0, 0, 0, 999, 0, 0,
  /* 18999 */ 1002, 0, 0, 0, 0, 0, 0, 768, 0, 0, 0, 0, 0, 779, 0, 0, 643, 2891776, 2158592, 2158592, 2158592, 3035136,
  /* 19021 */ 3084288, 3104768, 2158592, 3153920, 0, 0, 0, 0, 0, 0, 0, 0, 2887680, 0, 0, 0, 0, 0, 0, 0, 0, 1093632, 0,
  /* 19044 */ 0, 0, 0, 0, 0, 0, 0, 1110016, 383, 1110399, 1110399, 1110399, 1110399, 0, 0, 3084288, 3104768, 0, 0, 0, 0,
  /* 19065 */ 0, 2891776, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2637824, 2158592, 2158592,
  /* 19082 */ 2969600, 2158592, 3031040, 2158592, 2162688, 2162688, 2162688, 2162688, 2162688, 2605056, 2629632,
  /* 19093 */ 2162688, 2162688, 2162688, 2699264, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19104 */ 2162688, 2162688, 2162688, 2162688, 2891776, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19115 */ 2162688, 2162688, 2162688, 3035136, 2162688, 2162688, 3084288, 2162688, 3104768, 3084288, 2162688,
  /* 19126 */ 3104768, 2162688, 2162688, 2162688, 3153920, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2445312, 2453504, 0,
  /* 19145 */ 0, 2473984, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2494464, 2162688, 2162688, 2531328, 2162688,
  /* 19160 */ 2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 2162688, 2433024, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19175 */ 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19192 */ 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 2162688, 2162688, 2162688, 3153920, 2162688, 2441216,
  /* 19205 */ 2441216, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 947, 0,
  /* 19218 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2969600, 0, 2985984, 0, 0, 0, 0, 3162112, 0, 2818048, 0, 0,
  /* 19235 */ 0, 0, 0, 0, 0, 1960, 1961, 0, 0, 0, 0, 0, 0, 0, 622, 0, 0, 625, 0, 0, 0, 0, 0, 0, 0, 0, 3031040, 0, 0, 0,
  /* 19265 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2134, 0, 0, 0, 0, 2637824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2818048,
  /* 19293 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2163521, 2163521, 2163521, 2163521,
  /* 19304 */ 2495297, 2163521, 2163521, 2532161, 2163521, 0, 0, 2163577, 2163577, 2163521, 2163521, 2163521, 2163521,
  /* 19317 */ 2163521, 2163521, 2163521, 2163521, 2163521, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577,
  /* 19328 */ 2163577, 2163577, 2163577, 0, 0, 0, 2158592, 2158592, 2158592, 2162688, 2162688, 2162688, 2162688,
  /* 19341 */ 2162688, 2162688, 2162688, 2162688, 2551808, 2162688, 2162688, 2162688, 2162688, 2637824, 2162688,
  /* 19352 */ 2162688, 2637824, 2162688, 2162688, 2719744, 2740224, 2162688, 2162688, 2756608, 2818048, 2822144,
  /* 19363 */ 2162688, 2162688, 2916352, 2162688, 2162688, 2961408, 2162688, 2969600, 2162688, 2162688, 2969600,
  /* 19374 */ 2162688, 2162688, 3031040, 3055616, 2162688, 2162688, 2162688, 2162688, 2162688, 3182592, 0, 0, 0, 0, 0,
  /* 19389 */ 0, 2128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1030, 0, 0, 0, 0, 0, 0, 2162688, 3031040, 3055616, 2162688, 2162688,
  /* 19412 */ 2162688, 2162688, 2162688, 3182592, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0,
  /* 19425 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2822144, 0, 2883584, 0, 0, 0, 3022848, 0, 2543616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19452 */ 0, 0, 308, 0, 0, 0, 0, 2158592, 2158592, 2162688, 2162688, 2162688, 2162688, 2162688, 2502656, 2543616,
  /* 19468 */ 2547712, 2162688, 2162688, 2596864, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2895872,
  /* 19479 */ 2162688, 2162688, 2162688, 2895872, 2162688, 2162688, 2965504, 2162688, 2162688, 2162688, 2162688,
  /* 19490 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 2162688,
  /* 19503 */ 2162688, 2461696, 0, 0, 0, 0, 0, 0, 0, 2899968, 0, 0, 3117056, 0, 2686976, 0, 2646016, 2613248, 2695168,
  /* 19522 */ 0, 0, 0, 0, 2945024, 0, 0, 3092480, 0, 2949120, 3137536, 2420736, 2158592, 2158592, 2744320, 2158592,
  /* 19538 */ 2158592, 3117056, 2486272, 2744320, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 19554 */ 2158592, 2158592, 2158592, 2158592, 2158592, 3166208, 2158592, 2162688, 2162688, 2162688, 2162688, 1562,
  /* 19566 */ 0, 0, 1567, 0, 2162688, 2433024, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2162688,
  /* 19580 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2506752, 0, 0, 0, 0, 0,
  /* 19595 */ 2158592, 2158592, 2158592, 2424832, 2162688, 2162688, 2486272, 2162688, 2162688, 2162688, 2588672,
  /* 19606 */ 2162688, 2162688, 2686976, 2744320, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19617 */ 2162688, 2162688, 946, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3117056, 3129344,
  /* 19630 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2498560, 0, 0, 0, 2830336, 0, 0, 0, 0, 325, 325,
  /* 19648 */ 325, 0, 0, 0, 0, 656, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 0, 0, 172032, 0, 0, 0, 2981888, 0,
  /* 19672 */ 0, 0, 3108864, 0, 0, 0, 0, 0, 0, 0, 2924544, 0, 2449408, 0, 0, 0, 0, 325, 325, 325, 0, 0, 147456, 0, 0, 0,
  /* 19698 */ 0, 0, 0, 0, 2141, 2142, 0, 0, 0, 0, 0, 0, 0, 374, 316, 0, 0, 0, 0, 0, 45056, 49152, 2449408, 2498560,
  /* 19722 */ 2158592, 2748416, 2981888, 2748416, 0, 0, 2158592, 2162688, 2449408, 2457600, 2498560, 2162688, 2162688,
  /* 19735 */ 2162688, 2162688, 2162688, 2162688, 1237, 0, 0, 1240, 2162688, 2445312, 2453504, 2162688, 2162688,
  /* 19748 */ 2162688, 2162688, 2162688, 2162688, 1238, 0, 0, 1241, 2162688, 2445312, 2453504, 2162688, 2162688,
  /* 19761 */ 2162688, 2162688, 2162688, 2162688, 237568, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19773 */ 2162688, 2162688, 2805760, 2162688, 2805760, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19784 */ 2654208, 2748416, 2830336, 2936832, 2162688, 2981888, 2162688, 2162688, 2162688, 3108864, 2162688,
  /* 19795 */ 2449408, 2457600, 2498560, 2162688, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19808 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2163575, 2162688,
  /* 19819 */ 2162688, 2162688, 2654208, 2748416, 2830336, 2936832, 2162688, 2981888, 2162688, 2162688, 2162688,
  /* 19830 */ 3108864, 2162688, 2162688, 0, 0, 0, 0, 2519040, 0, 0, 2547712, 2596864, 0, 0, 0, 0, 0, 0, 0, 2129, 0, 0,
  /* 19852 */ 0, 0, 0, 0, 0, 0, 0, 1048576, 0, 0, 0, 0, 0, 415, 0, 0, 0, 0, 2850816, 0, 0, 0, 0, 0, 0, 2809856, 0,
  /* 19879 */ 3186688, 2564096, 2564096, 0, 2162688, 2555904, 2564096, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19891 */ 2162688, 2162688, 2162688, 3100672, 2162688, 2555904, 2564096, 2592768, 2162688, 2162688, 2162688,
  /* 19902 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2592768, 2162688, 2162688, 2162688, 2162688,
  /* 19913 */ 2162688, 2162688, 0, 0, 0, 0, 2162688, 2445312, 2453504, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19927 */ 2162688, 2162688, 2162688, 2162688, 2625536, 2162688, 2162688, 2162688, 2162688, 2691072, 2162688,
  /* 19938 */ 2707456, 2162688, 2715648, 2162688, 2162688, 2469888, 0, 2535424, 2994176, 0, 0, 0, 0, 2162688, 2162688,
  /* 19953 */ 2609152, 2162688, 2834432, 2162688, 0, 2, 0, 176128, 299008, 0, 0, 0, 0, 0, 2445312, 2453504, 0, 0,
  /* 19971 */ 2473984, 2162688, 2162688, 2994176, 2162688, 2162688, 2609152, 2162688, 2834432, 2162688, 2162688,
  /* 19982 */ 2162688, 2994176, 2527232, 0, 0, 0, 0, 0, 620, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415,
  /* 20005 */ 415, 415, 1170, 415, 415, 415, 1094, 0, 2428928, 2162688, 2162688, 2162688, 2162688, 2990080, 2428928,
  /* 20020 */ 2162688, 2162688, 2162688, 2162688, 2990080, 2539520, 0, 0, 0, 0, 0, 1767, 1768, 0, 0, 0, 1771, 0, 0, 0,
  /* 20040 */ 0, 0, 0, 1424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1093632, 1093632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936,
  /* 20068 */ 167936, 167936, 167936, 0, 0, 2920448, 2162688, 2658304, 2940928, 2162688, 2162688, 2658304, 2940928,
  /* 20081 */ 2162688, 2641920, 2703360, 2560000, 2162688, 2560000, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 20092 */ 2162688, 241664, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3100672,
  /* 20104 */ 0, 0, 0, 0, 0, 2854912, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2953216, 2953216, 0, 0, 0, 0, 0,
  /* 20123 */ 0, 0, 0, 0, 0, 250291, 250291, 250291, 250291, 0, 0, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20150 */ 325, 325, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 321, 322, 323, 324, 432,
  /* 20178 */ 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 111024, 432, 111024, 111024, 111024,
  /* 20196 */ 111024, 432, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 0, 0,
  /* 20211 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2147, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344,
  /* 20241 */ 118784, 0, 0, 273, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 619, 0, 0, 0, 0, 0, 325, 273, 0, 0, 0, 0, 0,
  /* 20270 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 135168, 0, 0, 0, 273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20300 */ 2447, 0, 273, 273, 273, 273, 273, 273, 273, 273, 273, 0, 0, 273, 273, 0, 0, 0, 0, 0, 0, 0, 273, 0, 0, 0,
  /* 20326 */ 273, 119162, 49152, 21080, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 2162688, 0, 2, 6, 0,
  /* 20352 */ 0, 0, 273, 0, 0, 0, 2445312, 2453504, 0, 0, 2473984, 0, 2, 2183427, 94212, 5, 6, 263, 0, 0, 0, 0, 0, 263,
  /* 20376 */ 0, 0, 0, 0, 0, 636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 704, 0, 0, 0, 0, 0, 0, 325, 0, 122880, 122880, 0, 0, 0,
  /* 20406 */ 0, 0, 0, 0, 0, 0, 0, 0, 619, 0, 0, 415, 415, 0, 0, 122880, 0, 122880, 0, 122880, 122880, 122880, 122880,
  /* 20429 */ 0, 0, 122880, 0, 0, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1951, 0, 0, 0, 0, 0, 122880, 122880,
  /* 20456 */ 122880, 122880, 0, 122880, 122880, 122880, 0, 122880, 122880, 0, 0, 122880, 0, 0, 0, 0, 0, 1934, 0, 0, 0,
  /* 20477 */ 0, 0, 0, 0, 0, 0, 0, 1146, 0, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 122880, 0,
  /* 20503 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2183427, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 2162688, 0, 2,
  /* 20531 */ 6, 0, 0, 0, 0, 969, 973, 0, 2445312, 2453504, 0, 0, 2473984, 0, 325, 0, 0, 0, 131072, 131072, 131072, 0,
  /* 20553 */ 0, 0, 0, 0, 0, 0, 0, 0, 1770, 0, 0, 0, 0, 0, 0, 0, 131072, 131072, 131072, 131072, 131072, 131072, 131072,
  /* 20576 */ 131072, 131072, 0, 0, 131072, 131072, 0, 0, 0, 0, 131072, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 2260, 0,
  /* 20600 */ 0, 2262, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 45056,
  /* 20628 */ 49152, 0, 135168, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 620, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168,
  /* 20657 */ 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 135168, 135168, 0, 0, 0, 0,
  /* 20674 */ 0, 1958, 0, 0, 0, 0, 0, 0, 1964, 1965, 0, 0, 0, 0, 0, 1993, 0, 0, 0, 0, 0, 0, 0, 0, 1997, 415, 601, 602,
  /* 20702 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 901120, 139264, 0, 0, 274, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20732 */ 0, 0, 715, 0, 0, 718, 0, 0, 325, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188849, 0, 0, 0, 0, 274,
  /* 20762 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1093632, 0, 274, 274, 274, 274, 274, 274, 274, 274, 274, 0,
  /* 20789 */ 0, 274, 274, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 274, 45056, 139646, 273, 21083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20817 */ 0, 0, 0, 0, 0, 0, 2105344, 2162688, 0, 2, 6, 0, 0, 0, 0, 0, 0, 274, 2445312, 2453504, 0, 0, 2473984, 0, 0,
  /* 20842 */ 271, 271, 0, 0, 271, 271, 143631, 271, 271, 271, 271, 271, 271, 271, 143631, 271, 143631, 271, 271, 271,
  /* 20862 */ 271, 271, 271, 271, 271, 271, 143690, 271, 271, 271, 271, 271, 271, 271, 143690, 271, 143631, 271, 143690,
  /* 20881 */ 45056, 49152, 271, 271, 271, 143631, 143631, 143631, 143631, 143631, 143631, 143631, 271, 271, 143631,
  /* 20896 */ 271, 271, 271, 326, 271, 143631, 271, 271, 271, 271, 271, 143631, 330, 271, 271, 271, 271, 271, 40960,
  /* 20915 */ 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 143631, 271, 143631,
  /* 20934 */ 143631, 143631, 143631, 143631, 143631, 143631, 143631, 271, 143631, 271, 143631, 271, 143631, 143631,
  /* 20948 */ 143631, 143631, 143690, 143690, 143690, 143690, 143690, 143690, 143631, 143631, 143631, 143631, 0, 0, 0,
  /* 20963 */ 271, 0, 271, 271, 271, 143631, 271, 143631, 143631, 0, 0, 0, 0, 2179723, 2179723, 2179723, 0, 0, 0, 0, 0,
  /* 20984 */ 0, 0, 0, 0, 0, 258484, 258484, 258484, 258484, 0, 0, 0, 0, 3076096, 0, 0, 0, 0, 0, 0, 0, 2179723, 2179723,
  /* 21007 */ 0, 0, 0, 0, 0, 0, 2140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1110399, 1110399, 0, 1110399, 1110399, 1110399, 0,
  /* 21031 */ 325, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 155648, 155648,
  /* 21054 */ 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 40960, 0, 0, 0, 0,
  /* 21081 */ 0, 0, 0, 0, 0, 155648, 0, 0, 0, 155648, 0, 0, 0, 0, 155648, 155648, 0, 155648, 155648, 155648, 155648,
  /* 21102 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 2, 2, 0,
  /* 21117 */ 94212, 5, 6, 126976, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 0, 0, 3076096, 0, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0,
  /* 21145 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2278, 0, 0, 0, 159744, 0, 159744, 159744, 159744, 159744, 159744, 0, 0,
  /* 21169 */ 159744, 0, 0, 0, 0, 0, 698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 122880, 122880, 0, 0, 0, 159744, 159744,
  /* 21194 */ 159744, 159744, 0, 0, 0, 0, 0, 90657, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 2127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21222 */ 774, 0, 0, 0, 0, 0, 0, 0, 774, 0, 0, 90657, 90657, 90657, 90657, 90657, 90657, 90657, 90657, 159744,
  /* 21242 */ 159744, 159744, 90657, 0, 0, 0, 0, 0, 2139, 0, 0, 0, 0, 0, 0, 2146, 0, 0, 0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
  /* 21270 */ 0, 0, 0, 0, 714, 0, 0, 0, 0, 720, 0, 0, 0, 0, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  /* 21291 */ 163840, 163840, 163840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2384, 415, 415, 0, 0, 0, 2109440, 1056, 0,
  /* 21316 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1004, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 167936,
  /* 21345 */ 167936, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2106036, 167936, 0, 0, 0, 40960,
  /* 21369 */ 167936, 167936, 0, 0, 167936, 0, 167936, 0, 167936, 167936, 0, 0, 0, 0, 325, 325, 325, 0, 654, 0, 0, 0, 0,
  /* 21392 */ 0, 0, 0, 1769, 0, 0, 0, 0, 0, 0, 0, 0, 1406, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 260, 5, 6, 0, 264, 0, 0, 0, 0,
  /* 21424 */ 0, 0, 0, 0, 0, 1910, 0, 1912, 0, 0, 1915, 0, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21450 */ 0, 0, 0, 36864, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 21469 */ 172032, 53503, 53503, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 620, 0, 620, 0, 0, 0, 2, 2, 3, 0,
  /* 21497 */ 5, 6, 0, 597, 0, 0, 0, 0, 0, 0, 0, 2105344, 546, 53503, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21526 */ 1110016, 381, 381, 524, 1076, 0, 546, 546, 524, 524, 524, 524, 524, 524, 524, 524, 524, 546, 546, 0, 0,
  /* 21547 */ 2363, 0, 0, 0, 573440, 0, 0, 0, 0, 0, 0, 0, 1060, 0, 0, 0, 0, 0, 0, 0, 0, 730, 0, 0, 0, 0, 776, 0, 0,
  /* 21576 */ 2113536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 225280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21607 */ 0, 0, 351, 0, 0, 0, 0, 1434, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 21632 */ 0, 0, 0, 0, 1660, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 524, 524, 524, 2201, 524, 524, 524,
  /* 21660 */ 524, 524, 524, 524, 524, 0, 0, 0, 0, 0, 0, 0, 0, 2229, 546, 546, 546, 546, 546, 546, 546, 546, 524, 524,
  /* 21684 */ 524, 524, 546, 546, 546, 2602, 546, 2603, 546, 546, 546, 0, 0, 0, 0, 0, 2366, 0, 0, 0, 0, 0, 0, 0, 0, 771,
  /* 21710 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2282, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 21738 */ 1980, 415, 415, 415, 2394, 524, 524, 524, 524, 524, 524, 2400, 524, 524, 524, 524, 524, 524, 1548, 524,
  /* 21758 */ 524, 524, 524, 524, 524, 524, 524, 524, 0, 0, 0, 1838, 1566, 0, 0, 546, 546, 2418, 546, 546, 546, 546,
  /* 21780 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 1302, 546, 524, 524, 2455, 524, 2456, 2457, 524, 524, 524,
  /* 21800 */ 524, 524, 524, 546, 546, 546, 546, 546, 546, 546, 546, 546, 0, 0, 0, 0, 0, 524, 2487, 524, 524, 524, 524,
  /* 21823 */ 524, 524, 2493, 524, 524, 524, 546, 2497, 546, 255, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
  /* 21850 */ 0, 0, 524, 524, 524, 524, 524, 524, 546, 546, 546, 546, 546, 546, 0, 0, 0, 0, 0, 2591, 2592, 0, 524, 524,
  /* 21874 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1541, 0, 524, 524, 524, 524, 546,
  /* 21895 */ 546, 546, 546, 0, 0, 524, 524, 546, 546, 524, 546, 2646, 2647, 524, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800,
  /* 21920 */ 0, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 180591, 180795, 180795,
  /* 21946 */ 180795, 180795, 180795, 180795, 180795, 180795, 0, 0, 180591, 180795, 53503, 53503, 0, 524, 524, 524, 524,
  /* 21963 */ 524, 524, 524, 524, 524, 524, 524, 524, 546, 546, 546, 546, 546, 188849, 188849, 188849, 188849, 0,
  /* 21981 */ 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 0, 0, 0, 188849,
  /* 21996 */ 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 0, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0,
  /* 22016 */ 0, 279, 278, 0, 278, 278, 279, 279, 0, 0, 192512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
  /* 22045 */ 272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22076 */ 45056, 49152, 0, 368, 368, 368, 368, 368, 368, 368, 368, 368, 0, 0, 368, 368, 53503, 53503, 2, 2, 3,
  /* 22097 */ 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 354, 349,
  /* 22128 */ 0, 0, 0, 692, 1057, 0, 0, 0, 0, 0, 0, 0, 1064, 0, 0, 0, 0, 0, 710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1911, 0,
  /* 22159 */ 0, 0, 0, 0, 1057, 0, 0, 0, 0, 0, 0, 1064, 1416, 0, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 1029, 0,
  /* 22190 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1332, 1651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1048, 0, 0, 0, 0, 0, 327, 0, 0, 0,
  /* 22222 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 379, 379, 0, 0, 277, 277, 277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1063, 0,
  /* 22253 */ 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 277, 0, 0, 200704, 0, 0, 0, 0, 325, 325, 325, 653, 0, 0, 0,
  /* 22282 */ 0, 0, 0, 0, 0, 0, 1073152, 0, 0, 0, 415, 415, 415, 200704, 200704, 200704, 200704, 200704, 200704, 200704,
  /* 22302 */ 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200981, 200704, 200704, 200704, 200704,
  /* 22315 */ 200704, 200704, 200704, 200980, 200704, 200980, 200704, 200980, 200704, 200704, 200704, 0, 0, 0, 0, 0, 0,
  /* 22332 */ 0, 0, 0, 0, 0, 0, 643, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 151552, 2105344, 273, 274,
  /* 22360 */ 0, 208896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 415, 415, 415, 0, 0, 0, 0, 2179724, 151552, 2179724,
  /* 22385 */ 0, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 2285, 0, 2287, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 2392,
  /* 22412 */ 0, 415, 0, 0, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1080, 0, 0, 0, 0, 888, 2163577, 2163577,
  /* 22438 */ 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577,
  /* 22449 */ 2163577, 2163577, 3089273, 2163577, 0, 0, 3076096, 0, 0, 0, 0, 0, 0, 0, 0, 2179724, 0, 0, 0, 0, 0, 0,
  /* 22471 */ 2168, 0, 0, 0, 2171, 0, 0, 415, 415, 415, 415, 1165, 415, 415, 415, 415, 415, 1171, 415, 415, 0, 0,
  /* 22493 */ 2163521, 2446145, 2454337, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521,
  /* 22504 */ 2163521, 2626369, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2790209, 2814785, 2163521,
  /* 22515 */ 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 3003201, 3027777, 2163521,
  /* 22526 */ 2163521, 2163521, 3060545, 2163521, 2163577, 2163577, 2761593, 2163577, 2782073, 2802553, 2163577,
  /* 22537 */ 2163577, 2839417, 2163577, 2163577, 2888569, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577,
  /* 22548 */ 3076985, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163521, 2806593,
  /* 22559 */ 2163577, 2806649, 2163521, 2163521, 2163521, 2163521, 2163521, 2158592, 2158592, 2158592, 2158592,
  /* 22570 */ 2158592, 2162688, 2163521, 2433857, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521,
  /* 22581 */ 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 3089217, 2163521,
  /* 22592 */ 2163521, 2163521, 2163521, 2663289, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577,
  /* 22603 */ 2163577, 2790265, 2814841, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 0, 0, 0, 0, 0,
  /* 22618 */ 0, 0, 0, 0, 0, 0, 2822144, 0, 2883584, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 22635 */ 2158592, 2158592, 2158592, 2158592, 3166208, 2158592, 2163521, 2163521, 2163521, 2163521, 2163521,
  /* 22646 */ 2163521, 887, 0, 0, 890, 2163577, 2446201, 2454393, 2163577, 2163577, 2163577, 2503545, 2544505, 2548601,
  /* 22660 */ 2163577, 2163577, 2597753, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2896761, 2478913,
  /* 22671 */ 2483009, 2163521, 2163521, 2163521, 2523969, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521,
  /* 22682 */ 2163521, 2601793, 2163521, 2163521, 2163521, 2163521, 2585409, 2163521, 2163521, 2163521, 2163521,
  /* 22693 */ 2618177, 2163521, 2163521, 2163521, 2663233, 2163521, 2163521, 2163521, 2163521, 2712385, 2163521,
  /* 22704 */ 2163521, 2163521, 2163521, 2163521, 2765633, 2163521, 2163521, 2163521, 2859841, 2880321, 0, 0, 2163577,
  /* 22717 */ 2163577, 2163577, 2478969, 2483065, 2163577, 2163577, 2163577, 2524025, 2163577, 2163577, 2163577,
  /* 22728 */ 2163577, 2163577, 2163577, 2163577, 2585465, 2163577, 2163577, 2163577, 2163577, 2618233, 2163577,
  /* 22739 */ 2163577, 2163577, 2163577, 2163577, 2601849, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577,
  /* 22750 */ 2712441, 2163577, 2163577, 2163577, 2163577, 2163577, 2765689, 3085121, 2163521, 3105601, 2163521,
  /* 22761 */ 2163521, 2163521, 3154753, 2163521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22785 */ 2163577, 2163577, 2163577, 2163577, 2495353, 2163577, 2163577, 2532217, 2163577, 2163577, 2163577,
  /* 22796 */ 2163577, 2655097, 2749305, 2831225, 2937721, 2163577, 2982777, 2163577, 2163577, 2163577, 3109753,
  /* 22807 */ 2163521, 2163577, 0, 2163577, 2163577, 2605945, 2630521, 2163577, 2163577, 2163577, 2700153, 2163577,
  /* 22819 */ 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 3101561, 0, 0, 0, 0, 0, 2854912, 0,
  /* 22834 */ 2892665, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 3036025,
  /* 22845 */ 2163577, 2163577, 3085177, 2163577, 3105657, 2158592, 2158592, 2158592, 2163521, 2163521, 2163521,
  /* 22856 */ 2163521, 2163521, 2163521, 2163521, 2163521, 2552641, 2163521, 2163521, 2163521, 2163521, 0, 0, 0, 0, 0,
  /* 22871 */ 2163577, 2433913, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163521, 2163521, 0, 0, 0,
  /* 22884 */ 2163577, 2163577, 2163521, 2163521, 2163521, 2638657, 2163521, 2163521, 2720577, 2741057, 2163521,
  /* 22895 */ 2163521, 2757441, 2818881, 2822977, 2163521, 2163521, 2917185, 2163521, 2163521, 2962241, 2163521,
  /* 22906 */ 2970433, 2163521, 2163521, 3031873, 3056449, 2163521, 2163521, 2163521, 2163521, 2163521, 3183425, 0, 0,
  /* 22919 */ 0, 0, 0, 0, 2270, 0, 0, 0, 0, 0, 2275, 2276, 0, 0, 2720633, 2741113, 2163577, 2163577, 2757497, 2818937,
  /* 22939 */ 2823033, 2163577, 2163577, 2917241, 2163577, 2163577, 2962297, 2163577, 2970489, 2163577, 0, 0, 0, 0,
  /* 22953 */ 2519040, 0, 0, 2547712, 2596864, 0, 0, 0, 0, 0, 0, 0, 2372, 0, 0, 0, 0, 0, 0, 0, 0, 1909, 0, 0, 0, 0, 0,
  /* 22980 */ 0, 0, 2163577, 3031929, 3056505, 2163577, 2163577, 2163577, 2163577, 2163577, 3183481, 2163521, 2163521,
  /* 22993 */ 2163521, 2163521, 2163577, 2163577, 2163577, 3060601, 2163577, 2163577, 2163577, 2163577, 2163577,
  /* 23004 */ 2163577, 2163577, 2163577, 3167097, 2163577, 2163521, 2163577, 2163521, 2163577, 2954049, 2954105, 0, 0,
  /* 23017 */ 0, 0, 0, 0, 0, 0, 0, 0, 569344, 0, 0, 0, 0, 0, 2158592, 2158592, 2163521, 2163521, 2163521, 2163521,
  /* 23037 */ 2163521, 2503489, 2544449, 2548545, 2163521, 2163521, 2597697, 2163521, 2163521, 2163521, 2163521,
  /* 23048 */ 2163521, 2163521, 2163521, 2163521, 2163521, 3117889, 3130177, 2425721, 2163577, 2163577, 2487161,
  /* 23059 */ 2163577, 2163577, 2163577, 2966393, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577,
  /* 23070 */ 2163521, 2163521, 2163521, 2163521, 2163577, 2163577, 2461696, 0, 0, 0, 0, 0, 0, 0, 2899968, 0, 0,
  /* 23087 */ 3117056, 0, 2686976, 2158592, 2158592, 2158592, 2425665, 2163521, 2163521, 2487105, 2163521, 2163521,
  /* 23099 */ 2163521, 2589505, 2163521, 2163521, 2687809, 2745153, 2163521, 2163521, 2163521, 2892609, 2163521,
  /* 23110 */ 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 3035969, 2163521, 2163521,
  /* 23121 */ 2163521, 2896705, 2163521, 2163521, 2966337, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521,
  /* 23132 */ 2163521, 2163577, 2163577, 2163577, 3154809, 2163577, 2442049, 2442105, 2163521, 2163521, 2163521,
  /* 23143 */ 2163521, 2163521, 2163577, 2163577, 2163577, 2163577, 2859897, 2880377, 2163577, 2163577, 2163577,
  /* 23154 */ 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 3003257, 3027833, 2163577, 2163577, 2589561,
  /* 23165 */ 2163577, 2163577, 2687865, 2745209, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577,
  /* 23176 */ 2163577, 2163577, 0, 2506752, 0, 0, 0, 0, 0, 2163577, 3117945, 3130233, 2163521, 2163521, 2163521,
  /* 23191 */ 2163577, 2163577, 2163577, 0, 2498560, 0, 0, 0, 2830336, 0, 0, 0, 0, 325, 325, 204800, 0, 0, 0, 0, 0, 0,
  /* 23213 */ 0, 0, 0, 0, 294912, 294912, 0, 294912, 294912, 294912, 2449408, 2498560, 2158592, 2748416, 2981888,
  /* 23228 */ 2748416, 0, 0, 2158592, 2163521, 2450241, 2458433, 2499393, 2163521, 2163521, 2163521, 2163521, 2163521,
  /* 23241 */ 2163521, 2163521, 3167041, 2163521, 0, 0, 0, 0, 2121728, 0, 0, 2163521, 2655041, 2749249, 2831169,
  /* 23256 */ 2937665, 2163521, 2982721, 2163521, 2163521, 2163521, 3109697, 2163577, 2450297, 2458489, 2499449,
  /* 23267 */ 2163577, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 2445312, 2453504, 0, 0, 2473984, 0, 2163521, 2556737, 2564929,
  /* 23287 */ 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 3101505, 2163577, 2556793,
  /* 23298 */ 2564985, 2593601, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163577, 2163577,
  /* 23309 */ 2593657, 2163577, 2163577, 2163577, 2163577, 2163577, 2163577, 2626425, 2163577, 2163577, 2163577,
  /* 23320 */ 2163577, 2691961, 2163577, 2708345, 2163577, 2716537, 2163577, 2163577, 2469888, 0, 2535424, 2994176, 0,
  /* 23333 */ 0, 0, 0, 2163521, 2163521, 2609985, 2163521, 2835265, 2163521, 2163521, 2691905, 2163521, 2708289,
  /* 23346 */ 2163521, 2716481, 2163521, 2163521, 2761537, 2163521, 2782017, 2802497, 2163521, 2163521, 2839361,
  /* 23357 */ 2163521, 2163521, 2995009, 2163577, 2163577, 2610041, 2163577, 2835321, 2163577, 2163577, 2163577,
  /* 23368 */ 2995065, 2527232, 0, 0, 0, 0, 0, 766, 0, 0, 0, 0, 775, 0, 0, 0, 0, 0, 0, 1130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23397 */ 1376, 0, 0, 0, 0, 0, 0, 0, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163577, 2163577,
  /* 23413 */ 2163577, 2163577, 2163577, 2163577, 0, 0, 0, 0, 0, 0, 0, 0, 2163521, 2163521, 0, 2429761, 2163521,
  /* 23430 */ 2163521, 2163521, 2163521, 2990913, 2429817, 2163577, 2163577, 2163577, 2163577, 2990969, 2539520, 0, 0,
  /* 23443 */ 0, 0, 0, 2167, 0, 0, 0, 0, 0, 0, 0, 415, 415, 2175, 2920448, 2163521, 2659137, 2941761, 2163521, 2163577,
  /* 23463 */ 2659193, 2941817, 2163577, 2641920, 2703360, 2560833, 2163521, 2560889, 2163577, 2163521, 2163521,
  /* 23474 */ 2888513, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521,
  /* 23485 */ 3076929, 2163521, 2163521, 2163521, 2163521, 2163521, 2605889, 2630465, 2163521, 2163521, 2163521,
  /* 23496 */ 2700097, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 0, 2163521, 2163577, 2163577, 2163577,
  /* 23508 */ 2163577, 2163577, 2163577, 2163577, 2163577, 2552697, 2163577, 2163577, 2163577, 2163577, 2638713,
  /* 23519 */ 2163577, 2163577, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 217088, 217088, 0, 0, 0, 0, 0, 0,
  /* 23545 */ 0, 0, 0, 0, 585728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 217088, 0, 0, 0, 0,
  /* 23574 */ 328, 0, 311, 373, 375, 0, 0, 0, 328, 0, 45056, 49152, 217088, 217088, 217088, 217088, 217088, 217088,
  /* 23592 */ 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23611 */ 0, 0, 0, 689, 0, 0, 0, 2113536, 0, 0, 0, 0, 0, 0, 57344, 0, 0, 0, 28672, 0, 0, 2662400, 0, 0, 0, 0, 333,
  /* 23638 */ 0, 334, 0, 0, 0, 0, 0, 0, 292, 334, 295, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1134, 0, 0, 0,
  /* 23668 */ 273, 0, 274, 0, 0, 0, 274, 0, 0, 0, 2478080, 0, 0, 0, 0, 0, 0, 106496, 106496, 106496, 106496, 106496,
  /* 23690 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 273, 0, 274, 0, 0,
  /* 23706 */ 0, 2490368, 0, 0, 0, 0, 0, 0, 0, 0, 2605056, 3084288, 2162688, 3104768, 2162688, 2162688, 2162688,
  /* 23723 */ 3153920, 2162688, 887, 0, 0, 0, 887, 0, 890, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 0, 0, 0, 297, 0, 0, 0, 0, 0,
  /* 23751 */ 0, 0, 0, 0, 0, 890, 0, 2162688, 2162688, 2162688, 2162688, 2494464, 2162688, 2162688, 2531328, 2162688,
  /* 23767 */ 2162688, 2162688, 2162688, 0, 0, 0, 0, 90112, 2162688, 2433024, 2162688, 2162688, 2162688, 2162688,
  /* 23781 */ 2162688, 2162688, 887, 0, 0, 890, 2162688, 2445312, 2453504, 2162688, 2162688, 2162688, 2162688, 2969600,
  /* 23795 */ 2162688, 2162688, 3031040, 3055616, 2162688, 2162688, 2162688, 2162688, 2162688, 3182592, 887, 0, 890, 0,
  /* 23809 */ 0, 0, 0, 379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 620, 0, 0, 415, 415, 0, 0, 0, 0, 221576, 0, 0, 0, 0, 0, 0,
  /* 23840 */ 0, 0, 0, 0, 0, 1158, 0, 0, 0, 0, 221618, 221618, 221618, 221618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
  /* 23867 */ 0, 415, 415, 0, 221753, 221753, 221753, 221753, 221753, 221753, 221753, 221753, 221753, 221618, 221618,
  /* 23882 */ 221767, 221767, 0, 0, 0, 0, 0, 2377, 2378, 0, 0, 0, 0, 0, 0, 0, 415, 415, 1975, 415, 415, 415, 415, 1978,
  /* 23906 */ 415, 415, 415, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 645, 0, 0, 0, 2, 3, 94212, 5, 6, 0, 0,
  /* 23936 */ 249856, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 249856, 249856, 249856,
  /* 23961 */ 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 250291, 250291, 249856,
  /* 23974 */ 250291, 250291, 250291, 250291, 249856, 250291, 250291, 250291, 250291, 250291, 250291, 250291, 250291,
  /* 23987 */ 250291, 250291, 250291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 985, 0, 0, 0, 273, 274, 0, 0, 212992, 0, 0, 0,
  /* 24014 */ 0, 0, 0, 0, 0, 0, 0, 0, 1343, 0, 0, 0, 0, 0, 241664, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 991,
  /* 24044 */ 0, 0, 0, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 258048, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 483, 491, 491, 491, 491,
  /* 24071 */ 491, 491, 491, 491, 491, 0, 491, 258484, 258484, 258484, 258484, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 0, 0, 0,
  /* 24094 */ 346, 301, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 2115, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 94212, 0,
  /* 24125 */ 6, 0, 0, 278528, 0, 0, 0, 0, 0, 0, 2105344, 273, 274, 196608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24153 */ 946176, 0, 0, 0, 253952, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1005, 0, 0, 0, 0, 2, 3, 94212,
  /* 24179 */ 2195717, 6, 0, 0, 0, 0, 265, 0, 0, 0, 0, 265, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0,
  /* 24209 */ 767, 0, 0, 0, 609, 0, 0, 0, 0, 0, 0, 0, 233472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2131, 0, 0, 0, 0, 0, 0, 437,
  /* 24239 */ 437, 437, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1033, 0, 0, 0, 0, 270336, 270336, 270336, 270336,
  /* 24263 */ 270336, 270336, 270336, 270336, 270336, 437, 437, 270773, 270773, 0, 0, 0, 0, 0, 2440, 0, 2441, 0, 0, 0,
  /* 24283 */ 2445, 0, 0, 0, 0, 0, 0, 2781184, 2887680, 0, 0, 0, 0, 0, 2887680, 0, 0, 2, 2, 3, 94212, 2195717, 6, 0, 0,
  /* 24308 */ 0, 0, 0, 0, 0, 0, 0, 2105344, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 245760, 2162688,
  /* 24324 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2584576, 2162688, 2162688,
  /* 24335 */ 2162688, 2162688, 2617344, 2162688, 2162688, 2162688, 2662400, 2162688, 2162688, 0, 0, 282624, 282624,
  /* 24348 */ 282624, 282624, 282624, 282624, 282624, 282624, 0, 0, 0, 282624, 0, 0, 0, 0, 0, 2515, 524, 524, 524, 524,
  /* 24368 */ 524, 524, 524, 524, 524, 2525, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 1974, 415, 415, 415,
  /* 24394 */ 415, 415, 415, 415, 415, 415, 1119, 415, 415, 1122, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24421 */ 0, 0, 641, 642, 0, 0, 0, 646, 0, 0, 0, 0, 1651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
  /* 24452 */ 0, 0, 1957, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1378, 1379, 0, 0, 0, 0, 0, 0, 0, 1422, 0, 0, 0, 0, 0, 0, 0,
  /* 24483 */ 0, 0, 0, 0, 1393, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 399, 0, 0, 415, 0, 524, 524, 524,
  /* 24512 */ 524, 524, 546, 524, 524, 524, 524, 524, 524, 0, 524, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2506, 0,
  /* 24534 */ 2508, 0, 0, 0, 0, 544, 544, 547, 547, 547, 547, 547, 547, 547, 547, 544, 544, 544, 547, 53503, 53503, 0,
  /* 24556 */ 0, 0, 0, 2138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1668, 0, 0, 0, 0, 53504, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0,
  /* 24587 */ 0, 0, 0, 0, 0, 686, 0, 771, 0, 0, 0, 290816, 290816, 290816, 290816, 0, 290816, 290816, 290816, 290816,
  /* 24607 */ 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 0, 0, 290816, 290816, 290816,
  /* 24621 */ 290816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1094, 415, 415, 415, 2162688, 0, 307200, 2162688, 2162688,
  /* 24643 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 273, 0,
  /* 24656 */ 0, 229376, 0, 0, 0, 0, 0, 0, 2727936, 0, 0, 0, 0, 0, 0, 2158592, 2486272, 0, 257, 3, 94212, 5, 262, 0, 0,
  /* 24681 */ 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 111024, 111024, 111024, 111024, 432, 432, 111024, 432, 432, 432, 0, 268,
  /* 24703 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 692, 368, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294912, 0,
  /* 24735 */ 0, 294912, 294912, 294912, 294912, 0, 0, 294912, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294912, 0, 0,
  /* 24759 */ 0, 0, 491, 0, 0, 0, 491, 0, 491, 491, 491, 491, 491, 491, 516, 491, 536, 536, 536, 536, 536, 559, 536,
  /* 24782 */ 536, 536, 536, 536, 536, 559, 559, 559, 559, 559, 559, 559, 559, 579, 579, 536, 590, 53503, 53503, 294912,
  /* 24802 */ 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912,
  /* 24815 */ 294912, 294912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1129, 0, 1159, 1160, 257, 257, 3, 94212, 5, 4297300,
  /* 24839 */ 0, 0, 0, 598, 0, 0, 0, 0, 0, 2105344, 2162688, 0, 257, 4297300, 0, 0, 0, 0, 0, 0, 0, 2445312, 2453504, 0,
  /* 24863 */ 0, 2473984, 0, 258, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 687, 0, 0, 691, 0, 0, 0, 269, 0, 0, 0,
  /* 24892 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 781, 783, 0, 570, 570, 570, 570, 570, 570, 570, 570, 570, 0, 0, 570, 570,
  /* 24919 */ 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 106496, 106496, 106496, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24946 */ 106496, 0, 4264531, 258, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 599, 0, 0, 0, 2105344, 2162688, 0, 968, 6, 0, 0,
  /* 24970 */ 303104, 0, 0, 0, 0, 2445312, 2453504, 0, 0, 2473984, 0, 278, 279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24996 */ 0, 1077248, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 279, 0, 0, 0, 0, 0, 0, 0, 2480, 0, 0, 0, 0, 0, 0, 0, 415, 0,
  /* 25026 */ 0, 0, 278, 0, 279, 0, 278, 278, 279, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 370,
  /* 25056 */ 372, 279, 0, 0, 0, 0, 279, 0, 377, 0, 45056, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 278, 0, 407, 409,
  /* 25083 */ 416, 416, 416, 416, 416, 416, 438, 438, 438, 438, 457, 457, 438, 457, 457, 457, 457, 482, 484, 484, 484,
  /* 25104 */ 484, 484, 484, 484, 484, 484, 484, 501, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
  /* 25125 */ 510, 484, 525, 525, 525, 525, 525, 548, 525, 525, 525, 525, 567, 567, 572, 572, 572, 572, 572, 572, 572,
  /* 25146 */ 572, 574, 574, 584, 585, 53503, 53503, 273, 274, 0, 0, 0, 0, 0, 606, 0, 0, 609, 610, 0, 0, 0, 0, 0, 0,
  /* 25171 */ 163840, 163840, 163840, 163840, 0, 0, 163840, 0, 0, 0, 0, 0, 663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 675, 0,
  /* 25197 */ 0, 0, 0, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 524, 546, 0, 0, 678,
  /* 25220 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 688, 0, 0, 0, 0, 0, 0, 188849, 188849, 188849, 188849, 0, 0, 188849, 0, 0, 0,
  /* 25246 */ 694, 0, 0, 0, 0, 0, 0, 0, 0, 0, 702, 0, 0, 0, 0, 606, 793, 0, 0, 0, 767, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25278 */ 1679, 0, 0, 0, 0, 0, 815, 816, 0, 0, 0, 0, 656, 0, 656, 0, 656, 0, 415, 415, 736, 415, 415, 415, 415, 415,
  /* 25304 */ 415, 415, 415, 415, 415, 759, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415,
  /* 25329 */ 415, 415, 415, 415, 415, 415, 825, 759, 415, 415, 415, 688, 656, 0, 524, 524, 837, 524, 524, 524, 524,
  /* 25350 */ 1215, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1224, 524, 524, 524, 524, 0, 546, 546, 546,
  /* 25371 */ 894, 546, 546, 546, 546, 546, 546, 546, 920, 546, 925, 546, 255, 2, 6, 0, 0, 0, 0, 971, 975, 0, 0, 0, 0,
  /* 25396 */ 0, 0, 437, 437, 437, 437, 0, 0, 437, 0, 0, 0, 524, 524, 955, 871, 524, 524, 0, 524, 546, 546, 894, 546,
  /* 25420 */ 546, 964, 928, 546, 546, 940, 546, 546, 524, 945, 0, 0, 0, 546, 949, 524, 524, 837, 546, 53503, 2, 6, 0,
  /* 25443 */ 0, 0, 0, 970, 974, 0, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2373, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25474 */ 1369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1081344, 0, 0, 0, 0, 1386, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25505 */ 0, 0, 1364, 0, 0, 0, 0, 1399, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1007, 0, 1461, 415, 0, 0, 0, 0, 0,
  /* 25536 */ 0, 0, 0, 0, 0, 0, 1471, 0, 1473, 0, 0, 1475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1484, 1485, 0, 0, 1486,
  /* 25565 */ 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 1495, 415, 415, 415, 415, 415, 827, 415, 830, 0, 0, 812, 524,
  /* 25588 */ 524, 524, 841, 524, 0, 0, 546, 546, 524, 524, 524, 524, 524, 524, 524, 524, 524, 546, 546, 0, 2362, 0, 0,
  /* 25611 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 415, 415, 1499, 415, 415, 1174, 524, 524, 524, 524, 524, 524,
  /* 25637 */ 524, 524, 524, 524, 1206, 524, 524, 524, 524, 524, 524, 1513, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 25658 */ 524, 524, 524, 524, 524, 886, 524, 1637, 524, 524, 524, 546, 546, 546, 546, 546, 1645, 546, 546, 546, 0,
  /* 25679 */ 1649, 0, 1651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536576, 0, 0, 0, 0, 0, 1651, 0, 0, 0, 0, 0, 0, 0,
  /* 25710 */ 0, 1656, 0, 0, 0, 0, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 25727 */ 159744, 159744, 159744, 159744, 159744, 159744, 0, 1710, 0, 0, 0, 0, 0, 1416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25750 */ 1028096, 0, 0, 0, 0, 0, 0, 1735, 1736, 415, 415, 415, 415, 415, 415, 415, 415, 1743, 415, 415, 415, 415,
  /* 25772 */ 415, 0, 0, 0, 415, 524, 524, 524, 524, 2451, 524, 524, 0, 1755, 0, 0, 1766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25799 */ 0, 1704, 0, 0, 0, 0, 1754, 415, 415, 1777, 415, 415, 415, 415, 415, 415, 415, 415, 415, 524, 524, 524,
  /* 25821 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1787, 524, 1789, 524, 524, 524, 1792, 524,
  /* 25841 */ 524, 524, 524, 524, 524, 524, 524, 0, 0, 0, 2046, 0, 1564, 0, 0, 0, 0, 546, 546, 546, 546, 1848, 546,
  /* 25864 */ 1850, 546, 546, 546, 1853, 546, 546, 546, 524, 524, 524, 546, 546, 546, 0, 0, 0, 0, 2435, 0, 0, 524, 524,
  /* 25887 */ 1897, 524, 524, 524, 524, 524, 546, 546, 1902, 546, 546, 546, 546, 546, 546, 1874, 546, 546, 546, 546,
  /* 25907 */ 546, 546, 546, 546, 546, 1298, 546, 546, 546, 546, 546, 524, 546, 546, 2088, 546, 546, 524, 546, 524, 524,
  /* 25928 */ 524, 524, 524, 546, 546, 546, 546, 546, 546, 546, 546, 575, 575, 575, 586, 53503, 53503, 2176, 415, 415,
  /* 25948 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 884, 524, 524, 2511, 0, 0, 2514, 0, 524,
  /* 25970 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 546, 2581, 546, 546, 546, 546, 546, 546, 2541, 0, 524, 524,
  /* 25991 */ 524, 524, 524, 524, 524, 524, 524, 524, 546, 546, 546, 546, 546, 546, 2352, 546, 546, 546, 524, 524, 524,
  /* 26012 */ 524, 546, 546, 0, 0, 0, 280, 281, 282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 701, 0, 0, 0, 0, 0, 0, 0, 0, 371, 0,
  /* 26042 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 0, 384, 0, 40960, 0, 0, 384, 0, 0, 0, 0, 0, 0, 371, 415, 415,
  /* 26070 */ 415, 415, 415, 1105, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1456, 415, 415, 415, 371,
  /* 26091 */ 371, 511, 371, 524, 524, 524, 524, 524, 546, 524, 524, 524, 524, 524, 524, 524, 2579, 546, 546, 546, 546,
  /* 26112 */ 546, 546, 546, 546, 2534, 0, 0, 0, 0, 0, 0, 0, 0, 1420, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1035, 0,
  /* 26142 */ 0, 0, 524, 524, 524, 524, 2547, 524, 2549, 524, 2551, 524, 546, 546, 546, 546, 546, 546, 2504, 546, 546,
  /* 26163 */ 0, 0, 0, 0, 0, 0, 0, 1374, 0, 0, 0, 0, 0, 0, 0, 0, 981, 0, 0, 0, 0, 0, 0, 0, 2557, 546, 2559, 546, 2561,
  /* 26192 */ 546, 0, 0, 0, 0, 0, 0, 0, 0, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2524, 546, 0, 288, 385, 386,
  /* 26216 */ 40960, 386, 393, 385, 386, 393, 283, 393, 0, 393, 410, 417, 417, 417, 417, 417, 417, 439, 439, 439, 454,
  /* 26237 */ 458, 458, 469, 458, 458, 458, 458, 458, 485, 485, 485, 498, 498, 499, 499, 499, 499, 499, 485, 499, 499,
  /* 26258 */ 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 512, 499, 526, 526, 526, 526, 526, 549, 526, 526,
  /* 26279 */ 526, 526, 526, 526, 549, 549, 549, 549, 549, 549, 549, 549, 576, 576, 576, 587, 53503, 53503, 524, 524,
  /* 26299 */ 524, 872, 524, 524, 0, 524, 546, 546, 546, 546, 546, 546, 929, 546, 546, 546, 546, 546, 524, 524, 0, 0, 0,
  /* 26322 */ 546, 546, 524, 524, 524, 524, 524, 1236, 887, 91351, 1174, 890, 546, 546, 546, 546, 546, 1251, 0, 1023,
  /* 26342 */ 986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1114112, 0, 0, 0, 1127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26374 */ 0, 0, 2158592, 2158592, 2158592, 1127, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 26394 */ 0, 0, 1125, 1174, 1175, 1177, 524, 524, 524, 524, 1185, 524, 1190, 524, 524, 524, 524, 524, 1196, 1252,
  /* 26414 */ 546, 1257, 546, 546, 546, 546, 546, 1263, 546, 546, 546, 546, 546, 546, 546, 1276, 546, 546, 546, 546,
  /* 26434 */ 546, 546, 546, 546, 2081, 546, 546, 546, 546, 546, 546, 546, 0, 0, 0, 1341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26460 */ 0, 0, 1429, 0, 0, 0, 0, 1435, 0, 0, 1438, 0, 415, 415, 415, 415, 415, 415, 1445, 415, 415, 415, 415, 415,
  /* 26484 */ 415, 0, 0, 0, 0, 0, 1758, 1759, 0, 0, 0, 0, 0, 770, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415,
  /* 26511 */ 415, 975263, 1782, 415, 415, 1081759, 1784, 524, 524, 524, 524, 524, 1515, 524, 524, 524, 524, 524, 524,
  /* 26530 */ 524, 524, 524, 524, 1523, 524, 0, 0, 546, 546, 524, 524, 524, 524, 1312, 524, 524, 524, 524, 546, 546,
  /* 26551 */ 546, 1322, 546, 546, 1325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 988, 0, 0, 0, 0, 0, 0, 546, 1592, 546, 546, 546,
  /* 26577 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1268, 546, 1608, 1609, 546, 546, 546, 546, 546,
  /* 26597 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 1283, 546, 0, 0, 0, 2165, 0, 0, 0, 0, 2170, 0, 0, 0, 2173,
  /* 26621 */ 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 371, 371, 384, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
  /* 26644 */ 371, 371, 371, 371, 371, 371, 415, 2177, 415, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 26665 */ 524, 885, 524, 524, 546, 546, 2221, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1589,
  /* 26686 */ 546, 546, 2242, 0, 0, 0, 2246, 0, 0, 0, 0, 0, 0, 2250, 0, 0, 0, 0, 0, 0, 250291, 250291, 250291, 250291,
  /* 26710 */ 249856, 249856, 250291, 249856, 249856, 249856, 524, 2320, 2321, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 26727 */ 524, 524, 524, 546, 546, 546, 546, 2062, 546, 546, 546, 2065, 2066, 546, 546, 546, 546, 546, 546, 1862,
  /* 26747 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 1618, 546, 546, 546, 546, 546, 546, 0, 2375, 0, 0, 0, 0, 0,
  /* 26770 */ 0, 0, 0, 0, 0, 0, 0, 415, 415, 2289, 415, 415, 415, 415, 0, 0, 524, 524, 524, 2546, 524, 524, 524, 524,
  /* 26794 */ 524, 524, 546, 546, 546, 2556, 0, 524, 524, 524, 2637, 546, 546, 546, 2639, 0, 0, 524, 524, 546, 546, 524,
  /* 26816 */ 0, 0, 546, 546, 524, 524, 524, 1203, 524, 524, 524, 524, 524, 546, 546, 546, 2501, 546, 546, 546, 546,
  /* 26837 */ 546, 0, 2507, 0, 0, 876544, 0, 0, 0, 0, 0, 2928640, 0, 0, 0, 2158592, 2158592, 2158592, 2547712, 2158592,
  /* 26857 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2162688, 2162688, 2162688, 2162688, 2494464,
  /* 26868 */ 2162688, 2162688, 2531328, 2162688, 0, 0, 0, 291, 359, 0, 0, 291, 0, 0, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
  /* 26893 */ 0, 0, 0, 0, 0, 335, 0, 40960, 0, 0, 335, 0, 0, 395, 0, 400, 408, 411, 418, 418, 418, 418, 418, 418, 440,
  /* 26918 */ 440, 440, 440, 459, 459, 470, 459, 459, 459, 459, 459, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
  /* 26939 */ 486, 486, 486, 486, 486, 486, 486, 486, 418, 486, 527, 527, 527, 527, 527, 550, 527, 527, 527, 527, 527,
  /* 26960 */ 527, 550, 550, 550, 550, 550, 550, 550, 550, 527, 527, 527, 550, 53503, 53503, 749, 415, 415, 415, 415,
  /* 26980 */ 415, 415, 415, 0, 0, 0, 524, 524, 524, 524, 524, 524, 524, 2550, 524, 2552, 546, 546, 546, 546, 524, 524,
  /* 27002 */ 854, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1208, 524, 524, 0, 546, 546, 546,
  /* 27023 */ 546, 546, 546, 546, 546, 911, 546, 546, 546, 546, 546, 546, 524, 524, 0, 0, 0, 546, 546, 950, 524, 524,
  /* 27045 */ 854, 524, 524, 524, 524, 524, 0, 524, 546, 546, 546, 911, 546, 546, 546, 546, 546, 546, 2563, 2564, 0, 0,
  /* 27067 */ 0, 0, 0, 0, 2571, 524, 0, 0, 996, 0, 998, 0, 0, 1000, 1001, 0, 0, 0, 0, 0, 0, 0, 631, 0, 0, 0, 0, 0, 0, 0,
  /* 27097 */ 0, 0, 0, 0, 0, 644, 0, 0, 0, 0, 0, 1011, 0, 0, 0, 0, 0, 0, 325, 325, 0, 0, 1020, 0, 0, 0, 0, 546, 546,
  /* 27126 */ 546, 546, 546, 546, 546, 546, 546, 546, 2057, 546, 546, 938, 546, 546, 546, 834, 524, 0, 0, 0, 891, 546,
  /* 27148 */ 834, 524, 524, 524, 524, 1564, 1566, 91351, 1569, 1566, 546, 546, 546, 546, 546, 546, 546, 1295, 546, 546,
  /* 27168 */ 546, 546, 546, 546, 546, 524, 524, 546, 546, 524, 524, 1635, 524, 524, 0, 1038, 0, 1040, 0, 0, 0, 0, 0, 0,
  /* 27192 */ 0, 0, 0, 0, 0, 0, 1482, 0, 0, 0, 415, 1113, 415, 415, 1115, 415, 415, 415, 415, 415, 415, 1121, 415, 1123,
  /* 27216 */ 0, 0, 0, 0, 0, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  /* 27232 */ 163840, 163840, 163840, 163840, 163840, 1136, 1137, 0, 1139, 0, 991, 0, 1143, 0, 0, 0, 0, 0, 1001, 0, 0,
  /* 27253 */ 0, 0, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
  /* 27268 */ 167936, 167936, 167936, 167936, 0, 0, 0, 1123, 0, 0, 0, 1155, 1000, 0, 0, 0, 0, 0, 0, 0, 653, 0, 653, 0,
  /* 27292 */ 0, 0, 415, 415, 415, 1174, 1176, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1194, 524, 524, 524,
  /* 27313 */ 524, 524, 1516, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1524, 1210, 524, 1212, 524, 524, 524, 524,
  /* 27333 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 1539, 1540, 524, 524, 1232, 524, 524, 524, 524, 887, 91351,
  /* 27353 */ 1174, 890, 1243, 546, 546, 546, 546, 546, 546, 2064, 546, 546, 546, 546, 546, 546, 546, 546, 546, 524,
  /* 27373 */ 524, 2237, 524, 546, 546, 2241, 0, 0, 0, 0, 1402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1715, 0, 0, 0, 0, 415,
  /* 27401 */ 415, 415, 415, 1501, 1174, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1536, 524, 524, 524, 524,
  /* 27421 */ 524, 524, 524, 524, 1640, 546, 546, 546, 546, 546, 546, 546, 546, 1648, 0, 1649, 0, 1651, 0, 0, 1907, 0,
  /* 27443 */ 0, 0, 0, 0, 0, 1913, 0, 0, 0, 0, 0, 769, 0, 0, 0, 0, 0, 0, 812, 0, 649, 0, 0, 0, 0, 0, 1651, 0, 0, 0, 0,
  /* 27474 */ 0, 1654, 0, 0, 0, 0, 0, 0, 1027, 0, 0, 0, 0, 1032, 0, 1034, 0, 0, 0, 0, 0, 0, 1685, 0, 0, 0, 0, 0, 0, 0,
  /* 27504 */ 0, 0, 0, 0, 1731, 0, 0, 415, 415, 524, 524, 1788, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 27527 */ 524, 524, 1555, 524, 524, 524, 524, 524, 1828, 524, 1830, 524, 524, 524, 0, 0, 0, 0, 1566, 0, 0, 0, 0, 0,
  /* 27551 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 27564 */ 172032, 172032, 172032, 0, 0, 546, 546, 546, 546, 546, 1849, 546, 546, 546, 546, 546, 546, 546, 546, 1585,
  /* 27584 */ 546, 546, 546, 546, 546, 546, 546, 0, 0, 1970, 1971, 0, 1973, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 27606 */ 415, 415, 1744, 415, 1745, 1746, 415, 546, 546, 2075, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 27626 */ 546, 546, 546, 1605, 546, 546, 0, 2110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1083, 0, 0, 0, 0, 2153,
  /* 27654 */ 415, 415, 415, 415, 2158, 415, 415, 415, 415, 415, 415, 415, 524, 524, 2006, 2007, 524, 524, 524, 524,
  /* 27674 */ 524, 0, 2255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1133, 0, 2429, 546, 546, 524, 524, 524, 546, 546,
  /* 27701 */ 546, 0, 0, 0, 0, 0, 0, 0, 2104, 0, 0, 0, 0, 0, 0, 0, 546, 2527, 546, 546, 546, 546, 546, 546, 546, 0, 0,
  /* 27728 */ 0, 0, 0, 0, 0, 0, 524, 524, 546, 2558, 546, 546, 546, 546, 0, 0, 0, 0, 0, 0, 0, 0, 524, 524, 524, 524,
  /* 27754 */ 524, 524, 293, 294, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2478080, 0, 0, 0, 0, 40960, 0,
  /* 27781 */ 0, 0, 295, 294, 0, 0, 401, 294, 412, 419, 419, 419, 419, 419, 419, 441, 451, 441, 441, 460, 460, 441, 460,
  /* 27804 */ 460, 475, 477, 460, 460, 475, 460, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 502, 487, 487, 487,
  /* 27825 */ 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 419, 487, 528, 528, 528, 528, 528, 551, 528, 528, 528,
  /* 27846 */ 528, 528, 528, 551, 551, 551, 551, 551, 551, 551, 551, 528, 528, 528, 551, 53503, 53503, 0, 616, 617, 0,
  /* 27867 */ 0, 0, 0, 0, 0, 0, 0, 626, 0, 0, 0, 0, 0, 0, 258484, 258484, 258484, 258484, 258484, 258484, 258484,
  /* 27888 */ 258484, 258484, 258484, 258484, 258484, 258484, 258484, 258484, 258484, 0, 0, 0, 634, 635, 0, 0, 0, 0,
  /* 27906 */ 640, 0, 0, 0, 0, 0, 0, 283, 284, 285, 286, 287, 288, 289, 0, 0, 0, 0, 0, 679, 0, 0, 0, 683, 0, 0, 0, 0, 0,
  /* 27935 */ 0, 0, 0, 693, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1049, 0, 0, 0, 0, 0, 696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27968 */ 0, 0, 0, 0, 2617344, 0, 415, 738, 415, 415, 746, 415, 752, 415, 755, 415, 758, 415, 415, 415, 415, 0, 0,
  /* 27991 */ 0, 0, 0, 0, 0, 0, 0, 0, 1470, 0, 0, 0, 0, 0, 817, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 0, 0,
  /* 28021 */ 0, 0, 983040, 0, 0, 0, 0, 415, 0, 524, 544, 544, 544, 524, 547, 544, 544, 544, 544, 544, 544, 0, 0, 0,
  /* 28045 */ 780, 0, 0, 0, 0, 0, 0, 732, 0, 772, 0, 791, 0, 0, 0, 0, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2056,
  /* 28071 */ 546, 546, 546, 1627, 546, 546, 546, 524, 524, 546, 546, 524, 524, 524, 524, 524, 524, 2202, 524, 524, 524,
  /* 28092 */ 524, 524, 0, 0, 0, 0, 0, 0, 0, 780, 0, 659, 0, 0, 799, 0, 0, 0, 0, 0, 799, 799, 802, 0, 0, 0, 0, 732, 0,
  /* 28121 */ 0, 0, 0, 0, 811, 0, 0, 0, 0, 0, 0, 290816, 290816, 290816, 290816, 0, 0, 290816, 0, 0, 0, 415, 415, 415,
  /* 28145 */ 415, 826, 415, 415, 415, 791, 811, 0, 524, 524, 524, 840, 524, 0, 0, 546, 546, 524, 524, 524, 1205, 524,
  /* 28167 */ 524, 524, 524, 524, 546, 546, 546, 807436, 524, 524, 807458, 546, 546, 0, 0, 0, 0, 0, 0, 0, 798, 0, 792,
  /* 28190 */ 0, 687, 0, 0, 0, 0, 524, 851, 524, 860, 524, 864, 524, 524, 870, 873, 877, 524, 524, 524, 524, 524, 524,
  /* 28213 */ 1831, 524, 524, 0, 0, 0, 0, 1566, 0, 0, 0, 546, 546, 546, 546, 897, 546, 546, 908, 546, 917, 546, 921,
  /* 28236 */ 546, 546, 927, 930, 934, 546, 546, 546, 546, 524, 524, 0, 0, 0, 546, 546, 524, 951, 524, 0, 0, 546, 546,
  /* 28259 */ 524, 524, 1181, 524, 524, 524, 1221, 524, 524, 546, 546, 546, 1611, 546, 546, 546, 546, 546, 546, 546,
  /* 28279 */ 546, 546, 546, 546, 546, 1267, 546, 546, 546, 524, 524, 524, 956, 877, 524, 0, 524, 546, 960, 546, 546,
  /* 28300 */ 546, 546, 965, 934, 994, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1006, 0, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 0,
  /* 28329 */ 0, 0, 0, 0, 0, 619, 0, 619, 0, 0, 0, 1009, 1010, 0, 0, 0, 1013, 0, 0, 0, 0, 325, 325, 0, 0, 0, 0, 0, 0,
  /* 28358 */ 471040, 0, 2442, 2443, 0, 0, 0, 0, 0, 0, 767, 0, 0, 0, 0, 0, 0, 628, 0, 0, 1037, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28387 */ 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 0, 0, 1055, 693, 0, 0, 0, 0, 0, 0, 1006, 0, 0, 0, 0, 0, 0, 1059, 0, 0,
  /* 28417 */ 0, 0, 0, 0, 0, 1068, 0, 1174, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1191, 524, 524, 524, 1195, 524,
  /* 28440 */ 0, 0, 546, 546, 524, 524, 1182, 524, 524, 524, 524, 1315, 524, 546, 546, 546, 1859, 1860, 546, 546, 546,
  /* 28461 */ 546, 546, 546, 546, 546, 546, 546, 546, 2472, 546, 546, 524, 546, 0, 524, 524, 524, 1234, 524, 524, 887,
  /* 28482 */ 91351, 1174, 890, 546, 546, 546, 546, 546, 546, 524, 524, 0, 0, 692, 546, 546, 524, 524, 524, 1338, 0,
  /* 28503 */ 1340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1350, 0, 0, 0, 0, 0, 1042, 0, 1044, 0, 0, 0, 0, 0, 0, 0, 0, 1701, 0, 0,
  /* 28533 */ 0, 0, 0, 0, 0, 0, 0, 1354, 0, 1356, 1357, 0, 1359, 1360, 0, 0, 1363, 0, 0, 0, 0, 0, 0, 581632, 0, 0, 1713,
  /* 28560 */ 0, 0, 0, 0, 0, 0, 774, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 1443, 415, 415, 415, 415, 415, 0, 0, 1411, 0,
  /* 28587 */ 0, 1414, 0, 0, 1416, 0, 0, 0, 0, 0, 0, 0, 712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1702, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28619 */ 1437, 0, 0, 415, 1439, 1440, 415, 415, 415, 415, 415, 1446, 415, 415, 415, 415, 415, 1116, 1117, 415, 415,
  /* 28640 */ 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 2288, 415, 415, 415, 2291, 415, 415, 1448, 415, 415,
  /* 28664 */ 415, 415, 1452, 415, 415, 415, 1454, 415, 415, 415, 415, 415, 0, 0, 0, 415, 2450, 524, 524, 524, 524, 524,
  /* 28686 */ 524, 887, 91351, 1174, 890, 546, 546, 546, 546, 546, 1249, 0, 1468, 0, 0, 0, 1488, 1340, 1340, 1490, 415,
  /* 28707 */ 415, 1452, 415, 1494, 415, 415, 0, 0, 0, 2297, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 1444, 415,
  /* 28731 */ 415, 415, 415, 1497, 415, 415, 415, 415, 1174, 1502, 524, 1503, 524, 1505, 524, 524, 524, 524, 524, 524,
  /* 28751 */ 2031, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2205, 524, 524, 0, 0, 0, 0, 524, 524, 1514, 524, 524,
  /* 28773 */ 524, 524, 1518, 524, 524, 524, 1521, 524, 524, 524, 524, 0, 0, 91351, 0, 0, 546, 546, 546, 546, 546, 546,
  /* 28795 */ 546, 1851, 546, 546, 546, 546, 546, 1856, 524, 524, 1527, 1529, 524, 524, 524, 524, 1534, 1535, 524, 1537,
  /* 28815 */ 1538, 524, 524, 524, 524, 524, 1531, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1833, 0, 0, 0,
  /* 28836 */ 1566, 1839, 0, 524, 524, 524, 1545, 524, 1547, 524, 524, 524, 524, 524, 524, 1554, 524, 524, 524, 524,
  /* 28856 */ 524, 1804, 1805, 524, 1807, 524, 524, 524, 524, 524, 524, 524, 1550, 1551, 524, 524, 524, 524, 524, 524,
  /* 28876 */ 524, 1806, 524, 524, 524, 524, 524, 524, 524, 524, 0, 0, 1837, 0, 0, 0, 0, 0, 524, 524, 524, 1561, 0,
  /* 28899 */ 1566, 91351, 0, 1566, 1571, 546, 1572, 546, 1574, 546, 546, 546, 546, 2231, 546, 546, 546, 546, 524, 2236,
  /* 28919 */ 524, 524, 546, 2240, 546, 1538, 524, 1639, 524, 1641, 546, 546, 1598, 1644, 1607, 546, 1647, 546, 0, 1649,
  /* 28939 */ 0, 0, 0, 0, 546, 546, 546, 546, 546, 546, 546, 546, 2055, 546, 546, 546, 546, 1260, 546, 546, 546, 546,
  /* 28961 */ 546, 546, 546, 546, 546, 546, 546, 2083, 546, 546, 546, 546, 0, 0, 0, 0, 1651, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28987 */ 0, 1658, 1659, 0, 0, 0, 1663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1938, 0, 0, 0, 0, 0, 1695, 0, 1696, 0, 0,
  /* 29016 */ 0, 1700, 0, 0, 0, 0, 0, 0, 0, 0, 695, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 1739, 415, 415, 415,
  /* 29042 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1111, 415, 1112, 0, 1659, 0, 1765, 0, 0, 0, 0, 0, 0, 0,
  /* 29066 */ 0, 0, 0, 1775, 0, 0, 0, 0, 546, 546, 546, 546, 546, 546, 2054, 546, 546, 546, 546, 2058, 524, 524, 1814,
  /* 29089 */ 1815, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 0, 0, 0, 0, 1566, 0, 0, 546, 1858, 546,
  /* 29112 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1303, 524, 0, 0, 1917, 0, 0, 0, 0, 0, 0,
  /* 29136 */ 0, 0, 0, 0, 0, 0, 0, 0, 2723840, 0, 1942, 1943, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368640, 0, 0, 0, 0,
  /* 29165 */ 546, 546, 2051, 2052, 546, 546, 546, 546, 546, 546, 546, 546, 1296, 546, 546, 546, 546, 546, 546, 524, 0,
  /* 29186 */ 0, 1956, 0, 0, 0, 0, 0, 0, 0, 0, 1963, 0, 0, 0, 0, 0, 0, 2433024, 2158592, 2158592, 2158592, 2158592,
  /* 29208 */ 2158592, 2158592, 2584576, 2158592, 2158592, 415, 415, 415, 1983, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0,
  /* 29227 */ 0, 0, 0, 0, 0, 0, 0, 1472, 0, 0, 0, 1015808, 1015808, 0, 0, 524288, 1942, 0, 0, 0, 0, 835584, 0, 0,
  /* 29251 */ 369055, 524, 2012, 524, 2014, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2024, 524, 2026, 524,
  /* 29271 */ 2028, 524, 524, 524, 2032, 524, 524, 524, 524, 2037, 524, 524, 524, 524, 524, 1900, 524, 524, 546, 546,
  /* 29291 */ 546, 546, 546, 1905, 546, 546, 524, 524, 524, 2041, 1016332, 524, 524, 524, 0, 2045, 0, 0, 0, 0, 0, 2047,
  /* 29313 */ 2059, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2069, 546, 2071, 546, 546, 939, 546, 546,
  /* 29333 */ 546, 524, 524, 0, 0, 0, 546, 546, 524, 524, 524, 524, 524, 2323, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 29355 */ 546, 546, 2073, 546, 546, 546, 2077, 546, 546, 546, 546, 2082, 546, 546, 546, 546, 546, 546, 524, 524, 0,
  /* 29376 */ 0, 184320, 546, 546, 524, 524, 524, 2086, 1016354, 546, 546, 546, 524, 546, 369164, 524, 524, 524, 524,
  /* 29395 */ 369186, 546, 546, 546, 524, 524, 524, 546, 546, 546, 0, 0, 2433, 0, 0, 0, 2436, 2122, 0, 0, 0, 0, 0, 0, 0,
  /* 29420 */ 0, 0, 0, 2133, 0, 0, 0, 0, 0, 0, 2490368, 0, 0, 0, 0, 0, 0, 0, 0, 2605056, 0, 0, 0, 0, 2166, 0, 0, 2169,
  /* 29448 */ 0, 0, 0, 0, 0, 415, 415, 415, 415, 1976, 415, 415, 415, 415, 415, 415, 2199, 524, 524, 524, 524, 524, 524,
  /* 29471 */ 524, 524, 524, 524, 524, 2045, 0, 2047, 0, 0, 0, 0, 546, 2050, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 29493 */ 546, 546, 1299, 546, 546, 546, 546, 524, 0, 0, 0, 2257, 0, 0, 0, 0, 0, 0, 0, 0, 2264, 2265, 0, 2266, 0,
  /* 29518 */ 913408, 0, 0, 0, 2269, 0, 2271, 0, 0, 0, 671744, 0, 0, 0, 0, 0, 0, 2650112, 0, 2785280, 0, 0, 0, 0, 0, 0,
  /* 29544 */ 3133440, 2293, 415, 2295, 0, 2296, 0, 0, 0, 0, 483328, 0, 0, 2303, 415, 415, 415, 415, 415, 415, 0, 0, 0,
  /* 29567 */ 806912, 0, 0, 0, 0, 0, 807327, 2306, 415, 524, 524, 524, 2311, 524, 524, 524, 524, 524, 524, 524, 2316,
  /* 29588 */ 524, 524, 524, 524, 1235, 524, 887, 91351, 1174, 890, 546, 546, 1245, 546, 546, 546, 546, 1612, 546, 546,
  /* 29608 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 1878, 546, 546, 546, 546, 546, 2319, 524, 524, 524, 524, 524,
  /* 29629 */ 524, 2324, 2326, 524, 524, 2329, 524, 2331, 546, 546, 546, 546, 2420, 546, 546, 546, 546, 2423, 546, 546,
  /* 29649 */ 546, 546, 546, 546, 546, 2421, 546, 546, 546, 546, 2426, 546, 546, 546, 546, 2335, 546, 546, 546, 546,
  /* 29669 */ 546, 546, 546, 2340, 546, 546, 2343, 546, 546, 546, 524, 524, 918028, 546, 546, 918050, 2432, 0, 0, 2434,
  /* 29689 */ 0, 0, 0, 0, 0, 1074, 0, 0, 0, 1078, 0, 0, 0, 0, 0, 0, 0, 2727936, 0, 0, 0, 0, 0, 0, 2158592, 2486272, 546,
  /* 29716 */ 2361, 0, 0, 0, 0, 2365, 0, 0, 2367, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 0,
  /* 29743 */ 700416, 1024000, 0, 0, 0, 0, 0, 0, 2381, 0, 0, 0, 415, 415, 1099, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 29766 */ 415, 415, 0, 0, 0, 524, 524, 524, 524, 848, 415, 415, 415, 524, 524, 2396, 524, 524, 524, 524, 524, 524,
  /* 29788 */ 524, 524, 524, 524, 2035, 524, 524, 524, 524, 2039, 2404, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 29808 */ 524, 546, 546, 2414, 546, 546, 546, 1273, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1281, 546, 546,
  /* 29828 */ 546, 546, 2089, 524, 546, 524, 524, 524, 524, 524, 546, 546, 546, 546, 546, 1613, 546, 546, 546, 546, 546,
  /* 29849 */ 546, 546, 546, 546, 546, 1619, 1620, 546, 546, 546, 546, 0, 524, 524, 524, 524, 2489, 524, 524, 524, 524,
  /* 29870 */ 524, 524, 524, 546, 546, 546, 524, 2430, 524, 546, 2431, 546, 0, 0, 0, 0, 0, 0, 0, 1015, 0, 0, 325, 325,
  /* 29894 */ 0, 1019, 0, 0, 546, 2499, 546, 546, 546, 546, 546, 546, 546, 0, 0, 0, 0, 0, 0, 2510, 0, 0, 524, 524, 2545,
  /* 29919 */ 524, 524, 524, 524, 524, 524, 524, 546, 546, 2555, 546, 546, 1289, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 29940 */ 546, 546, 546, 546, 524, 524, 2357, 524, 546, 546, 524, 2573, 524, 2575, 524, 524, 524, 524, 2580, 546,
  /* 29960 */ 546, 2582, 546, 2584, 546, 546, 546, 1290, 546, 546, 546, 1293, 546, 546, 546, 546, 546, 546, 546, 524,
  /* 29980 */ 524, 546, 546, 524, 524, 524, 524, 524, 0, 524, 2611, 524, 524, 524, 2615, 546, 2617, 546, 546, 546, 2621,
  /* 30001 */ 0, 0, 0, 0, 0, 1090, 1091, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 1781, 415, 415, 415, 415, 415,
  /* 30026 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2188, 524, 524, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30052 */ 0, 0, 0, 1655, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 329, 0, 0, 0, 0, 0, 0, 0, 811, 780, 0, 780, 0, 0, 415,
  /* 30082 */ 820, 415, 0, 0, 338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 291, 0, 0, 0, 329, 0, 0, 0, 0, 0, 0, 376,
  /* 30113 */ 0, 329, 0, 376, 45056, 49152, 0, 329, 0, 387, 40960, 387, 387, 296, 387, 387, 0, 387, 0, 387, 387, 420,
  /* 30135 */ 387, 529, 529, 529, 529, 529, 552, 529, 529, 529, 529, 529, 529, 420, 420, 420, 420, 420, 420, 0, 0, 0,
  /* 30157 */ 329, 387, 467, 471, 467, 467, 476, 467, 467, 467, 476, 467, 387, 387, 387, 387, 387, 387, 387, 387, 387,
  /* 30178 */ 387, 387, 387, 387, 387, 387, 387, 529, 529, 552, 552, 552, 552, 552, 552, 552, 552, 529, 529, 529, 552,
  /* 30199 */ 53503, 53503, 0, 695, 0, 695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1149, 0, 524, 524, 855, 524, 524,
  /* 30226 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1811, 524, 524, 0, 546, 546, 546, 546, 546, 546,
  /* 30247 */ 546, 546, 912, 546, 546, 546, 546, 546, 546, 546, 2234, 546, 524, 524, 524, 524, 546, 546, 546, 855, 524,
  /* 30268 */ 524, 524, 524, 524, 0, 950, 959, 546, 546, 912, 546, 546, 546, 546, 546, 943, 524, 524, 0, 0, 0, 546, 546,
  /* 30291 */ 524, 524, 524, 0, 0, 1087, 0, 0, 0, 0, 0, 0, 0, 0, 987, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 30316 */ 415, 415, 415, 524, 524, 1786, 415, 1100, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 30337 */ 415, 415, 1747, 0, 0, 0, 0, 1140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2117, 0, 0, 0, 0, 1174, 524, 524, 524,
  /* 30365 */ 524, 524, 524, 1186, 524, 524, 524, 524, 524, 524, 524, 524, 0, 2045, 0, 0, 0, 0, 0, 2047, 1253, 546, 546,
  /* 30388 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1304, 0, 0, 0, 1476, 0, 0, 0, 0, 0,
  /* 30412 */ 0, 0, 0, 0, 0, 0, 0, 1680, 0, 0, 0, 0, 1682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1381, 0, 1870, 546,
  /* 30443 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2072, 0, 0, 1931, 0, 0, 0, 0, 0, 0,
  /* 30467 */ 0, 0, 0, 0, 0, 0, 0, 352, 0, 0, 415, 415, 1982, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 1991, 0,
  /* 30494 */ 2610, 524, 524, 524, 524, 524, 2616, 546, 546, 546, 546, 546, 0, 0, 0, 0, 0, 0, 2103, 0, 0, 0, 0, 0, 2108,
  /* 30519 */ 0, 0, 0, 2636, 524, 524, 524, 2638, 546, 546, 546, 0, 0, 524, 524, 546, 546, 524, 0, 0, 546, 546, 524,
  /* 30542 */ 524, 1184, 524, 524, 524, 524, 524, 524, 546, 546, 546, 2529, 546, 2531, 2532, 2533, 546, 0, 0, 0, 0, 0,
  /* 30564 */ 0, 0, 1028, 0, 0, 0, 0, 0, 0, 0, 0, 685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30597 */ 0, 0, 1691, 1692, 0, 0, 0, 0, 0, 388, 40960, 388, 388, 0, 388, 388, 0, 388, 402, 388, 388, 421, 421, 421,
  /* 30621 */ 421, 421, 421, 442, 442, 442, 442, 461, 461, 442, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461,
  /* 30642 */ 461, 461, 461, 461, 461, 461, 461, 421, 461, 530, 530, 530, 530, 530, 553, 530, 530, 530, 530, 530, 530,
  /* 30663 */ 553, 553, 553, 553, 553, 553, 553, 553, 530, 530, 530, 553, 53503, 53503, 546, 53503, 2, 6, 0, 0, 0, 0,
  /* 30685 */ 971, 975, 0, 0, 0, 0, 0, 0, 341, 364, 0, 0, 0, 0, 0, 0, 45056, 49152, 2254, 0, 0, 0, 0, 2259, 0, 0, 0, 0,
  /* 30713 */ 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 0, 2268, 0, 0, 0, 0, 2272, 0, 0, 0, 0, 0, 0, 0, 986, 0, 0, 0,
  /* 30745 */ 0, 0, 0, 0, 0, 0, 2445312, 0, 0, 0, 2158592, 2445312, 2158592, 2279, 0, 0, 0, 0, 0, 2284, 0, 0, 415, 415,
  /* 30769 */ 415, 415, 415, 415, 415, 415, 415, 1119, 415, 415, 415, 0, 415, 2294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30794 */ 415, 415, 415, 415, 415, 415, 2292, 415, 415, 415, 524, 2395, 524, 524, 524, 524, 524, 524, 524, 2402,
  /* 30814 */ 524, 524, 524, 524, 524, 2016, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 880, 524, 524, 524, 524,
  /* 30835 */ 524, 524, 2405, 524, 524, 524, 524, 524, 524, 524, 524, 524, 546, 2413, 546, 546, 546, 546, 546, 1861,
  /* 30855 */ 546, 546, 1864, 546, 546, 546, 546, 546, 546, 546, 1875, 1876, 546, 546, 546, 546, 546, 546, 546, 1294,
  /* 30875 */ 546, 546, 546, 546, 1301, 546, 546, 524, 415, 415, 2448, 415, 415, 0, 0, 0, 415, 524, 524, 524, 524, 524,
  /* 30897 */ 2452, 524, 0, 0, 546, 546, 524, 524, 1310, 524, 524, 524, 1314, 524, 524, 546, 546, 546, 2210, 546, 546,
  /* 30918 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1280, 546, 546, 546, 2464, 546, 546, 546, 546, 546, 546,
  /* 30939 */ 2470, 546, 546, 546, 546, 546, 524, 546, 0, 0, 2245, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 0, 0, 0, 0, 1404, 0, 0,
  /* 30966 */ 0, 0, 0, 0, 0, 0, 0, 686, 0, 0, 0, 0, 0, 0, 0, 524, 524, 2627, 2628, 524, 524, 546, 546, 2631, 2632, 546,
  /* 30992 */ 546, 0, 0, 0, 0, 0, 0, 2248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1950, 0, 0, 0, 0, 0, 0, 0, 711, 0, 0, 0, 0, 0, 0,
  /* 31024 */ 711, 0, 0, 0, 0, 0, 711, 711, 0, 0, 805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 711, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31056 */ 291, 291, 0, 335, 0, 0, 0, 0, 546, 546, 546, 895, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 31079 */ 1892, 546, 546, 524, 546, 941, 53503, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1773, 0, 0, 974848, 1287,
  /* 31105 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 524, 524, 524, 524, 546, 546, 546,
  /* 31126 */ 415, 415, 415, 1500, 415, 1174, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2195, 524, 524, 524,
  /* 31146 */ 524, 524, 524, 524, 1560, 524, 0, 1566, 91351, 0, 1566, 546, 546, 546, 546, 546, 546, 546, 1615, 546, 546,
  /* 31167 */ 546, 546, 546, 546, 546, 546, 1889, 546, 1891, 546, 546, 546, 524, 546, 2393, 415, 415, 524, 524, 524,
  /* 31187 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1823, 524, 524, 0, 0, 0, 298, 297, 0, 0, 0, 0, 0, 0, 0,
  /* 31212 */ 297, 0, 45056, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 403, 0, 298, 422, 422, 422, 422, 422, 422,
  /* 31237 */ 443, 443, 443, 443, 462, 462, 443, 462, 462, 462, 462, 462, 488, 496, 496, 496, 496, 496, 496, 496, 496,
  /* 31258 */ 496, 503, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 513, 496, 531, 531, 531, 531,
  /* 31279 */ 531, 554, 531, 531, 531, 531, 531, 531, 554, 554, 554, 554, 554, 554, 554, 554, 577, 577, 577, 588, 53503,
  /* 31300 */ 53503, 647, 648, 649, 0, 325, 325, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 319, 0, 0, 0, 0, 0, 0, 662, 0, 0,
  /* 31328 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1396, 0, 0, 0, 0, 724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 649, 415, 415, 0,
  /* 31359 */ 1463, 1464, 0, 0, 0, 1467, 0, 0, 0, 0, 0, 0, 0, 1677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 135168, 0,
  /* 31387 */ 0, 0, 415, 739, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 1124, 0, 0, 794, 0, 0,
  /* 31411 */ 0, 769, 0, 0, 794, 0, 0, 0, 0, 0, 794, 794, 812, 0, 0, 812, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415,
  /* 31439 */ 1442, 415, 415, 415, 415, 415, 415, 0, 546, 546, 546, 546, 898, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 31460 */ 546, 546, 1601, 546, 546, 546, 546, 546, 942, 53503, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1925, 0, 0,
  /* 31487 */ 0, 1053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 607, 1174, 524, 524, 524, 524, 1180, 524, 524, 524,
  /* 31514 */ 524, 524, 524, 524, 524, 524, 524, 2206, 524, 0, 0, 0, 0, 1230, 524, 524, 524, 524, 524, 887, 91351, 1174,
  /* 31536 */ 890, 546, 546, 546, 546, 1247, 546, 546, 1321, 546, 546, 546, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31562 */ 0, 0, 320, 0, 0, 0, 1401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1408, 0, 0, 0, 0, 0, 638976, 2479, 0, 0, 2482, 2483,
  /* 31590 */ 0, 0, 0, 0, 415, 2155, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1108, 415, 415, 415, 415, 415, 0,
  /* 31613 */ 1410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1409, 0, 0, 0, 1378, 0, 0, 0, 0, 0, 415, 415, 415, 415,
  /* 31642 */ 1493, 415, 415, 415, 415, 415, 415, 0, 0, 1756, 0, 0, 0, 0, 0, 0, 0, 1092, 0, 1092, 0, 0, 0, 415, 1096,
  /* 31667 */ 415, 524, 524, 1544, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 0, 1837, 0, 1843,
  /* 31688 */ 1558, 524, 524, 524, 0, 1566, 91351, 0, 1566, 546, 546, 546, 546, 546, 546, 546, 1863, 546, 546, 546, 546,
  /* 31709 */ 546, 546, 546, 546, 2354, 546, 524, 524, 524, 524, 546, 546, 1709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31735 */ 0, 0, 630, 0, 0, 546, 546, 1847, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2068, 546, 546,
  /* 31757 */ 546, 546, 1929, 0, 0, 0, 1933, 0, 0, 0, 0, 1936, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 45056, 49152,
  /* 31785 */ 1968, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 2162, 0, 0, 0, 1926, 0, 0, 0, 0,
  /* 31810 */ 0, 0, 0, 1995, 0, 0, 0, 415, 0, 541, 541, 541, 541, 541, 564, 541, 541, 541, 541, 541, 541, 1998, 415,
  /* 31833 */ 415, 415, 415, 415, 1984, 524, 524, 524, 524, 524, 524, 524, 524, 524, 876, 524, 524, 524, 524, 524, 524,
  /* 31854 */ 524, 524, 524, 524, 2042, 524, 524, 524, 0, 0, 0, 0, 0, 0, 0, 0, 1016, 0, 325, 325, 0, 0, 0, 1021, 546,
  /* 31879 */ 2087, 546, 546, 546, 524, 546, 524, 2090, 524, 524, 524, 546, 2094, 546, 546, 546, 1581, 546, 546, 546,
  /* 31899 */ 546, 546, 546, 546, 546, 546, 546, 546, 1591, 0, 2123, 2124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 353,
  /* 31925 */ 0, 0, 0, 2151, 2152, 0, 2154, 415, 2156, 415, 415, 415, 415, 415, 415, 2161, 415, 415, 0, 413696, 0, 0,
  /* 31947 */ 2298, 0, 0, 0, 0, 0, 0, 414111, 2304, 415, 415, 415, 415, 524, 2180, 524, 524, 2183, 524, 524, 524, 524,
  /* 31969 */ 524, 524, 524, 524, 1205, 524, 524, 524, 524, 524, 524, 524, 524, 2191, 524, 524, 524, 524, 524, 524, 524,
  /* 31990 */ 524, 524, 524, 524, 2197, 524, 524, 524, 524, 1546, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 32011 */ 882, 524, 524, 524, 524, 524, 524, 2200, 524, 524, 524, 524, 2203, 524, 524, 524, 524, 0, 0, 0, 0, 0, 275,
  /* 32034 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 325, 325, 1018, 0, 0, 0, 546, 2208, 546, 546, 2211, 546, 546, 546, 546, 546,
  /* 32060 */ 546, 546, 546, 546, 2219, 546, 546, 1580, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 32081 */ 1893, 524, 546, 546, 2243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1657, 0, 0, 0, 2281, 0, 0, 0, 0, 0,
  /* 32110 */ 2286, 415, 415, 415, 415, 2290, 415, 415, 415, 415, 415, 415, 415, 1118, 415, 415, 415, 415, 415, 0, 0, 0,
  /* 32132 */ 415, 524, 524, 524, 524, 524, 524, 524, 415, 415, 524, 524, 524, 524, 524, 524, 524, 524, 2314, 524, 524,
  /* 32153 */ 524, 524, 524, 524, 2578, 524, 546, 546, 546, 546, 546, 546, 546, 546, 2223, 546, 546, 546, 546, 546, 546,
  /* 32174 */ 546, 546, 546, 2535, 0, 2536, 0, 0, 0, 0, 546, 2347, 546, 546, 546, 546, 546, 546, 546, 546, 524, 524,
  /* 32196 */ 524, 524, 546, 546, 546, 1594, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2216, 546, 546,
  /* 32217 */ 546, 546, 546, 0, 0, 0, 0, 2370, 2371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1031, 0, 0, 0, 0, 1036, 2485, 524,
  /* 32244 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 546, 546, 546, 546, 546, 1873, 546, 546, 546, 546,
  /* 32265 */ 546, 1879, 546, 546, 546, 546, 546, 1292, 546, 546, 546, 546, 546, 546, 546, 546, 546, 524, 524, 524,
  /* 32285 */ 2238, 546, 546, 546, 0, 524, 524, 524, 524, 546, 546, 546, 546, 0, 0, 524, 524, 546, 546, 2642, 2643, 524,
  /* 32307 */ 546, 524, 546, 524, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2251, 0, 942080, 0, 0, 0, 339, 341, 0, 0, 0,
  /* 32334 */ 341, 0, 0, 0, 0, 0, 0, 0, 0, 1045, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 389, 40960, 389, 389, 0, 389, 389, 396,
  /* 32362 */ 389, 0, 389, 389, 423, 423, 423, 423, 423, 423, 444, 444, 444, 444, 463, 463, 444, 463, 463, 463, 463,
  /* 32383 */ 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 423, 521, 532, 532, 532, 532, 532,
  /* 32404 */ 555, 532, 532, 532, 532, 532, 532, 555, 555, 555, 555, 555, 555, 555, 555, 532, 532, 532, 555, 53503,
  /* 32424 */ 53503, 0, 0, 0, 618, 619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2172, 0, 415, 415, 415, 0, 0, 0, 697, 0, 0, 0,
  /* 32453 */ 0, 697, 0, 703, 0, 0, 0, 0, 0, 0, 1129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1046, 0, 0, 0, 0, 0, 0, 415, 415, 740,
  /* 32483 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 1987, 0, 0, 0, 0, 0, 803, 0, 0, 0, 0,
  /* 32508 */ 619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 661, 790, 0, 790, 784, 0, 0, 0, 546, 546, 546, 546, 546, 900, 546, 546,
  /* 32534 */ 546, 546, 546, 546, 546, 546, 546, 1265, 546, 546, 546, 546, 546, 546, 0, 0, 0, 0, 1025, 0, 0, 0, 0, 0, 0,
  /* 32559 */ 0, 0, 0, 0, 0, 2382, 0, 0, 415, 415, 0, 0, 1039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 711, 415, 415,
  /* 32588 */ 1098, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 415, 415, 415,
  /* 32609 */ 1114, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 319488, 0, 0,
  /* 32634 */ 981, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 628, 0, 0, 1174, 524, 524, 524, 524, 524, 1181, 1187, 524,
  /* 32660 */ 524, 524, 524, 524, 524, 524, 524, 1519, 524, 524, 524, 524, 524, 524, 524, 1197, 524, 524, 524, 524, 524,
  /* 32681 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1209, 524, 524, 1211, 524, 524, 524, 524, 524, 524,
  /* 32701 */ 1221, 524, 524, 524, 524, 524, 524, 524, 1532, 524, 524, 524, 524, 524, 524, 524, 524, 1204, 524, 524,
  /* 32721 */ 1207, 524, 524, 524, 524, 524, 524, 1233, 524, 524, 524, 887, 91351, 1174, 890, 546, 546, 546, 546, 546,
  /* 32741 */ 1248, 546, 546, 546, 1288, 546, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 970752, 0, 1060864, 0, 1254, 546, 546,
  /* 32765 */ 546, 546, 546, 546, 546, 546, 1264, 546, 546, 546, 546, 546, 546, 546, 2505, 546, 0, 0, 0, 2509, 0, 0, 0,
  /* 32788 */ 546, 1288, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1300, 546, 546, 546, 524, 524, 524, 546, 546, 546,
  /* 32809 */ 0, 0, 0, 0, 0, 0, 0, 0, 524, 524, 524, 2596, 524, 2597, 0, 0, 0, 0, 1342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32839 */ 167936, 0, 0, 0, 0, 0, 0, 0, 1512, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1522, 524, 524,
  /* 32862 */ 524, 524, 524, 2193, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1520, 524, 524, 524, 524, 524,
  /* 32882 */ 1542, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1228, 524, 0, 1673, 0, 0,
  /* 32904 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1670, 1671, 1748, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32933 */ 0, 0, 0, 0, 0, 336, 0, 546, 1871, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 32956 */ 1869, 546, 1882, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 524, 546, 2474, 2011,
  /* 32976 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1798, 1799, 0, 2136, 0, 0, 0,
  /* 32998 */ 0, 0, 0, 0, 2143, 0, 0, 0, 0, 0, 2149, 2163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415,
  /* 33027 */ 415, 2159, 415, 415, 415, 415, 415, 415, 415, 415, 524, 524, 524, 2182, 524, 524, 524, 524, 524, 524, 524,
  /* 33048 */ 524, 524, 1222, 524, 524, 524, 524, 524, 524, 0, 0, 0, 0, 2258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1097728,
  /* 33074 */ 0, 0, 0, 0, 0, 0, 0, 0, 2283, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 2160, 415, 415, 415, 415,
  /* 33099 */ 524, 524, 2574, 524, 2576, 524, 524, 524, 546, 546, 546, 546, 2583, 546, 2585, 546, 546, 1593, 546, 546,
  /* 33119 */ 546, 546, 546, 546, 546, 1602, 546, 546, 546, 546, 546, 546, 2338, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 33140 */ 546, 546, 414220, 2356, 524, 524, 414242, 2359, 524, 524, 524, 2600, 546, 546, 546, 546, 546, 546, 546,
  /* 33159 */ 546, 0, 0, 0, 0, 0, 2568, 2569, 0, 524, 524, 0, 524, 2626, 524, 524, 524, 524, 546, 2630, 546, 546, 546,
  /* 33182 */ 546, 0, 0, 0, 0, 0, 2247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 713, 0, 0, 0, 0, 415, 415, 0, 325, 0, 0, 0, 0, 0, 0,
  /* 33213 */ 0, 0, 0, 0, 0, 0, 0, 331, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 404, 0, 331, 424, 424, 424, 424, 424,
  /* 33241 */ 424, 445, 445, 453, 445, 331, 331, 445, 331, 331, 331, 331, 331, 489, 489, 489, 489, 489, 489, 489, 489,
  /* 33262 */ 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 514, 489, 533, 533, 533, 533, 533, 556, 533, 533, 533,
  /* 33283 */ 533, 568, 568, 573, 573, 573, 573, 573, 573, 573, 573, 533, 533, 568, 573, 53503, 53842, 415, 415, 741,
  /* 33303 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 524, 524, 524, 524, 843, 524, 524,
  /* 33325 */ 856, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1225, 524, 524, 524, 0, 546, 546,
  /* 33346 */ 546, 546, 546, 901, 546, 546, 913, 546, 546, 546, 546, 546, 546, 835, 524, 0, 0, 0, 892, 546, 835, 524,
  /* 33368 */ 524, 856, 524, 524, 524, 524, 524, 0, 524, 546, 546, 546, 913, 546, 546, 546, 546, 546, 1261, 546, 546,
  /* 33389 */ 546, 546, 546, 546, 546, 546, 546, 546, 1278, 546, 546, 546, 546, 546, 0, 0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
  /* 33414 */ 0, 0, 0, 0, 0, 1939, 0, 0, 0, 1174, 524, 524, 524, 524, 524, 1182, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 33438 */ 524, 1552, 524, 524, 524, 524, 524, 524, 1249, 546, 546, 546, 546, 1324, 546, 0, 0, 1328, 0, 0, 0, 1334,
  /* 33460 */ 0, 0, 0, 0, 0, 1102274, 1102274, 1102274, 1102274, 1102274, 1102274, 1102274, 1102274, 1102274, 1102274,
  /* 33475 */ 1102274, 1102274, 1102274, 1102274, 1102274, 1102274, 0, 1353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1365, 0,
  /* 33496 */ 0, 0, 0, 0, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521, 2163521,
  /* 33510 */ 2163577, 2163577, 2163577, 2163577, 1578, 546, 546, 546, 546, 546, 546, 546, 546, 1586, 546, 546, 546,
  /* 33527 */ 546, 546, 546, 1275, 546, 546, 1277, 546, 1279, 546, 546, 546, 546, 0, 0, 1661, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33552 */ 0, 0, 0, 0, 717, 0, 0, 0, 0, 1674, 0, 1676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2478080, 0, 0, 0, 0, 0, 0,
  /* 33582 */ 1722, 0, 0, 0, 0, 0, 0, 1729, 0, 0, 0, 0, 415, 415, 1163, 415, 415, 415, 415, 1168, 415, 415, 415, 415,
  /* 33606 */ 415, 0, 0, 0, 415, 524, 524, 524, 524, 524, 524, 2453, 1857, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 33628 */ 546, 546, 546, 546, 546, 546, 2428, 415, 415, 983455, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 33648 */ 524, 524, 524, 1810, 524, 524, 524, 0, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2495, 524, 546,
  /* 33669 */ 546, 546, 546, 546, 2063, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2225, 546, 546, 546, 546,
  /* 33689 */ 2228, 0, 325, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 992, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33721 */ 0, 0, 0, 347, 0, 0, 0, 0, 347, 0, 0, 0, 45056, 49152, 0, 0, 0, 0, 40960, 0, 0, 302, 0, 0, 397, 0, 0, 0, 0,
  /* 33750 */ 425, 425, 425, 425, 425, 425, 446, 452, 452, 452, 452, 468, 446, 468, 468, 468, 468, 468, 452, 452, 452,
  /* 33771 */ 452, 452, 452, 452, 452, 452, 452, 452, 452, 505, 452, 452, 452, 452, 507, 505, 452, 452, 452, 452, 452,
  /* 33792 */ 452, 452, 452, 425, 452, 534, 534, 534, 534, 534, 557, 534, 534, 534, 534, 534, 534, 557, 557, 557, 557,
  /* 33813 */ 557, 557, 557, 557, 534, 534, 534, 557, 53503, 53503, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33839 */ 693, 0, 0, 723, 0, 0, 0, 0, 0, 0, 0, 0, 621, 0, 0, 415, 734, 415, 415, 742, 415, 415, 750, 415, 415, 415,
  /* 33865 */ 756, 415, 415, 415, 763, 415, 0, 0, 0, 0, 605, 0, 0, 733, 0, 733, 0, 733, 0, 415, 415, 415, 1778, 415,
  /* 33889 */ 415, 415, 415, 415, 415, 415, 415, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2187, 524, 524, 524, 784,
  /* 33910 */ 0, 658, 0, 0, 0, 0, 784, 766, 0, 0, 790, 0, 624, 0, 661, 0, 0, 0, 0, 666, 0, 668, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33940 */ 1093, 0, 979, 1093, 0, 415, 415, 1097, 0, 804, 0, 766, 0, 0, 621, 807, 0, 661, 0, 0, 0, 784, 0, 813, 822,
  /* 33965 */ 415, 756, 415, 415, 415, 763, 415, 0, 0, 0, 524, 834, 524, 524, 845, 524, 524, 857, 524, 524, 524, 866,
  /* 33987 */ 524, 524, 524, 524, 881, 524, 524, 524, 524, 0, 1566, 91351, 0, 1566, 546, 546, 546, 546, 546, 546, 546,
  /* 34008 */ 0, 1326, 0, 0, 0, 1332, 0, 0, 0, 0, 546, 546, 891, 546, 546, 902, 546, 546, 914, 546, 546, 546, 923, 546,
  /* 34032 */ 546, 546, 2076, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2473, 546, 524, 546, 0, 953,
  /* 34053 */ 866, 524, 524, 524, 524, 0, 834, 891, 546, 546, 962, 923, 546, 546, 546, 546, 546, 2078, 546, 546, 546,
  /* 34074 */ 546, 546, 546, 546, 546, 546, 546, 1266, 546, 546, 546, 546, 546, 0, 0, 0, 982, 983, 984, 0, 0, 0, 0, 0,
  /* 34098 */ 0, 0, 0, 0, 0, 1047, 0, 0, 0, 0, 0, 982, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1079, 0, 0, 0, 0, 0, 0, 1344, 1345, 0,
  /* 34129 */ 0, 0, 0, 0, 1351, 0, 0, 0, 0, 0, 1088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 34157 */ 1169, 415, 415, 415, 415, 0, 0, 0, 1138, 0, 0, 0, 0, 0, 0, 1015, 0, 0, 1148, 0, 0, 0, 0, 0, 1125, 0, 0, 0,
  /* 34185 */ 0, 1157, 0, 0, 0, 0, 0, 0, 1358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 524, 1199, 524, 524,
  /* 34214 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2023, 524, 1319, 546, 546, 546, 1323, 546,
  /* 34234 */ 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 773, 0, 778, 0, 0, 782, 0, 0, 1339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34266 */ 0, 1707, 0, 1367, 0, 0, 1370, 1371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2777088, 0, 0, 0, 0, 415, 1498, 415,
  /* 34293 */ 415, 415, 1174, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1511, 0, 0, 0, 0, 1724, 0, 1726, 0, 0, 0, 0,
  /* 34317 */ 0, 1732, 0, 1734, 415, 415, 415, 415, 415, 1174, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 34338 */ 524, 524, 524, 524, 546, 546, 415, 415, 415, 1751, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1762, 524, 1813,
  /* 34362 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2038, 524, 524, 524, 1827, 524, 524,
  /* 34383 */ 524, 524, 524, 524, 0, 0, 0, 0, 1566, 0, 0, 0, 0, 0, 2875392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
  /* 34412 */ 0, 0, 0, 0, 546, 1846, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1621, 546, 546, 546, 0,
  /* 34435 */ 0, 0, 0, 1919, 0, 0, 1921, 0, 0, 0, 0, 0, 0, 0, 0, 1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1932, 0, 0, 0, 0,
  /* 34466 */ 0, 0, 0, 0, 0, 0, 0, 0, 1953, 0, 0, 0, 0, 0, 0, 1945, 0, 1946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1131, 0, 0,
  /* 34497 */ 0, 0, 0, 0, 1969, 0, 0, 1972, 415, 415, 415, 415, 415, 1977, 415, 415, 415, 1979, 415, 415, 415, 415, 415,
  /* 34520 */ 1174, 524, 524, 524, 524, 524, 524, 524, 524, 1510, 524, 0, 0, 546, 546, 524, 1309, 524, 524, 524, 524,
  /* 34541 */ 524, 524, 524, 546, 1318, 415, 1981, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 1988, 0, 0, 0, 0, 0,
  /* 34564 */ 1128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1135, 415, 415, 415, 415, 2002, 415, 415, 524, 524, 524, 524, 524, 524,
  /* 34588 */ 2009, 524, 524, 524, 524, 1564, 1566, 91351, 1569, 1566, 546, 546, 546, 546, 546, 1576, 1577, 524, 524,
  /* 34607 */ 2013, 524, 2015, 524, 524, 524, 524, 524, 524, 524, 524, 2022, 524, 524, 524, 524, 1565, 1566, 91351,
  /* 34626 */ 1570, 1566, 546, 546, 546, 546, 546, 546, 546, 1888, 546, 546, 546, 546, 546, 546, 524, 546, 524, 524,
  /* 34646 */ 524, 524, 2093, 546, 546, 546, 546, 546, 2060, 546, 546, 546, 546, 546, 546, 546, 546, 2067, 546, 546,
  /* 34666 */ 546, 546, 546, 546, 2213, 546, 546, 546, 546, 546, 546, 546, 546, 546, 0, 0, 0, 2537, 0, 0, 2540, 2097, 0,
  /* 34689 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2109, 0, 0, 0, 2111, 0, 2113, 0, 0, 0, 0, 0, 0, 2118, 2119, 0, 0,
  /* 34719 */ 0, 0, 0, 2891776, 0, 0, 0, 0, 3035136, 0, 0, 0, 0, 0, 0, 985, 0, 0, 0, 0, 990, 0, 0, 0, 0, 0, 0, 2137, 0,
  /* 34748 */ 0, 0, 0, 0, 0, 0, 2144, 2145, 0, 0, 2148, 0, 0, 0, 0, 609, 0, 0, 0, 0, 0, 810, 656, 0, 0, 0, 0, 0, 0,
  /* 34777 */ 221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618,
  /* 34790 */ 221618, 221618, 221618, 0, 2164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2174, 415, 415, 415, 415, 415, 415, 415,
  /* 34814 */ 1984, 415, 0, 1986, 0, 0, 0, 0, 0, 0, 1075, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 774144, 0, 0, 0, 0, 415, 0, 0,
  /* 34843 */ 2256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1050, 0, 0, 415, 415, 524, 2309, 524, 524, 524, 524, 524,
  /* 34869 */ 524, 524, 524, 524, 524, 2317, 2318, 524, 524, 524, 524, 2322, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 34889 */ 524, 546, 2333, 2346, 546, 546, 546, 546, 546, 546, 546, 546, 546, 524, 524, 524, 524, 546, 546, 546,
  /* 34909 */ 2222, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2227, 546, 546, 546, 546, 2349, 546, 546, 546, 546,
  /* 34929 */ 546, 524, 524, 524, 524, 546, 546, 546, 546, 1885, 546, 1887, 546, 546, 546, 546, 546, 546, 546, 524, 546,
  /* 34950 */ 524, 524, 524, 2092, 524, 546, 546, 546, 2096, 2386, 2387, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34974 */ 415, 0, 543, 543, 543, 543, 543, 566, 543, 543, 543, 543, 543, 543, 415, 415, 415, 524, 524, 524, 524,
  /* 34995 */ 2397, 2398, 2399, 524, 524, 524, 524, 524, 524, 887, 91351, 1174, 890, 546, 546, 546, 546, 546, 546, 524,
  /* 35015 */ 524, 0, 0, 0, 546, 546, 524, 524, 524, 524, 524, 2406, 524, 524, 524, 524, 524, 524, 524, 524, 546, 546,
  /* 35037 */ 546, 546, 2415, 2416, 2417, 546, 546, 546, 546, 546, 546, 546, 546, 2424, 546, 546, 546, 546, 546, 546,
  /* 35057 */ 2233, 546, 546, 2235, 524, 524, 524, 2239, 546, 546, 546, 2465, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 35077 */ 546, 546, 546, 524, 546, 0, 2244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1706, 0, 0, 0, 524, 524, 524,
  /* 35104 */ 524, 524, 524, 2491, 524, 524, 524, 524, 524, 546, 546, 546, 546, 546, 2212, 546, 2214, 546, 546, 546,
  /* 35124 */ 2217, 546, 546, 546, 546, 546, 1597, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1865, 1866, 546,
  /* 35144 */ 1868, 546, 546, 546, 546, 2528, 546, 546, 546, 546, 546, 546, 0, 0, 0, 0, 2538, 0, 0, 0, 0, 0, 3059712,
  /* 35167 */ 3063808, 0, 0, 0, 3149824, 0, 0, 3166208, 0, 0, 0, 0, 0, 1698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 770, 0, 770,
  /* 35194 */ 0, 0, 0, 0, 524, 524, 2612, 2613, 524, 524, 546, 546, 2618, 2619, 546, 546, 0, 0, 0, 0, 417792, 2102, 0,
  /* 35217 */ 0, 2105, 2106, 0, 0, 0, 0, 0, 0, 1920, 0, 1922, 0, 0, 1924, 0, 1926, 0, 0, 0, 305, 307, 306, 40960, 306,
  /* 35242 */ 306, 307, 394, 306, 305, 306, 0, 306, 394, 426, 426, 426, 426, 426, 426, 447, 447, 447, 455, 464, 464,
  /* 35263 */ 472, 464, 474, 464, 474, 474, 464, 474, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
  /* 35284 */ 490, 490, 490, 490, 490, 515, 490, 535, 535, 535, 535, 535, 558, 535, 535, 535, 535, 535, 535, 558, 558,
  /* 35305 */ 558, 558, 558, 558, 558, 558, 578, 578, 578, 589, 53503, 53503, 273, 274, 0, 0, 0, 0, 0, 0, 607, 0, 0, 0,
  /* 35329 */ 611, 612, 613, 614, 615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 627, 0, 629, 0, 0, 0, 0, 665, 0, 0, 0, 669, 0,
  /* 35358 */ 671, 0, 0, 0, 0, 0, 0, 1043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 772, 0, 777, 0, 780, 0, 0, 0, 0, 0, 650, 325, 325,
  /* 35388 */ 325, 0, 0, 0, 655, 0, 0, 0, 0, 0, 0, 1389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 661, 0, 0, 0, 0, 0, 0, 705, 706,
  /* 35418 */ 707, 0, 0, 0, 0, 0, 713, 0, 0, 716, 749568, 0, 0, 0, 0, 0, 1142, 1073, 0, 1021, 1145, 0, 770048, 0, 0, 0,
  /* 35444 */ 0, 0, 366, 0, 0, 0, 0, 366, 0, 0, 0, 45056, 49152, 737, 415, 415, 745, 415, 415, 415, 754, 415, 415, 415,
  /* 35468 */ 415, 761, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2302, 0, 415, 415, 2305, 0, 0, 707, 796, 797, 0, 0, 0, 0,
  /* 35495 */ 0, 0, 707, 0, 0, 801, 650, 643, 806, 806, 643, 0, 0, 0, 0, 629, 0, 674, 0, 643, 415, 415, 821, 415, 823,
  /* 35520 */ 415, 415, 415, 761, 415, 831, 0, 0, 643, 524, 524, 839, 842, 524, 0, 0, 546, 546, 1308, 524, 524, 1311,
  /* 35542 */ 524, 524, 524, 524, 524, 1317, 546, 546, 1610, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1622,
  /* 35562 */ 546, 546, 0, 2589, 0, 0, 0, 0, 0, 0, 524, 2595, 524, 524, 524, 524, 524, 1217, 524, 524, 524, 524, 524,
  /* 35585 */ 524, 524, 524, 524, 1229, 849, 524, 524, 524, 862, 865, 524, 524, 524, 874, 878, 524, 524, 524, 524, 524,
  /* 35606 */ 524, 975372, 1081868, 546, 546, 546, 546, 546, 546, 975394, 1081890, 0, 546, 546, 546, 896, 899, 546, 906,
  /* 35625 */ 546, 546, 546, 919, 922, 546, 546, 546, 546, 546, 2232, 546, 546, 546, 524, 524, 524, 524, 546, 546, 546,
  /* 35646 */ 546, 546, 2351, 546, 546, 546, 546, 524, 524, 524, 524, 546, 546, 524, 524, 524, 874, 878, 958, 0, 524,
  /* 35667 */ 546, 546, 961, 546, 546, 546, 931, 935, 546, 546, 546, 546, 524, 862, 0, 0, 0, 546, 919, 524, 524, 952,
  /* 35689 */ 967, 53503, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2374, 0, 0, 0, 0, 0, 0, 0, 1041, 0, 0, 0, 0, 0, 0,
  /* 35720 */ 0, 0, 0, 1051, 0, 0, 0, 0, 697, 619, 0, 0, 0, 0, 0, 681, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 35746 */ 415, 415, 415, 524, 1785, 524, 0, 0, 0, 1072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 131072, 0,
  /* 35773 */ 1086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 1166, 415, 415, 415, 415, 415, 415, 415,
  /* 35798 */ 0, 0, 0, 0, 0, 0, 0, 1760, 0, 0, 524, 524, 524, 1200, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 35822 */ 524, 524, 1822, 524, 524, 524, 1231, 524, 524, 524, 524, 524, 887, 91351, 1174, 890, 546, 546, 546, 546,
  /* 35842 */ 546, 546, 1584, 546, 546, 546, 546, 546, 546, 546, 546, 546, 0, 0, 0, 0, 0, 2539, 0, 655360, 0, 0, 0, 0,
  /* 35866 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1008, 0, 0, 0, 1412, 1413, 0, 1415, 0, 0, 0, 1417, 0, 703, 0, 0, 0, 0, 0,
  /* 35896 */ 1336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1147, 0, 0, 0, 0, 0, 0, 0, 1436, 0, 0, 0, 415, 415, 415, 415, 415,
  /* 35924 */ 415, 415, 415, 415, 415, 415, 415, 524, 524, 524, 0, 655360, 0, 0, 0, 0, 0, 0, 415, 1491, 415, 655775,
  /* 35946 */ 415, 415, 415, 415, 415, 0, 0, 815104, 815519, 524, 524, 524, 524, 524, 524, 524, 1819, 524, 524, 524,
  /* 35966 */ 524, 524, 524, 524, 1824, 524, 1526, 524, 524, 1530, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 35986 */ 524, 1796, 524, 524, 524, 524, 1624, 546, 546, 546, 546, 546, 546, 524, 524, 546, 546, 524, 1634, 524,
  /* 36006 */ 655884, 524, 0, 0, 1306, 546, 524, 524, 524, 524, 524, 1313, 524, 524, 1316, 546, 546, 546, 2348, 2350,
  /* 36026 */ 546, 546, 2353, 546, 2355, 524, 524, 524, 2358, 546, 546, 546, 1258, 546, 546, 546, 1262, 546, 546, 546,
  /* 36046 */ 546, 546, 546, 546, 546, 1600, 546, 546, 546, 546, 546, 546, 546, 1650, 0, 971, 0, 0, 0, 1652, 0, 975, 0,
  /* 36069 */ 0, 0, 0, 0, 0, 0, 1076, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1923, 0, 0, 0, 0, 1927, 0, 524, 1801, 524, 524, 524,
  /* 36097 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2198, 524, 0, 2048, 0, 1569, 546, 546, 546, 546,
  /* 36118 */ 546, 546, 546, 546, 546, 546, 546, 546, 1867, 546, 546, 546, 415, 415, 2178, 2179, 524, 524, 524, 524,
  /* 36138 */ 524, 524, 524, 524, 524, 524, 524, 524, 2045, 0, 2047, 0, 524, 524, 2192, 524, 524, 524, 524, 524, 524,
  /* 36159 */ 524, 524, 524, 524, 524, 524, 524, 2330, 524, 546, 546, 2207, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 36180 */ 546, 546, 546, 546, 546, 2220, 415, 415, 524, 524, 524, 524, 2312, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 36201 */ 524, 2019, 524, 524, 524, 524, 524, 524, 546, 546, 2336, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 36222 */ 546, 546, 546, 2070, 546, 546, 2475, 0, 0, 2478, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 1162, 415, 415,
  /* 36247 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 1989, 0, 0, 0, 524, 524, 524, 2488, 524, 524,
  /* 36270 */ 524, 524, 524, 524, 524, 524, 546, 546, 546, 546, 941, 546, 524, 524, 0, 0, 0, 546, 546, 524, 524, 838,
  /* 36292 */ 2498, 546, 546, 546, 546, 546, 546, 546, 546, 0, 0, 0, 0, 0, 0, 0, 0, 524, 2572, 2526, 546, 546, 546,
  /* 36315 */ 2530, 546, 546, 546, 546, 0, 0, 0, 0, 0, 0, 0, 1077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0,
  /* 36344 */ 2609, 524, 524, 524, 524, 524, 524, 546, 546, 546, 546, 546, 546, 0, 2623, 2624, 546, 2644, 2645, 524,
  /* 36364 */ 546, 524, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0,
  /* 36395 */ 405, 0, 0, 415, 415, 415, 415, 415, 1174, 524, 524, 524, 524, 524, 524, 524, 1509, 524, 524, 524, 524,
  /* 36416 */ 1563, 1566, 91351, 1568, 1566, 546, 546, 546, 546, 546, 546, 546, 0, 1327, 0, 0, 0, 1333, 0, 0, 0, 785, 0,
  /* 36439 */ 0, 0, 0, 0, 631, 788, 0, 0, 0, 0, 0, 0, 0, 0, 1416, 0, 0, 0, 0, 0, 0, 0, 0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36471 */ 0, 0, 0, 1081, 0, 0, 0, 0, 0, 1343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1714, 0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
  /* 36502 */ 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1783, 415, 415, 524, 524, 524, 524,
  /* 36526 */ 524, 524, 524, 524, 2313, 524, 524, 524, 524, 524, 524, 1791, 524, 524, 1794, 524, 524, 524, 524, 524,
  /* 36546 */ 524, 887, 91351, 1174, 890, 1242, 1244, 546, 546, 546, 546, 415, 415, 415, 415, 1104, 415, 415, 415, 415,
  /* 36566 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 1457, 415, 415, 1174, 524, 524, 524, 524, 524, 1183, 524,
  /* 36586 */ 524, 524, 524, 1193, 524, 524, 524, 524, 0, 1566, 91351, 0, 1566, 546, 546, 546, 546, 1575, 546, 546,
  /* 36606 */ 1269, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1284, 546, 546, 1626, 546, 546,
  /* 36626 */ 546, 546, 1631, 524, 1632, 546, 524, 524, 524, 524, 524, 524, 1549, 524, 524, 524, 524, 524, 524, 524,
  /* 36646 */ 1556, 524, 1305, 0, 0, 546, 1307, 524, 524, 1183, 524, 524, 524, 524, 524, 524, 546, 546, 546, 2230, 546,
  /* 36667 */ 546, 546, 546, 546, 524, 524, 524, 524, 546, 546, 546, 546, 546, 2503, 546, 546, 546, 0, 0, 0, 0, 0, 0, 0,
  /* 36691 */ 0, 2594, 524, 524, 524, 524, 524, 1250, 546, 546, 546, 546, 546, 546, 0, 0, 1329, 0, 0, 0, 1335, 0, 0, 0,
  /* 36715 */ 0, 0, 3096576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 283, 283, 0, 0, 0, 0, 1800, 524, 524, 1803, 524, 524, 524,
  /* 36741 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 1809, 524, 524, 524, 524, 0, 0, 0, 1918, 0, 0, 0, 0, 0, 0, 0,
  /* 36766 */ 0, 0, 0, 0, 0, 200704, 276, 277, 0, 524, 524, 2027, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 36789 */ 524, 524, 1821, 524, 524, 524, 524, 1843, 0, 0, 0, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 36811 */ 546, 2218, 546, 546, 546, 2267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1052, 2360, 546, 0, 0, 0, 0,
  /* 36839 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2253, 0, 2476, 0, 0, 0, 0, 0, 0, 2481, 0, 0, 0, 2484, 0, 0, 415, 415, 415,
  /* 36868 */ 415, 415, 1174, 524, 524, 524, 524, 524, 1507, 1508, 524, 524, 524, 524, 524, 2043, 524, 524, 0, 2045, 0,
  /* 36889 */ 0, 0, 0, 0, 2047, 0, 2512, 2513, 0, 860160, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 546, 546,
  /* 36911 */ 1872, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1880, 546, 546, 546, 546, 1291, 546, 546, 546, 546,
  /* 36931 */ 1297, 546, 546, 546, 546, 546, 524, 546, 524, 524, 2091, 524, 524, 546, 546, 2095, 546, 415, 415, 743,
  /* 36951 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 524, 524, 524, 524, 844, 0, 0, 770,
  /* 36974 */ 0, 0, 0, 0, 0, 0, 0, 0, 770, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 546, 546, 546, 546, 546, 903, 546, 546, 546,
  /* 37002 */ 546, 546, 546, 546, 546, 546, 1877, 546, 546, 546, 1881, 546, 546, 546, 53503, 2, 6, 0, 0, 0, 0, 972, 976,
  /* 37025 */ 0, 0, 0, 0, 0, 0, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1407, 0, 0, 0, 0, 0, 0, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37058 */ 0, 0, 0, 0, 0, 0, 1057, 0, 325, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
  /* 37090 */ 309, 308, 40960, 308, 308, 309, 308, 308, 0, 308, 0, 308, 308, 427, 308, 537, 537, 537, 537, 537, 560,
  /* 37111 */ 537, 537, 537, 537, 537, 537, 427, 427, 427, 427, 427, 427, 0, 0, 0, 0, 308, 308, 309, 308, 308, 308, 481,
  /* 37134 */ 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 537, 537, 560, 560, 560,
  /* 37155 */ 560, 560, 560, 560, 560, 537, 537, 537, 560, 53503, 53503, 0, 632, 633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37180 */ 0, 0, 1066, 0, 0, 0, 0, 0, 664, 0, 0, 0, 0, 0, 0, 0, 0, 673, 0, 0, 676, 0, 0, 0, 708, 0, 0, 0, 0, 0, 632,
  /* 37211 */ 0, 0, 0, 0, 0, 0, 667, 0, 0, 670, 0, 672, 0, 674, 0, 0, 0, 722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415,
  /* 37242 */ 415, 415, 415, 415, 415, 415, 2004, 524, 524, 524, 524, 2008, 524, 524, 524, 524, 880, 524, 0, 524, 546,
  /* 37263 */ 546, 546, 546, 546, 546, 546, 937, 814, 0, 0, 783, 0, 0, 0, 0, 0, 0, 0, 0, 783, 415, 415, 415, 415, 415,
  /* 37288 */ 415, 0, 336, 0, 369, 0, 0, 369, 0, 0, 0, 0, 0, 0, 0, 0, 369, 0, 0, 45056, 49152, 415, 415, 757, 415, 415,
  /* 37314 */ 828, 415, 415, 0, 0, 783, 524, 524, 524, 524, 524, 524, 983564, 524, 524, 524, 524, 546, 546, 546, 546,
  /* 37335 */ 546, 546, 546, 546, 546, 1326, 1649, 0, 524, 852, 524, 524, 524, 524, 867, 869, 524, 524, 879, 524, 524,
  /* 37356 */ 524, 524, 524, 863, 524, 868, 524, 871, 524, 524, 883, 524, 524, 524, 0, 546, 546, 546, 546, 546, 546,
  /* 37377 */ 546, 909, 546, 546, 546, 546, 924, 926, 546, 546, 1884, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 37398 */ 546, 524, 546, 524, 524, 524, 524, 524, 546, 546, 546, 546, 524, 867, 869, 524, 879, 524, 0, 944, 948,
  /* 37419 */ 546, 546, 546, 924, 926, 546, 936, 546, 546, 546, 546, 944, 524, 0, 0, 0, 948, 546, 524, 524, 524, 524,
  /* 37441 */ 524, 2409, 524, 524, 524, 524, 524, 546, 546, 546, 546, 546, 546, 546, 546, 546, 0, 1649, 0, 0, 0, 0,
  /* 37463 */ 1024, 0, 1026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1348, 0, 0, 0, 0, 0, 0, 1054, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
  /* 37493 */ 0, 0, 0, 0, 0, 1362, 0, 0, 0, 0, 0, 0, 0, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1082, 0, 0, 1151,
  /* 37524 */ 0, 0, 0, 1153, 0, 0, 0, 0, 1156, 0, 0, 0, 0, 0, 0, 728, 0, 730, 0, 0, 0, 0, 0, 415, 735, 1198, 524, 524,
  /* 37552 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2036, 524, 524, 524, 524, 524, 524, 524,
  /* 37573 */ 1213, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2196, 524, 524, 524, 524, 1398, 0, 0, 0,
  /* 37595 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1084, 0, 0, 1421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1095, 415,
  /* 37626 */ 415, 415, 1462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1941, 0, 524, 1559, 524, 524, 0, 1566, 91351, 0,
  /* 37653 */ 1566, 546, 546, 546, 1573, 546, 546, 546, 546, 942, 546, 524, 524, 0, 0, 0, 546, 546, 524, 524, 524, 524,
  /* 37675 */ 524, 2030, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 1553, 524, 524, 524, 524, 1557, 546, 1625,
  /* 37695 */ 546, 546, 1628, 546, 546, 524, 524, 546, 546, 524, 524, 524, 524, 524, 884, 0, 524, 546, 546, 895, 546,
  /* 37716 */ 546, 546, 546, 546, 546, 2079, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1617, 546, 546, 546, 546, 546,
  /* 37737 */ 546, 1672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1150, 0, 0, 0, 1684, 0, 0, 0, 0, 0, 0, 0, 1690, 0,
  /* 37768 */ 0, 0, 0, 0, 314, 315, 316, 317, 0, 0, 0, 0, 0, 0, 0, 1416, 0, 0, 0, 0, 1716, 0, 0, 0, 1694, 0, 0, 0, 1697,
  /* 37797 */ 0, 0, 0, 0, 0, 0, 0, 1705, 0, 0, 0, 0, 0, 1364, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1120,
  /* 37822 */ 415, 415, 0, 0, 0, 0, 0, 315392, 1711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1718, 0, 0, 0, 0, 709, 0, 0, 0, 0, 0,
  /* 37852 */ 0, 0, 0, 0, 0, 719, 1720, 1721, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 829,
  /* 37879 */ 415, 0, 0, 0, 524, 524, 524, 524, 524, 2548, 524, 524, 524, 524, 546, 546, 546, 546, 0, 315807, 1776, 415,
  /* 37901 */ 415, 1779, 415, 415, 415, 415, 415, 415, 415, 524, 524, 524, 524, 524, 524, 2185, 524, 524, 524, 524, 524,
  /* 37922 */ 524, 887, 0, 0, 890, 546, 546, 546, 546, 546, 546, 0, 0, 2565, 2566, 0, 0, 0, 0, 524, 524, 1812, 524, 524,
  /* 37946 */ 524, 524, 524, 1818, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2034, 524, 524, 524, 524, 524, 524,
  /* 37966 */ 315916, 1896, 524, 1898, 524, 524, 524, 524, 315938, 1901, 546, 1903, 546, 546, 546, 546, 546, 1583, 546,
  /* 37985 */ 546, 546, 546, 1587, 546, 546, 546, 1590, 546, 0, 0, 1944, 0, 0, 0, 0, 1948, 0, 0, 0, 0, 0, 0, 0, 0, 1728,
  /* 38011 */ 0, 1730, 0, 0, 1733, 415, 415, 0, 0, 0, 0, 1992, 0, 0, 0, 0, 0, 0, 0, 0, 1996, 0, 415, 415, 415, 415, 415,
  /* 38038 */ 1174, 524, 524, 524, 524, 1506, 524, 524, 524, 524, 524, 1216, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 38058 */ 524, 524, 1834, 0, 0, 0, 1566, 1840, 0, 415, 415, 415, 2001, 415, 415, 415, 524, 524, 524, 524, 524, 524,
  /* 38080 */ 524, 524, 2010, 546, 2098, 2099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1132, 0, 0, 0, 0, 0, 0, 2112, 0,
  /* 38108 */ 2114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1017, 325, 325, 0, 0, 0, 0, 415, 2307, 2308, 524, 524, 524, 524, 524,
  /* 38133 */ 524, 524, 524, 524, 524, 524, 524, 524, 2412, 546, 546, 546, 546, 0, 0, 2477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38158 */ 0, 0, 0, 415, 415, 415, 415, 415, 1174, 524, 524, 524, 1504, 524, 524, 524, 524, 524, 524, 887, 91351,
  /* 38179 */ 1174, 890, 546, 546, 546, 546, 546, 1250, 0, 2486, 524, 524, 524, 524, 524, 524, 524, 524, 2494, 524, 524,
  /* 38200 */ 2496, 546, 546, 546, 2419, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2226, 546, 546,
  /* 38220 */ 546, 546, 0, 2542, 524, 2544, 524, 524, 524, 524, 524, 524, 524, 524, 546, 2554, 546, 546, 546, 2467, 546,
  /* 38241 */ 2468, 2469, 546, 546, 546, 546, 546, 546, 524, 546, 0, 0, 2100, 0, 0, 0, 0, 0, 0, 0, 2107, 0, 0, 0, 0, 0,
  /* 38267 */ 0, 3141632, 0, 2732032, 0, 0, 0, 0, 0, 2895872, 0, 0, 524, 524, 524, 524, 2614, 524, 546, 546, 546, 546,
  /* 38289 */ 2620, 546, 2622, 0, 0, 0, 0, 0, 3096576, 0, 57344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2273, 0, 0, 0, 0, 0, 0,
  /* 38316 */ 2625, 524, 524, 524, 524, 524, 524, 546, 546, 546, 546, 546, 546, 0, 2634, 2635, 0, 310, 311, 312, 313, 0,
  /* 38338 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1377, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38370 */ 1949, 0, 0, 1952, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1352, 311, 0, 0, 0, 328,
  /* 38400 */ 0, 345, 0, 310, 0, 0, 0, 0, 0, 355, 356, 0, 357, 0, 0, 0, 0, 357, 0, 0, 361, 0, 0, 0, 328, 365, 0, 0, 0,
  /* 38429 */ 0, 725, 0, 0, 0, 0, 731, 0, 0, 656, 0, 415, 415, 0, 0, 0, 0, 1465, 0, 0, 1468, 0, 1469, 0, 0, 0, 0, 0, 0,
  /* 38458 */ 909312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 811008, 0, 0, 0, 0, 0, 0, 0, 0, 390, 40960, 390, 390, 0, 390, 390,
  /* 38485 */ 375, 390, 0, 390, 413, 428, 428, 428, 428, 428, 428, 0, 0, 310, 0, 465, 465, 0, 465, 465, 465, 465, 465,
  /* 38508 */ 492, 492, 492, 492, 492, 492, 492, 492, 492, 413, 504, 413, 413, 413, 413, 504, 506, 413, 413, 492, 508,
  /* 38529 */ 492, 492, 492, 492, 492, 492, 517, 522, 538, 538, 538, 538, 538, 561, 538, 538, 538, 538, 538, 538, 561,
  /* 38550 */ 561, 561, 561, 561, 561, 561, 561, 580, 580, 538, 591, 53503, 53503, 273, 274, 0, 0, 0, 604, 0, 0, 0, 0,
  /* 38573 */ 0, 0, 0, 0, 0, 0, 1427, 1428, 0, 0, 1431, 0, 0, 604, 0, 0, 0, 0, 0, 0, 604, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
  /* 38603 */ 0, 0, 0, 0, 0, 0, 0, 1346, 0, 0, 0, 0, 0, 0, 0, 0, 730, 0, 730, 0, 0, 0, 776, 0, 0, 0, 0, 0, 0, 0, 776,
  /* 38634 */ 751, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 524, 835, 524, 524, 524, 524, 524, 2458, 524, 524, 524,
  /* 38656 */ 524, 524, 546, 546, 546, 546, 546, 546, 546, 546, 546, 0, 0, 1330, 524, 524, 858, 524, 524, 524, 524, 524,
  /* 38678 */ 524, 524, 524, 524, 524, 524, 524, 524, 2462, 546, 546, 546, 546, 0, 546, 546, 892, 546, 546, 546, 546,
  /* 38699 */ 546, 915, 546, 546, 546, 546, 546, 546, 1614, 546, 1616, 546, 546, 546, 546, 546, 546, 1623, 858, 524,
  /* 38719 */ 524, 524, 524, 524, 0, 835, 892, 546, 546, 915, 546, 546, 546, 546, 546, 1596, 1598, 546, 546, 546, 546,
  /* 38740 */ 1603, 1604, 546, 1606, 1607, 546, 53503, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 977, 0, 0, 0, 0, 297, 298, 299,
  /* 38766 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 333, 333, 362, 0, 0, 0, 979, 0, 0, 0, 0, 0, 0, 0, 0, 0, 989, 0, 0, 0, 0,
  /* 38797 */ 0, 0, 1479, 880640, 0, 0, 0, 0, 0, 0, 0, 0, 695, 0, 0, 0, 0, 0, 0, 0, 0, 819, 415, 415, 415, 1101, 415,
  /* 38824 */ 1103, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1110, 415, 415, 415, 415, 415, 415, 1754, 1755, 0, 0,
  /* 38845 */ 1757, 0, 0, 0, 0, 0, 0, 1014, 0, 0, 0, 325, 325, 0, 0, 0, 0, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38876 */ 0, 0, 1703, 0, 0, 0, 0, 0, 0, 1129, 415, 415, 415, 1110, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0,
  /* 38900 */ 0, 0, 524, 524, 524, 524, 847, 1174, 524, 524, 524, 1179, 524, 524, 1188, 524, 524, 1192, 524, 524, 524,
  /* 38921 */ 524, 524, 1201, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2328, 524, 524, 524, 546, 546, 1255,
  /* 38941 */ 546, 546, 1259, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2425, 546, 546, 546, 546, 546,
  /* 38962 */ 1270, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1894, 1895, 546, 1270, 546,
  /* 38982 */ 546, 546, 546, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1062, 0, 0, 0, 1067, 0, 0, 0, 1368, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39012 */ 0, 0, 0, 0, 0, 1382, 0, 1384, 0, 0, 1387, 0, 0, 0, 1391, 0, 0, 0, 1394, 0, 0, 0, 0, 0, 1372, 1373, 0,
  /* 39039 */ 1375, 0, 0, 0, 0, 0, 0, 0, 684, 0, 0, 0, 0, 0, 0, 0, 0, 1061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1683, 0, 0, 0, 0,
  /* 39071 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1380, 0, 0, 0, 0, 765952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
  /* 39102 */ 524, 1826, 524, 524, 524, 524, 524, 524, 524, 0, 0, 0, 0, 1566, 0, 0, 0, 0, 297, 342, 344, 0, 0, 0, 0, 0,
  /* 39128 */ 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 0, 0, 0, 1845, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 39153 */ 546, 546, 2344, 2345, 546, 0, 1330, 0, 1336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 921600, 0, 0, 0, 0,
  /* 39179 */ 696320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1966, 0, 0, 0, 0, 2125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39211 */ 0, 1118208, 0, 0, 0, 2369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1366, 0, 0, 0, 0, 2376, 0, 0, 0,
  /* 39241 */ 0, 2380, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 1016223, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 39263 */ 0, 1835, 0, 0, 1566, 0, 1841, 415, 415, 415, 415, 2389, 415, 0, 0, 0, 0, 0, 0, 2391, 0, 917504, 415, 415,
  /* 39287 */ 415, 415, 415, 1451, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1453, 415, 415, 415, 415, 415, 415,
  /* 39308 */ 415, 917919, 415, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2327, 524, 524, 524,
  /* 39328 */ 524, 2332, 546, 524, 524, 524, 2407, 524, 524, 524, 524, 524, 524, 524, 546, 546, 546, 546, 546, 546, 546,
  /* 39349 */ 546, 524, 524, 524, 546, 53503, 53503, 0, 524, 524, 524, 524, 524, 2490, 524, 2492, 524, 524, 524, 524,
  /* 39369 */ 546, 546, 546, 546, 1582, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1588, 546, 546, 546, 546,
  /* 39390 */ 546, 546, 2500, 546, 2502, 546, 546, 546, 546, 0, 0, 0, 0, 0, 0, 0, 1416, 0, 0, 0, 0, 0, 1717, 0, 0, 0, 0,
  /* 39417 */ 2543, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2553, 546, 546, 546, 546, 1595, 546, 546, 1599, 546,
  /* 39437 */ 546, 546, 546, 546, 546, 546, 546, 2224, 546, 546, 546, 546, 546, 546, 546, 0, 358, 0, 0, 0, 0, 358, 0, 0,
  /* 39461 */ 0, 0, 0, 0, 0, 0, 0, 1068, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 316, 0, 0, 0, 0, 429,
  /* 39492 */ 429, 429, 429, 429, 429, 448, 448, 448, 448, 0, 0, 448, 0, 0, 0, 0, 0, 1388, 0, 1390, 0, 0, 0, 0, 0, 1395,
  /* 39518 */ 0, 1397, 448, 448, 448, 448, 493, 448, 448, 448, 500, 509, 500, 500, 500, 500, 500, 500, 518, 523, 539,
  /* 39539 */ 539, 539, 539, 539, 562, 539, 539, 539, 539, 539, 539, 562, 562, 562, 562, 562, 562, 562, 562, 581, 581,
  /* 39560 */ 539, 592, 53503, 53503, 273, 274, 0, 0, 0, 0, 605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1347, 0, 0, 0, 0, 0, 0, 0,
  /* 39588 */ 0, 0, 680, 0, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 0, 1403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 703, 0, 0, 0,
  /* 39620 */ 0, 0, 0, 0, 0, 605, 690, 0, 699, 700, 605, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
  /* 39650 */ 0, 0, 0, 0, 0, 415, 415, 415, 415, 748, 415, 753, 415, 415, 415, 415, 760, 415, 415, 415, 0, 0, 0, 0, 0,
  /* 39675 */ 1466, 0, 0, 0, 0, 0, 0, 0, 0, 2130, 0, 0, 0, 0, 0, 0, 0, 733, 0, 795, 0, 0, 0, 622, 782, 0, 0, 0, 795, 0,
  /* 39705 */ 0, 0, 0, 0, 320, 0, 0, 321, 0, 320, 0, 0, 0, 45056, 49152, 0, 605, 0, 0, 0, 0, 0, 0, 0, 782, 0, 733, 0, 0,
  /* 39734 */ 0, 0, 0, 343, 0, 0, 0, 347, 348, 350, 303, 0, 0, 0, 415, 415, 824, 415, 760, 415, 415, 415, 778, 832, 0,
  /* 39759 */ 524, 836, 524, 524, 524, 524, 524, 2577, 524, 524, 546, 546, 546, 546, 546, 546, 546, 2586, 524, 853, 859,
  /* 39780 */ 861, 524, 524, 524, 524, 524, 875, 524, 524, 524, 524, 524, 524, 887, 91351, 1174, 890, 546, 546, 546,
  /* 39800 */ 1246, 546, 546, 0, 546, 546, 893, 546, 546, 546, 546, 910, 916, 918, 546, 546, 546, 546, 546, 546, 2337,
  /* 39821 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 859, 954, 524, 875, 524, 524, 0,
  /* 39846 */ 836, 893, 546, 546, 916, 963, 546, 932, 546, 546, 546, 546, 546, 836, 524, 0, 0, 0, 893, 546, 836, 524,
  /* 39868 */ 524, 524, 524, 1790, 524, 524, 524, 524, 524, 1795, 524, 1797, 524, 524, 524, 524, 524, 1817, 524, 524,
  /* 39888 */ 524, 524, 524, 524, 524, 524, 524, 524, 1223, 524, 524, 524, 1226, 524, 0, 980, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39913 */ 0, 0, 0, 0, 993, 1022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1419, 0, 0, 0, 0, 1073, 0, 0, 0, 0, 0,
  /* 39945 */ 0, 0, 0, 0, 0, 0, 1937, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1089, 0, 0, 0, 0, 0, 980, 0, 0, 415, 415, 415, 415,
  /* 39974 */ 415, 415, 415, 1106, 415, 415, 415, 415, 415, 415, 415, 415, 1107, 415, 415, 415, 415, 415, 415, 415, 0,
  /* 39995 */ 1002, 0, 0, 0, 0, 1154, 0, 0, 0, 0, 0, 1154, 0, 0, 0, 0, 0, 1420, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 40021 */ 415, 415, 415, 415, 1109, 415, 415, 415, 1022, 1154, 1161, 415, 415, 1164, 415, 415, 415, 415, 415, 415,
  /* 40041 */ 415, 1172, 415, 0, 0, 0, 0, 726, 727, 0, 729, 0, 0, 732, 0, 0, 0, 415, 415, 1098, 415, 415, 415, 415, 415,
  /* 40066 */ 415, 415, 415, 415, 415, 0, 0, 0, 524, 524, 524, 524, 524, 1174, 524, 524, 1178, 524, 524, 524, 524, 524,
  /* 40088 */ 524, 524, 524, 524, 524, 524, 524, 2461, 524, 546, 546, 546, 546, 546, 546, 1271, 546, 546, 1274, 546,
  /* 40108 */ 546, 546, 546, 546, 546, 546, 546, 546, 1285, 1286, 546, 1320, 546, 546, 546, 546, 546, 0, 0, 0, 1330, 0,
  /* 40130 */ 0, 0, 1336, 0, 0, 0, 0, 730, 0, 776, 0, 0, 0, 0, 0, 0, 735, 415, 415, 415, 415, 415, 415, 1740, 415, 415,
  /* 40156 */ 415, 415, 415, 415, 415, 415, 415, 1985, 0, 0, 0, 0, 0, 0, 0, 0, 1385, 0, 0, 0, 0, 0, 0, 729088, 1392, 0,
  /* 40182 */ 0, 0, 0, 0, 0, 1664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1653, 0, 0, 0, 0, 0, 0, 0, 0, 1400, 0, 0, 0, 0, 0, 0, 0,
  /* 40214 */ 0, 0, 0, 0, 0, 0, 1430, 0, 1432, 1433, 0, 0, 0, 0, 0, 415, 415, 1441, 415, 415, 415, 415, 415, 415, 1447,
  /* 40239 */ 0, 1474, 0, 0, 1477, 0, 0, 0, 0, 0, 0, 1474, 0, 0, 0, 0, 0, 437, 437, 437, 437, 270773, 437, 437, 437,
  /* 40264 */ 437, 437, 270773, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 270773, 0, 0, 0, 0, 1487, 0, 1489,
  /* 40285 */ 1463, 415, 415, 1492, 415, 415, 415, 415, 1496, 524, 524, 1528, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 40305 */ 524, 524, 524, 524, 524, 1833, 2045, 0, 0, 0, 0, 1839, 2047, 524, 1638, 524, 524, 546, 546, 1643, 546,
  /* 40326 */ 546, 546, 1646, 546, 546, 0, 0, 0, 2101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2132, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40355 */ 1675, 0, 0, 0, 0, 1678, 0, 0, 0, 0, 0, 0, 0, 1727, 0, 0, 0, 0, 0, 0, 415, 415, 1681, 0, 0, 0, 0, 0, 0,
  /* 40384 */ 1687, 0, 1688, 1689, 0, 0, 0, 0, 0, 0, 1699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102274, 1102274, 1102274,
  /* 40408 */ 1102274, 0, 0, 1102274, 0, 0, 0, 0, 0, 0, 1723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415,
  /* 40434 */ 749, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 1990, 0, 415, 415, 1737, 415, 415, 415,
  /* 40457 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 765, 0, 415, 1749, 1750, 415, 1752, 415, 0, 0, 0,
  /* 40479 */ 0, 0, 0, 0, 0, 1761, 0, 0, 0, 0, 766, 621, 818, 0, 0, 0, 0, 0, 0, 734, 415, 415, 415, 415, 415, 415, 415,
  /* 40506 */ 1741, 1742, 415, 415, 415, 415, 415, 415, 415, 524, 2005, 524, 524, 524, 524, 524, 524, 524, 1202, 524,
  /* 40526 */ 524, 524, 524, 524, 524, 524, 524, 1793, 524, 524, 524, 524, 524, 524, 524, 1763, 0, 1764, 0, 0, 0, 0, 0,
  /* 40549 */ 0, 0, 0, 1772, 0, 0, 0, 0, 0, 493, 493, 497, 497, 497, 497, 500, 500, 500, 448, 493, 524, 524, 1802, 524,
  /* 40573 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2018, 524, 524, 524, 524, 524, 524, 524, 1825,
  /* 40594 */ 524, 524, 524, 1829, 524, 524, 524, 524, 0, 0, 1837, 0, 1566, 0, 0, 0, 0, 325, 325, 325, 0, 0, 0, 0, 0, 0,
  /* 40620 */ 0, 0, 0, 0, 217088, 217088, 217088, 217088, 0, 0, 1843, 0, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 40641 */ 1852, 546, 546, 1855, 546, 546, 2061, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 40661 */ 1282, 546, 546, 546, 1883, 546, 546, 546, 1886, 546, 546, 546, 1890, 546, 546, 546, 546, 524, 546, 524,
  /* 40681 */ 546, 524, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2252, 0, 0, 1916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40712 */ 0, 0, 0, 1708, 524, 524, 524, 524, 2029, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2033, 524,
  /* 40734 */ 524, 524, 524, 524, 524, 524, 0, 0, 0, 0, 2049, 546, 546, 546, 546, 2053, 546, 546, 546, 546, 546, 546,
  /* 40756 */ 1630, 524, 524, 546, 546, 1633, 524, 524, 1529, 1636, 546, 2074, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 40776 */ 546, 546, 546, 546, 546, 546, 2085, 546, 2150, 0, 0, 0, 415, 415, 415, 2157, 415, 415, 415, 415, 415, 415,
  /* 40798 */ 415, 415, 765, 0, 0, 0, 524, 524, 838, 524, 524, 415, 415, 415, 524, 524, 524, 524, 524, 2184, 524, 2186,
  /* 40820 */ 524, 524, 524, 2189, 524, 524, 524, 524, 1816, 524, 524, 524, 1820, 524, 524, 524, 524, 524, 524, 524,
  /* 40840 */ 1533, 524, 524, 524, 524, 524, 524, 524, 524, 2411, 524, 524, 546, 546, 546, 546, 546, 415, 415, 524, 524,
  /* 40861 */ 2310, 524, 524, 524, 524, 524, 524, 2315, 524, 524, 524, 524, 524, 1218, 1219, 524, 524, 524, 524, 524,
  /* 40881 */ 524, 524, 524, 524, 1832, 0, 0, 0, 0, 1566, 0, 0, 2334, 546, 546, 546, 546, 546, 546, 2339, 546, 546, 546,
  /* 40904 */ 546, 546, 546, 546, 546, 2422, 546, 546, 546, 546, 546, 546, 546, 415, 415, 415, 2388, 415, 415, 0, 0,
  /* 40925 */ 2390, 0, 0, 475136, 0, 0, 0, 415, 415, 415, 415, 415, 1753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 776, 0, 0, 0, 0,
  /* 40953 */ 0, 524, 524, 524, 524, 2408, 524, 524, 524, 524, 524, 524, 546, 546, 546, 546, 546, 546, 546, 546, 524,
  /* 40974 */ 524, 524, 546, 53503, 53842, 0, 2437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2446, 0, 0, 0, 0, 325, 325, 325, 0,
  /* 41001 */ 0, 0, 0, 0, 0, 0, 659, 660, 546, 2588, 0, 0, 0, 0, 2590, 0, 0, 2593, 524, 524, 524, 524, 524, 524, 1517,
  /* 41026 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 1808, 524, 524, 524, 524, 524, 524, 2598, 2599, 524, 546,
  /* 41046 */ 546, 546, 546, 546, 546, 2604, 2605, 546, 0, 0, 2607, 2608, 0, 524, 524, 524, 524, 546, 546, 546, 546, 0,
  /* 41068 */ 0, 524, 2640, 546, 2641, 524, 524, 524, 524, 1899, 524, 524, 524, 546, 546, 546, 546, 1904, 546, 546, 546,
  /* 41089 */ 546, 546, 1629, 546, 524, 524, 546, 546, 524, 524, 524, 524, 524, 524, 2194, 524, 524, 524, 524, 524, 524,
  /* 41110 */ 524, 524, 524, 0, 1836, 0, 0, 1566, 0, 1842, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 45056, 49152,
  /* 41136 */ 0, 318, 0, 0, 40960, 0, 0, 0, 0, 0, 398, 0, 0, 0, 0, 430, 430, 430, 430, 430, 430, 449, 449, 449, 456, 0,
  /* 41162 */ 0, 456, 319, 319, 319, 478, 319, 319, 319, 319, 494, 494, 494, 494, 494, 494, 494, 449, 449, 449, 494,
  /* 41183 */ 449, 449, 456, 449, 494, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 519, 449, 540, 540, 540,
  /* 41204 */ 540, 540, 563, 540, 540, 540, 540, 540, 540, 563, 563, 563, 563, 563, 563, 563, 563, 540, 540, 540, 563,
  /* 41225 */ 53503, 53503, 850, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2204, 524,
  /* 41245 */ 524, 524, 0, 0, 0, 0, 0, 546, 546, 546, 546, 546, 546, 907, 546, 546, 546, 546, 546, 546, 546, 546, 2080,
  /* 41268 */ 546, 546, 546, 546, 2084, 546, 546, 546, 546, 53503, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 978, 0, 0, 0, 0,
  /* 41295 */ 786, 787, 0, 0, 0, 713, 0, 0, 0, 0, 0, 0, 621, 0, 623, 624, 0, 0, 0, 0, 0, 0, 637, 638, 639, 0, 0, 0, 0,
  /* 41324 */ 0, 0, 0, 1425, 1426, 0, 0, 0, 0, 0, 0, 0, 769, 0, 0, 0, 0, 0, 0, 0, 0, 987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41356 */ 0, 0, 0, 329, 0, 0, 0, 1070, 0, 0, 0, 0, 0, 0, 1070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1099, 415, 415, 415,
  /* 41385 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1460, 1174, 524, 524, 524, 524, 524, 1184,
  /* 41405 */ 524, 524, 524, 524, 524, 524, 524, 524, 524, 2325, 524, 524, 524, 524, 524, 546, 546, 1251, 546, 546, 546,
  /* 41426 */ 546, 546, 546, 0, 0, 0, 0, 1331, 0, 0, 0, 1337, 0, 0, 0, 1355, 0, 0, 0, 0, 0, 1361, 0, 0, 0, 0, 0, 0, 781,
  /* 41455 */ 0, 0, 0, 0, 0, 708, 0, 0, 792, 415, 415, 415, 1449, 415, 415, 415, 415, 415, 415, 415, 1455, 415, 415,
  /* 41478 */ 415, 415, 415, 0, 2449, 0, 415, 524, 524, 524, 524, 524, 524, 524, 1220, 524, 524, 524, 524, 524, 524,
  /* 41499 */ 524, 524, 1203, 524, 524, 524, 524, 524, 524, 524, 1355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
  /* 41525 */ 0, 0, 325, 325, 325, 0, 0, 0, 0, 0, 0, 658, 0, 0, 0, 0, 0, 2600960, 0, 0, 2764800, 0, 0, 0, 2859008, 0, 0,
  /* 41552 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 524, 1543, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 41577 */ 524, 524, 524, 524, 524, 2460, 524, 524, 546, 546, 546, 546, 546, 0, 0, 0, 1662, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41602 */ 0, 0, 0, 0, 2719744, 0, 0, 3047424, 415, 415, 415, 1738, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 41624 */ 415, 415, 415, 764, 415, 0, 0, 1844, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 1854, 546,
  /* 41645 */ 546, 546, 2560, 546, 2562, 0, 0, 0, 0, 0, 0, 0, 0, 524, 524, 524, 524, 2519, 524, 2521, 2522, 2523, 524,
  /* 41668 */ 546, 0, 0, 0, 0, 1906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2116, 0, 0, 0, 0, 0, 2135, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41700 */ 0, 0, 0, 0, 0, 0, 0, 1719, 415, 415, 415, 524, 524, 2181, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 41723 */ 524, 2017, 524, 524, 524, 2020, 2021, 524, 524, 524, 546, 546, 2209, 546, 546, 546, 546, 546, 546, 546,
  /* 41743 */ 546, 546, 546, 546, 546, 546, 2427, 546, 546, 2454, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 546,
  /* 41764 */ 546, 546, 546, 546, 546, 546, 546, 546, 546, 2466, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 524,
  /* 41785 */ 546, 0, 0, 0, 0, 806, 0, 0, 0, 808, 0, 0, 0, 643, 0, 650, 0, 0, 0, 0, 681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41816 */ 0, 2263, 0, 0, 0, 0, 2587, 546, 0, 0, 0, 0, 0, 0, 0, 0, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 41842 */ 546, 546, 546, 546, 0, 524, 524, 524, 524, 2629, 524, 546, 546, 546, 546, 2633, 546, 0, 0, 0, 0, 0, 1478,
  /* 41865 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1007, 0, 0, 0, 0, 0, 0, 369, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415,
  /* 41897 */ 415, 415, 415, 415, 2003, 415, 524, 524, 524, 524, 524, 524, 524, 524, 524, 872, 524, 524, 524, 524, 524,
  /* 41918 */ 524, 541, 541, 564, 564, 564, 564, 564, 564, 564, 564, 541, 541, 541, 564, 53503, 53503, 0, 546, 546, 546,
  /* 41939 */ 546, 546, 904, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2215, 546, 546, 546, 546, 546, 546, 0, 995, 0,
  /* 41961 */ 0, 0, 0, 0, 0, 0, 0, 1003, 0, 0, 0, 0, 0, 0, 1947, 0, 0, 0, 0, 0, 0, 0, 0, 1955, 415, 415, 1102, 415, 415,
  /* 41990 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1459, 415, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42015 */ 0, 0, 0, 0, 0, 1928, 1174, 524, 524, 524, 524, 524, 524, 524, 1189, 524, 524, 524, 524, 524, 524, 524,
  /* 42037 */ 2044, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 546, 1256, 546, 546, 546, 546, 546, 546,
  /* 42062 */ 546, 546, 546, 546, 546, 546, 546, 546, 983586, 546, 546, 1272, 546, 546, 546, 546, 546, 546, 546, 546,
  /* 42082 */ 546, 546, 546, 546, 546, 546, 815628, 815650, 0, 546, 1272, 546, 546, 546, 546, 546, 0, 0, 0, 0, 0, 0, 0,
  /* 42105 */ 0, 0, 1481, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 1450, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 42129 */ 415, 415, 415, 1458, 415, 415, 1525, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 42150 */ 524, 2410, 524, 524, 524, 546, 546, 546, 546, 546, 546, 546, 546, 546, 0, 2606, 0, 0, 0, 0, 0, 0, 2126, 0,
  /* 42174 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2274, 0, 0, 0, 0, 0, 0, 0, 2438, 2439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42206 */ 2444, 0, 0, 0, 0, 0, 0, 0, 0, 391, 40960, 391, 391, 0, 391, 391, 321, 391, 0, 391, 414, 431, 431, 431,
  /* 42230 */ 431, 431, 431, 0, 0, 0, 0, 466, 466, 0, 473, 473, 473, 479, 480, 473, 473, 495, 495, 495, 495, 495, 495,
  /* 42253 */ 495, 495, 495, 414, 495, 414, 414, 414, 414, 495, 414, 414, 414, 495, 414, 495, 495, 495, 495, 495, 495,
  /* 42274 */ 520, 495, 542, 542, 542, 542, 542, 565, 542, 542, 542, 542, 542, 542, 565, 565, 565, 565, 565, 565, 565,
  /* 42295 */ 565, 582, 582, 542, 593, 53503, 53503, 524, 524, 524, 876, 524, 524, 0, 524, 546, 546, 546, 546, 546, 546,
  /* 42316 */ 933, 546, 546, 546, 546, 546, 524, 524, 0, 0, 0, 546, 546, 524, 524, 524, 524, 957, 885, 0, 524, 546, 546,
  /* 42339 */ 546, 546, 546, 546, 546, 966, 0, 0, 0, 0, 1712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111024, 111024, 111024,
  /* 42364 */ 111024, 0, 0, 415, 415, 2000, 415, 415, 415, 415, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 42385 */ 524, 2190, 524, 2040, 524, 524, 524, 524, 524, 524, 0, 0, 0, 0, 0, 0, 0, 0, 2379, 0, 0, 0, 2383, 0, 2385,
  /* 42410 */ 415, 543, 543, 566, 566, 566, 566, 566, 566, 566, 566, 543, 543, 543, 566, 53503, 53503, 721, 0, 0, 0, 0,
  /* 42432 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 751, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0,
  /* 42457 */ 0, 0, 524, 524, 524, 524, 846, 415, 415, 744, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 42479 */ 0, 0, 698, 524, 524, 524, 524, 524, 0, 0, 771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1669, 0, 0, 0, 546,
  /* 42508 */ 546, 546, 546, 546, 905, 546, 546, 546, 546, 546, 546, 546, 546, 546, 2471, 546, 546, 546, 524, 546, 0,
  /* 42529 */ 273, 274, 0, 0, 0, 0, 0, 0, 0, 608, 0, 0, 0, 0, 0, 0, 782, 0, 605, 0, 0, 0, 773, 0, 778, 0, 546, 937, 546,
  /* 42558 */ 546, 546, 546, 524, 524, 0, 0, 0, 546, 546, 524, 524, 524, 524, 1214, 524, 524, 524, 524, 524, 524, 524,
  /* 42580 */ 524, 524, 1227, 524, 0, 0, 0, 339968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 45056, 49152,
  /* 42606 */ 1383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1967, 546, 1579, 546, 546, 546, 546, 546, 546, 546,
  /* 42632 */ 546, 546, 546, 546, 546, 546, 546, 2341, 2342, 546, 546, 546, 546, 0, 1930, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42657 */ 0, 0, 0, 0, 2120, 0, 415, 1999, 415, 415, 415, 415, 415, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 42680 */ 524, 524, 2403, 2025, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 2459,
  /* 42700 */ 524, 524, 524, 546, 546, 546, 546, 2463, 0, 2280, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415,
  /* 42724 */ 415, 415, 415, 415, 415, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 406, 0, 0, 415, 415, 415, 415, 747, 415,
  /* 42750 */ 415, 415, 415, 757, 415, 415, 762, 415, 415, 0, 0, 0, 0, 0, 0, 2300, 0, 2301, 0, 0, 415, 415, 415, 415,
  /* 42774 */ 415, 415, 1167, 415, 415, 415, 415, 415, 1173, 1054, 1093632, 325, 0, 0, 1093632, 0, 0, 0, 0, 0, 1093632,
  /* 42795 */ 0, 0, 0, 0, 0, 1093632, 0, 1093632, 0, 0, 0, 1093632, 1094012, 1094012, 0, 0, 1093632, 0, 0, 1093632, 0,
  /* 42816 */ 0, 0, 0, 0, 1093632, 0, 0, 0, 0, 0, 524, 524, 524, 2518, 524, 524, 524, 524, 524, 524, 546, 2601, 546,
  /* 42839 */ 546, 546, 546, 546, 546, 546, 0, 0, 0, 0, 2567, 0, 0, 2570, 524, 524, 0, 0, 0, 0, 1094012, 0, 0, 0, 0, 0,
  /* 42865 */ 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 1093632, 0, 1093632, 0, 1093632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42893 */ 0, 0, 0, 2277, 0, 0, 1093632, 1093632, 1093632, 0, 0, 0, 0, 0, 0, 1093632, 1093632, 0, 0, 0, 0, 0, 524,
  /* 42916 */ 524, 2517, 524, 524, 524, 524, 524, 524, 524, 546, 1642, 546, 655906, 546, 546, 546, 546, 546, 0, 0, 0,
  /* 42937 */ 2364, 0, 0, 0, 0, 0, 2368, 0, 0, 0, 0, 2, 4263936, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 311296, 0, 0,
  /* 42963 */ 2105344, 0, 2162688, 2163578, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 42975 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3088384, 2162688, 2162688, 2162688, 2162688,
  /* 42986 */ 2162688, 0, 4263936, 6, 0, 0, 0, 0, 0, 0, 0, 2445312, 2453504, 0, 0, 2473984, 2162688, 2162688, 2162688,
  /* 43005 */ 2162688, 2162688, 2162688, 2162688, 4263936, 0, 0, 0, 0, 0, 0, 0, 0, 577536, 0, 0, 0, 0, 0, 0, 0, 1101824,
  /* 43027 */ 0, 1101824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1774, 0, 0, 1102274, 1102274, 1102274, 1102274, 0, 0,
  /* 43051 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 200704, 0, 200704, 200704, 200704, 0, 1105920, 0, 0, 0, 0, 0, 0, 0,
  /* 43076 */ 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 1110016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53503, 53503,
  /* 43103 */ 1110399, 0, 0, 0, 381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1110399, 0, 0, 0, 0, 1012, 0, 0, 0, 0, 0, 325, 325, 0,
  /* 43131 */ 0, 0, 0, 0, 0, 2879488, 0, 2772992, 0, 0, 0, 0, 0, 0, 2842624, 1110399, 1110399, 1110399, 1110399,
  /* 43150 */ 1110399, 1110399, 1110399, 1110399, 1110399, 1110399, 1110399, 1110399, 1110399, 1110399, 1110399,
  /* 43161 */ 1110399, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 200980, 200704, 200704, 0, 0, 0, 0, 0, 0, 106496, 0,
  /* 43186 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 217088, 0, 217088, 217088, 217088, 0, 0, 3076096, 0, 0, 0, 0, 0, 0,
  /* 43211 */ 0, 0, 0, 0, 0, 0, 0, 1914, 0, 0
];

XQueryParser.EXPECTED =
[
  /*    0 */ 47, 79, 663, 694, 140, 172, 234, 284, 252, 1099, 1120, 852, 315, 202, 789, 409, 441, 504, 1436, 536, 568,
  /*   21 */ 600, 632, 726, 758, 821, 884, 377, 916, 977, 948, 108, 1009, 1041, 1152, 472, 1184, 1216, 1278, 1310, 1342,
  /*   41 */ 1374, 1246, 346, 1406, 1072, 1468, 1485, 1489, 1491, 1491, 1491, 1495, 1491, 1491, 1499, 1503, 1507, 1511,
  /*   59 */ 1515, 1519, 1523, 1527, 1531, 1535, 1787, 1787, 1569, 1787, 2285, 1866, 1787, 2253, 1580, 1787, 1787, 1787,
  /*   77 */ 1787, 2258, 1540, 1552, 1556, 1562, 1543, 1566, 1787, 1787, 2716, 1787, 1787, 1575, 1787, 2258, 1579, 3539,
  /*   95 */ 1787, 1787, 1787, 2976, 1663, 1663, 1663, 1599, 1557, 1557, 1558, 1584, 1602, 1787, 1787, 1787, 1787, 3052,
  /*  113 */ 1787, 2994, 3444, 2999, 3276, 3010, 3014, 3018, 3022, 3026, 3030, 3033, 1787, 1787, 3051, 1787, 2811, 3097,
  /*  131 */ 3039, 1787, 3045, 2995, 3049, 2096, 2098, 3056, 3060, 1557, 1557, 1654, 1547, 1787, 1787, 2259, 1658, 1662,
  /*  149 */ 1634, 1557, 1650, 1668, 1787, 2253, 1673, 1633, 1590, 1557, 1679, 1787, 1690, 1590, 1643, 2455, 1701, 1545,
  /*  167 */ 3643, 1545, 1705, 1696, 1706, 1697, 1592, 1711, 1711, 1715, 1719, 1723, 1727, 1729, 1729, 1604, 1734, 1729,
  /*  185 */ 1730, 1738, 1746, 1750, 1754, 1757, 1761, 1765, 1769, 1779, 1787, 1787, 1907, 1786, 1787, 1787, 3162, 1787,
  /*  203 */ 1787, 1787, 3090, 3555, 1787, 2500, 3290, 2625, 1787, 1787, 1787, 1787, 1947, 1787, 1787, 2387, 1953, 1959,
  /*  221 */ 1787, 1787, 2446, 1787, 2884, 2118, 2440, 2317, 1787, 1787, 1787, 1965, 1787, 1675, 1787, 1787, 1787, 1787,
  /*  239 */ 1787, 1787, 1787, 1986, 1797, 2434, 1787, 1787, 1787, 1787, 1787, 1787, 2613, 1787, 1787, 1787, 1787, 1787,
  /*  257 */ 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 3580, 1787, 1787, 1787, 1787, 1787, 1787,
  /*  275 */ 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 3580, 3671, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 2938,
  /*  293 */ 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787,
  /*  311 */ 1787, 1787, 1787, 3211, 1787, 1787, 2575, 1787, 1787, 2764, 1911, 3838, 1851, 1787, 1787, 1787, 1787, 3090,
  /*  329 */ 1978, 2735, 1787, 1918, 1787, 2776, 2789, 1787, 1787, 1787, 1923, 1787, 1787, 1787, 2799, 1954, 1939, 1787,
  /*  347 */ 1787, 2813, 1787, 1787, 1787, 3808, 2866, 1787, 1787, 3474, 2372, 1787, 1787, 1893, 2468, 1787, 3092, 1787,
  /*  365 */ 3814, 2153, 1787, 1787, 1787, 3765, 1787, 1787, 1787, 3258, 2519, 2371, 1787, 1787, 3006, 1787, 2827, 2832,
  /*  383 */ 2837, 2842, 2919, 1787, 2847, 2914, 2853, 2857, 3759, 1787, 1793, 2870, 1787, 1787, 2876, 1787, 2880, 2890,
  /*  401 */ 1787, 2896, 2049, 2828, 2833, 1787, 2843, 2920, 2382, 2635, 2107, 2529, 2530, 1995, 2001, 1995, 2008, 2682,
  /*  419 */ 2009, 2683, 2004, 2380, 2003, 1787, 1787, 1787, 2545, 2047, 1787, 1787, 1845, 2013, 2660, 2117, 2019, 2023,
  /*  437 */ 2027, 2030, 2032, 2036, 2040, 1787, 2046, 1787, 1787, 3353, 3495, 1787, 3136, 3205, 2053, 3691, 2059, 2063,
  /*  455 */ 2067, 2075, 2088, 2094, 2805, 1787, 3306, 1787, 3665, 2147, 1787, 3352, 3494, 1787, 3685, 2174, 2102, 1787,
  /*  473 */ 1787, 3255, 3262, 3269, 3273, 3104, 3522, 3280, 2373, 3289, 2374, 3294, 3303, 3310, 3316, 3320, 1929, 1787,
  /*  491 */ 1931, 3233, 3329, 3333, 3337, 3342, 3346, 3373, 3358, 2699, 3362, 3376, 3363, 3578, 2594, 2111, 1926, 2587,
  /*  509 */ 2122, 1787, 1787, 2127, 1787, 1787, 2536, 3520, 2546, 2048, 1787, 2284, 3495, 1787, 2138, 2175, 2146, 2892,
  /*  527 */ 2673, 2152, 1787, 2157, 1787, 1787, 1787, 1686, 2122, 2212, 1787, 1787, 1619, 2224, 1787, 3077, 2230, 1787,
  /*  545 */ 3797, 2240, 2226, 2247, 3180, 2251, 1787, 2055, 2257, 3072, 2265, 3792, 2581, 2141, 2269, 2273, 2278, 2274,
  /*  563 */ 2988, 3187, 2283, 2289, 2296, 2304, 2252, 2306, 2599, 2310, 2314, 2323, 2329, 2335, 2339, 2348, 2354, 2860,
  /*  581 */ 2358, 2363, 2359, 2364, 2368, 2378, 2243, 3118, 2386, 1787, 1787, 2396, 2445, 1787, 3103, 2391, 2395, 2401,
  /*  599 */ 2405, 2409, 2413, 2417, 2421, 2425, 2428, 1787, 1787, 2444, 1787, 2944, 2492, 1943, 2450, 3608, 2220, 2454,
  /*  617 */ 2459, 1775, 2463, 2472, 2481, 3746, 1787, 2485, 3223, 3002, 1787, 2982, 1787, 2042, 2491, 1942, 1613, 3608,
  /*  635 */ 1787, 2497, 3510, 2507, 3634, 2300, 2512, 2344, 2517, 1787, 1787, 2524, 1787, 1787, 2169, 1787, 2397, 1787,
  /*  653 */ 3251, 2492, 1943, 2081, 3609, 3325, 2528, 2534, 2540, 2597, 1787, 1967, 3567, 1787, 2975, 1579, 1618, 1787,
  /*  671 */ 3537, 1588, 1663, 1663, 1663, 1693, 1557, 1557, 1557, 1596, 1707, 1608, 1787, 1787, 1787, 1787, 1682, 2253,
  /*  689 */ 1579, 1617, 1787, 2261, 1663, 1663, 1623, 1627, 1557, 1557, 1628, 1706, 1741, 1787, 1787, 1787, 1787, 2260,
  /*  707 */ 3540, 2455, 1632, 1663, 1663, 1638, 1642, 1557, 1557, 1647, 1547, 1787, 1787, 1787, 3538, 2258, 1633, 1663,
  /*  725 */ 1664, 3698, 1787, 1787, 1787, 3175, 2544, 1787, 2298, 2598, 1787, 3241, 1852, 2550, 1813, 2557, 2563, 2569,
  /*  743 */ 2579, 2466, 1787, 3035, 2585, 1787, 1787, 1787, 2591, 1787, 1787, 1787, 2493, 1852, 2604, 1814, 2990, 3312,
  /*  761 */ 2350, 1787, 1787, 2610, 1787, 1787, 2599, 2617, 1787, 1787, 3240, 2808, 1813, 2623, 2629, 2885, 2926, 2612,
  /*  779 */ 1787, 3430, 1787, 1787, 3249, 2633, 2989, 2640, 2535, 3168, 1787, 1971, 3509, 1787, 1787, 1975, 1982, 1787,
  /*  797 */ 2318, 1787, 1919, 1966, 1787, 2186, 3509, 1787, 3283, 2883, 2885, 1990, 3798, 1787, 1787, 3479, 2508, 3594,
  /*  815 */ 2114, 2318, 2316, 1787, 1995, 2191, 3169, 1787, 3265, 2552, 2639, 2644, 3528, 1787, 3530, 3843, 2650, 2654,
  /*  833 */ 2769, 2885, 2658, 2706, 1935, 2664, 2235, 2709, 2236, 2710, 2670, 2687, 2695, 2703, 2714, 1787, 1787, 1787,
  /*  851 */ 2950, 1787, 2886, 1856, 1991, 1860, 1787, 1864, 1870, 1879, 1883, 1887, 3146, 1787, 1891, 3124, 2431, 1898,
  /*  869 */ 1787, 1787, 1787, 1787, 1787, 3089, 1977, 2899, 1787, 2932, 1787, 1787, 1902, 1914, 1906, 2720, 3222, 3627,
  /*  887 */ 2726, 2732, 2741, 2745, 2749, 2752, 2755, 2759, 2763, 1787, 2949, 2768, 2041, 2828, 2833, 1787, 2666, 2919,
  /*  905 */ 2090, 2955, 2773, 2782, 2619, 3753, 2786, 2796, 1875, 2819, 2823, 3299, 2508, 2903, 2908, 1787, 1787, 1782,
  /*  923 */ 1787, 1787, 1787, 3771, 2885, 3777, 1787, 1787, 3004, 1960, 2292, 2912, 1787, 2918, 2116, 1787, 1949, 3323,
  /*  941 */ 1787, 2691, 2925, 1787, 1787, 1787, 2930, 3531, 1790, 1787, 1787, 2218, 1787, 2219, 2838, 2070, 2959, 1787,
  /*  959 */ 1787, 1874, 1872, 1787, 2965, 1787, 1811, 2737, 2078, 3152, 3153, 2969, 2980, 3152, 2986, 3153, 2987, 2972,
  /*  977 */ 1787, 1787, 1787, 2936, 3193, 3607, 3111, 1791, 1787, 1949, 3103, 1787, 2573, 1787, 1787, 1792, 2439, 1787,
  /*  995 */ 2529, 2942, 2071, 3111, 2948, 1787, 2954, 2571, 1787, 1787, 2437, 1787, 2921, 3827, 3067, 3071, 3076, 2676,
  /* 1013 */ 2559, 3121, 1787, 1787, 3081, 3086, 3096, 3101, 1787, 2502, 1787, 2279, 3212, 3109, 3115, 3128, 1934, 1787,
  /* 1031 */ 3549, 2133, 1787, 1787, 3133, 1787, 3140, 1787, 1787, 3081, 3144, 3097, 3102, 1787, 2503, 1787, 3150, 2207,
  /* 1049 */ 3157, 3439, 1787, 1787, 2130, 1787, 1787, 1787, 2331, 3161, 2477, 3166, 1787, 3810, 3465, 2646, 3220, 1787,
  /* 1067 */ 3173, 3682, 3179, 3184, 3441, 1787, 3041, 1787, 3354, 1787, 1787, 3657, 1787, 3847, 1787, 1787, 2690, 1787,
  /* 1085 */ 1787, 3837, 2728, 1787, 3601, 1787, 1787, 1787, 1787, 1787, 1787, 3297, 1787, 3826, 1787, 1787, 1787, 1787,
  /* 1103 */ 1787, 1787, 1787, 1787, 1787, 1787, 1787, 3212, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 3581, 1787, 1787,
  /* 1121 */ 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 2792, 1548, 1850, 1787, 1787, 1801, 1805, 1787,
  /* 1139 */ 2215, 1818, 1822, 1826, 1830, 1834, 1838, 1842, 3789, 1849, 1787, 1787, 1787, 2325, 3197, 1787, 1787, 1955,
  /* 1157 */ 3202, 3782, 1933, 2599, 3209, 3217, 3221, 3105, 3620, 2565, 3227, 1787, 1961, 3618, 1787, 1787, 2325, 3257,
  /* 1175 */ 3231, 3822, 2084, 3237, 3816, 3437, 3246, 1787, 3616, 3377, 2698, 3370, 3367, 3381, 3384, 3388, 1787, 1787,
  /* 1193 */ 1787, 3424, 1787, 2116, 2208, 3393, 3397, 3401, 3405, 3409, 3413, 3417, 3419, 1787, 1787, 1787, 3423, 1787,
  /* 1211 */ 2319, 3485, 3428, 2182, 2134, 3848, 1787, 3434, 3448, 3129, 3452, 3456, 2487, 1787, 3463, 3469, 3473, 1787,
  /* 1229 */ 3285, 3478, 2114, 3484, 3517, 2198, 2134, 1787, 3833, 2904, 3489, 2553, 1571, 3493, 1787, 2849, 3499, 1787,
  /* 1247 */ 1787, 1787, 3750, 3656, 3757, 1894, 1789, 2802, 3763, 3769, 3500, 1787, 3775, 2015, 3588, 3804, 1787, 1787,
  /* 1265 */ 3389, 3781, 1787, 1787, 1892, 3601, 1787, 1787, 2105, 1787, 3786, 1787, 3802, 3504, 1788, 2919, 1787, 3285,
  /* 1283 */ 3508, 2319, 3514, 3526, 2199, 3535, 1536, 3082, 3544, 2919, 3587, 1787, 1787, 3459, 3548, 1787, 1787, 2872,
  /* 1301 */ 3553, 2961, 1787, 1787, 2679, 1984, 3559, 3564, 2185, 1787, 3571, 3575, 3585, 1787, 1787, 3636, 3592, 1787,
  /* 1319 */ 1787, 1787, 3598, 1611, 1787, 3704, 1984, 3560, 2863, 1787, 3605, 3613, 2475, 1787, 1669, 3592, 1787, 1787,
  /* 1337 */ 2778, 3600, 1787, 3624, 3631, 3640, 1967, 3647, 3324, 1787, 3653, 1787, 1787, 3662, 1976, 3669, 3675, 1787,
  /* 1355 */ 3679, 3222, 3062, 1787, 3063, 1997, 3649, 3689, 3695, 3324, 3349, 2513, 3655, 3702, 1787, 2722, 3338, 1787,
  /* 1373 */ 3442, 3443, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 3708,
  /* 1391 */ 1772, 3190, 3712, 3716, 3720, 3724, 3728, 3732, 3736, 3740, 3744, 1787, 1787, 1787, 1808, 1787, 3820, 1787,
  /* 1409 */ 1787, 2105, 3826, 3091, 3480, 1787, 3831, 1787, 1787, 3198, 3837, 1787, 1787, 1787, 2815, 2520, 1787, 2342,
  /* 1427 */ 1787, 2600, 2468, 1787, 2106, 3842, 1787, 1787, 2148, 1787, 1787, 2161, 1787, 2166, 1787, 3795, 1787, 2467,
  /* 1445 */ 2173, 2179, 2564, 2673, 2565, 1685, 2190, 1787, 1787, 1742, 2195, 1787, 1787, 2162, 3242, 2233, 3795, 2123,
  /* 1463 */ 2203, 2142, 2234, 2606, 2207, 3658, 1787, 1787, 1787, 3658, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787,
  /* 1481 */ 1787, 1787, 1787, 3213, 5442, 3852, 4017, 3858, 4433, 3866, 3888, 3888, 3888, 3888, 4002, 3868, 3888, 3888,
  /* 1499 */ 3889, 3872, 3888, 3888, 3881, 3888, 3896, 3899, 3887, 3893, 3888, 3883, 3903, 3905, 3907, 3908, 3909, 3909,
  /* 1517 */ 3909, 3913, 3917, 3916, 3921, 3924, 3928, 3932, 3941, 3945, 3935, 3949, 3937, 3953, 5177, 3852, 4160, 4653,
  /* 1535 */ 4914, 4017, 4017, 4017, 3877, 5260, 5260, 4697, 5264, 3998, 4072, 4072, 4057, 4017, 4017, 4017, 3989, 5264,
  /* 1553 */ 5264, 5264, 5265, 4350, 4072, 4072, 4072, 4072, 4073, 4072, 4074, 5289, 4075, 4006, 5338, 4913, 4017, 3963,
  /* 1571 */ 4017, 4017, 3968, 5869, 4497, 4016, 4017, 4026, 5260, 5260, 5260, 5260, 3994, 4908, 4075, 5264, 4077, 5260,
  /* 1589 */ 5263, 5264, 5264, 4076, 4072, 4072, 4017, 4072, 4073, 4078, 5264, 4030, 4040, 4072, 4042, 4912, 4912, 4124,
  /* 1607 */ 4130, 4912, 4912, 4915, 4017, 3968, 4017, 3968, 4017, 5826, 5260, 4585, 4017, 4017, 4017, 3974, 5264, 5264,
  /* 1625 */ 5659, 4050, 4054, 4072, 4072, 4072, 4079, 5260, 5261, 5264, 5264, 5264, 4077, 5264, 5264, 5660, 4050, 4052,
  /* 1643 */ 4072, 4072, 4072, 4080, 4072, 4063, 5264, 4072, 4072, 4074, 4077, 4072, 4072, 4075, 4071, 4585, 4017, 4017,
  /* 1661 */ 4583, 5262, 5264, 5264, 5264, 5264, 4050, 4056, 4017, 4017, 4017, 4012, 5260, 4585, 4017, 4687, 4302, 4017,
  /* 1679 */ 4073, 4077, 4057, 4017, 3968, 4886, 4017, 3972, 3976, 4764, 4773, 5260, 4586, 5263, 5264, 4046, 4041, 4072,
  /* 1697 */ 4056, 4017, 4872, 5264, 4873, 5264, 5264, 4071, 4872, 5264, 5264, 4072, 4072, 4911, 4873, 4076, 4072, 4057,
  /* 1715 */ 4873, 4071, 4353, 4078, 4063, 4080, 4017, 4449, 4189, 4084, 4092, 4104, 4116, 4120, 4912, 4912, 4912, 4912,
  /* 1733 */ 4126, 4107, 4142, 4150, 4214, 4154, 4912, 4172, 4912, 4017, 4017, 4017, 3975, 4177, 4207, 4173, 4144, 4211,
  /* 1751 */ 4230, 4234, 4238, 4242, 4246, 4246, 4250, 4254, 4257, 4261, 4263, 4267, 4271, 4462, 4146, 4280, 4284, 4291,
  /* 1769 */ 4287, 4295, 4017, 5851, 4017, 4689, 4017, 3972, 5012, 4869, 4017, 5340, 4000, 4017, 3972, 5362, 5389, 5381,
  /* 1787 */ 4017, 4017, 4017, 4017, 3970, 4017, 4017, 4017, 3972, 5353, 4495, 4017, 4017, 4307, 4017, 5334, 4163, 4442,
  /* 1805 */ 4314, 4320, 4325, 4017, 3972, 5449, 4017, 3986, 4017, 4017, 4810, 4017, 5077, 4335, 4017, 5690, 4440, 4340,
  /* 1823 */ 4339, 4347, 4362, 4363, 4367, 4371, 4374, 4376, 4380, 4384, 4391, 4390, 4388, 4388, 4395, 4397, 4399, 4399,
  /* 1841 */ 4403, 4409, 4407, 4413, 4017, 4017, 5846, 5000, 3989, 4982, 4542, 4017, 4017, 4017, 4066, 4523, 4863, 4017,
  /* 1859 */ 4339, 4017, 5807, 4017, 4425, 5932, 4514, 4017, 4017, 3980, 5521, 4111, 4972, 4017, 4017, 3985, 4017, 4017,
  /* 1877 */ 4017, 5294, 4112, 4017, 4017, 5587, 4431, 4017, 4017, 6028, 4427, 4017, 5277, 4437, 5023, 4017, 4017, 4017,
  /* 1895 */ 4163, 4017, 4017, 5519, 5553, 4676, 4788, 4472, 4017, 4017, 4478, 4489, 4017, 4017, 4017, 4180, 4493, 5514,
  /* 1913 */ 4017, 5513, 4017, 4017, 5139, 4513, 4017, 4017, 4017, 4182, 4017, 5079, 4530, 4017, 4017, 6013, 4017, 4017,
  /* 1931 */ 6015, 5636, 4017, 5564, 4017, 4017, 4017, 5347, 4017, 5546, 4541, 4017, 4134, 4969, 4017, 4017, 4184, 4514,
  /* 1949 */ 4017, 4017, 4017, 5820, 4017, 5511, 4017, 4017, 4017, 4190, 5667, 4021, 4017, 4017, 4017, 4192, 4182, 4566,
  /* 1967 */ 4017, 4017, 4017, 4296, 5038, 5145, 5156, 5546, 4586, 4017, 4017, 4017, 4327, 4017, 4017, 5183, 4017, 4017,
  /* 1985 */ 5878, 4017, 4017, 4017, 5834, 4564, 4017, 4017, 4017, 4330, 4017, 5610, 4017, 4017, 4017, 5929, 4710, 4017,
  /* 2003 */ 4017, 4712, 4017, 4017, 4710, 4713, 4017, 4711, 4017, 4017, 4578, 5112, 4017, 4017, 4017, 6033, 4017, 5614,
  /* 2021 */ 4647, 4597, 4605, 4609, 4610, 4614, 4617, 4619, 4621, 4623, 4623, 4623, 4623, 4627, 4628, 4628, 4628, 4628,
  /* 2039 */ 4629, 4633, 4017, 4017, 4017, 4355, 4330, 4889, 4893, 5650, 4017, 4017, 4017, 4354, 5509, 4668, 4017, 4017,
  /* 2057 */ 4086, 4765, 4017, 5846, 4516, 5840, 3967, 4017, 4672, 4916, 3966, 4017, 4682, 4017, 4134, 5547, 4017, 4017,
  /* 2075 */ 4017, 6022, 5507, 4017, 4134, 5548, 3969, 4017, 5826, 4017, 4137, 4017, 5625, 4017, 6014, 4017, 4017, 4098,
  /* 2093 */ 4189, 6039, 4686, 4017, 4017, 4133, 4017, 5504, 4017, 4709, 3862, 5651, 4017, 4165, 4017, 4017, 4017, 5612,
  /* 2111 */ 4727, 4017, 6012, 4017, 4189, 4017, 4017, 4017, 5877, 4017, 4017, 4740, 4017, 4017, 4017, 4496, 3972, 4734,
  /* 2129 */ 4739, 4017, 4192, 4196, 5571, 4017, 4017, 4017, 5380, 5551, 4017, 5076, 4660, 4017, 4017, 4161, 4482, 4484,
  /* 2147 */ 5652, 4017, 4017, 4017, 4474, 4757, 4017, 4017, 5338, 4442, 3975, 4763, 4772, 4777, 5339, 4017, 5338, 4017,
  /* 2165 */ 5338, 4888, 4892, 5649, 4017, 4275, 4017, 4274, 5075, 4660, 5417, 4017, 4161, 4480, 4160, 4480, 4786, 4017,
  /* 2183 */ 4297, 4017, 5156, 4017, 4017, 4017, 5546, 4768, 4017, 4017, 4017, 4559, 4763, 4767, 4792, 4017, 4297, 4017,
  /* 2201 */ 5157, 4017, 4017, 5552, 5076, 5407, 4017, 5340, 4017, 4017, 5688, 4798, 4764, 4819, 4017, 4316, 4321, 4017,
  /* 2219 */ 3987, 4017, 4017, 4017, 5283, 4763, 4818, 4017, 4017, 4162, 4824, 5339, 4017, 4890, 4894, 5138, 4017, 4017,
  /* 2237 */ 5338, 5041, 5520, 4496, 4017, 5076, 4661, 4710, 4017, 4712, 4017, 5339, 4017, 4829, 4766, 4326, 4017, 4017,
  /* 2255 */ 4017, 4582, 4509, 4017, 4017, 4017, 4583, 5260, 5260, 5263, 5339, 4017, 5776, 4895, 4823, 4017, 4915, 4828,
  /* 2273 */ 5339, 4017, 4887, 4088, 4508, 4508, 4017, 4017, 4017, 4593, 4017, 5846, 4017, 4017, 4017, 4498, 4017, 5076,
  /* 2291 */ 4662, 4017, 4356, 5367, 5371, 4160, 5674, 4017, 4017, 4167, 4017, 3984, 5054, 5041, 4017, 4017, 4834, 4326,
  /* 2309 */ 4017, 4964, 4017, 5075, 4663, 4017, 5673, 4017, 4017, 4183, 4189, 4017, 4017, 5818, 4833, 4840, 4017, 4017,
  /* 2327 */ 4191, 4195, 4887, 4838, 4017, 4017, 4193, 4197, 4017, 4963, 4017, 4662, 4793, 4181, 4839, 4017, 4358, 4017,
  /* 2345 */ 4017, 5774, 5066, 5079, 4839, 4017, 4296, 4188, 4017, 4965, 4662, 4710, 4840, 4844, 4017, 4554, 4017, 4552,
  /* 2363 */ 4552, 4326, 4017, 4844, 4017, 4856, 4017, 4855, 4017, 4442, 4017, 4017, 4017, 5633, 5642, 4860, 4710, 4017,
  /* 2381 */ 4712, 4017, 4710, 5665, 4017, 5005, 4017, 4017, 4017, 4638, 4877, 4017, 4355, 4881, 4983, 4017, 4017, 4017,
  /* 2399 */ 4660, 4021, 4137, 4067, 4899, 4698, 5549, 4905, 4009, 5008, 4922, 4920, 4926, 4929, 4931, 4935, 4942, 4946,
  /* 2417 */ 4938, 4951, 4952, 4951, 4950, 4951, 4951, 4951, 4956, 4956, 4956, 4956, 4958, 4960, 4017, 4457, 4438, 4017,
  /* 2435 */ 4017, 5850, 4017, 3972, 5393, 4017, 4017, 4017, 5157, 4660, 4848, 4017, 4017, 4017, 4641, 3968, 4017, 4017,
  /* 2453 */ 5826, 4987, 4017, 4017, 4017, 4687, 4017, 4994, 4017, 5072, 4549, 4901, 5074, 4017, 4496, 4017, 4017, 5551,
  /* 2471 */ 4017, 5855, 4017, 5523, 4017, 4505, 4017, 4017, 5301, 4017, 5019, 4017, 4017, 5027, 5383, 5033, 4017, 4017,
  /* 2489 */ 4225, 5838, 4343, 5135, 4017, 4017, 4017, 4663, 4309, 5047, 5621, 4017, 4514, 4017, 4017, 4017, 5801, 4017,
  /* 2507 */ 5620, 4017, 4017, 4017, 4689, 3983, 4017, 4017, 4017, 4697, 5050, 4438, 4017, 4017, 4439, 4017, 4017, 3973,
  /* 2525 */ 5065, 5049, 5070, 5087, 4017, 4017, 4017, 4710, 4017, 5056, 4188, 4017, 4017, 4017, 4745, 4017, 5091, 4017,
  /* 2543 */ 4168, 5731, 4017, 4017, 4017, 4889, 4893, 4341, 5133, 5137, 4017, 4017, 4017, 5003, 3969, 5076, 4017, 4017,
  /* 2561 */ 4443, 5544, 5144, 4017, 4017, 4017, 4915, 4017, 4296, 5086, 4017, 4017, 4468, 5394, 4017, 4017, 4488, 4017,
  /* 2579 */ 4017, 5109, 4017, 4017, 4495, 5075, 4185, 4189, 4017, 4017, 4525, 4735, 5103, 4600, 4188, 4017, 4515, 4718,
  /* 2597 */ 4017, 4166, 4017, 4017, 4017, 4887, 4017, 5412, 5135, 4017, 4017, 4536, 4017, 4888, 5105, 4187, 4017, 4017,
  /* 2615 */ 4017, 4997, 5104, 4186, 4017, 4017, 4568, 4189, 4017, 5346, 5514, 4017, 5079, 4601, 4017, 5061, 4017, 5060,
  /* 2633 */ 4035, 5136, 4017, 4017, 4572, 4017, 5143, 4017, 4017, 5432, 4017, 5846, 4189, 4017, 4017, 4581, 4691, 4017,
  /* 2651 */ 5348, 4017, 5877, 5879, 4017, 4017, 5153, 5137, 5347, 4017, 4017, 4591, 5198, 4017, 5521, 4017, 5519, 4017,
  /* 2669 */ 3854, 5338, 5041, 5521, 4017, 4516, 4537, 4017, 4202, 5540, 4017, 4217, 4221, 4017, 4223, 4017, 4713, 4017,
  /* 2687 */ 5520, 4017, 5346, 5519, 4017, 4017, 4017, 5795, 4017, 5521, 5346, 5519, 4017, 5678, 4223, 3968, 4017, 5521,
  /* 2705 */ 5346, 5520, 4017, 4017, 5520, 4017, 4017, 5522, 4017, 5520, 5347, 4017, 4017, 4636, 4017, 4017, 5077, 4017,
  /* 2723 */ 4017, 4675, 4017, 4017, 5076, 4017, 4017, 4692, 4017, 5181, 4017, 4033, 5272, 4502, 4017, 4017, 3988, 4017,
  /* 2741 */ 4017, 5593, 5191, 5195, 5205, 5207, 5211, 5215, 5221, 5219, 5228, 5228, 5227, 5225, 5228, 5232, 5235, 5235,
  /* 2759 */ 5241, 5242, 5242, 5239, 5246, 4017, 4017, 4017, 5040, 5307, 4017, 4017, 4017, 5042, 5269, 3990, 4020, 4017,
  /* 2777 */ 4520, 4017, 4017, 4011, 5925, 4804, 5323, 4019, 5276, 4887, 5287, 4664, 4017, 4529, 4438, 4017, 4017, 5963,
  /* 2795 */ 4298, 4017, 5293, 5298, 4017, 4534, 5512, 4017, 4017, 6026, 4017, 4017, 6040, 4017, 4066, 4036, 5137, 4136,
  /* 2813 */ 4017, 4017, 4887, 5425, 4017, 4439, 4189, 4017, 4759, 4758, 4202, 4189, 4017, 4203, 4355, 5877, 5369, 4136,
  /* 2831 */ 5252, 5252, 4201, 4017, 4017, 4328, 4328, 4017, 4017, 4017, 5078, 4017, 5519, 4017, 5015, 4017, 5311, 4100,
  /* 2849 */ 4017, 4017, 4729, 5715, 4017, 5333, 5344, 5702, 5819, 4017, 5419, 4017, 4553, 4017, 4296, 4017, 5157, 4017,
  /* 2867 */ 4441, 4017, 4440, 5358, 4189, 4017, 4017, 4730, 5893, 4017, 5352, 5357, 5389, 5510, 5510, 3972, 4017, 4558,
  /* 2885 */ 4189, 4017, 4017, 4017, 4276, 4017, 5586, 4017, 4017, 4750, 4017, 4017, 5162, 4460, 4017, 4560, 4159, 4466,
  /* 2903 */ 4746, 4017, 4017, 4017, 5079, 4326, 5420, 4017, 5418, 4780, 5375, 4017, 4017, 4753, 5314, 5014, 4017, 3969,
  /* 2921 */ 4017, 4017, 4017, 5076, 5388, 4017, 4017, 4017, 5127, 5794, 5387, 4017, 4017, 4793, 4514, 4017, 5163, 4017,
  /* 2939 */ 4017, 4807, 4017, 3875, 4017, 4017, 4356, 4330, 4343, 3971, 4017, 4017, 4017, 5161, 5307, 4355, 4017, 4017,
  /* 2957 */ 4017, 5257, 4017, 5852, 3968, 4017, 4017, 3971, 5077, 5398, 4017, 3970, 5548, 4017, 4017, 5040, 4017, 5039,
  /* 2975 */ 4017, 4582, 5260, 5260, 4584, 4017, 5038, 4017, 4017, 4846, 4017, 4017, 5041, 4017, 4017, 4017, 5338, 5145,
  /* 2993 */ 4017, 5410, 4017, 4135, 4017, 4017, 5429, 4690, 5436, 4017, 4587, 4017, 4017, 4357, 5305, 4303, 4017, 4017,
  /* 3011 */ 5320, 4017, 5454, 5460, 5456, 5464, 5465, 5469, 5475, 5473, 5479, 5482, 5482, 5490, 5496, 5492, 5482, 5482,
  /* 3029 */ 5484, 5486, 5486, 5486, 5486, 5500, 4017, 4017, 4887, 5104, 5611, 4697, 4017, 4017, 4887, 5522, 4887, 4017,
  /* 3047 */ 4017, 5404, 4058, 5117, 4017, 4017, 4887, 5560, 4017, 5527, 4017, 5248, 4663, 4138, 5535, 4017, 4017, 4978,
  /* 3065 */ 4678, 4017, 3959, 4136, 4017, 5534, 4022, 4017, 4017, 4017, 5339, 5539, 4017, 4017, 4017, 5340, 5558, 5253,
  /* 3083 */ 4017, 4017, 5939, 4017, 5702, 4136, 4017, 4640, 4017, 4017, 4017, 4164, 4017, 4017, 5847, 4688, 4811, 4189,
  /* 3101 */ 4189, 5611, 4017, 4356, 4017, 4017, 5603, 4017, 4017, 5965, 4017, 4017, 5015, 4017, 5504, 5854, 5247, 4661,
  /* 3119 */ 4711, 4711, 4017, 4444, 5545, 4017, 4448, 4453, 4437, 4059, 4021, 4017, 4017, 5805, 4017, 5529, 5570, 4017,
  /* 3137 */ 4645, 4017, 4651, 5338, 4158, 4017, 4157, 5701, 4135, 4017, 4017, 5022, 4017, 4017, 5116, 4017, 4017, 5039,
  /* 3155 */ 4017, 4017, 5576, 4017, 5582, 5591, 5572, 4017, 4017, 4017, 5401, 5300, 4021, 4017, 4017, 5043, 4188, 4017,
  /* 3173 */ 5782, 5853, 4017, 4017, 5102, 5098, 4017, 5339, 4017, 4017, 4087, 5609, 5599, 4021, 5338, 4017, 5961, 5853,
  /* 3191 */ 4017, 5852, 4017, 4356, 4439, 4136, 4723, 4017, 4017, 4017, 5422, 4194, 4198, 4326, 4017, 4659, 4017, 3861,
  /* 3209 */ 5560, 4017, 4017, 4137, 4017, 4017, 4017, 4018, 4017, 5847, 5093, 4814, 5610, 4354, 4017, 4017, 4017, 5037,
  /* 3227 */ 5608, 5599, 4021, 5565, 5338, 5566, 5565, 4017, 5664, 5610, 4813, 5610, 4354, 4017, 4660, 4017, 4017, 4017,
  /* 3245 */ 4890, 4017, 5935, 5564, 4017, 4661, 4017, 4354, 4329, 4343, 4850, 4195, 4199, 4017, 4017, 4017, 5424, 4017,
  /* 3263 */ 5565, 5565, 4017, 4663, 4697, 5131, 4017, 5056, 4017, 4136, 4017, 5950, 4812, 5610, 5701, 4355, 5317, 4915,
  /* 3281 */ 5935, 5565, 4017, 4688, 4017, 4017, 4017, 5859, 5642, 4017, 4017, 4017, 5439, 4017, 5564, 5564, 4017, 4691,
  /* 3299 */ 4017, 4017, 5813, 4189, 4017, 5058, 4135, 4017, 4696, 4017, 4714, 5951, 5656, 4017, 4017, 5122, 4017, 5519,
  /* 3317 */ 5553, 4017, 4135, 5338, 4794, 5329, 4017, 4697, 4017, 4017, 4017, 5083, 4017, 5783, 4017, 4135, 4884, 4017,
  /* 3335 */ 4017, 6016, 5637, 4017, 4017, 4017, 5444, 5635, 5613, 4886, 5272, 5612, 5520, 4160, 4017, 4697, 4677, 4017,
  /* 3353 */ 4705, 4017, 4017, 4017, 4358, 5638, 5270, 5612, 5671, 5684, 5610, 5519, 4017, 4420, 5514, 5679, 5520, 4420,
  /* 3371 */ 5638, 5520, 4420, 5638, 4017, 4420, 5638, 4017, 5683, 5610, 5514, 5679, 5520, 4421, 4711, 5175, 5175, 4713,
  /* 3389 */ 4017, 4017, 4017, 5447, 5595, 5028, 4017, 5554, 5871, 5338, 5694, 5700, 5872, 5706, 5707, 5711, 5719, 5720,
  /* 3407 */ 5724, 5735, 5741, 5737, 5745, 5749, 5753, 5752, 5757, 5760, 5761, 5765, 5766, 5766, 5767, 5771, 4017, 5338,
  /* 3425 */ 5861, 5865, 4017, 5848, 5787, 4017, 4017, 5126, 4186, 5799, 4017, 5833, 4017, 4721, 4017, 5338, 5566, 4017,
  /* 3443 */ 4017, 4017, 5416, 4017, 5702, 5380, 4017, 4020, 5326, 5811, 5817, 5379, 5824, 4017, 5830, 5696, 4017, 4729,
  /* 3461 */ 5892, 5897, 4226, 5138, 4017, 4017, 5137, 4137, 4017, 5844, 4017, 4224, 5845, 4017, 4017, 4017, 5448, 5863,
  /* 3479 */ 4222, 4017, 4017, 4017, 4331, 5818, 5336, 5906, 4017, 5780, 5665, 5870, 4017, 4018, 5876, 4017, 4017, 4017,
  /* 3497 */ 5510, 4017, 5884, 4017, 4017, 4017, 5515, 4357, 5714, 5883, 5138, 4219, 4223, 4017, 4017, 4017, 4310, 5336,
  /* 3515 */ 5906, 4017, 5947, 5847, 5201, 4017, 4744, 4017, 4017, 4135, 4017, 5847, 5039, 4017, 4017, 5149, 4017, 4017,
  /* 3533 */ 4017, 5014, 4017, 5377, 4017, 4017, 5260, 5260, 5260, 4586, 4017, 5118, 4017, 4017, 4020, 5901, 4017, 4017,
  /* 3551 */ 4017, 5530, 5898, 5138, 4017, 4017, 5271, 4546, 4017, 4975, 5905, 4017, 5949, 5949, 5039, 4017, 4016, 3968,
  /* 3569 */ 4026, 4886, 5910, 5253, 4017, 5938, 4574, 4017, 4019, 4017, 4751, 4017, 4017, 4134, 4017, 4017, 3971, 4017,
  /* 3587 */ 5888, 4017, 4017, 4017, 5517, 5916, 5900, 4017, 4017, 5271, 5185, 5628, 5915, 5899, 4017, 4017, 4017, 5551,
  /* 3605 */ 4017, 5911, 5549, 4017, 4017, 4017, 5144, 4017, 5940, 5870, 4019, 4017, 4851, 4196, 4200, 4017, 4017, 5114,
  /* 3623 */ 4137, 4017, 5920, 4017, 5878, 5167, 5172, 4782, 4017, 5334, 5187, 4017, 4866, 4017, 4017, 4357, 5629, 5949,
  /* 3641 */ 4016, 5157, 4017, 4873, 5264, 4076, 5549, 4697, 4017, 4017, 5335, 4704, 4017, 4990, 4677, 4017, 4017, 4017,
  /* 3659 */ 5552, 4017, 4017, 4989, 4980, 5138, 4017, 4887, 4891, 5648, 5921, 5877, 4017, 4017, 5337, 4017, 4752, 5078,
  /* 3677 */ 5849, 5156, 5547, 4017, 4356, 4017, 4887, 5117, 4017, 4645, 4017, 4702, 4017, 5514, 4017, 4017, 5338, 5337,
  /* 3695 */ 4017, 5547, 4697, 4017, 4888, 5097, 5730, 4017, 5336, 4017, 4017, 5338, 5920, 3972, 5449, 5853, 5853, 5585,
  /* 3713 */ 4017, 3956, 5852, 5850, 3972, 5852, 5645, 5944, 5955, 5421, 5958, 4095, 4801, 5969, 5971, 5973, 5974, 5978,
  /* 3731 */ 5981, 5982, 5988, 5996, 5995, 5986, 5982, 5992, 6000, 6002, 6000, 6000, 6000, 6006, 6010, 4017, 4017, 5382,
  /* 3749 */ 5032, 4660, 5007, 4017, 4163, 4017, 4655, 5281, 4017, 6020, 4017, 4017, 5420, 4017, 6027, 5578, 4017, 4017,
  /* 3767 */ 5423, 4017, 4017, 5516, 4017, 4017, 5446, 5363, 4017, 6032, 4017, 4017, 5510, 4495, 5168, 4017, 4017, 4017,
  /* 3785 */ 5564, 6037, 4017, 4886, 4017, 4962, 4417, 4017, 4017, 5847, 4017, 4017, 5848, 4017, 4017, 4017, 4564, 4017,
  /* 3803 */ 5167, 4017, 4017, 5518, 4017, 4017, 5424, 4017, 4017, 5559, 5549, 4110, 4342, 4017, 4017, 5604, 4017, 5446,
  /* 3821 */ 5450, 4017, 4017, 5618, 5549, 5550, 4017, 4017, 4017, 5666, 5338, 4442, 4017, 4017, 5727, 5549, 5522, 4017,
  /* 3839 */ 4017, 4017, 5667, 4330, 4017, 4017, 4017, 5702, 4329, 4017, 4017, 4017, 5791, 8388608, 16777216,
  /* 3854 */ 1073741824, 0, 1032, 4194304, 1073872896, 131072, 131072, 131072, 0, 514, 139264, 4194304, 268566528,
  /* 3867 */ 131072, 537133056, -2147221504, -2147221504, -2147221504, 33816576, 537133056, -2147221504, 262144,
  /* 3876 */ 0x80000000, 0, 0, 24, 65536, 262174, 262160, 262144, 262144, 33816576, 278528, 33816576, 262144, 262144,
  /* 3890 */ 262144, 262144, 262160, 8768, 262144, 262144, 262144, 262160, -2147221504, 262144, 262160, 268444864,
  /* 3902 */ 10560, 278528, 278544, 537149440, 278530, 772014080, 772014080, 168034304, 168034304, 168034304, 168034304,
  /* 3913 */ 168034304, 168034304, 772014080, 168034304, -1375469568, 772014080, 772014080, 772014080, 235143168,
  /* 3922 */ -1375469568, 772014080, 235143168, 772014080, 235143168, 235143168, 772014080, 772014080, 772030464,
  /* 3931 */ 772014080, 32768, 32800, 163872, 294944, -2147188674, -2145091522, -2145091522, 772046880, 772046880,
  /* 3941 */ 163840, 2392096, 294944, 537165856, -2147188704, 294944, 294944, -2147188704, -2145091522, -2111537090,
  /* 3951 */ -2145091522, -2145091522, -1375436738, -1910210498, 4096, 4096, 0, 5120, 0, -2004877312, 0, 142606336,
  /* 3963 */ 524288, 524288, 524288, 0, -872415232, 0, 0, 0, 8192, 0, 0, 0, 1, 2, 4, 128, 512, 0, 128, 8256, 0,
  /* 3984 */ -536870912, 0, 0, 0, 786432, 0, 0, 0, 1048576, 81920, 16384, 16384, 16384, 134217728, 32768, 32768, 0,
  /* 4001 */ 32768, 262144, 524288, 262160, 537133056, 2129920, 4096, 65536, 16777216, 8192, 0, 0, 8, 16, 512, 8, 0, 0,
  /* 4019 */ 0, 0, 0x80000000, 0, 0, 0, -2139095040, 8192, 64, 64, 64, 32768, 32768, 32, 2097152, 131200, 32, 0, 0,
  /* 4038 */ 131072, 67108864, 2129920, 2097184, 2129920, 2129920, 2129920, 65536, 32, 32, 2097152, 2097184, 32, 32,
  /* 4052 */ 2097184, 2097184, 2097184, 2097184, 2129920, 2129920, 0, 0, 0, 3, 64, 2129920, 32768, 2129920, 32768, 0, 0,
  /* 4069 */ 32, 32, 32768, 2129920, 2129920, 2129920, 2129920, 32768, 32768, 32768, 2129920, 2129920, 32768, 2129920,
  /* 4083 */ 0, 268435456, 1073741824, 0, 2, 4, 4096, 8192, 229376, 0, 16, 16, 2, 2, 4, 2, 2368, 16384, 1048576,
  /* 4102 */ 1073741824, 0, 1073774592, 16, 16, 20, 24, 304, 48, 0, 0, 0, 1610612736, 0, 48, 80, 272, 65552, 262160,
  /* 4121 */ 524304, 1048592, 268435472, 131088, 16, 20, 16, 20, 304, 48, 16, 16, 17, 0, 0, 0, 8388608, 0, 0, 0, 19,
  /* 4142 */ 1048848, 272, 272, 272, 16, 16, 16, 20, 272, 1572880, 524304, 524304, 48, 524304, 16, 16, 192, -1879048192,
  /* 4160 */ 0, 0, 131072, 0, 0, 2, 0, 0, 0, -1073741824, 0, 0, 28, 17, 16, 16, 165675008, 28, 16, 21, 16, 131072, 0, 0,
  /* 4184 */ 98304, 2097152, 8388608, 268435456, 536870912, 1073741824, 0, 0, 0, 6, 128, 12288, 65536, 262144, 524288,
  /* 4199 */ 1048576, 8388608, 100663296, 0, 0, 0, 7, 1073741824, 28, 0, 2, 304, 272, 16, 524560, 1048592, 1048592, 16,
  /* 4217 */ 16, 32, 1024, 2048, 4096, 16777216, 67108864, 0, 0, 0, 540, 1295360, 31457280, 272, 1114416, 16, 16, 48,
  /* 4235 */ 16, 84, 20, 372, -165649452, -165649452, -165649452, -165649451, -701431504, -701431504, -165649451,
  /* 4246 */ -701431504, -701431504, -701431504, -701431504, -701430800, -701430800, -701430800, -701430800, -164559888,
  /* 4255 */ -164535308, -700906512, -164535308, -164535308, -164535308, -700906508, -164535308, -164535308, -164535308,
  /* 4264 */ -164535312, -164535308, -164273168, -164535308, -164273164, -164535308, -164273164, -164535308, -164535308,
  /* 4273 */ -164535308, 0, -268435456, 0, 0, 0, 1052672, 112, 21, 21, 53, 140511253, 140515349, 140539925, 140540573,
  /* 4288 */ -164535308, -164273164, -26121227, 140540573, 140540605, 140540573, 140540573, -26141771, 0, 0, 0, 8, 0,
  /* 4301 */ 2560, 100663296, 536870912, 0x80000000, 0, 0, 0, 239075328, 0, 0, 1, 8, 65536, 0, 1048576, 0, 4194304,
  /* 4318 */ 1048576, 0, 0, 1048576, 1048576, 4194304, 4194304, 268435456, 268435456, 0, 0, 0, 32, 0, 0, 0, 48, 0,
  /* 4336 */ 34607104, 4210688, 4194304, 0, 83886080, 0, 0, 0, 64, 0, 131072, 268435456, 1048576, 32, 2097152, 2129920,
  /* 4352 */ 2129952, 2129920, 0, 0, 32768, 0, 0, 0, 4, 8, -1842343808, 1882324992, 1882324992, 1882324992, 1882324992,
  /* 4367 */ 1610743877, 1610743877, 1610743877, 1610743877, 309465217, 309465217, 1694629957, 309465217, 309465217,
  /* 4376 */ 309465217, 309465217, 309735553, 305270917, 305270917, 305270917, 1379012741, 1379012743, 1915883653,
  /* 4385 */ 1915883653, 1915883653, 1915883653, 1915883717, 1915883717, 1915883717, 1915883717, 309481607, 1915883717,
  /* 4394 */ 1915883717, 1915883717, 1915883719, 1915883717, 1915883717, 1895006208, 1895006208, 1895006208, 1895006208,
  /* 4403 */ 1895530496, 1895530496, 1895530496, 1895531586, 1895531602, 1895531730, 1895531602, 1895531602, 1895531602,
  /* 4412 */ 1895531602, 1928564933, 1928564933, 1929090247, 1929090263, 0, 512, 2048, 0, 0, 8192, 65536, 0, 0, 3276800,
  /* 4427 */ 1879048192, 0, 7491584, 0, 0, 3280896, 268435456, 0, 262146, 262160, 33554432, 1879048192, 0, 0, 0, 128, 0,
  /* 4444 */ 0, 0, 23, 78016, 16482304, 0, 0, 1024, 268435456, 0, 16482304, 0, 15962112, 0, 16486400, 16486400,
  /* 4460 */ 33554432, 0x80000000, 0, 0, 16, 1073774592, 3145728, 1879048192, 0, 0, 1, 32768, 8192, 393216, 0, 0, 2,
  /* 4477 */ 256, 1342177280, 1879048192, 0, 0, 2, 512, 8192, 131072, 4194304, 67108864, 229376, 3145728, 12582912,
  /* 4491 */ 1879048192, 0, 1024, 524288, 0, 4096, 0, 0, 0, 12, 14, 131072, 2097152, 1879048192, 0, 0, 32768, 25165824,
  /* 4509 */ 33554432, 268435456, 0, 0, 131072, 1610612736, 0, 0, 0, 80, 0, 1342177280, 1879048192, 4096, 33554432,
  /* 4524 */ 4210688, 0, 0, 1, 646, 98304, 131072, 2097152, 8388608, 1879048192, 0, 524288, 0, 524288, 2097152,
  /* 4539 */ 0x80000000, 0, 67108864, 268435456, 0x80000000, 0, 0, 2097152, 268435456, 1610612736, 0, 0, 34816, 0, 0,
  /* 4554 */ 65536, 16777216, 268435456, 0, 0, 2097152, 0, 2097152, 0, 3145728, 98304, 2097152, 8388608, 1073741824, 0,
  /* 4569 */ 0, 2, 49152, 0, 65536, 2097152, 8388608, 0, 25165824, 0, 9216, 33554432, 536870912, 0, 0, 16384, 16384,
  /* 4586 */ 16384, 0, 0, 0, -253755392, 8192, 4096, 0, 0, 3, 1048576, 9480, 1073742336, 134218242, 262144, 2097152,
  /* 4602 */ 8388608, 268435456, 1610612736, 514, 1050624, 134349314, 1275208194, 1279402498, 1279402498, 1279402498,
  /* 4612 */ 1279402498, 4194320, 541065232, 4194320, 4194384, -869654014, 4203864, -869654014, -869654014, -869654014,
  /* 4622 */ -869654014, 1279402514, 1279402514, 1279402514, 1279402514, 1279402514, 1606677127, 1606677127, 1606677127,
  /* 4631 */ 1606677127, 1606677143, 1606677143, 1606677143, 1606677143, 0, 0, 524288, 524288, 4096, 33554432, 16384, 0,
  /* 4644 */ 0, 0, 264, 512, 0, 512, 514, 0, 514, 0, 262144, 0, 2, 0, 34603008, 1050624, 0, 0, 0, 2048, 0, 0, 0, 2400,
  /* 4668 */ 0, 514, 4333568, 1275068416, 0, 344, 4203520, 0, 0, 1048576, 4194304, 16777216, 134217728, 0, 0, 530,
  /* 4684 */ 4333568, 1275068416, 1577058304, 0, 0, 0, 16384, 0, 0, 4, 0, 0, 663, 0, 0, 0, 32768, 0x80000000, 0, 514,
  /* 4704 */ 262144, 0, 0, 536870912, 9216, 139264, 0, 0, 0, 65536, 0, 0, 0, 663, 0, 2621440, -1073741824, 0, 0,
  /* 4723 */ 1048576, 8388608, 100663296, 268435456, 0, 344, 0, 0, 4, 24, 512, 646, 258048, 4194304, 25165824,
  /* 4738 */ 100663296, 100663296, 402653184, 1073741824, 0, 0, 0, 662, 0, 0, 0, 81920, 0, 16, 4194304, 0, 0, 2, 64, 88,
  /* 4758 */ 0, 0, 0, 118784, 0, 512, 4096, 8192, 16384, 229376, 25165824, 33554432, 67108864, 402653184, 229376,
  /* 4773 */ 4194304, 25165824, 33554432, 67108864, 67108864, 402653184, 1073741824, 0, 0, 2097152, 16777216, 100663296,
  /* 4785 */ 33554432, 8192, 131072, 67108864, 134217728, 268435456, 0x80000000, 402653184, 0, 0, 0, 131072, 64, 1, 2,
  /* 4800 */ 4, 512, 2, 49170, 2, 2368, 1073741824, 0, 0, 4194304, 8388608, 0, 4, 0, 32, 1073741824, 0, 0, 229376,
  /* 4819 */ 25165824, 33554432, 402653184, 0, 2, 8192, 131072, 0, 0, 0, 524288, 2097152, 0, 0, 0, 2, 98304, 131072,
  /* 4837 */ 25165824, 98304, 131072, 16777216, 268435456, 0, 0, 256, 1024, 0, 2048, 16777216, 0x80000000, 0, 0, 4, 128,
  /* 4854 */ 12288, 0, 65536, 268435456, 0, 0, 0, 256, 2048, 0, 0, 5259264, 0, 0, 20480, 0, 0, 20992, 0, 0, 32768,
  /* 4875 */ 32768, 32768, 32, 0, 0, 16777216, 0, 32, 64, 131072, 64, 64, 0, 0, 0, 2, 8, 32, 64, 256, 1024, 8192,
  /* 4897 */ 33554432, 0, 1028, 16777216, 0, 0, 5, 22016, 0, 8192, 0, 32768, 0, 0, 2129920, 16, 16, 16, 16, 0, 0, 0,
  /* 4919 */ -872415232, 262656, 262656, 0, 262656, 262656, 2048, 34078736, 262656, -2147220992, 1614086665, 1614086665,
  /* 4931 */ 1614086665, 1614086665, 1613824009, 1613824009, 1613824009, 1613856777, -2146106879, -2146086399,
  /* 4939 */ -1070267895, -533396983, -533396983, 1613858825, -2146086399, -2146086399, -2146085371, -2146086391,
  /* 4947 */ -2146086399, -2146086399, -2146085371, -516619735, -533396983, -533396983, -533396983, -533396983,
  /* 4955 */ -516619735, 1895138187, 1895138187, 1895138187, 1895138187, -252345461, -252345461, 0, 0, 8, 256, 1024, 0,
  /* 4968 */ 0, 0, 4, 1024, 0, 0, 7475200, 268435456, 0, 4194304, 0, 0, 32768, 1048576, 4194304, 16777216, 67108864,
  /* 4985 */ 134217728, 0, 1376256, 1612709888, 0, 0, 8, 512, 32768, 9, 1114112, 1612709888, 0, 0, 12582912, 0, 0, 8192,
  /* 5003 */ 8192, 0, 65536, 0, 65536, 0, 32768, 0, 262656, 1376256, 0x80000000, 0, 0, 8, 1024, 0, 0, 41, -517996544, 0,
  /* 5023 */ 0, 15958016, 1879048192, 0, -534773760, 0, 0, 0, 262146, 33664, 1376256, 1893728256, 0, 0, -253755392, 0,
  /* 5039 */ 0, 0, 524288, 0, 0, 0, 384, 32768, 512, 65536, 262144, 1048576, 2097152, 4194304, 8388608, 40, -520093696,
  /* 5056 */ 0, 0, 8, 2097152, 0, 0, 8, 536870912, 1073741824, 8, 896, 32768, 65536, 262144, 8388608, 1879048192, 0, 0,
  /* 5074 */ 9, 0, 0, 0, 262144, 0, 0, 0, 98304, 0, 8, 512, 262144, 2097152, 536870912, 1073741824, 0, 0, 4096, 16384,
  /* 5094 */ 0, 4, 0, 384, 512, 32768, 262144, 2097152, 0, 2, 8, 384, 32768, 262144, 8388608, 8, 2097152, 536870912,
  /* 5112 */ 1073741824, 1073741824, 0, 0, 2, 1048576, 8388608, 0, 0, 25165824, 8, 262144, 536870912, 1073741824, 0, 8,
  /* 5128 */ 384, 32768, 8388608, 0, 32, 0, 131072, 0, 67108864, 0, 134217728, 0, 0, 0, 229376, 0, 16, 524288, 33554432,
  /* 5147 */ 0, 0, 384, 32768, 536870912, 1073741824, 0, 384, 1073741824, 0, 0, 33554432, 0, 0, 0, 4, 512, 65536,
  /* 5165 */ 262144, 0x80000000, 0, 16, 128, 0, 0, 8388608, 0, 131200, 65536, 65536, 65536, 65536, 1048576, 4194304, 0,
  /* 5182 */ 32, 2097152, 0, 2097152, 1073741824, 0, 0, 2, 262144, 256, 256, 262144, 1073742080, 256, -2143288312, 256,
  /* 5198 */ 8192, 0, 33554432, 0, 0, 524288, 96, 256, 1073774848, 1074809154, 1074809154, 1074809154, 1074809154,
  /* 5211 */ 1074809154, 1329218, 1067074, 1132610, -2146416574, 1074825538, 1209043266, -2146154430, 1477478722,
  /* 5220 */ 1477478722, 1209043266, 1477478722, 1209043266, 1209043266, 1074841922, 1175505218, 1108396354, 1074841922,
  /* 5229 */ 1074841922, 1074841922, 1074841922, 1074841922, 1074841922, 1074841954, 1109248327, 1109248327, 1109248327,
  /* 5238 */ 1109248327, 1109252423, 1109248327, 1109248327, 1109252423, 1109252423, 1109252423, 1109252423, 1109252423,
  /* 5247 */ 0, 0, 0, 1179648, 0, 131072, 2097152, 16777216, 0, 0, 0, 2, 2112, 16384, 16384, 16384, 16384, 32768, 32768,
  /* 5266 */ 32768, 32768, 32800, 1310720, 0, 0, 0, 2097152, 0, 0, 1342177280, 0, 0, 0, 3280896, 0, 101711872, 0, 0, 9,
  /* 5286 */ 512, 49152, 1073741824, 0, 0, 12, 2129920, 0, 7, 2368, 114688, 35389440, 35389440, 1073741824, 0, 0, 16,
  /* 5303 */ 192, 0x80000000, 512, 65536, 262144, 33554432, 536870912, 0x80000000, 0, 2, 320, 2048, 16384, 1048576, 0,
  /* 5318 */ 0, 134217728, 32768, 0, 134217728, 0, 0, 135266304, 0, 0, 69206016, 0x80000000, 16, 64, 0x80000000, 81920,
  /* 5334 */ 0, 0, 0, 4194304, 0, 0, 0, 16, 0, 0, 0, 320, 0, 0, 16, 524288, 0, 0, 1, 2, 4, 320, 2048, 2048, 114688,
  /* 5359 */ 786432, 1048576, 33554432, 4, 256, 114688, 786432, 33554432, 0, 1073741824, 0, 16, 0, 128, 0, 8388608, 0,
  /* 5376 */ 100663296, 0, 0, 24, 0, 24, 0, 0, 0, 11, 33664, 65536, 786432, 33554432, 1073741824, 0, 0, 32768, 65536,
  /* 5395 */ 786432, 0, 0, 8388608, 0, 16777216, 0, 0, 163577856, 0, 0, 1792, 0, 0, 2048, 1048576, 134217728, 0, 0, 64,
  /* 5415 */ 131072, 0, 1048576, 0, 0, 0, 49152, 0, 0, 2, 16, 256, 0, 0, 536870912, 0, 16777216, 0, 0, 536870912,
  /* 5435 */ 1073741824, 1073741856, 16384, 1048576, 0, 0, 1073741824, 4096, 65536, 1048576, 4194304, 0, 0, 1, 4, 8, 16,
  /* 5452 */ 128, 0, 2097160, 1048578, 0, 1048578, 1792, 1048578, 1048578, 2097160, 1048578, 1048578, 9437186, 9437187,
  /* 5466 */ 9437187, 9437187, 9437187, 17, 17, 16777233, 17, 13631495, 13631495, 13631495, 13631495, 2097177, 13631495,
  /* 5479 */ 13631495, 13762567, 13633543, -2138046381, -2138046381, -2138046381, -2138046381, 379400327, 379400327,
  /* 5488 */ 379400327, 379400327, 9437203, -2003828653, 9437203, 9437203, -2138046381, 9437203, 9437203, 9437203,
  /* 5498 */ -2003828653, 143654931, -1768083241, -1768083241, 379400343, -1768083241, 0, 7, 12582912, 0, 0, 1275068416,
  /* 5510 */ 0, 0, 0, 4096, 33554432, 0, 0, 0, 146, 0, 0, 0, 256, 0, 0, 0, -534773760, 0, 25, 0, 7, 128, 77824, 1835008,
  /* 5534 */ 19, 64, -2139095040, 0, 0, 7, 77952, 1835008, 377487360, 0, 78016, -1769996288, 0, 0, 0, 16777216, 0, 0, 0,
  /* 5553 */ 512, 0, 0, 0, 129, 0, 2, 8, 1048576, 2097152, 16777216, 0, 16, 64, 0x80000000, 0, 0, 1835008, 8388608,
  /* 5572 */ 100663296, 268435456, 0, 0, 6, 4194304, 0, 0, 122, 186, 0, 131072, 2048, 0, 1, 0, 0, 0, 7745536, 0, 64,
  /* 5593 */ 0x80000000, 0, 256, 0, 262146, 0, 0, 131072, 2048, 64, 0, 256, 512, 1024, 0, 0, 6, 0, 0, 0, 67108864, 0, 0,
  /* 5616 */ 64, 9480, 0, 8, 1048576, 2097152, 1610612736, 0, 0, 536870912, 0, 16384, 4, 8, 16, 512, 1024, 0, 4, 12288,
  /* 5636 */ 65536, 8388608, 33554432, 67108864, 0, 0, 524288, 8388608, 100663296, 0, 1, 0, 1024, 8192, 33554432,
  /* 5651 */ 67108864, 134217728, 1073741824, 0, 0, 32, 0, 67108864, 32768, 32, 32, 32, 32, 0, 2097152, 8388608, 0, 0,
  /* 5669 */ 16777216, 67108864, 0, 256, 131072, 0, 2, 131072, 0, 0, 8192, 65536, 33554432, 0, 8192, 65536, 33554432,
  /* 5686 */ 67108864, 0, 0, 268435456, 4194304, 0, 5259264, 0, 524416, 4192, 0, 0, 152, 647168, 553648128, 0, 0, 0,
  /* 5704 */ 134217728, 0, 8, 0, 8, 8, 33558624, 8, 0, 8, 24, 512, 1024, 16384, 229376, 18956312, 18956312, 18956312,
  /* 5722 */ 18956312, 10600448, 1084342272, 10600448, 564248576, 24, 16384, 65536, 2097152, 8388608, 805306368,
  /* 5733 */ 1073741824, 0, 24, 564248576, -2080374760, -2080374760, 2121752, 2121752, -2080374760, -2078277608,
  /* 5743 */ -2080374760, -2080374760, 2187288, 2187288, 2187288, 2187288, 2220056, 10608664, 10608664, 10600472,
  /* 5753 */ 2121752, 10600472, 10600472, 27377688, 279035928, 10608664, 10862618, 10608664, 10608664, 10608664,
  /* 5763 */ 10608664, 27385880, 11133080, 166970908, 166970908, 166970908, 166970908, 166979100, 166979100, 166970908,
  /* 5773 */ 166979100, 0, 1, 2, 8, 64, 256, 0, 129, 0, 0, 256, 512, 0, 0, 128, 524288, 96, 24, 81920, 18874368, 0, 1,
  /* 5796 */ 4, 32768, 65536, 114688, 10485760, 0, 0, 256, 1536, 24, 24576, 2097152, 0, 3149824, -1879048192, 0, 90112,
  /* 5813 */ 0, 0, 256, 16384, 122880, 0, 0, 0, 268435456, 0, 0, 26, 376832, 0, 0, 512, 262144, 0, 24, 122880, 27262976,
  /* 5834 */ 0, 0, 0, 138412032, 31457280, 134217728, 0, 0, 514, 2760704, 540, 1303552, 0, 0, 0, 536870912, 0, 0, 0,
  /* 5853 */ 1024, 0, 0, 0, 9, -1071644672, 0, 16, 32, 64, 1024, 2048, 4096, 16384, 16777216, 67108864, 98304, 25165824,
  /* 5871 */ 0, 0, 0, 553648128, 0, 152, 0, 0, 0, 1073741824, 0, 0, 229376, 1048576, 6291456, 25165824, 134217728, 0,
  /* 5889 */ 8192, 32768, 25165824, 512, 1024, 32768, 65536, 131072, 131072, 1048576, 2097152, 4194304, 25165824,
  /* 5902 */ 134217728, 0, 0, 0, 256, 2, 262144, 0, 0, 8, 16, 65536, 2097152, 1024, 32768, 65536, 1048576, 2097152, 32,
  /* 5921 */ 4096, 16777216, 0, 0, 512, 32768, 65536, 1048576, 0, 4096, 16777216, 0, 1, 4, 131072, 64, 0x80000000, 0, 0,
  /* 5940 */ 32768, 65536, 2097152, 8388608, 4, 1024, 1, 0, 1, 128, 0, 536870912, 0, 16384, 0, 0, 17408, 68608, 68608,
  /* 5959 */ 2, 2, 0, 2, 8, 256, 0, 0, 1, 16, 1026, 2, 1026, 2, 12288, 12288, 49210, 49210, 49210, 49210, 49274, 49338,
  /* 5981 */ 49210, 61586, 61586, 61586, 61586, 61586, 61458, 61586, 61586, 61458, 62610, 61586, 62610, 62610, 62610,
  /* 5996 */ 61458, 61458, 61458, 62482, 274, 274, 274, 274, 1298, 1298, 16658, 33042, 62866, 62866, 61714, 61842, 0, 0,
  /* 6014 */ 530, 0, 0, 0, 12288, 65536, 0, 18, 0, 0, 530, 530, 0, 58, 0, 0, 0, 1342177280, 0, 18, 256, 0, 0, 0, 56, 0,
  /* 6040 */ 0, 647, 29618176, 1577058304
];

XQueryParser.TOKEN =
[
  "(0)",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "URIQualifiedName",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "CharRef",
  "NCName",
  "QName",
  "StringConstructorChars",
  "S",
  "S",
  "CommentContents",
  "PragmaContents",
  "Wildcard",
  "DirCommentContents",
  "DirPIContents",
  "CDataSectionContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'<![CDATA['",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?:'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']]>'",
  "']``'",
  "'``['",
  "'`{'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exponent-separator'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'intersect'",
  "'into'",
  "'invoke'",
  "'is'",
  "'item'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'lowercase'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'occurs'",
  "'of'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'otherwise'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'transform'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'update'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'|'",
  "'||'",
  "'}'",
  "'}`'",
  "'}}'"
];

// End
