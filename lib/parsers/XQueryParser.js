// This file was generated on Tue Jan 31, 2023 20:43 (UTC) by REx v5.56 which is Copyright (c) 1979-2023 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "XQueryParser.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 262:                       // 'xquery'
      lookahead2W(183);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'transform' | 'treat' | 'union' | 'update' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 63750                 // 'xquery' 'encoding'
     || lk == 129286)               // 'xquery' 'version'
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 175:                       // 'module'
      lookahead2W(181);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 90799:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(262);                   // 'xquery'
    lookahead1W(110);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 124:                       // 'encoding'
      consume(124);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      break;
    default:
      consume(252);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      lookahead1W(102);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 124)                // 'encoding'
      {
        consume(124);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
    }
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_QueryBody();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(132);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(175);                   // 'module'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(245);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(187);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'construction' |
                                    // 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'option' | 'or' | 'ordering' | 'revalidation' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'updating' | 'variable' | '|' | '||'
        break;
      case 150:                     // 'import'
        lookahead2W(184);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 44651               // 'declare' 'base-uri'
       && lk != 45675               // 'declare' 'boundary-space'
       && lk != 50283               // 'declare' 'construction'
       && lk != 52843               // 'declare' 'copy-namespaces'
       && lk != 53867               // 'declare' 'decimal-format'
       && lk != 55403               // 'declare' 'default'
       && lk != 70763               // 'declare' 'ft-option'
       && lk != 89750               // 'import' 'module'
       && lk != 90731               // 'declare' 'namespace'
       && lk != 99435               // 'declare' 'ordering'
       && lk != 108139              // 'declare' 'revalidation'
       && lk != 109718)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(167);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55403)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 90731:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 150:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 70763:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(245);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16491               // 'declare' '%'
       && lk != 51819               // 'declare' 'context'
       && lk != 72811               // 'declare' 'function'
       && lk != 97387               // 'declare' 'option'
       && lk != 126059              // 'declare' 'updating'
       && lk != 128619)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(161);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51819:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 97387:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(52);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 107:                       // 'declare'
      lookahead2W(162);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55403)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 45675:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 44651:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50283:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 99435:                     // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 108139:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 52843:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(36);                // S^WS | '(:' | 'boundary-space'
    consume(89);                    // 'boundary-space'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(230);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consume(96);                    // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consumeT(96);                   // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'base-uri'
    consume(87);                    // 'base-uri'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(98);                    // 'construction'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 230:                       // 'strip'
      consume(230);                 // 'strip'
      break;
    default:
      consume(204);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(62);                // S^WS | '(:' | 'ordering'
    consume(194);                   // 'ordering'
    lookahead1W(125);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    default:
      consume(244);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consume(192);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consume(144);                 // 'greatest'
      break;
    default:
      consume(166);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consumeT(192);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consumeT(144);                // 'greatest'
      break;
    default:
      consumeT(166);                // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(103);                   // 'copy-namespaces'
    lookahead1W(122);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(117);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(183);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 153:                       // 'inherit'
      consume(153);                 // 'inherit'
      break;
    default:
      consume(182);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(108);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 105:                       // 'decimal-format'
      consume(105);                 // 'decimal-format'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(105);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(172);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'exponent-separator' | 'grouping-separator' | 'infinity' | 'minus-sign' |
                                    // 'pattern-separator' | 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 52)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 106:                       // 'decimal-separator'
      consume(106);                 // 'decimal-separator'
      break;
    case 146:                       // 'grouping-separator'
      consume(146);                 // 'grouping-separator'
      break;
    case 152:                       // 'infinity'
      consume(152);                 // 'infinity'
      break;
    case 172:                       // 'minus-sign'
      consume(172);                 // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      consume(68);                  // 'NaN'
      break;
    case 200:                       // 'percent'
      consume(200);                 // 'percent'
      break;
    case 199:                       // 'per-mille'
      consume(199);                 // 'per-mille'
      break;
    case 263:                       // 'zero-digit'
      consume(263);                 // 'zero-digit'
      break;
    case 115:                       // 'digit'
      consume(115);                 // 'digit'
      break;
    case 198:                       // 'pattern-separator'
      consume(198);                 // 'pattern-separator'
      break;
    default:
      consume(131);                 // 'exponent-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 150:                       // 'import'
      lookahead2W(120);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 109718:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(150);                   // 'import'
    lookahead1W(65);                // S^WS | '(:' | 'schema'
    consume(214);                   // 'schema'
    lookahead1W(131);               // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 4)                    // StringLiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      lookahead1W(175);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(120);                 // 'element'
      lookahead1W(57);              // S^WS | '(:' | 'namespace'
      consume(177);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(150);                   // 'import'
    lookahead1W(56);                // S^WS | '(:' | 'module'
    consume(175);                   // 'module'
    lookahead1W(82);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 177)                  // 'namespace'
    {
      consume(177);                 // 'namespace'
      lookahead1W(175);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    default:
      consume(142);                 // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    default:
      consumeT(142);                // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consumeT(177);                  // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(51);                // S^WS | '(:' | 'ft-option'
    consume(138);                   // 'ft-option'
    lookahead1W(74);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(107);                   // 'declare'
    for (;;)
    {
      lookahead1W(146);             // S^WS | '%' | '(:' | 'function' | 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 246)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 246:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 251:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    default:
      whitespace();
      parse_FunctionDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(246);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(155);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(144);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(144);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(155);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(144);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(144);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(251);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(138);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(101);                   // 'context'
    lookahead1W(54);                // S^WS | '(:' | 'item'
    consume(161);                   // 'item'
    lookahead1W(138);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(142);                   // 'function'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(139);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(113);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      whitespace();
      parse_FunctionBody();
      break;
    default:
      consume(132);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(136);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(136);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(264);                   // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(264);                  // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'option'
    consume(190);                   // 'option'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      parse_ForClause();
      break;
    case 167:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      try_ForClause();
      break;
    case 167:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      parse_InitialClause();
      break;
    case 255:                       // 'where'
      parse_WhereClause();
      break;
    case 145:                       // 'group'
      parse_GroupByClause();
      break;
    case 104:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      try_InitialClause();
      break;
    case 255:                       // 'where'
      try_WhereClause();
      break;
    case 145:                       // 'group'
      try_GroupByClause();
      break;
    case 104:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(136);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(156);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(156);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(77);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(77);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(85);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(85);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(217);                   // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(217);                  // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(167);                   // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(167);                  // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(136);                   // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(240);                   // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(240);                  // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(223);                   // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(223);                  // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(226);                   // 'start'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(226);                  // 'start'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 189)                  // 'only'
    {
      consume(189);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(125);                   // 'end'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 189)                  // 'only'
    {
      consumeT(189);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(125);                  // 'end'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(143);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consume(205);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consume(180);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(143);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consumeT(205);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consumeT(180);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(104);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(104);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(255);                   // 'where'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(255);                  // 'where'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(145);                   // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consume(90);                    // 'by'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(145);                  // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consumeT(90);                   // 'by'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 125983                // '$' 'updating'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(244);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consume(51);                // ':='
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consume(96);                // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 125983                // '$' 'updating'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(244);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consumeT(51);               // ':='
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consumeT(96);               // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        try_URILiteral();
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 192:                       // 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
      break;
    default:
      consume(225);                 // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
      break;
    default:
      consumeT(225);                // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consume(84);                // 'ascending'
        break;
      default:
        consume(112);               // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consume(122);                 // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consume(144);               // 'greatest'
        break;
      default:
        consume(166);               // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consume(96);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consumeT(84);               // 'ascending'
        break;
      default:
        consumeT(112);              // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consumeT(122);                // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consumeT(144);              // 'greatest'
        break;
      default:
        consumeT(166);              // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consumeT(96);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(210);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(210);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    default:
      consume(128);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    consume(213);                   // 'satisfies'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    default:
      consumeT(128);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    consumeT(213);                  // 'satisfies'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  function try_QuantifiedVarDecl()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(231);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(231);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(91);                  // 'case'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(210);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(91);                 // 'case'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(210);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(242);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(242);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(91);                    // 'case'
    lookahead1W(239);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
    }
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(210);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(91);                   // 'case'
    lookahead1W(239);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
    }
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceTypeUnion();
    consumeT(210);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(149);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consume(233);                   // 'then'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(121);                   // 'else'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(149);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consumeT(233);                  // 'then'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(121);                  // 'else'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_BasexIfExpr()
  {
    eventHandler.startNonterminal("BasexIfExpr", e0);
    consume(149);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consume(233);                   // 'then'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("BasexIfExpr", e0);
  }

  function try_BasexIfExpr()
  {
    consumeT(149);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consumeT(233);                  // 'then'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(174);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '}' |
                                    // '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(174);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '}' |
                                    // '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(239);                   // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedTryTargetExpr();
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(239);                  // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedTryTargetExpr();
  }

  function parse_EnclosedTryTargetExpr()
  {
    eventHandler.startNonterminal("EnclosedTryTargetExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedTryTargetExpr", e0);
  }

  function try_EnclosedTryTargetExpr()
  {
    try_EnclosedExpr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(94);                    // 'catch'
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(94);                   // 'catch'
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    try_CatchErrorList();
    try_EnclosedExpr();
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 191)                // 'or'
      {
        break;
      }
      consume(191);                 // 'or'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 191)                // 'or'
      {
        break;
      }
      consumeT(191);                // 'or'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 80)                 // 'and'
      {
        break;
      }
      consume(80);                  // 'and'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 80)                 // 'and'
      {
        break;
      }
      consumeT(80);                 // 'and'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 53                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 127                   // 'eq'
     || l1 == 143                   // 'ge'
     || l1 == 147                   // 'gt'
     || l1 == 160                   // 'is'
     || l1 == 165                   // 'le'
     || l1 == 170                   // 'lt'
     || l1 == 179)                  // 'ne'
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 53                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 127                   // 'eq'
     || l1 == 143                   // 'ge'
     || l1 == 147                   // 'gt'
     || l1 == 160                   // 'is'
     || l1 == 165                   // 'le'
     || l1 == 170                   // 'lt'
     || l1 == 179)                  // 'ne'
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      consume(99);                  // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consume(232);                 // 'text'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 259)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      consumeT(99);                 // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consumeT(232);                // 'text'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 259)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 267)                // '||'
      {
        break;
      }
      consume(267);                 // '||'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 267)                // '||'
      {
        break;
      }
      consumeT(267);                // '||'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 236)                  // 'to'
    {
      consume(236);                 // 'to'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 236)                  // 'to'
    {
      consumeT(236);                // 'to'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consume(39);                // '+'
        break;
      default:
        consume(41);                // '-'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consumeT(39);               // '+'
        break;
      default:
        consumeT(41);               // '-'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 117                 // 'div'
       && l1 != 148                 // 'idiv'
       && l1 != 173)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 117:                     // 'div'
        consume(117);               // 'div'
        break;
      case 148:                     // 'idiv'
        consume(148);               // 'idiv'
        break;
      default:
        consume(173);               // 'mod'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 117                 // 'div'
       && l1 != 148                 // 'idiv'
       && l1 != 173)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 117:                     // 'div'
        consumeT(117);              // 'div'
        break;
      case 148:                     // 'idiv'
        consumeT(148);              // 'idiv'
        break;
      default:
        consumeT(173);              // 'mod'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 243                 // 'union'
       && l1 != 266)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consume(243);               // 'union'
        break;
      default:
        consume(266);               // '|'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 243                 // 'union'
       && l1 != 266)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consumeT(243);              // 'union'
        break;
      default:
        consumeT(266);              // '|'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(196);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 130                 // 'except'
       && l1 != 157)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consume(157);               // 'intersect'
        break;
      default:
        consume(130);               // 'except'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(196);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 130                 // 'except'
       && l1 != 157)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consumeT(157);              // 'intersect'
        break;
      default:
        consumeT(130);              // 'except'
      }
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(198);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 156)                  // 'instance'
    {
      consume(156);                 // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(198);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 156)                  // 'instance'
    {
      consumeT(156);                // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(199);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}' | '}`'
    if (l1 == 238)                  // 'treat'
    {
      consume(238);                 // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(199);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}' | '}`'
    if (l1 == 238)                  // 'treat'
    {
      consumeT(238);                // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(200);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}' | '}`'
    if (l1 == 93)                   // 'castable'
    {
      consume(93);                  // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(200);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}' | '}`'
    if (l1 == 93)                   // 'castable'
    {
      consumeT(93);                 // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_TransformWithExpr();
    lookahead1W(202);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}' | '}`'
    if (l1 == 92)                   // 'cast'
    {
      consume(92);                  // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_TransformWithExpr();
    lookahead1W(202);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}' | '}`'
    if (l1 == 92)                   // 'cast'
    {
      consumeT(92);                 // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(231);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_TransformWithExpr()
  {
    eventHandler.startNonterminal("TransformWithExpr", e0);
    parse_BasexUpdate1Expr();
    lookahead1W(203);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    if (l1 == 237)                  // 'transform'
    {
      consume(237);                 // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consume(258);                 // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("TransformWithExpr", e0);
  }

  function try_TransformWithExpr()
  {
    try_BasexUpdate1Expr();
    lookahead1W(203);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    if (l1 == 237)                  // 'transform'
    {
      consumeT(237);                // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consumeT(258);                // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  function parse_BasexUpdate1Expr()
  {
    eventHandler.startNonterminal("BasexUpdate1Expr", e0);
    parse_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consume(245);                 // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("BasexUpdate1Expr", e0);
  }

  function try_BasexUpdate1Expr()
  {
    try_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consumeT(245);                // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  function parse_BasexUpdateExpr()
  {
    eventHandler.startNonterminal("BasexUpdateExpr", e0);
    parse_ArrowExpr();
    for (;;)
    {
      lookahead1W(204);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(80);            // S^WS | '(:' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk == 135413)             // 'update' '{'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(245);          // 'update'
            lookahead1W(80);        // S^WS | '(:' | '{'
            consumeT(264);          // '{'
            lookahead1W(248);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
            if (l1 != 268)          // '}'
            {
              try_Expr();
            }
            consumeT(268);          // '}'
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(245);                 // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("BasexUpdateExpr", e0);
  }

  function try_BasexUpdateExpr()
  {
    try_ArrowExpr();
    for (;;)
    {
      lookahead1W(204);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(80);            // S^WS | '(:' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk == 135413)             // 'update' '{'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(245);          // 'update'
            lookahead1W(80);        // S^WS | '(:' | '{'
            consumeT(264);          // '{'
            lookahead1W(248);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
            if (l1 != 268)          // '}'
            {
              try_Expr();
            }
            consumeT(268);          // '}'
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(245);                // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(248);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  function parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(205);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consume(61);                  // '=>'
      lookahead1W(236);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  function try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(205);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consumeT(61);                 // '=>'
      lookahead1W(236);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consume(41);                // '-'
        break;
      default:
        consume(39);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consumeT(41);               // '-'
        break;
      default:
        consumeT(39);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(227);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(227);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(243);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(243);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 53:                        // '<'
      consume(53);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 62:                        // '>'
      consume(62);                  // '>'
      break;
    default:
      consume(63);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 53:                        // '<'
      consumeT(53);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 62:                        // '>'
      consumeT(62);                 // '>'
      break;
    default:
      consumeT(63);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    default:
      consume(143);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    default:
      consumeT(143);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(64);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(64);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(249);                   // 'validate'
    lookahead1W(151);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consume(241);               // 'type'
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(249);                  // 'validate'
    lookahead1W(151);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consumeT(241);              // 'type'
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(229);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 164:                       // 'lax'
      consumeT(164);                // 'lax'
      break;
    default:
      consumeT(229);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(230);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
    }
    parse_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(2);                // PragmaContents
      consume(20);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(230);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
    }
    try_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(2);                // PragmaContents
      consumeT(20);                 // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(30);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 45:                        // '/'
      consume(45);                  // '/'
      lookahead1W(253);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consume(46);                  // '//'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 45:                        // '/'
      consumeT(45);                 // '/'
      lookahead1W(253);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consumeT(46);                 // '//'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(243);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(242);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consume(45);                // '/'
        break;
      case 46:                      // '//'
        consume(46);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(243);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(242);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
            try_StepExpr();
            memoize(4, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consumeT(45);               // '/'
        break;
      case 46:                      // '//'
        consumeT(46);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(251);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'updating' | 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(250);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'updating' | 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(226);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'updating' |
                                    // 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(225);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 123:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(218);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(224);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 246:                       // 'updating'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(221);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 82:                        // 'array'
    case 171:                       // 'map'
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15094:                     // 'updating' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17654:                     // 'updating' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 126038:                    // 'attribute' 'updating'
    case 126072:                    // 'element' 'updating'
    case 126129:                    // 'namespace' 'updating'
    case 126158:                    // 'processing-instruction' 'updating'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(251);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'updating' | 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(250);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'updating' | 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(226);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'updating' |
                                    // 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(225);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 123:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(218);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(224);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 246:                       // 'updating'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(221);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(5, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 82:                        // 'array'
    case 171:                       // 'map'
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15094:                     // 'updating' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17654:                     // 'updating' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 126038:                    // 'attribute' 'updating'
    case 126072:                    // 'element' 'updating'
    case 126129:                    // 'namespace' 'updating'
    case 126158:                    // 'processing-instruction' 'updating'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(220);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(216);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(220);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(216);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(222);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(220);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(222);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(220);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 95:                        // 'child'
      consume(95);                  // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(134);                 // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(134);                // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 67)                   // '@'
    {
      consume(67);                  // '@'
    }
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 67)                   // '@'
    {
      consumeT(67);                 // '@'
    }
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 44:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 44:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(233);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(79);                  // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(79);                 // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(44);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(44);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(219);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(219);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 21:                        // Wildcard
      consume(21);                  // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 21:                        // Wildcard
      consumeT(21);                 // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 34:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        try_Predicate();
        break;
      case 34:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(216);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(216);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(69);                    // '['
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(70);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(69);                   // '['
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(70);                   // ']'
  }

  function parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(65);                    // '?'
    lookahead1W(179);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  function try_Lookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(179);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
    try_KeySpecifier();
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(65);                    // '?'
    lookahead1W(179);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(179);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  function try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consume(2);                   // DecimalLiteral
      break;
    default:
      consume(3);                   // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consumeT(2);                  // DecimalLiteral
      break;
    default:
      consumeT(3);                  // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(43);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(43);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(193);                   // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(193);                  // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(244);                   // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(244);                  // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(182);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(182);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(65);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(65);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
      parse_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
      try_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(53);                    // '<'
    parse_QName();
    parse_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consume(47);                  // '/>'
      break;
    default:
      consume(62);                  // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      parse_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consume(17);                // S
      }
      lookahead1(9);                // '>'
      consume(62);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(53);                   // '<'
    try_QName();
    try_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consumeT(47);                 // '/>'
      break;
    default:
      consumeT(62);                 // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      try_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consumeT(17);               // S
      }
      lookahead1(9);                // '>'
      consumeT(62);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consume(17);                  // S
      lookahead1(232);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        parse_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        lookahead1(8);              // '='
        consume(60);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consumeT(17);                 // S
      lookahead1(232);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        try_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        lookahead1(8);              // '='
        consumeT(60);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(158);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consume(7);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consume(8);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(158);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consumeT(7);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consumeT(8);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consume(10);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consumeT(10);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consume(11);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consumeT(11);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      parse_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consume(9);                   // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      try_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consumeT(9);                  // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(54);                    // '<!--'
    lookahead1(3);                  // DirCommentContents
    consume(22);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(42);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(54);                   // '<!--'
    lookahead1(3);                  // DirCommentContents
    consumeT(22);                   // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(42);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(0);                  // PITarget
    consume(12);                    // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(4);                // DirPIContents
      consume(23);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(66);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(0);                  // PITarget
    consumeT(12);                   // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(4);                // DirPIContents
      consumeT(23);                 // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(66);                   // '?>'
  }

  function parse_CDataSection()
  {
    eventHandler.startNonterminal("CDataSection", e0);
    consume(55);                    // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consume(24);                    // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consume(71);                    // ']]>'
    eventHandler.endNonterminal("CDataSection", e0);
  }

  function try_CDataSection()
  {
    consumeT(55);                   // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consumeT(24);                   // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consumeT(71);                   // ']]>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 118:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 120:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 118:                       // 'document'
      try_CompDocConstructor();
      break;
    case 120:                       // 'element'
      try_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      try_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(120);                   // 'element'
    lookahead1W(234);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedContentExpr();
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(120);                  // 'element'
    lookahead1W(234);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedContentExpr();
  }

  function parse_EnclosedContentExpr()
  {
    eventHandler.startNonterminal("EnclosedContentExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedContentExpr", e0);
  }

  function try_EnclosedContentExpr()
  {
    try_EnclosedExpr();
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(177);                   // 'namespace'
    lookahead1W(176);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PrefixExpr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_URIExpr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(177);                  // 'namespace'
    lookahead1W(176);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_PrefixExpr();
      consumeT(268);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_URIExpr();
    consumeT(268);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(1);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(1);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consumeT(83);                 // 'as'
      lookahead1W(238);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(171);                   // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(171);                  // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(248);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_MapConstructorEntry();
      }
    }
    consumeT(268);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consume(48);                    // ':'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consumeT(48);                   // ':'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_MapValueExpr();
  }

  function parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  function try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  function parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  function try_MapValueExpr()
  {
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 69:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    switch (l1)
    {
    case 69:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  function parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(69);                    // '['
    lookahead1W(247);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(70);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  function try_SquareArrayConstructor()
  {
    consumeT(69);                   // '['
    lookahead1W(247);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(70);                   // ']'
  }

  function parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(82);                    // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  function try_CurlyArrayConstructor()
  {
    consumeT(82);                   // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(73);                    // '``['
    parse_StringConstructorContent();
    consume(72);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  function try_StringConstructor()
  {
    consumeT(73);                   // '``['
    try_StringConstructorContent();
    consumeT(72);                   // ']``'
  }

  function parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(1);                  // StringConstructorChars
    consume(16);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consume(16);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  function try_StringConstructorContent()
  {
    lookahead1(1);                  // StringConstructorChars
    consumeT(16);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consumeT(16);                 // StringConstructorChars
    }
  }

  function parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(74);                    // '`{'
    lookahead1W(249);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(269);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  function try_StringConstructorInterpolation()
  {
    consumeT(74);                   // '`{'
    lookahead1W(249);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      try_Expr();
    }
    consumeT(269);                  // '}`'
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(201);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consume(65);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(201);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consumeT(65);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(83);                    // 'as'
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(83);                   // 'as'
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(212);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consume(123);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(207);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(212);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consumeT(123);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(207);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(212);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    case 17569:                     // 'item' '('
      consume(161);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 171:                       // 'map'
      parse_MapTest();
      break;
    case 82:                        // 'array'
      parse_ArrayTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(212);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    case 17569:                     // 'item' '('
      consumeT(161);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_FunctionTest();
      break;
    case 171:                       // 'map'
      try_MapTest();
      break;
    case 82:                        // 'array'
      try_ArrayTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      consume(65);                  // '?'
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      consume(39);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      consumeT(65);                 // '?'
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      consumeT(39);                 // '+'
    }
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 119:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 120:                       // 'element'
      parse_ElementTest();
      break;
    case 86:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 97:                        // 'comment'
      parse_CommentTest();
      break;
    case 232:                       // 'text'
      parse_TextTest();
      break;
    case 178:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 119:                       // 'document-node'
      try_DocumentTest();
      break;
    case 120:                       // 'element'
      try_ElementTest();
      break;
    case 86:                        // 'attribute'
      try_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      try_PITest();
      break;
    case 97:                        // 'comment'
      try_CommentTest();
      break;
    case 232:                       // 'text'
      try_TextTest();
      break;
    case 178:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(184);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(184);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(119);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(137);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(119);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(137);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(232);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(232);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(97);                    // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(178);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(178);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(177);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consume(4);                 // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(177);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consumeT(4);                // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(86);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(237);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(237);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(215);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(215);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(120);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(237);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consume(65);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(120);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(237);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(231);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consumeT(65);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(216);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(216);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(6, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(6, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(6, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(6, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(240);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(238);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(240);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(238);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
  }

  function parse_MapTest()
  {
    eventHandler.startNonterminal("MapTest", e0);
    switch (l1)
    {
    case 171:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(7, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyMapTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(7, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyMapTest();
      break;
    default:
      parse_TypedMapTest();
    }
    eventHandler.endNonterminal("MapTest", e0);
  }

  function try_MapTest()
  {
    switch (l1)
    {
    case 171:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(7, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyMapTest();
        memoize(7, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyMapTest();
      break;
    case -3:
      break;
    default:
      try_TypedMapTest();
    }
  }

  function parse_AnyMapTest()
  {
    eventHandler.startNonterminal("AnyMapTest", e0);
    consume(171);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyMapTest", e0);
  }

  function try_AnyMapTest()
  {
    consumeT(171);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedMapTest()
  {
    eventHandler.startNonterminal("TypedMapTest", e0);
    consume(171);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedMapTest", e0);
  }

  function try_TypedMapTest()
  {
    consumeT(171);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consumeT(40);                   // ','
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ArrayTest()
  {
    eventHandler.startNonterminal("ArrayTest", e0);
    switch (l1)
    {
    case 82:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(8, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(8, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyArrayTest();
      break;
    default:
      parse_TypedArrayTest();
    }
    eventHandler.endNonterminal("ArrayTest", e0);
  }

  function try_ArrayTest()
  {
    switch (l1)
    {
    case 82:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(8, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        memoize(8, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyArrayTest();
      break;
    case -3:
      break;
    default:
      try_TypedArrayTest();
    }
  }

  function parse_AnyArrayTest()
  {
    eventHandler.startNonterminal("AnyArrayTest", e0);
    consume(82);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyArrayTest", e0);
  }

  function try_AnyArrayTest()
  {
    consumeT(82);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedArrayTest()
  {
    eventHandler.startNonterminal("TypedArrayTest", e0);
    consume(82);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedArrayTest", e0);
  }

  function try_TypedArrayTest()
  {
    consumeT(82);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(238);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_URILiteral()
  {
    eventHandler.startNonterminal("URILiteral", e0);
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("URILiteral", e0);
  }

  function try_URILiteral()
  {
    consumeT(4);                    // StringLiteral
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(229);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_QName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(229);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_QName();
    }
  }

  function parse_FunctionEQName()
  {
    eventHandler.startNonterminal("FunctionEQName", e0);
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("FunctionEQName", e0);
  }

  function try_FunctionEQName()
  {
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_QName()
  {
    eventHandler.startNonterminal("QName", e0);
    lookahead1(228);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      break;
    case 97:                        // 'comment'
      consume(97);                  // 'comment'
      break;
    case 119:                       // 'document-node'
      consume(119);                 // 'document-node'
      break;
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consume(123);                 // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consume(142);                 // 'function'
      break;
    case 149:                       // 'if'
      consume(149);                 // 'if'
      break;
    case 161:                       // 'item'
      consume(161);                 // 'item'
      break;
    case 178:                       // 'namespace-node'
      consume(178);                 // 'namespace-node'
      break;
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consume(206);                 // 'processing-instruction'
      break;
    case 215:                       // 'schema-attribute'
      consume(215);                 // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consume(216);                 // 'schema-element'
      break;
    case 231:                       // 'switch'
      consume(231);                 // 'switch'
      break;
    case 232:                       // 'text'
      consume(232);                 // 'text'
      break;
    case 242:                       // 'typeswitch'
      consume(242);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("QName", e0);
  }

  function try_QName()
  {
    lookahead1(228);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      break;
    case 97:                        // 'comment'
      consumeT(97);                 // 'comment'
      break;
    case 119:                       // 'document-node'
      consumeT(119);                // 'document-node'
      break;
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consumeT(123);                // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consumeT(142);                // 'function'
      break;
    case 149:                       // 'if'
      consumeT(149);                // 'if'
      break;
    case 161:                       // 'item'
      consumeT(161);                // 'item'
      break;
    case 178:                       // 'namespace-node'
      consumeT(178);                // 'namespace-node'
      break;
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consumeT(206);                // 'processing-instruction'
      break;
    case 215:                       // 'schema-attribute'
      consumeT(215);                // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consumeT(216);                // 'schema-element'
      break;
    case 231:                       // 'switch'
      consumeT(231);                // 'switch'
      break;
    case 232:                       // 'text'
      consumeT(232);                // 'text'
      break;
    case 242:                       // 'typeswitch'
      consumeT(242);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 15:                        // QName^Token
      consume(15);                  // QName^Token
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 95:                        // 'child'
      consume(95);                  // 'child'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 102:                       // 'copy'
      consume(102);                 // 'copy'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 107:                       // 'declare'
      consume(107);                 // 'declare'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 109:                       // 'delete'
      consume(109);                 // 'delete'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 118:                       // 'document'
      consume(118);                 // 'document'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 128:                       // 'every'
      consume(128);                 // 'every'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 134:                       // 'following'
      consume(134);                 // 'following'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 150:                       // 'import'
      consume(150);                 // 'import'
      break;
    case 155:                       // 'insert'
      consume(155);                 // 'insert'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 159:                       // 'invoke'
      consume(159);                 // 'invoke'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 175:                       // 'module'
      consume(175);                 // 'module'
      break;
    case 174:                       // 'modify'
      consume(174);                 // 'modify'
      break;
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      break;
    case 208:                       // 'rename'
      consume(208);                 // 'rename'
      break;
    case 209:                       // 'replace'
      consume(209);                 // 'replace'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      break;
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 237:                       // 'transform'
      consume(237);                 // 'transform'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 239:                       // 'try'
      consume(239);                 // 'try'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    case 244:                       // 'unordered'
      consume(244);                 // 'unordered'
      break;
    case 245:                       // 'update'
      consume(245);                 // 'update'
      break;
    case 246:                       // 'updating'
      consume(246);                 // 'updating'
      break;
    case 249:                       // 'validate'
      consume(249);                 // 'validate'
      break;
    case 255:                       // 'where'
      consume(255);                 // 'where'
      break;
    case 258:                       // 'with'
      consume(258);                 // 'with'
      break;
    default:
      consume(262);                 // 'xquery'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 15:                        // QName^Token
      consumeT(15);                 // QName^Token
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 102:                       // 'copy'
      consumeT(102);                // 'copy'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 107:                       // 'declare'
      consumeT(107);                // 'declare'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 109:                       // 'delete'
      consumeT(109);                // 'delete'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 118:                       // 'document'
      consumeT(118);                // 'document'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 128:                       // 'every'
      consumeT(128);                // 'every'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 134:                       // 'following'
      consumeT(134);                // 'following'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 150:                       // 'import'
      consumeT(150);                // 'import'
      break;
    case 155:                       // 'insert'
      consumeT(155);                // 'insert'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 159:                       // 'invoke'
      consumeT(159);                // 'invoke'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 175:                       // 'module'
      consumeT(175);                // 'module'
      break;
    case 174:                       // 'modify'
      consumeT(174);                // 'modify'
      break;
    case 177:                       // 'namespace'
      consumeT(177);                // 'namespace'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 193:                       // 'ordered'
      consumeT(193);                // 'ordered'
      break;
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      break;
    case 208:                       // 'rename'
      consumeT(208);                // 'rename'
      break;
    case 209:                       // 'replace'
      consumeT(209);                // 'replace'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      break;
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 237:                       // 'transform'
      consumeT(237);                // 'transform'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 239:                       // 'try'
      consumeT(239);                // 'try'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    case 244:                       // 'unordered'
      consumeT(244);                // 'unordered'
      break;
    case 245:                       // 'update'
      consumeT(245);                // 'update'
      break;
    case 246:                       // 'updating'
      consumeT(246);                // 'updating'
      break;
    case 249:                       // 'validate'
      consumeT(249);                // 'validate'
      break;
    case 255:                       // 'where'
      consumeT(255);                // 'where'
      break;
    case 258:                       // 'with'
      consumeT(258);                // 'with'
      break;
    default:
      consumeT(262);                // 'xquery'
    }
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(64);                // S^WS | '(:' | 'revalidation'
    consume(211);                   // 'revalidation'
    lookahead1W(142);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 229:                       // 'strict'
      consume(229);                 // 'strict'
      break;
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(222);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 88:                        // 'before'
      consume(88);                  // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consume(83);                // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consume(133);             // 'first'
          break;
        default:
          consume(163);             // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consume(158);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 88:                        // 'before'
      consumeT(88);                 // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consumeT(83);               // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consumeT(133);            // 'first'
          break;
        default:
          consumeT(163);            // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consumeT(158);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(155);                   // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SourceExpr();
    lookahead1W(147);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(155);                  // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_SourceExpr();
    lookahead1W(147);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    try_InsertExprTargetChoice();
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(109);                   // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(109);                  // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(209);                   // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consume(250);                 // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consume(258);                   // 'with'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(209);                  // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consumeT(250);                // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consumeT(258);                  // 'with'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(208);                   // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(208);                  // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_UpdatingFunctionCall()
  {
    eventHandler.startNonterminal("UpdatingFunctionCall", e0);
    if (l1 == 159)                  // 'invoke'
    {
      consume(159);                 // 'invoke'
    }
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consume(246);                   // 'updating'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("UpdatingFunctionCall", e0);
  }

  function try_UpdatingFunctionCall()
  {
    if (l1 == 159)                  // 'invoke'
    {
      consumeT(159);                // 'invoke'
    }
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consumeT(246);                  // 'updating'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(246);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_CopyModifyExpr()
  {
    eventHandler.startNonterminal("CopyModifyExpr", e0);
    consume(102);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_CopyModifySpec();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_CopyModifySpec();
    }
    consume(174);                   // 'modify'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifyExpr", e0);
  }

  function try_CopyModifyExpr()
  {
    consumeT(102);                  // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_CopyModifySpec();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_CopyModifySpec();
    }
    consumeT(174);                  // 'modify'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_CopyModifySpec()
  {
    eventHandler.startNonterminal("CopyModifySpec", e0);
    consume(31);                    // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifySpec", e0);
  }

  function try_CopyModifySpec()
  {
    consumeT(31);                   // '$'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(253);                   // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(253);                  // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consume(141);                 // 'ftor'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consumeT(141);                // 'ftor'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consume(139);                 // 'ftand'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consumeT(139);                // 'ftand'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consume(186);                 // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consume(151);                 // 'in'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consumeT(186);                // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consumeT(151);                // 'in'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 140)                  // 'ftnot'
    {
      consume(140);                 // 'ftnot'
    }
    lookahead1W(145);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 140)                  // 'ftnot'
    {
      consumeT(140);                // 'ftnot'
    }
    lookahead1W(145);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(189);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '}' | '}`'
    if (l1 == 248)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(189);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '}' | '}`'
    if (l1 == 248)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(197);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(197);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      consume(264);                 // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      consumeT(264);                // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(268);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 81:                        // 'any'
      consume(81);                  // 'any'
      lookahead1W(193);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consume(260);               // 'word'
      }
      break;
    case 76:                        // 'all'
      consume(76);                  // 'all'
      lookahead1W(194);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '}' | '}`'
      if (l1 == 261)                // 'words'
      {
        consume(261);               // 'words'
      }
      break;
    default:
      consume(201);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 81:                        // 'any'
      consumeT(81);                 // 'any'
      lookahead1W(193);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consumeT(260);              // 'word'
      }
      break;
    case 76:                        // 'all'
      consumeT(76);                 // 'all'
      lookahead1W(194);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '}' | '}`'
      if (l1 == 261)                // 'words'
      {
        consumeT(261);              // 'words'
      }
      break;
    default:
      consumeT(201);                // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(187);                   // 'occurs'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(235);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(187);                  // 'occurs'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(235);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      consume(236);                 // 'to'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_AdditiveExpr();
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(244);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_AdditiveExpr();
      consumeT(236);                // 'to'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 193:                       // 'ordered'
      parse_FTOrder();
      break;
    case 257:                       // 'window'
      parse_FTWindow();
      break;
    case 116:                       // 'distance'
      parse_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 193:                       // 'ordered'
      try_FTOrder();
      break;
    case 257:                       // 'window'
      try_FTWindow();
      break;
    case 116:                       // 'distance'
      try_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(193);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(193);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(257);                   // 'window'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(257);                  // 'window'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(116);                   // 'distance'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(116);                  // 'distance'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 261:                       // 'words'
      consume(261);                 // 'words'
      break;
    case 221:                       // 'sentences'
      consume(221);                 // 'sentences'
      break;
    default:
      consume(196);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 261:                       // 'words'
      consumeT(261);                // 'words'
      break;
    case 221:                       // 'sentences'
      consumeT(221);                // 'sentences'
      break;
    default:
      consumeT(196);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 212:                       // 'same'
      consume(212);                 // 'same'
      break;
    default:
      consume(114);                 // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 212:                       // 'same'
      consumeT(212);                // 'same'
      break;
    default:
      consumeT(114);                // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 220:                       // 'sentence'
      consume(220);                 // 'sentence'
      break;
    default:
      consume(195);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 220:                       // 'sentence'
      consumeT(220);                // 'sentence'
      break;
    default:
      consumeT(195);                // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consume(226);               // 'start'
        break;
      default:
        consume(125);               // 'end'
      }
      break;
    default:
      consume(126);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(100);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consumeT(226);              // 'start'
        break;
      default:
        consumeT(125);              // 'end'
      }
      break;
    default:
      consumeT(126);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(100);                // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(248);                 // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(248);                // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '}' | '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(152);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 190:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(152);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      try_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 190:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 91:                        // 'case'
      consume(91);                  // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consume(154);               // 'insensitive'
        break;
      default:
        consume(219);               // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consume(169);                 // 'lowercase'
      break;
    default:
      consume(247);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consumeT(154);              // 'insensitive'
        break;
      default:
        consumeT(219);              // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consumeT(169);                // 'lowercase'
      break;
    default:
      consumeT(247);                // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(113);                   // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consume(154);                 // 'insensitive'
      break;
    default:
      consume(219);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(113);                  // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consumeT(154);                // 'insensitive'
      break;
    default:
      consumeT(219);                // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 227:                       // 'stemming'
      consume(227);                 // 'stemming'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consume(227);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 227:                       // 'stemming'
      consumeT(227);                // 'stemming'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consumeT(227);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consume(234);                 // 'thesaurus'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consume(108);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(108);             // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consume(40);              // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consume(234);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consumeT(234);                // 'thesaurus'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        try_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(108);            // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consumeT(40);             // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consumeT(234);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(85);                    // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(195);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' |
                                    // '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consume(207);                 // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    lookahead1W(191);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(150);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consume(168);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(85);                   // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
    lookahead1W(195);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' |
                                    // '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consumeT(207);                // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
    }
    lookahead1W(191);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(150);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consumeT(168);                // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consume(236);                 // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consumeT(236);                // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 228:                       // 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consume(108);               // 'default'
        for (;;)
        {
          lookahead1W(192);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
          if (l1 != 130             // 'except'
           && l1 != 243)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(192);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
          if (l1 != 130             // 'except'
           && l1 != 243)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 228:                       // 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        for (;;)
        {
          lookahead1W(192);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
          if (l1 != 130             // 'except'
           && l1 != 243)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(192);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '}' | '}`'
          if (l1 != 130             // 'except'
           && l1 != 243)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      break;
    default:
      consume(34);                  // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consumeT(4);                // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    default:
      consume(130);                 // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    default:
      consumeT(130);                // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(162);                   // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(162);                  // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consume(256);                 // 'wildcards'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consume(256);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consumeT(256);                // 'wildcards'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consumeT(256);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(190);                   // 'option'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(190);                  // 'option'
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(259);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(100);                   // 'content'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(259);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(100);                  // 'content'
    lookahead1W(244);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_UnionExpr();
  }

  function try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(81);               // CommentContents | '(:' | ':)'
      if (l1 == 49)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 19:                      // CommentContents
        consumeT(19);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(49);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 18:                        // S^WS
      consumeT(18);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 14:                        // NCName^Token
      consume(14);                  // NCName^Token
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    case 246:                       // 'updating'
      consume(246);                 // 'updating'
      break;
    default:
      consume(255);                 // 'where'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 14:                        // NCName^Token
      consumeT(14);                 // NCName^Token
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    case 246:                       // 'updating'
      consumeT(246);                // 'updating'
      break;
    default:
      consumeT(255);                // 'where'
    }
  }

  function parse_QueryBody()
  {
    eventHandler.startNonterminal("QueryBody", e0);
    parse_Expr();
    eventHandler.endNonterminal("QueryBody", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(160);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(160);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(217);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'tumbling' |
                                    // 'union' | 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // 'updating' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(213);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(209);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(215);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'value' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(211);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 246:                       // 'updating'
      lookahead2W(252);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '//' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' | ']' |
                                    // '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '|' | '||' | '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(214);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(208);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(206);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17557                 // 'if' '('
     || lk == 17654                 // 'updating' '('
     || lk == 27382                 // 'updating' '<'
     || lk == 35574                 // 'updating' '['
     || lk == 41206                 // 'updating' 'and'
     || lk == 42742                 // 'updating' 'as'
     || lk == 43254                 // 'updating' 'ascending'
     || lk == 46838                 // 'updating' 'case'
     || lk == 47350                 // 'updating' 'cast'
     || lk == 47862                 // 'updating' 'castable'
     || lk == 49398                 // 'updating' 'collation'
     || lk == 53494                 // 'updating' 'count'
     || lk == 55542                 // 'updating' 'default'
     || lk == 57590                 // 'updating' 'descending'
     || lk == 60150                 // 'updating' 'div'
     || lk == 62198                 // 'updating' 'else'
     || lk == 62710                 // 'updating' 'empty'
     || lk == 64246                 // 'updating' 'end'
     || lk == 65270                 // 'updating' 'eq'
     || lk == 66806                 // 'updating' 'except'
     || lk == 69878                 // 'updating' 'for'
     || lk == 73462                 // 'updating' 'ge'
     || lk == 74486                 // 'updating' 'group'
     || lk == 75510                 // 'updating' 'gt'
     || lk == 76022                 // 'updating' 'idiv'
     || lk == 80118                 // 'updating' 'instance'
     || lk == 80630                 // 'updating' 'intersect'
     || lk == 82166                 // 'updating' 'is'
     || lk == 84726                 // 'updating' 'le'
     || lk == 85750                 // 'updating' 'let'
     || lk == 87286                 // 'updating' 'lt'
     || lk == 88822                 // 'updating' 'mod'
     || lk == 89334                 // 'updating' 'modify'
     || lk == 91894                 // 'updating' 'ne'
     || lk == 97014                 // 'updating' 'only'
     || lk == 98038                 // 'updating' 'or'
     || lk == 98550                 // 'updating' 'order'
     || lk == 107766                // 'updating' 'return'
     || lk == 109302                // 'updating' 'satisfies'
     || lk == 115446                // 'updating' 'stable'
     || lk == 115958                // 'updating' 'start'
     || lk == 121078                // 'updating' 'to'
     || lk == 121590                // 'updating' 'transform'
     || lk == 122102                // 'updating' 'treat'
     || lk == 124662                // 'updating' 'union'
     || lk == 125686                // 'updating' 'update'
     || lk == 130806                // 'updating' 'where'
     || lk == 132342)               // 'updating' 'with'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_IfExpr();
          lk = -5;
        }
        catch (p5A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_BasexIfExpr();
            lk = -6;
          }
          catch (p6A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_UpdatingFunctionCall();
              lk = -12;
            }
            catch (p12A)
            {
              lk = -14;
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 17639:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 17650:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    case -5:
      parse_IfExpr();
      break;
    case -6:
      parse_BasexIfExpr();
      break;
    case 135407:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case -12:
    case 758:                       // 'updating' IntegerLiteral
    case 1270:                      // 'updating' DecimalLiteral
    case 1782:                      // 'updating' DoubleLiteral
    case 2294:                      // 'updating' StringLiteral
    case 2806:                      // 'updating' URIQualifiedName
    case 7926:                      // 'updating' QName^Token
    case 16118:                     // 'updating' '$'
    case 16630:                     // 'updating' '%'
    case 22262:                     // 'updating' '.'
    case 27894:                     // 'updating' '<!--'
    case 30454:                     // 'updating' '<?'
    case 33526:                     // 'updating' '?'
    case 37622:                     // 'updating' '``['
    case 40182:                     // 'updating' 'ancestor'
    case 40694:                     // 'updating' 'ancestor-or-self'
    case 42230:                     // 'updating' 'array'
    case 43766:                     // 'updating' 'at'
    case 44278:                     // 'updating' 'attribute'
    case 48886:                     // 'updating' 'child'
    case 49910:                     // 'updating' 'comment'
    case 52470:                     // 'updating' 'copy'
    case 55030:                     // 'updating' 'declare'
    case 56054:                     // 'updating' 'delete'
    case 56566:                     // 'updating' 'descendant'
    case 57078:                     // 'updating' 'descendant-or-self'
    case 60662:                     // 'updating' 'document'
    case 61174:                     // 'updating' 'document-node'
    case 61686:                     // 'updating' 'element'
    case 63222:                     // 'updating' 'empty-sequence'
    case 65782:                     // 'updating' 'every'
    case 68854:                     // 'updating' 'following'
    case 69366:                     // 'updating' 'following-sibling'
    case 72950:                     // 'updating' 'function'
    case 76534:                     // 'updating' 'if'
    case 77046:                     // 'updating' 'import'
    case 79606:                     // 'updating' 'insert'
    case 81654:                     // 'updating' 'invoke'
    case 82678:                     // 'updating' 'item'
    case 87798:                     // 'updating' 'map'
    case 89846:                     // 'updating' 'module'
    case 90870:                     // 'updating' 'namespace'
    case 91382:                     // 'updating' 'namespace-node'
    case 94454:                     // 'updating' 'node'
    case 99062:                     // 'updating' 'ordered'
    case 101110:                    // 'updating' 'parent'
    case 103670:                    // 'updating' 'preceding'
    case 104182:                    // 'updating' 'preceding-sibling'
    case 105718:                    // 'updating' 'processing-instruction'
    case 106742:                    // 'updating' 'rename'
    case 107254:                    // 'updating' 'replace'
    case 110326:                    // 'updating' 'schema-attribute'
    case 110838:                    // 'updating' 'schema-element'
    case 111862:                    // 'updating' 'self'
    case 114934:                    // 'updating' 'some'
    case 118518:                    // 'updating' 'switch'
    case 119030:                    // 'updating' 'text'
    case 122614:                    // 'updating' 'try'
    case 124150:                    // 'updating' 'typeswitch'
    case 125174:                    // 'updating' 'unordered'
    case 126111:                    // 'invoke' 'updating'
    case 126198:                    // 'updating' 'updating'
    case 127734:                    // 'updating' 'validate'
    case 134390:                    // 'updating' 'xquery'
      parse_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      parse_CopyModifyExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(217);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'tumbling' |
                                    // 'union' | 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // 'updating' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(213);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(209);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(215);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'value' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(211);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 246:                       // 'updating'
      lookahead2W(252);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '//' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' | ']' |
                                    // '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'updating' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '|' | '||' | '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(214);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(208);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(206);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' | 'update' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17557                 // 'if' '('
     || lk == 17654                 // 'updating' '('
     || lk == 27382                 // 'updating' '<'
     || lk == 35574                 // 'updating' '['
     || lk == 41206                 // 'updating' 'and'
     || lk == 42742                 // 'updating' 'as'
     || lk == 43254                 // 'updating' 'ascending'
     || lk == 46838                 // 'updating' 'case'
     || lk == 47350                 // 'updating' 'cast'
     || lk == 47862                 // 'updating' 'castable'
     || lk == 49398                 // 'updating' 'collation'
     || lk == 53494                 // 'updating' 'count'
     || lk == 55542                 // 'updating' 'default'
     || lk == 57590                 // 'updating' 'descending'
     || lk == 60150                 // 'updating' 'div'
     || lk == 62198                 // 'updating' 'else'
     || lk == 62710                 // 'updating' 'empty'
     || lk == 64246                 // 'updating' 'end'
     || lk == 65270                 // 'updating' 'eq'
     || lk == 66806                 // 'updating' 'except'
     || lk == 69878                 // 'updating' 'for'
     || lk == 73462                 // 'updating' 'ge'
     || lk == 74486                 // 'updating' 'group'
     || lk == 75510                 // 'updating' 'gt'
     || lk == 76022                 // 'updating' 'idiv'
     || lk == 80118                 // 'updating' 'instance'
     || lk == 80630                 // 'updating' 'intersect'
     || lk == 82166                 // 'updating' 'is'
     || lk == 84726                 // 'updating' 'le'
     || lk == 85750                 // 'updating' 'let'
     || lk == 87286                 // 'updating' 'lt'
     || lk == 88822                 // 'updating' 'mod'
     || lk == 89334                 // 'updating' 'modify'
     || lk == 91894                 // 'updating' 'ne'
     || lk == 97014                 // 'updating' 'only'
     || lk == 98038                 // 'updating' 'or'
     || lk == 98550                 // 'updating' 'order'
     || lk == 107766                // 'updating' 'return'
     || lk == 109302                // 'updating' 'satisfies'
     || lk == 115446                // 'updating' 'stable'
     || lk == 115958                // 'updating' 'start'
     || lk == 121078                // 'updating' 'to'
     || lk == 121590                // 'updating' 'transform'
     || lk == 122102                // 'updating' 'treat'
     || lk == 124662                // 'updating' 'union'
     || lk == 125686                // 'updating' 'update'
     || lk == 130806                // 'updating' 'where'
     || lk == 132342)               // 'updating' 'with'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_IfExpr();
          memoize(9, e0A, -5);
          lk = -15;
        }
        catch (p5A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_BasexIfExpr();
            memoize(9, e0A, -6);
            lk = -15;
          }
          catch (p6A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_UpdatingFunctionCall();
              memoize(9, e0A, -12);
              lk = -15;
            }
            catch (p12A)
            {
              lk = -14;
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(9, e0A, -14);
            }
          }
        }
      }
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 17639:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 17650:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    case -5:
      try_IfExpr();
      break;
    case -6:
      try_BasexIfExpr();
      break;
    case 135407:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case -12:
    case 758:                       // 'updating' IntegerLiteral
    case 1270:                      // 'updating' DecimalLiteral
    case 1782:                      // 'updating' DoubleLiteral
    case 2294:                      // 'updating' StringLiteral
    case 2806:                      // 'updating' URIQualifiedName
    case 7926:                      // 'updating' QName^Token
    case 16118:                     // 'updating' '$'
    case 16630:                     // 'updating' '%'
    case 22262:                     // 'updating' '.'
    case 27894:                     // 'updating' '<!--'
    case 30454:                     // 'updating' '<?'
    case 33526:                     // 'updating' '?'
    case 37622:                     // 'updating' '``['
    case 40182:                     // 'updating' 'ancestor'
    case 40694:                     // 'updating' 'ancestor-or-self'
    case 42230:                     // 'updating' 'array'
    case 43766:                     // 'updating' 'at'
    case 44278:                     // 'updating' 'attribute'
    case 48886:                     // 'updating' 'child'
    case 49910:                     // 'updating' 'comment'
    case 52470:                     // 'updating' 'copy'
    case 55030:                     // 'updating' 'declare'
    case 56054:                     // 'updating' 'delete'
    case 56566:                     // 'updating' 'descendant'
    case 57078:                     // 'updating' 'descendant-or-self'
    case 60662:                     // 'updating' 'document'
    case 61174:                     // 'updating' 'document-node'
    case 61686:                     // 'updating' 'element'
    case 63222:                     // 'updating' 'empty-sequence'
    case 65782:                     // 'updating' 'every'
    case 68854:                     // 'updating' 'following'
    case 69366:                     // 'updating' 'following-sibling'
    case 72950:                     // 'updating' 'function'
    case 76534:                     // 'updating' 'if'
    case 77046:                     // 'updating' 'import'
    case 79606:                     // 'updating' 'insert'
    case 81654:                     // 'updating' 'invoke'
    case 82678:                     // 'updating' 'item'
    case 87798:                     // 'updating' 'map'
    case 89846:                     // 'updating' 'module'
    case 90870:                     // 'updating' 'namespace'
    case 91382:                     // 'updating' 'namespace-node'
    case 94454:                     // 'updating' 'node'
    case 99062:                     // 'updating' 'ordered'
    case 101110:                    // 'updating' 'parent'
    case 103670:                    // 'updating' 'preceding'
    case 104182:                    // 'updating' 'preceding-sibling'
    case 105718:                    // 'updating' 'processing-instruction'
    case 106742:                    // 'updating' 'rename'
    case 107254:                    // 'updating' 'replace'
    case 110326:                    // 'updating' 'schema-attribute'
    case 110838:                    // 'updating' 'schema-element'
    case 111862:                    // 'updating' 'self'
    case 114934:                    // 'updating' 'some'
    case 118518:                    // 'updating' 'switch'
    case 119030:                    // 'updating' 'text'
    case 122614:                    // 'updating' 'try'
    case 124150:                    // 'updating' 'typeswitch'
    case 125174:                    // 'updating' 'unordered'
    case 126111:                    // 'invoke' 'updating'
    case 126198:                    // 'updating' 'updating'
    case 127734:                    // 'updating' 'validate'
    case 134390:                    // 'updating' 'xquery'
      try_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      try_CopyModifyExpr();
      break;
    case -15:
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consume(6);                   // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consume(13);                  // CharRef
      break;
    case 265:                       // '{{'
      consume(265);                 // '{{'
      break;
    case 270:                       // '}}'
      consume(270);                 // '}}'
      break;
    default:
      parse_EnclosedExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consumeT(6);                  // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consumeT(13);                 // CharRef
      break;
    case 265:                       // '{{'
      consumeT(265);                // '{{'
      break;
    case 270:                       // '}}'
      consumeT(270);                // '}}'
      break;
    default:
      try_EnclosedExpr();
    }
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(118);                   // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(118);                  // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(86);                    // 'attribute'
    lookahead1W(234);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(234);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(176);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(176);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(97);                    // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(232);                   // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(232);                  // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 177:                       // 'namespace'
      lookahead2W(180);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'updating' | 'where' | '{'
      break;
    case 206:                       // 'processing-instruction'
      lookahead2W(178);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
      break;
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(235);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 97:                        // 'comment'
    case 232:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 244:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 179:                       // 'ne'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 246:                       // 'updating'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17654:                     // 'updating' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 119:                       // 'document-node'
    case 123:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15027:                     // 'ne' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15094:                     // 'updating' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 171:                       // 'map'
      parse_MapConstructor();
      break;
    case 69:                        // '['
    case 82:                        // 'array'
      parse_ArrayConstructor();
      break;
    case 73:                        // '``['
      parse_StringConstructor();
      break;
    case 65:                        // '?'
      parse_UnaryLookup();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 177:                       // 'namespace'
      lookahead2W(180);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'updating' | 'where' | '{'
      break;
    case 206:                       // 'processing-instruction'
      lookahead2W(178);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'updating' | 'where' | '{'
      break;
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(235);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'updating' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 97:                        // 'comment'
    case 232:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 244:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 179:                       // 'ne'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 246:                       // 'updating'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      try_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17654:                     // 'updating' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 119:                       // 'document-node'
    case 123:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15027:                     // 'ne' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15094:                     // 'updating' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 171:                       // 'map'
      try_MapConstructor();
      break;
    case 69:                        // '['
    case 82:                        // 'array'
      try_ArrayConstructor();
      break;
    case 73:                        // '``['
      try_StringConstructor();
      break;
    case 65:                        // '?'
      try_UnaryLookup();
      break;
    default:
      try_Constructor();
    }
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 18)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

}

XQueryParser.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 271; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 2615 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

XQueryParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

XQueryParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

XQueryParser.MAP0 =
[
  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  /* 452 */ 69, 69, 69, 69
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 2, 3, 94212, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254
];

XQueryParser.TRANSITION =
[
  /*     0 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*    15 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*    30 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*    45 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*    60 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*    75 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*    90 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   105 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   120 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   135 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   150 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   165 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   180 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   195 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   210 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   225 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   240 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   255 */ 21304, 18176, 18192, 18221, 18221, 18221, 18239, 18221, 18221, 18221, 18241, 18216, 18221, 18221, 18221,
  /*   270 */ 18204, 18223, 18257, 18273, 21304, 21304, 42467, 21304, 24147, 21304, 21304, 20177, 18543, 21304, 21304,
  /*   285 */ 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294, 24665, 41911, 18291, 25940, 21304, 24512, 21304,
  /*   300 */ 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269, 18450, 21197, 18480, 19276, 18457, 21204,
  /*   315 */ 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528, 18565, 18581, 18611, 18512, 18635, 18651,
  /*   330 */ 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224, 36599, 18754, 18793, 18840, 20490, 21304,
  /*   345 */ 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975, 42709, 18996, 19017, 18719, 18317, 40704,
  /*   360 */ 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200, 19219, 19240, 19184, 19203, 19292, 34828,
  /*   375 */ 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935, 19383, 19399, 19542, 19449, 21522, 19484,
  /*   390 */ 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693, 19709, 19701, 19725, 19762, 19808, 19837,
  /*   405 */ 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921, 19951, 19982, 39929, 20011, 20053, 23425,
  /*   420 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   435 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   450 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   465 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   480 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   495 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   510 */ 21304, 21304, 20083, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 35533, 27890, 27902,
  /*   525 */ 20105, 20117, 40759, 20137, 18273, 21304, 21304, 42467, 21304, 24147, 21304, 36591, 20177, 18543, 21304,
  /*   540 */ 21304, 21304, 21304, 20179, 39921, 18721, 18719, 19260, 21235, 24665, 41911, 18291, 25940, 21304, 24512,
  /*   555 */ 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269, 18450, 21197, 18480, 19276, 18457,
  /*   570 */ 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528, 18565, 18581, 18611, 18512, 18635,
  /*   585 */ 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224, 36599, 18754, 18793, 18840, 20490,
  /*   600 */ 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975, 42709, 18996, 19017, 18719, 18317,
  /*   615 */ 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200, 19219, 19240, 19184, 19203, 19292,
  /*   630 */ 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935, 19383, 19399, 19542, 19449, 21522,
  /*   645 */ 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693, 19709, 19701, 19725, 19762, 19808,
  /*   660 */ 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921, 19951, 19982, 39929, 20011, 20053,
  /*   675 */ 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   690 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   705 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   720 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   735 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   750 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   765 */ 21304, 21304, 21304, 20083, 20153, 21304, 21304, 21304, 20174, 21304, 21304, 20195, 20227, 35533, 20197,
  /*   780 */ 21304, 21304, 21304, 20215, 20137, 20243, 21304, 21304, 42467, 21304, 24147, 42851, 21304, 20177, 18543,
  /*   795 */ 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294, 20261, 41911, 18291, 25940, 21304,
  /*   810 */ 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269, 18450, 21197, 18480, 19276,
  /*   825 */ 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528, 18565, 18581, 18611, 18512,
  /*   840 */ 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224, 36599, 18754, 18793, 18840,
  /*   855 */ 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975, 42709, 18996, 19017, 18719,
  /*   870 */ 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200, 19219, 19240, 19184, 19203,
  /*   885 */ 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935, 19383, 19399, 19542, 19449,
  /*   900 */ 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693, 19709, 19701, 19725, 19762,
  /*   915 */ 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921, 19951, 19982, 39929, 20011,
  /*   930 */ 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   945 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   960 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   975 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*   990 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1005 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1020 */ 21304, 21304, 21304, 21304, 20289, 20419, 21304, 21304, 21304, 20324, 21304, 21304, 20420, 37361, 35533,
  /*  1035 */ 20345, 38853, 20373, 20414, 19468, 20436, 18273, 21304, 21304, 20387, 21304, 24147, 21486, 21304, 20177,
  /*  1050 */ 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294, 19352, 41911, 18291, 25940,
  /*  1065 */ 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269, 18450, 21197, 18480,
  /*  1080 */ 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528, 18565, 18581, 18611,
  /*  1095 */ 18512, 18635, 18651, 18702, 18719, 20452, 18648, 18699, 18718, 42914, 18737, 19224, 36599, 18754, 18793,
  /*  1110 */ 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975, 42709, 18996, 19017,
  /*  1125 */ 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200, 19219, 19240, 19184,
  /*  1140 */ 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935, 19383, 19399, 19542,
  /*  1155 */ 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693, 19709, 19701, 19725,
  /*  1170 */ 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921, 19951, 19982, 39929,
  /*  1185 */ 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1200 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1215 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1230 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1245 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1260 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1275 */ 21304, 21304, 21304, 21304, 21304, 20083, 20397, 21304, 21304, 21304, 20482, 21304, 21304, 20398, 24809,
  /*  1290 */ 35533, 21304, 21304, 20519, 34126, 20506, 20137, 18273, 21304, 21304, 42467, 21304, 24147, 21304, 21304,
  /*  1305 */ 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294, 24665, 41911, 18291,
  /*  1320 */ 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269, 18450, 21197,
  /*  1335 */ 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528, 18565, 18581,
  /*  1350 */ 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224, 36599, 18754,
  /*  1365 */ 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975, 42709, 18996,
  /*  1380 */ 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200, 19219, 19240,
  /*  1395 */ 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935, 19383, 19399,
  /*  1410 */ 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693, 19709, 19701,
  /*  1425 */ 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921, 19951, 19982,
  /*  1440 */ 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1455 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1470 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1485 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1500 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1515 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1530 */ 21304, 21304, 21304, 21304, 21304, 21304, 20083, 21304, 21304, 21304, 21304, 20553, 21304, 21304, 21304,
  /*  1545 */ 20559, 20575, 25948, 21304, 21304, 41377, 20596, 20137, 18273, 21304, 21304, 42467, 21304, 24147, 21304,
  /*  1560 */ 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294, 24665, 41911,
  /*  1575 */ 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269, 18450,
  /*  1590 */ 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528, 18565,
  /*  1605 */ 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224, 36599,
  /*  1620 */ 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975, 42709,
  /*  1635 */ 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200, 19219,
  /*  1650 */ 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935, 19383,
  /*  1665 */ 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693, 19709,
  /*  1680 */ 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921, 19951,
  /*  1695 */ 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1710 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1725 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1740 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1755 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1770 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1785 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 21304, 21304, 21304, 21304, 25670, 21304, 21304,
  /*  1800 */ 21304, 26420, 23927, 21304, 21304, 21304, 21304, 21304, 20137, 20643, 21304, 21304, 42467, 21304, 24147,
  /*  1815 */ 21304, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294, 24665,
  /*  1830 */ 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269,
  /*  1845 */ 18450, 21197, 20661, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528,
  /*  1860 */ 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224,
  /*  1875 */ 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975,
  /*  1890 */ 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200,
  /*  1905 */ 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935,
  /*  1920 */ 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693,
  /*  1935 */ 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921,
  /*  1950 */ 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1965 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1980 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  1995 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2010 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2025 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2040 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 20685, 21304, 21304, 21304, 20706, 21304,
  /*  2055 */ 21304, 20725, 20757, 35533, 20727, 21304, 21304, 21304, 20745, 20137, 20773, 21304, 21304, 42467, 21304,
  /*  2070 */ 24147, 20121, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294,
  /*  2085 */ 25207, 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549,
  /*  2100 */ 19269, 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819,
  /*  2115 */ 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737,
  /*  2130 */ 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022,
  /*  2145 */ 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181,
  /*  2160 */ 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661,
  /*  2175 */ 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656,
  /*  2190 */ 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299,
  /*  2205 */ 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2220 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2235 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2250 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2265 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2280 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2295 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 20791, 20866, 20866, 20866, 20849,
  /*  2310 */ 20866, 20866, 20802, 20818, 20861, 20834, 20868, 20884, 20907, 20897, 20137, 18273, 21304, 21304, 20923,
  /*  2325 */ 21304, 24147, 21304, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936,
  /*  2340 */ 24294, 24665, 41911, 18291, 35635, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434,
  /*  2355 */ 18549, 19269, 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503,
  /*  2370 */ 34819, 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914,
  /*  2385 */ 18737, 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001,
  /*  2400 */ 19022, 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127,
  /*  2415 */ 19181, 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380,
  /*  2430 */ 42661, 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615,
  /*  2445 */ 19656, 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680,
  /*  2460 */ 19299, 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2475 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2490 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2505 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2520 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2535 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2550 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 20972, 21304, 21304, 21304,
  /*  2565 */ 20946, 21304, 21304, 20627, 37361, 20988, 21001, 21013, 21013, 20968, 20958, 21029, 18273, 21304, 21304,
  /*  2580 */ 21165, 21304, 24147, 21304, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719,
  /*  2595 */ 39936, 24294, 24665, 41911, 18291, 25665, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428,
  /*  2610 */ 18434, 18549, 19269, 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304,
  /*  2625 */ 18503, 34819, 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718,
  /*  2640 */ 42914, 18737, 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714,
  /*  2655 */ 19001, 19022, 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102,
  /*  2670 */ 19127, 19181, 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932,
  /*  2685 */ 19380, 42661, 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599,
  /*  2700 */ 19615, 19656, 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464,
  /*  2715 */ 18680, 19299, 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2730 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2745 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2760 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2775 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2790 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  2805 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 36342, 21304, 21304,
  /*  2820 */ 21304, 25670, 21304, 21304, 21304, 37361, 35533, 21045, 21091, 21097, 21113, 21151, 20137, 18273, 21304,
  /*  2835 */ 21304, 42467, 21304, 24147, 21304, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721,
  /*  2850 */ 18719, 39936, 24294, 24665, 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403,
  /*  2865 */ 18428, 18434, 18549, 19269, 18450, 21197, 21188, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304,
  /*  2880 */ 21304, 18503, 34819, 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 21220, 18648, 18699,
  /*  2895 */ 18718, 42914, 18737, 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980,
  /*  2910 */ 42714, 19001, 19022, 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086,
  /*  2925 */ 19102, 19127, 19181, 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079,
  /*  2940 */ 19932, 19380, 42661, 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681,
  /*  2955 */ 19599, 19615, 19656, 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677,
  /*  2970 */ 18464, 18680, 19299, 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304,
  /*  2985 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3000 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3015 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3030 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3045 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3060 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 21304, 21304,
  /*  3075 */ 21304, 21304, 25670, 21304, 21304, 21304, 37361, 35533, 28054, 21251, 21257, 21283, 21273, 20137, 18273,
  /*  3090 */ 21304, 21304, 42467, 21304, 24147, 21304, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921,
  /*  3105 */ 18721, 18719, 39936, 24294, 24665, 41911, 18291, 25940, 21304, 24512, 21303, 21304, 39910, 18333, 18387,
  /*  3120 */ 18403, 18428, 18434, 18549, 19269, 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304,
  /*  3135 */ 21304, 21304, 18503, 34819, 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648,
  /*  3150 */ 18699, 18718, 42914, 18737, 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944,
  /*  3165 */ 18980, 42714, 19001, 19022, 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111,
  /*  3180 */ 19086, 19102, 19127, 19181, 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337,
  /*  3195 */ 22079, 19932, 19380, 42661, 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583,
  /*  3210 */ 42681, 19599, 19615, 19656, 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669,
  /*  3225 */ 18677, 18464, 18680, 19299, 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304,
  /*  3240 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3255 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3270 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3285 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3300 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3315 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 38648,
  /*  3330 */ 21304, 21304, 21304, 21321, 21336, 21304, 38651, 37361, 21354, 29247, 29252, 29252, 21334, 19889, 20137,
  /*  3345 */ 18273, 21304, 21304, 42467, 21304, 24147, 21304, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179,
  /*  3360 */ 39921, 18721, 18719, 39936, 24294, 24665, 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333,
  /*  3375 */ 18387, 18403, 18428, 18434, 18549, 19269, 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315,
  /*  3390 */ 21304, 21304, 21304, 18503, 34819, 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667,
  /*  3405 */ 18648, 18699, 18718, 42914, 18737, 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152,
  /*  3420 */ 18944, 18980, 42714, 19001, 19022, 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059,
  /*  3435 */ 19111, 19086, 19102, 19127, 19181, 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304,
  /*  3450 */ 19337, 22079, 19932, 19380, 42661, 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487,
  /*  3465 */ 19583, 42681, 19599, 19615, 19656, 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466,
  /*  3480 */ 20669, 18677, 18464, 18680, 19299, 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304,
  /*  3495 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3510 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3525 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3540 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3555 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3570 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21399,
  /*  3585 */ 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 35533, 29584, 21423, 21429, 21445, 21465,
  /*  3600 */ 21502, 18273, 21304, 21304, 42467, 21304, 24147, 21304, 21304, 24181, 36178, 21304, 21304, 21304, 21304,
  /*  3615 */ 24183, 28881, 29879, 21559, 25510, 26296, 21304, 19433, 21304, 25940, 34740, 24512, 21303, 21518, 31071,
  /*  3630 */ 36177, 31000, 21304, 21304, 24182, 19511, 32902, 32902, 32902, 21538, 21559, 21559, 41437, 25914, 21304,
  /*  3645 */ 21304, 21304, 21304, 21304, 40864, 38835, 32313, 36177, 30999, 21304, 24180, 26267, 32902, 32902, 32902,
  /*  3660 */ 34475, 21559, 21559, 21559, 26383, 25912, 38916, 25377, 21304, 21304, 21304, 21304, 18275, 31644, 30999,
  /*  3675 */ 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 21304, 21304, 21304, 21304,
  /*  3690 */ 39554, 37242, 31000, 24181, 29089, 42273, 32902, 39822, 26330, 21558, 21559, 39070, 21304, 21304, 35799,
  /*  3705 */ 21304, 30997, 35087, 32902, 40167, 26322, 21559, 29508, 28469, 21304, 21304, 31280, 32396, 27044, 32902,
  /*  3720 */ 37041, 21559, 31952, 21304, 42886, 39594, 21576, 36283, 21605, 34196, 21304, 26237, 21626, 21649, 24180,
  /*  3735 */ 21689, 30474, 25567, 30744, 41586, 27384, 25785, 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304,
  /*  3750 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3765 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3780 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3795 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3810 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3825 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  3840 */ 20083, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 21812, 35533, 21304, 21304, 21304, 21304,
  /*  3855 */ 21828, 20137, 18273, 21304, 21304, 42467, 21304, 24381, 21304, 21304, 24181, 36178, 21304, 21304, 21304,
  /*  3870 */ 21304, 24183, 28881, 29879, 21559, 32838, 26296, 21304, 21304, 21304, 25940, 21304, 24512, 21304, 21304,
  /*  3885 */ 31071, 36177, 31000, 21304, 21304, 24182, 19511, 32902, 32902, 32902, 21538, 21559, 21559, 34714, 25914,
  /*  3900 */ 21304, 21304, 21304, 21304, 21304, 40864, 21304, 24181, 36177, 30999, 21304, 24180, 26267, 32902, 32902,
  /*  3915 */ 32902, 34475, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21304, 21304, 21304, 21304, 21304, 31644,
  /*  3930 */ 30999, 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 21304, 21304, 21304,
  /*  3945 */ 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330, 21559, 21559, 39070, 21304, 21304,
  /*  3960 */ 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361, 21304, 21304, 21304, 32396, 27044,
  /*  3975 */ 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 27332,
  /*  3990 */ 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304,
  /*  4005 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4020 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4035 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4050 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4065 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4080 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4095 */ 21304, 20083, 19627, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 35533, 30057, 26706, 21865,
  /*  4110 */ 21890, 21881, 20137, 18273, 21304, 21304, 42467, 21304, 24147, 21304, 20529, 20177, 18543, 21915, 21304,
  /*  4125 */ 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294, 24665, 41911, 18291, 25940, 21304, 24512, 21304,
  /*  4140 */ 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269, 18450, 21197, 18480, 19276, 18457, 21204,
  /*  4155 */ 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528, 18565, 18581, 18611, 18512, 18635, 18651,
  /*  4170 */ 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224, 36599, 18754, 18793, 18840, 20490, 21304,
  /*  4185 */ 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975, 42709, 18996, 19017, 18719, 18317, 40704,
  /*  4200 */ 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200, 19219, 19240, 19184, 19203, 19292, 34828,
  /*  4215 */ 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935, 19383, 19399, 19542, 19449, 21522, 19484,
  /*  4230 */ 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693, 19709, 19701, 19725, 19762, 19808, 19837,
  /*  4245 */ 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921, 19951, 19982, 39929, 20011, 20053, 23425,
  /*  4260 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4275 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4290 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4305 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4320 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4335 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4350 */ 21304, 21304, 20083, 21980, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 21932, 35533, 21976, 21304,
  /*  4365 */ 21304, 21304, 21948, 21964, 18273, 21304, 21304, 42467, 21304, 32921, 21304, 21304, 24181, 36178, 21304,
  /*  4380 */ 21304, 21304, 21304, 24183, 28881, 29879, 21559, 39408, 26296, 21304, 21304, 21304, 25940, 21304, 32920,
  /*  4395 */ 21999, 21304, 31071, 36177, 31000, 21304, 21304, 24182, 19511, 32902, 32902, 32902, 21538, 21559, 21559,
  /*  4410 */ 34714, 25914, 22032, 21304, 21304, 21304, 21304, 27946, 19164, 24181, 36177, 30999, 21304, 24180, 26267,
  /*  4425 */ 32902, 32902, 32902, 34475, 21559, 21559, 21559, 26383, 25912, 22053, 21304, 21304, 21304, 21304, 19792,
  /*  4440 */ 21304, 31644, 30999, 21304, 37243, 32902, 32902, 32902, 36405, 22095, 21559, 21559, 21559, 37036, 22115,
  /*  4455 */ 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 27080, 26330, 21559, 21559, 39070,
  /*  4470 */ 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902, 30666, 21559, 21559, 26361, 21304, 21304, 21304,
  /*  4485 */ 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237,
  /*  4500 */ 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768,
  /*  4515 */ 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4530 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4545 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4560 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4575 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4590 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4605 */ 21304, 21304, 21304, 20083, 34331, 21304, 21304, 21304, 22134, 22152, 21304, 19321, 37361, 39882, 37553,
  /*  4620 */ 22173, 22184, 22200, 38297, 22220, 22236, 21304, 21304, 22256, 21304, 24147, 21304, 21304, 20177, 18543,
  /*  4635 */ 21304, 21304, 21304, 21304, 20179, 18877, 22822, 22489, 22801, 22295, 24665, 41911, 18291, 24631, 21304,
  /*  4650 */ 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18348, 18371, 22282, 22812, 22311, 22334,
  /*  4665 */ 22640, 22350, 22507, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528, 18565, 18581, 18611, 18512,
  /*  4680 */ 22387, 18886, 22401, 22820, 22431, 22458, 23145, 22488, 22689, 22505, 22895, 36599, 18754, 18793, 18840,
  /*  4695 */ 20490, 21304, 18863, 18902, 42152, 22523, 22415, 22580, 22567, 22609, 22442, 22789, 23091, 22625, 23229,
  /*  4710 */ 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 22664, 18362, 22705, 22755, 22777, 22838, 22648,
  /*  4725 */ 22883, 34828, 19315, 18412, 21304, 19337, 28850, 22593, 22911, 22677, 23002, 22927, 22853, 19542, 19449,
  /*  4740 */ 21522, 19484, 22956, 22538, 22551, 23240, 23060, 19599, 19615, 19656, 22972, 22988, 23018, 23031, 19762,
  /*  4755 */ 23047, 23076, 22940, 19905, 23115, 23099, 39201, 22318, 39204, 23168, 23131, 22472, 22720, 23161, 23184,
  /*  4770 */ 23214, 22364, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4785 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4800 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4815 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4830 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4845 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  4860 */ 21304, 21304, 21304, 21304, 20083, 23527, 21304, 21304, 21304, 23256, 23267, 21304, 21304, 37361, 39715,
  /*  4875 */ 35426, 23290, 23290, 23302, 24363, 20137, 18273, 21304, 21304, 42467, 21304, 24147, 21304, 21304, 20177,
  /*  4890 */ 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294, 24665, 41911, 18291, 25940,
  /*  4905 */ 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269, 18450, 21197, 18480,
  /*  4920 */ 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 23322, 23338, 18528, 18565, 18581, 18611,
  /*  4935 */ 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 18959, 36599, 18754, 18793,
  /*  4950 */ 18840, 35643, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975, 42709, 18996, 19017,
  /*  4965 */ 18719, 23363, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200, 23379, 23414, 19184,
  /*  4980 */ 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42650, 19935, 19383, 19399, 19542,
  /*  4995 */ 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693, 19709, 19701, 19725,
  /*  5010 */ 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921, 19951, 19982, 39929,
  /*  5025 */ 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5040 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5055 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5070 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5085 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5100 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5115 */ 21304, 21304, 21304, 21304, 21304, 20083, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 21304,
  /*  5130 */ 23448, 30591, 30598, 30598, 23469, 23489, 20137, 18273, 21304, 21304, 42467, 21304, 24147, 21304, 21304,
  /*  5145 */ 20177, 18543, 23525, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 23543, 24665, 41911, 18291,
  /*  5160 */ 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269, 18450, 21197,
  /*  5175 */ 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528, 18565, 18581,
  /*  5190 */ 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224, 36599, 18754,
  /*  5205 */ 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975, 42709, 18996,
  /*  5220 */ 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200, 19219, 19240,
  /*  5235 */ 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935, 19383, 19399,
  /*  5250 */ 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693, 19709, 19701,
  /*  5265 */ 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921, 19951, 19982,
  /*  5280 */ 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5295 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5310 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5325 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5340 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5355 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5370 */ 21304, 21304, 21304, 21304, 21304, 21304, 23559, 21304, 23572, 21304, 21304, 25670, 21304, 21304, 21304,
  /*  5385 */ 37361, 35533, 23722, 23734, 23589, 23601, 39527, 20137, 23621, 21304, 21304, 42467, 21304, 24147, 21304,
  /*  5400 */ 21304, 20177, 23642, 23658, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 23678, 24665, 41911,
  /*  5415 */ 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269, 18450,
  /*  5430 */ 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528, 18565,
  /*  5445 */ 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224, 36599,
  /*  5460 */ 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975, 42709,
  /*  5475 */ 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200, 19219,
  /*  5490 */ 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935, 19383,
  /*  5505 */ 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693, 19709,
  /*  5520 */ 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921, 19951,
  /*  5535 */ 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5550 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5565 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5580 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5595 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5610 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5625 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 23694, 32363, 21304, 21304, 21304, 25670, 21304, 21304,
  /*  5640 */ 21304, 37361, 35533, 32878, 32885, 32885, 23750, 24129, 23775, 23791, 21304, 21304, 42467, 21304, 24147,
  /*  5655 */ 21304, 21304, 20177, 18543, 23810, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 19821, 23830,
  /*  5670 */ 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269,
  /*  5685 */ 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528,
  /*  5700 */ 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224,
  /*  5715 */ 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975,
  /*  5730 */ 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200,
  /*  5745 */ 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935,
  /*  5760 */ 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693,
  /*  5775 */ 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921,
  /*  5790 */ 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5805 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5820 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5835 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5850 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5865 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  5880 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 23864, 21304, 21304, 21304, 21304, 23880, 21304,
  /*  5895 */ 21304, 21304, 37361, 35533, 21304, 23883, 23899, 21304, 23913, 23948, 18273, 21304, 21304, 42467, 21304,
  /*  5910 */ 24147, 21304, 32406, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 42671, 23964,
  /*  5925 */ 24665, 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549,
  /*  5940 */ 19269, 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819,
  /*  5955 */ 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737,
  /*  5970 */ 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022,
  /*  5985 */ 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181,
  /*  6000 */ 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661,
  /*  6015 */ 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656,
  /*  6030 */ 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299,
  /*  6045 */ 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6060 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6075 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6090 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6105 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6120 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6135 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 21304, 21304, 21304, 21304, 25670,
  /*  6150 */ 21304, 21304, 21304, 37361, 35533, 21304, 21304, 21304, 21304, 23980, 20137, 18273, 21304, 21304, 42467,
  /*  6165 */ 21304, 24147, 21304, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936,
  /*  6180 */ 24294, 24665, 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434,
  /*  6195 */ 18549, 19269, 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503,
  /*  6210 */ 34819, 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914,
  /*  6225 */ 18737, 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001,
  /*  6240 */ 19022, 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127,
  /*  6255 */ 19181, 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380,
  /*  6270 */ 42661, 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615,
  /*  6285 */ 19656, 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680,
  /*  6300 */ 19299, 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6315 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6330 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6345 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6360 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6375 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6390 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304, 21304, 21304,
  /*  6405 */ 25670, 21304, 21304, 21304, 37361, 36314, 30971, 21304, 21304, 37028, 37665, 24038, 18273, 21304, 21304,
  /*  6420 */ 42467, 21304, 21304, 21304, 21304, 24181, 36178, 21304, 21304, 21304, 21304, 24183, 28881, 29879, 21559,
  /*  6435 */ 25510, 26296, 21304, 21304, 21304, 25940, 21304, 21304, 21304, 21304, 31071, 36177, 31000, 21304, 21304,
  /*  6450 */ 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559, 34714, 25914, 21304, 21304, 21304, 21304, 21304,
  /*  6465 */ 21304, 19164, 24181, 36177, 30999, 21304, 24180, 26267, 32902, 32902, 32902, 32659, 21559, 21559, 21559,
  /*  6480 */ 26383, 25912, 30553, 21304, 21304, 21304, 21304, 19792, 21304, 31644, 30999, 21304, 37243, 32902, 32902,
  /*  6495 */ 32902, 29094, 26328, 21559, 21559, 21559, 37036, 22115, 21304, 21304, 21304, 33330, 37242, 31000, 24181,
  /*  6510 */ 29089, 32902, 32902, 25085, 26330, 21559, 21559, 39070, 21304, 21304, 21304, 21304, 30997, 35087, 32902,
  /*  6525 */ 32902, 30666, 21559, 21559, 26361, 21304, 21304, 24080, 32396, 27044, 32902, 37041, 21559, 26364, 21304,
  /*  6540 */ 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 27332, 24180, 36125, 30744, 41583, 30744,
  /*  6555 */ 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6570 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6585 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6600 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6615 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6630 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6645 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304, 21304,
  /*  6660 */ 21304, 25670, 21304, 21304, 21304, 37361, 36314, 30971, 21304, 21304, 37028, 37665, 24038, 18273, 21304,
  /*  6675 */ 21304, 42467, 21304, 21304, 21304, 21304, 24181, 36178, 21304, 21304, 21304, 21304, 24183, 28881, 29879,
  /*  6690 */ 21559, 25510, 26296, 21304, 21304, 21304, 25940, 21304, 21304, 21304, 21304, 31071, 36177, 31000, 21304,
  /*  6705 */ 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559, 34714, 25914, 21304, 21304, 21304, 21304,
  /*  6720 */ 21304, 21304, 19164, 24181, 36177, 30999, 21304, 24180, 26267, 32902, 32902, 32902, 32659, 21559, 21559,
  /*  6735 */ 21559, 26383, 25912, 30553, 21304, 21304, 21304, 21304, 19792, 21304, 31644, 30999, 21304, 37243, 32902,
  /*  6750 */ 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 22115, 21304, 21304, 21304, 21304, 37242, 31000,
  /*  6765 */ 24181, 29089, 32902, 32902, 25085, 26330, 21559, 21559, 39070, 21304, 21304, 21304, 21304, 30997, 35087,
  /*  6780 */ 32902, 32902, 30666, 21559, 21559, 26361, 21304, 21304, 21304, 32396, 27044, 32902, 37041, 21559, 26364,
  /*  6795 */ 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 27332, 24180, 36125, 30744, 41583,
  /*  6810 */ 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304,
  /*  6825 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6840 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6855 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6870 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6885 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  6900 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304,
  /*  6915 */ 21304, 21304, 25670, 21304, 21304, 21304, 37361, 36314, 30971, 21304, 21304, 37028, 37665, 24038, 18273,
  /*  6930 */ 21304, 21304, 42467, 21304, 21304, 21304, 21304, 24181, 36178, 21304, 21304, 21304, 21304, 24183, 28881,
  /*  6945 */ 29879, 21559, 25510, 26296, 21304, 21304, 21304, 25940, 21304, 21304, 21304, 21304, 31071, 36177, 31000,
  /*  6960 */ 21304, 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559, 34714, 25914, 21304, 21304, 21304,
  /*  6975 */ 21304, 21304, 21304, 24098, 24181, 36177, 30999, 21304, 24180, 26267, 32902, 32902, 32902, 32659, 21559,
  /*  6990 */ 21559, 21559, 26383, 25912, 30553, 21304, 21304, 21304, 21304, 19792, 21304, 31644, 30999, 21304, 37243,
  /*  7005 */ 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 22115, 21304, 21304, 21304, 21304, 37242,
  /*  7020 */ 31000, 24181, 29089, 32902, 32902, 25085, 26330, 21559, 21559, 39070, 21304, 21304, 21304, 21304, 30997,
  /*  7035 */ 35087, 32902, 32902, 30666, 21559, 21559, 26361, 21304, 21304, 21304, 32396, 27044, 32902, 37041, 21559,
  /*  7050 */ 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 27332, 24180, 36125, 30744,
  /*  7065 */ 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304,
  /*  7080 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7095 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7110 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7125 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7140 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7155 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304,
  /*  7170 */ 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 36314, 30971, 21304, 21304, 37028, 37665, 24038,
  /*  7185 */ 18273, 21304, 21304, 42467, 21304, 21304, 21304, 21304, 24181, 36178, 21304, 21304, 21304, 21304, 24183,
  /*  7200 */ 28881, 29879, 21559, 25510, 26296, 21304, 21304, 21304, 25940, 21304, 21304, 21304, 21304, 31071, 36177,
  /*  7215 */ 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559, 34714, 25914, 21304, 21304,
  /*  7230 */ 21304, 21304, 21304, 21304, 19164, 24181, 36177, 30999, 21304, 24180, 26267, 32902, 32902, 32902, 32659,
  /*  7245 */ 21559, 21559, 21559, 26383, 25912, 30553, 21304, 21304, 21304, 21304, 19792, 24145, 31644, 30999, 21304,
  /*  7260 */ 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 22115, 21304, 21304, 21304, 21304,
  /*  7275 */ 37242, 31000, 24181, 29089, 32902, 32902, 25085, 26330, 21559, 21559, 39070, 21304, 21304, 21304, 21304,
  /*  7290 */ 30997, 35087, 32902, 32902, 30666, 21559, 21559, 26361, 21304, 21304, 21304, 32396, 27044, 32902, 37041,
  /*  7305 */ 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 27332, 24180, 36125,
  /*  7320 */ 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304, 21304,
  /*  7335 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7350 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7365 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7380 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7395 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7410 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480,
  /*  7425 */ 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 36314, 30971, 21304, 21304, 37028, 37665,
  /*  7440 */ 24038, 18273, 21304, 21304, 42467, 21304, 33635, 21304, 21304, 24181, 36178, 21304, 21304, 21304, 21304,
  /*  7455 */ 24183, 28881, 29879, 21559, 25510, 26296, 21304, 21304, 21304, 25940, 21304, 33635, 21304, 21304, 31071,
  /*  7470 */ 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559, 34714, 25914, 21304,
  /*  7485 */ 21304, 21304, 21304, 21304, 21304, 19164, 24181, 36177, 30999, 21304, 24180, 26267, 32902, 32902, 32902,
  /*  7500 */ 32659, 21559, 21559, 21559, 26383, 25912, 30553, 21304, 21304, 21304, 21304, 19792, 21304, 31644, 30999,
  /*  7515 */ 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 22115, 21304, 21304, 21304,
  /*  7530 */ 21304, 37242, 31000, 24181, 29089, 32902, 32902, 25085, 26330, 21559, 21559, 39070, 21304, 21304, 21304,
  /*  7545 */ 21304, 30997, 35087, 32902, 32902, 30666, 21559, 21559, 26361, 21304, 21304, 21304, 32396, 27044, 32902,
  /*  7560 */ 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 27332, 24180,
  /*  7575 */ 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304,
  /*  7590 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7605 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7620 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7635 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7650 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7665 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7680 */ 21480, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 36314, 30971, 21304, 21304, 37028,
  /*  7695 */ 37665, 24038, 18273, 21304, 21304, 42467, 21304, 21304, 21304, 21304, 24181, 36178, 21304, 21304, 21304,
  /*  7710 */ 21304, 24183, 28881, 29879, 21559, 25510, 26296, 21304, 21304, 21304, 25940, 21304, 21304, 21304, 21304,
  /*  7725 */ 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559, 34714, 25914,
  /*  7740 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24181, 36177, 30999, 21304, 24180, 26267, 32902, 32902,
  /*  7755 */ 32902, 32659, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21304, 21304, 21304, 21304, 21304, 31644,
  /*  7770 */ 30999, 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 21304, 21304, 21304,
  /*  7785 */ 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330, 21559, 21559, 39070, 21304, 21304,
  /*  7800 */ 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361, 21304, 21304, 21304, 32396, 27044,
  /*  7815 */ 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 27332,
  /*  7830 */ 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304,
  /*  7845 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7860 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7875 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7890 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7905 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7920 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  7935 */ 21304, 21480, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 36314, 30971, 21304, 21304,
  /*  7950 */ 37028, 37665, 24038, 18273, 21304, 21304, 42467, 21304, 21304, 21304, 21304, 24181, 36178, 21304, 21304,
  /*  7965 */ 21304, 21304, 24183, 28881, 29879, 21559, 25510, 21589, 21304, 21304, 21304, 25940, 21304, 21304, 21304,
  /*  7980 */ 21304, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559, 34714,
  /*  7995 */ 25914, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24181, 36177, 30999, 21304, 24180, 26267, 32902,
  /*  8010 */ 32902, 32902, 32659, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8025 */ 31644, 30999, 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 21304, 21304,
  /*  8040 */ 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330, 21559, 21559, 39070, 21304,
  /*  8055 */ 21304, 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361, 21304, 21304, 21304, 32396,
  /*  8070 */ 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612,
  /*  8085 */ 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752,
  /*  8100 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8115 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8130 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8145 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8160 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8175 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8190 */ 21304, 21304, 21480, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 36314, 30971, 21304,
  /*  8205 */ 21304, 37028, 27410, 24038, 18273, 21304, 21304, 42467, 21304, 21304, 21304, 21304, 24181, 36178, 21304,
  /*  8220 */ 21304, 21304, 21304, 24183, 28881, 29879, 21559, 25510, 26296, 21304, 21304, 21304, 25940, 21304, 21304,
  /*  8235 */ 21304, 21304, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559,
  /*  8250 */ 34714, 25914, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24181, 36177, 30999, 21304, 24180, 26267,
  /*  8265 */ 32902, 32902, 32902, 32659, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21304, 21304, 21304, 21304,
  /*  8280 */ 21304, 31644, 30999, 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 21304,
  /*  8295 */ 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330, 21559, 21559, 39070,
  /*  8310 */ 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361, 21304, 21304, 21304,
  /*  8325 */ 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237,
  /*  8340 */ 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768,
  /*  8355 */ 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8370 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8385 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8400 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8415 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8430 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8445 */ 21304, 21304, 21304, 21480, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 37015, 30971,
  /*  8460 */ 21304, 21304, 37028, 37665, 24038, 18273, 21304, 21304, 42467, 21304, 21304, 21304, 21304, 24181, 36178,
  /*  8475 */ 21304, 21304, 21304, 21304, 24183, 28881, 29879, 21559, 25510, 26296, 21304, 21304, 21304, 25940, 21304,
  /*  8490 */ 21304, 21304, 31690, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559,
  /*  8505 */ 21559, 34714, 25914, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24181, 36177, 30999, 21304, 24180,
  /*  8520 */ 26267, 32902, 32902, 32902, 32659, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21304, 21304, 21304,
  /*  8535 */ 21304, 21304, 31644, 30999, 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036,
  /*  8550 */ 21304, 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330, 21559, 21559,
  /*  8565 */ 39070, 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361, 21304, 21304,
  /*  8580 */ 21304, 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304,
  /*  8595 */ 26237, 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727,
  /*  8610 */ 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8625 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8640 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8655 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8670 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8685 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8700 */ 21304, 21304, 21304, 21304, 21480, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 36314,
  /*  8715 */ 30971, 21304, 21304, 38627, 24163, 24038, 18273, 21304, 21304, 42467, 21304, 21304, 21304, 21304, 24181,
  /*  8730 */ 36178, 21304, 21304, 21304, 21304, 24183, 28881, 29879, 21559, 25510, 26296, 21304, 21304, 21304, 25940,
  /*  8745 */ 21304, 21304, 21304, 21304, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902, 24060,
  /*  8760 */ 21559, 21559, 34714, 25914, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24181, 36177, 30999, 21304,
  /*  8775 */ 24180, 26267, 32902, 32902, 32902, 32659, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21304, 21304,
  /*  8790 */ 21304, 21304, 21304, 31644, 30999, 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559,
  /*  8805 */ 37036, 21304, 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330, 21559,
  /*  8820 */ 21559, 39070, 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361, 21304,
  /*  8835 */ 21304, 21304, 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196,
  /*  8850 */ 21304, 26237, 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727,
  /*  8865 */ 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8880 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8895 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8910 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8925 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8940 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  8955 */ 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361,
  /*  8970 */ 36314, 30971, 21304, 21304, 37028, 37665, 24038, 18273, 21304, 21304, 42467, 21304, 21304, 21304, 21304,
  /*  8985 */ 24181, 36178, 21304, 21304, 21304, 21304, 24183, 28881, 29879, 21559, 25510, 26296, 21304, 21304, 21304,
  /*  9000 */ 25940, 21304, 21304, 21304, 21304, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902,
  /*  9015 */ 24060, 21559, 21559, 34714, 25914, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24181, 36177, 30999,
  /*  9030 */ 21304, 24180, 26267, 32902, 32902, 32902, 32659, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21304,
  /*  9045 */ 21304, 21304, 21304, 21304, 31644, 30999, 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559,
  /*  9060 */ 21559, 37036, 21304, 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330,
  /*  9075 */ 21559, 21559, 39070, 21304, 21304, 21304, 24179, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361,
  /*  9090 */ 21304, 21304, 21304, 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559,
  /*  9105 */ 34196, 21304, 26237, 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741,
  /*  9120 */ 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9135 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9150 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9165 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9180 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9195 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9210 */ 21304, 21304, 21304, 21304, 21304, 21304, 24199, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304,
  /*  9225 */ 37361, 36314, 30971, 21304, 21304, 37028, 37665, 24038, 18273, 21304, 21304, 42467, 21304, 21304, 21304,
  /*  9240 */ 21304, 24181, 36178, 21304, 21304, 21304, 21304, 24183, 28881, 29879, 21559, 25510, 26296, 21304, 21304,
  /*  9255 */ 21304, 25940, 21304, 21304, 21304, 21304, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902,
  /*  9270 */ 32902, 24060, 21559, 21559, 34714, 25914, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24181, 36177,
  /*  9285 */ 30999, 21304, 24180, 26267, 32902, 32902, 32902, 32659, 21559, 21559, 21559, 26383, 25912, 36508, 21304,
  /*  9300 */ 21304, 21304, 21304, 21304, 21304, 31644, 30999, 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559,
  /*  9315 */ 21559, 21559, 37036, 21304, 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822,
  /*  9330 */ 26330, 21559, 21559, 39070, 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559,
  /*  9345 */ 26361, 21304, 21304, 21304, 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610,
  /*  9360 */ 21559, 34196, 21304, 26237, 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430,
  /*  9375 */ 30741, 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9390 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9405 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9420 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9435 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9450 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9465 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 21304, 21304, 21304, 21304, 25670, 21304, 21304,
  /*  9480 */ 21304, 37361, 35533, 33008, 42417, 24221, 24241, 24225, 20137, 18273, 21304, 21304, 42467, 21304, 24147,
  /*  9495 */ 21304, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294, 24665,
  /*  9510 */ 41911, 18291, 25940, 21304, 24512, 21304, 24261, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269,
  /*  9525 */ 18450, 21197, 18480, 19276, 18457, 24281, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528,
  /*  9540 */ 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224,
  /*  9555 */ 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975,
  /*  9570 */ 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200,
  /*  9585 */ 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935,
  /*  9600 */ 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 24310, 19656, 19693,
  /*  9615 */ 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921,
  /*  9630 */ 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9645 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9660 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9675 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9690 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9705 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9720 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 21304, 21304, 21304, 21304, 25670, 21304,
  /*  9735 */ 21304, 21304, 37361, 35533, 21304, 21304, 21304, 21304, 21304, 20137, 18273, 21304, 21304, 42467, 21304,
  /*  9750 */ 24147, 21304, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294,
  /*  9765 */ 24665, 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549,
  /*  9780 */ 19269, 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819,
  /*  9795 */ 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737,
  /*  9810 */ 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022,
  /*  9825 */ 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181,
  /*  9840 */ 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661,
  /*  9855 */ 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656,
  /*  9870 */ 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299,
  /*  9885 */ 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9900 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9915 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9930 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9945 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9960 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /*  9975 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24345, 24379, 21304, 21304, 21304, 24397,
  /*  9990 */ 21304, 21304, 21304, 37361, 24417, 24401, 24440, 24440, 24452, 24424, 24472, 18273, 21304, 21304, 42467,
  /* 10005 */ 21304, 24147, 21304, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936,
  /* 10020 */ 20067, 24665, 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434,
  /* 10035 */ 18549, 19269, 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503,
  /* 10050 */ 34819, 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914,
  /* 10065 */ 18737, 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001,
  /* 10080 */ 19022, 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127,
  /* 10095 */ 19181, 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380,
  /* 10110 */ 42661, 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615,
  /* 10125 */ 19656, 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680,
  /* 10140 */ 19299, 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10155 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10170 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10185 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10200 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10215 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10230 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24488, 24510, 21304, 21304, 21304,
  /* 10245 */ 25670, 21304, 21304, 21304, 37361, 35533, 21304, 21304, 21304, 21304, 24528, 24558, 18273, 21304, 21304,
  /* 10260 */ 42467, 21304, 24147, 42813, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719,
  /* 10275 */ 19250, 19852, 24574, 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428,
  /* 10290 */ 18434, 18549, 19269, 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304,
  /* 10305 */ 18503, 34819, 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718,
  /* 10320 */ 42914, 18737, 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714,
  /* 10335 */ 19001, 19022, 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102,
  /* 10350 */ 19127, 19181, 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932,
  /* 10365 */ 19380, 42661, 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599,
  /* 10380 */ 19615, 19656, 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464,
  /* 10395 */ 18680, 19299, 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10410 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10425 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10440 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10455 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10470 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10485 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 24602, 21304,
  /* 10500 */ 21304, 24621, 24655, 21304, 21899, 24681, 40385, 40400, 40412, 40423, 24697, 24711, 24038, 24727, 24605,
  /* 10515 */ 21304, 20025, 24755, 24791, 24825, 22037, 34939, 24906, 24586, 38030, 24841, 24859, 24892, 24922, 33892,
  /* 10530 */ 24950, 24987, 25003, 19557, 21304, 21135, 25940, 39730, 32020, 21304, 25019, 27365, 36177, 25045, 36963,
  /* 10545 */ 29833, 24182, 25074, 32902, 32902, 36690, 24060, 21559, 26557, 25101, 25914, 21304, 25131, 25150, 32279,
  /* 10560 */ 38703, 21304, 19164, 24181, 25177, 25197, 28598, 38729, 25223, 27973, 32902, 34469, 25271, 24971, 21559,
  /* 10575 */ 38427, 25316, 21782, 30553, 25332, 35731, 21304, 42294, 19153, 21304, 25350, 25399, 31031, 25436, 39812,
  /* 10590 */ 31155, 29152, 29094, 26652, 22099, 36425, 21559, 25498, 25554, 38460, 21304, 24329, 40715, 37242, 31000,
  /* 10605 */ 24181, 29089, 32902, 32528, 25583, 26330, 21559, 37956, 25613, 25655, 39229, 25688, 25708, 30997, 35252,
  /* 10620 */ 32902, 30107, 30666, 21559, 25729, 36582, 22733, 21304, 21304, 32396, 27044, 25747, 42399, 31350, 26364,
  /* 10635 */ 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 27332, 24180, 36125, 39437, 25778,
  /* 10650 */ 27698, 25801, 21075, 25913, 34900, 30741, 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304,
  /* 10665 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10680 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10695 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10710 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10725 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10740 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 25825,
  /* 10755 */ 21304, 21304, 25670, 21304, 21304, 21304, 25847, 25863, 40009, 40021, 40021, 25903, 36012, 24038, 18273,
  /* 10770 */ 21304, 21304, 42467, 21304, 21304, 21304, 21304, 24181, 36178, 21304, 21304, 21304, 21304, 24183, 28881,
  /* 10785 */ 29879, 21559, 25510, 26296, 21304, 21304, 21304, 25940, 21304, 21304, 21304, 21304, 31071, 36177, 31000,
  /* 10800 */ 21304, 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559, 34714, 25914, 21304, 21304, 21304,
  /* 10815 */ 21304, 34294, 21304, 25930, 35936, 36177, 25964, 21304, 24180, 26267, 32902, 32902, 30028, 32659, 21559,
  /* 10830 */ 21559, 32161, 26383, 25912, 30553, 21304, 21304, 21304, 21304, 19792, 21304, 31644, 30999, 21304, 37243,
  /* 10845 */ 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 22115, 21304, 21304, 37855, 21304, 19504,
  /* 10860 */ 26005, 24181, 25446, 32902, 32902, 25085, 26031, 21559, 21559, 39070, 21304, 21304, 21304, 21304, 30997,
  /* 10875 */ 35087, 32902, 32902, 30666, 21559, 21559, 26361, 21304, 21304, 21304, 32396, 27044, 32902, 37041, 21559,
  /* 10890 */ 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 27332, 24180, 36125, 30744,
  /* 10905 */ 41583, 30744, 26053, 26081, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304,
  /* 10920 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10935 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10950 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10965 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10980 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 10995 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304,
  /* 11010 */ 28608, 21304, 21304, 25670, 20089, 21304, 21304, 37361, 26106, 26121, 26133, 26144, 26160, 26174, 24038,
  /* 11025 */ 18273, 21304, 23842, 21127, 21304, 20537, 21304, 21304, 24181, 36178, 21304, 21304, 31039, 21304, 34974,
  /* 11040 */ 28881, 26977, 32810, 25510, 26190, 21304, 26206, 21304, 26015, 21304, 35757, 21304, 25831, 26226, 26262,
  /* 11055 */ 26884, 21304, 23848, 25713, 26283, 26312, 32902, 32902, 26348, 26380, 21559, 34714, 25914, 25989, 21304,
  /* 11070 */ 21304, 26399, 21304, 26418, 26436, 39105, 26484, 30999, 21304, 24180, 26267, 29413, 37785, 36278, 32659,
  /* 11085 */ 32791, 39429, 41784, 26383, 25912, 30553, 21304, 41867, 21304, 21304, 26505, 21304, 31644, 30999, 21304,
  /* 11100 */ 37243, 32902, 32902, 41245, 29094, 26328, 21559, 21559, 26532, 37036, 22115, 21304, 21304, 21304, 39032,
  /* 11115 */ 37242, 31000, 24181, 29089, 32902, 29280, 25085, 26330, 21559, 26553, 39070, 21304, 21304, 34859, 21304,
  /* 11130 */ 26573, 26589, 30781, 32902, 30666, 37486, 21559, 38987, 26618, 21304, 21304, 26638, 27044, 25246, 37041,
  /* 11145 */ 26668, 26364, 21304, 23392, 39594, 21844, 38895, 21559, 26689, 21304, 26237, 40612, 27332, 24180, 36125,
  /* 11160 */ 30744, 41583, 41792, 26722, 30747, 25913, 27430, 30741, 21727, 21727, 26738, 26752, 21304, 21304, 21304,
  /* 11175 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11190 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11205 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11220 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11235 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11250 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480,
  /* 11265 */ 21304, 20709, 21304, 21304, 25670, 42474, 21304, 26775, 37361, 26799, 26814, 26826, 26832, 26848, 26862,
  /* 11280 */ 24038, 18273, 21304, 21304, 42467, 21304, 21304, 21304, 21304, 24181, 26878, 41019, 21304, 21304, 41014,
  /* 11295 */ 41023, 28881, 26900, 31305, 26065, 26602, 21304, 39237, 26938, 27003, 28731, 21304, 21304, 21304, 39489,
  /* 11310 */ 26954, 26993, 21673, 27019, 27035, 27068, 36735, 42226, 42438, 27096, 21559, 27112, 39468, 25914, 21304,
  /* 11325 */ 21304, 33998, 27134, 24265, 21304, 19164, 24181, 36177, 30999, 21304, 35080, 27188, 32902, 32902, 32902,
  /* 11340 */ 32659, 21559, 21559, 21559, 26383, 25520, 27151, 21304, 21304, 32477, 40675, 19792, 21304, 31644, 30999,
  /* 11355 */ 38937, 37243, 41713, 32902, 32902, 34503, 26450, 21559, 21559, 28083, 37036, 22115, 21304, 21304, 21304,
  /* 11370 */ 21304, 27182, 31000, 24181, 28685, 32902, 27204, 25085, 27224, 21559, 27244, 39070, 39684, 21304, 27261,
  /* 11385 */ 20645, 27281, 35087, 30809, 32653, 30666, 27309, 27329, 26361, 42607, 21304, 21304, 32396, 27044, 32902,
  /* 11400 */ 37041, 21559, 26364, 42733, 21304, 39594, 21844, 27052, 21559, 27348, 21304, 26237, 40612, 27332, 24180,
  /* 11415 */ 36125, 30744, 28066, 27381, 27400, 27426, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304,
  /* 11430 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11445 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11460 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11475 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11490 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11505 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11520 */ 21480, 21304, 21305, 27446, 21304, 25670, 23198, 27465, 39322, 40725, 41547, 41562, 27483, 27494, 27510,
  /* 11535 */ 27524, 24038, 18273, 27540, 27568, 18595, 35230, 27611, 27627, 21383, 35014, 27646, 32414, 27677, 27714,
  /* 11550 */ 27730, 33383, 27763, 27779, 27821, 38583, 27837, 21304, 27293, 30923, 27853, 27877, 27467, 34566, 27918,
  /* 11565 */ 31071, 36177, 27937, 36101, 21304, 31195, 27962, 33787, 35882, 36708, 27997, 28027, 30676, 28099, 25914,
  /* 11580 */ 30412, 27661, 28152, 21752, 33291, 28172, 26516, 28208, 28224, 28252, 28288, 35389, 28236, 28331, 28361,
  /* 11595 */ 28377, 28412, 28428, 28456, 28485, 25286, 28522, 30553, 28538, 21304, 28563, 18806, 19792, 28583, 28624,
  /* 11610 */ 28649, 30000, 28675, 24934, 32902, 33922, 33796, 34595, 28708, 21711, 27313, 36568, 22115, 28728, 38322,
  /* 11625 */ 28747, 28799, 37242, 28833, 28866, 28904, 28920, 28936, 28982, 37879, 33833, 29019, 28041, 21304, 29218,
  /* 11640 */ 39657, 21304, 29035, 29081, 29110, 29130, 30666, 29176, 32584, 26361, 28272, 35364, 29214, 29234, 29268,
  /* 11655 */ 29303, 29339, 29355, 29371, 25420, 31987, 39594, 29405, 29429, 31387, 34196, 24111, 26237, 37656, 28506,
  /* 11670 */ 40973, 29445, 29471, 26090, 25529, 29487, 40931, 29524, 27430, 30741, 29571, 21727, 21768, 26752, 21304,
  /* 11685 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11700 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11715 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11730 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11745 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11760 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11775 */ 21304, 21480, 21304, 21304, 29612, 21304, 29632, 21983, 29657, 22240, 29676, 29692, 29721, 29733, 29739,
  /* 11790 */ 29705, 29755, 24038, 18273, 30833, 21304, 42467, 21304, 21304, 29771, 21304, 29793, 36178, 21304, 25054,
  /* 11805 */ 21304, 29789, 25058, 28881, 29809, 29547, 31539, 28345, 21304, 25984, 21304, 25974, 21304, 21304, 29857,
  /* 11820 */ 29773, 25538, 36177, 31000, 38108, 21304, 34144, 28633, 29877, 32902, 32902, 29895, 21559, 21559, 34714,
  /* 11835 */ 29922, 21304, 21304, 21304, 21304, 21304, 21304, 19164, 24181, 36177, 30999, 19746, 24180, 26267, 32902,
  /* 11850 */ 32902, 32700, 32659, 21559, 21559, 27228, 26383, 25912, 30553, 21304, 21304, 35327, 21304, 19792, 21304,
  /* 11865 */ 31644, 30999, 21304, 40984, 32902, 34403, 32902, 29094, 26328, 21559, 29947, 21559, 37036, 22115, 21304,
  /* 11880 */ 29966, 21304, 21304, 37242, 29985, 24181, 30023, 32902, 25887, 25085, 26330, 21559, 27794, 39070, 21304,
  /* 11895 */ 21304, 21304, 21304, 30997, 35087, 32902, 32902, 30666, 21559, 21559, 26361, 21304, 21304, 21304, 32396,
  /* 11910 */ 27044, 32902, 37041, 21559, 29455, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612,
  /* 11925 */ 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 30044, 21727, 30092, 26752,
  /* 11940 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11955 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11970 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 11985 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12000 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12015 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12030 */ 21304, 21304, 21480, 21304, 21304, 21304, 21304, 25670, 21304, 30128, 21304, 37361, 30148, 30163, 30175,
  /* 12045 */ 30175, 30191, 30205, 24038, 18273, 21304, 21304, 42467, 21304, 21304, 24044, 21304, 24181, 36178, 21304,
  /* 12060 */ 21304, 21304, 21304, 24183, 28881, 29879, 21559, 25510, 26296, 19740, 21304, 21304, 25940, 21304, 21304,
  /* 12075 */ 21304, 39735, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559,
  /* 12090 */ 34714, 25914, 21304, 21304, 21304, 21304, 21304, 21304, 33420, 24181, 36177, 30999, 21304, 30221, 26267,
  /* 12105 */ 32902, 32902, 32902, 40591, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21287, 21304, 18824, 21304,
  /* 12120 */ 21304, 31644, 30999, 25672, 40059, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 30244, 21304,
  /* 12135 */ 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330, 21559, 21559, 39070,
  /* 12150 */ 21304, 21304, 20302, 30273, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361, 35216, 37507, 30292,
  /* 12165 */ 33695, 27044, 32902, 30355, 24064, 26364, 21304, 33152, 30375, 30428, 30459, 38571, 34196, 22136, 30497,
  /* 12180 */ 30733, 30539, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 30578, 21768,
  /* 12195 */ 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12210 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12225 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12240 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12255 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12270 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12285 */ 21304, 21304, 21304, 21480, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 36314, 30971,
  /* 12300 */ 21304, 21304, 37028, 37665, 24038, 18273, 21304, 22761, 42467, 21304, 21304, 21304, 31618, 25134, 32677,
  /* 12315 */ 21304, 21304, 30614, 20690, 24183, 30654, 29323, 30700, 30719, 30763, 21304, 21304, 27357, 25940, 18818,
  /* 12330 */ 27861, 21304, 21304, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 30779, 24060, 21559,
  /* 12345 */ 27118, 34714, 25914, 21304, 21304, 38746, 21304, 21304, 21304, 21304, 24181, 36177, 30999, 40557, 24180,
  /* 12360 */ 30797, 32902, 32902, 32902, 25482, 21559, 21559, 21559, 31770, 25912, 36508, 30832, 21304, 21304, 21304,
  /* 12375 */ 21304, 21304, 31644, 30999, 26210, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036,
  /* 12390 */ 21304, 21304, 28817, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 33480, 39822, 26330, 21559, 37622,
  /* 12405 */ 39070, 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361, 21304, 21304,
  /* 12420 */ 21304, 32396, 27044, 32902, 37041, 21559, 26364, 42577, 21304, 39594, 30849, 40610, 21559, 29824, 21304,
  /* 12435 */ 25878, 28966, 34616, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727,
  /* 12450 */ 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12465 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12480 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12495 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12510 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12525 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12540 */ 21304, 21304, 21304, 21304, 21480, 21304, 21304, 41615, 21304, 25670, 23509, 19426, 23503, 30870, 37184,
  /* 12555 */ 37199, 37211, 37222, 30886, 30900, 24038, 18273, 21304, 21304, 30916, 30939, 21304, 21304, 24494, 30957,
  /* 12570 */ 30994, 32013, 31625, 31016, 31055, 31068, 31087, 38958, 31116, 31136, 31171, 21304, 21304, 21304, 31187,
  /* 12585 */ 21304, 23709, 21304, 21304, 31071, 31211, 31236, 31269, 30076, 24182, 31220, 32903, 32902, 31832, 31296,
  /* 12600 */ 31313, 37466, 31329, 25914, 21304, 31366, 21304, 31403, 31574, 34964, 21304, 31440, 36177, 31465, 24456,
  /* 12615 */ 32185, 31491, 32902, 42277, 25473, 34779, 21559, 21559, 31527, 40831, 25912, 36508, 21304, 21304, 39172,
  /* 12630 */ 31555, 30629, 21304, 31644, 30999, 21304, 37243, 31590, 32902, 32902, 29094, 27691, 21559, 21559, 21559,
  /* 12645 */ 37036, 21304, 42201, 31608, 42320, 19995, 31641, 31662, 31706, 31722, 31147, 32902, 31743, 26330, 31765,
  /* 12660 */ 35852, 28011, 30404, 19070, 21304, 40883, 31786, 35985, 31820, 33199, 31867, 33250, 31912, 28126, 21304,
  /* 12675 */ 21304, 31976, 32003, 27044, 32036, 21633, 35909, 26364, 30339, 21338, 39594, 21844, 40610, 21559, 40246,
  /* 12690 */ 21304, 26237, 40612, 27332, 24180, 32070, 30744, 35051, 32096, 41586, 30747, 25913, 34203, 34890, 21727,
  /* 12705 */ 21727, 32121, 32137, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12720 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12735 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12750 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12765 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12780 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12795 */ 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361,
  /* 12810 */ 36314, 30971, 21304, 21304, 37028, 37665, 24038, 18273, 21304, 21304, 42467, 21304, 23473, 21304, 21304,
  /* 12825 */ 24181, 36178, 21304, 21304, 21304, 21304, 24183, 28881, 29879, 21559, 25510, 26296, 21304, 21304, 21304,
  /* 12840 */ 25940, 21304, 21304, 21304, 21304, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902,
  /* 12855 */ 24060, 21559, 21559, 34714, 25914, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24181, 36177, 30999,
  /* 12870 */ 21304, 24180, 26267, 32902, 32902, 32902, 32659, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21304,
  /* 12885 */ 21304, 21304, 21304, 21304, 31644, 30999, 21304, 37243, 32902, 36200, 32902, 29094, 26328, 21559, 32160,
  /* 12900 */ 21559, 37036, 21304, 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330,
  /* 12915 */ 21559, 21559, 39070, 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361,
  /* 12930 */ 21304, 21304, 21304, 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559,
  /* 12945 */ 34196, 21304, 26237, 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741,
  /* 12960 */ 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12975 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 12990 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13005 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13020 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13035 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13050 */ 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304, 22008, 21304, 25670, 21304, 32177, 25334,
  /* 13065 */ 28659, 32201, 32216, 32228, 32228, 32244, 32258, 24038, 18273, 32274, 21304, 42467, 21304, 31569, 32295,
  /* 13080 */ 21304, 20329, 32329, 21304, 39828, 21172, 32350, 32385, 35473, 29879, 32952, 25510, 21589, 19777, 21304,
  /* 13095 */ 21304, 32430, 32454, 21304, 24770, 19787, 36984, 31646, 31000, 21304, 23814, 32493, 28633, 32509, 36777,
  /* 13110 */ 32544, 32573, 32608, 39396, 33907, 32628, 24245, 21304, 21304, 21304, 30941, 21304, 21304, 24181, 32675,
  /* 13125 */ 30999, 21304, 24180, 26267, 32693, 32716, 40584, 40591, 32735, 24965, 39851, 26383, 25912, 36508, 36914,
  /* 13140 */ 42527, 21304, 33946, 42795, 21304, 31644, 32761, 21304, 37243, 32902, 42378, 41100, 29094, 26328, 21559,
  /* 13155 */ 32787, 32807, 37036, 37836, 21304, 21304, 33357, 21304, 40302, 31000, 24181, 40783, 32902, 32902, 39822,
  /* 13170 */ 32826, 21559, 21559, 39070, 33736, 21304, 40265, 21740, 32865, 35087, 32901, 32902, 34691, 21559, 21559,
  /* 13185 */ 26361, 29861, 21304, 30132, 32396, 27044, 32902, 37041, 21559, 26364, 21304, 32919, 39594, 21844, 34041,
  /* 13200 */ 30703, 34196, 21304, 26237, 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 32937, 30481,
  /* 13215 */ 32973, 21727, 32995, 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13230 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13245 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13260 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13275 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13290 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13305 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304, 21407, 21304, 33042, 21304, 22062,
  /* 13320 */ 21304, 33705, 38155, 38170, 38182, 38188, 33058, 33072, 24038, 18273, 19638, 21304, 42467, 21304, 24868,
  /* 13335 */ 21304, 21304, 20580, 33088, 21304, 19633, 26759, 19640, 28996, 40090, 33109, 33124, 28440, 31100, 21304,
  /* 13350 */ 36817, 21304, 25940, 21304, 28811, 32144, 21304, 31071, 36177, 31000, 21304, 33148, 33168, 33188, 33215,
  /* 13365 */ 36699, 34399, 33232, 21559, 33266, 34714, 33315, 33351, 33373, 31798, 21304, 21304, 33399, 21304, 24181,
  /* 13380 */ 36177, 30999, 21304, 24180, 26267, 35697, 32054, 32902, 32659, 40540, 37045, 21559, 26383, 25912, 36508,
  /* 13395 */ 31683, 40328, 21304, 21304, 33418, 41403, 31644, 30999, 21304, 37243, 29114, 32902, 25235, 30112, 33436,
  /* 13410 */ 33456, 32957, 21559, 37036, 21304, 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902,
  /* 13425 */ 39822, 26330, 21559, 21559, 39070, 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559,
  /* 13440 */ 21559, 30257, 21304, 21304, 21304, 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 34984, 33475,
  /* 13455 */ 37430, 21559, 33496, 21304, 26237, 40612, 27332, 19494, 34909, 37692, 41583, 30744, 41586, 30747, 25913,
  /* 13470 */ 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13485 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13500 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13515 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13530 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13545 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13560 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304, 18847, 21304, 33521, 21304,
  /* 13575 */ 20357, 33540, 33550, 41823, 41838, 41850, 33566, 33580, 33594, 24038, 18273, 30385, 21304, 18916, 33610,
  /* 13590 */ 33634, 21304, 22371, 33651, 33667, 37153, 18928, 31960, 33721, 33757, 33773, 33812, 33849, 33877, 32557,
  /* 13605 */ 36794, 33944, 21304, 33962, 26783, 33995, 28547, 35962, 31071, 36177, 35666, 30276, 21369, 34014, 34030,
  /* 13620 */ 42130, 33216, 32902, 24060, 38809, 30684, 34714, 34067, 35286, 21304, 22016, 21304, 21304, 21304, 41329,
  /* 13635 */ 24181, 34103, 30999, 34122, 34142, 34160, 32048, 32902, 36463, 32659, 33132, 21559, 21559, 34188, 25912,
  /* 13650 */ 36508, 21304, 21304, 21304, 34219, 21304, 29065, 34237, 34258, 34291, 37243, 34310, 32902, 41096, 25762,
  /* 13665 */ 28186, 21559, 36160, 35576, 37036, 34275, 32469, 34327, 34347, 21304, 34369, 34419, 33682, 34457, 34491,
  /* 13680 */ 31843, 39822, 34519, 31511, 34535, 40960, 36446, 34556, 25161, 35241, 37264, 38091, 32520, 32902, 34589,
  /* 13695 */ 34611, 21559, 34632, 41335, 21304, 20775, 34665, 34681, 30512, 28077, 34707, 34051, 21304, 21304, 34730,
  /* 13710 */ 34756, 31942, 34795, 34196, 34353, 37755, 40612, 34844, 24180, 34880, 34925, 21057, 35000, 28888, 35042,
  /* 13725 */ 25913, 27430, 30741, 35067, 21727, 21768, 39482, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13740 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13755 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13770 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13785 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13800 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13815 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304, 19043, 21304, 25670,
  /* 13830 */ 19165, 22118, 21304, 37361, 35103, 35118, 35133, 35139, 35155, 35169, 24038, 35185, 35201, 23306, 35268,
  /* 13845 */ 31475, 21304, 27135, 35302, 35764, 35349, 24739, 35380, 35405, 35442, 35458, 35503, 35554, 35592, 33861,
  /* 13860 */ 35608, 21304, 21304, 25025, 27578, 21304, 35624, 25029, 29969, 31071, 35659, 31000, 21304, 31245, 24182,
  /* 13875 */ 28633, 41737, 40901, 30816, 24060, 41430, 26460, 35682, 25914, 21304, 40337, 21304, 36956, 39571, 24775,
  /* 13890 */ 35726, 28303, 36177, 35747, 40753, 22266, 35780, 32902, 28947, 32902, 37600, 21559, 28192, 21559, 29190,
  /* 13905 */ 28113, 39082, 21304, 35815, 35833, 21304, 21304, 21304, 31644, 30999, 31749, 37243, 32902, 40163, 32902,
  /* 13920 */ 29094, 26328, 40636, 21559, 21559, 37036, 21304, 21304, 19462, 28567, 21304, 37242, 31000, 24181, 29089,
  /* 13935 */ 32902, 32902, 41049, 35850, 21559, 21559, 39070, 21304, 34082, 21304, 21304, 30997, 35868, 38522, 32902,
  /* 13950 */ 35898, 42175, 30359, 33279, 35933, 21304, 21304, 35952, 37289, 32902, 25809, 21559, 26364, 21304, 21304,
  /* 13965 */ 39594, 21844, 40610, 21559, 29198, 21304, 39622, 36742, 27332, 35978, 36001, 36028, 29596, 36053, 41586,
  /* 13980 */ 30747, 25913, 27430, 41516, 36078, 21727, 21768, 36094, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 13995 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14010 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14025 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14040 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14055 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14070 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304, 21304, 21304,
  /* 14085 */ 25670, 21304, 25383, 23573, 19364, 38614, 30971, 24542, 23994, 24008, 24022, 24038, 18273, 21304, 29389,
  /* 14100 */ 42467, 21304, 21304, 21304, 26402, 24181, 34106, 35834, 30069, 29385, 21304, 24183, 36117, 27981, 21559,
  /* 14115 */ 36141, 26296, 21304, 29057, 21304, 25940, 21304, 27739, 29047, 39665, 31071, 36176, 31000, 21304, 24803,
  /* 14130 */ 24182, 28633, 36194, 36216, 29160, 36232, 26037, 32592, 36263, 36299, 36336, 21304, 35279, 21304, 36358,
  /* 14145 */ 36378, 39552, 24181, 36177, 30999, 21304, 24180, 26267, 32902, 32902, 32902, 32659, 21559, 21559, 21559,
  /* 14160 */ 26383, 25912, 21663, 33741, 21304, 21304, 25692, 34221, 37394, 28315, 33093, 21304, 37243, 32902, 36399,
  /* 14175 */ 32902, 37790, 36421, 41271, 21559, 21559, 37036, 21304, 36441, 21304, 21304, 21304, 37242, 31000, 24181,
  /* 14190 */ 29089, 32902, 36462, 32849, 26330, 28712, 21559, 39070, 21304, 21304, 21304, 21304, 30997, 35087, 32902,
  /* 14205 */ 32902, 26322, 21559, 21559, 26361, 21304, 40354, 21304, 32396, 36479, 32902, 37041, 21559, 36503, 21304,
  /* 14220 */ 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 29950, 36525, 36125, 30744, 36554, 30744,
  /* 14235 */ 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14250 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14265 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14280 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14295 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14310 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14325 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304, 21304,
  /* 14340 */ 21304, 25670, 21304, 21304, 21304, 37361, 36314, 30971, 21304, 21304, 37028, 37665, 24038, 18273, 21304,
  /* 14355 */ 21304, 42467, 21304, 21304, 24205, 21304, 24181, 36615, 36639, 36636, 34573, 36655, 40295, 36676, 41718,
  /* 14370 */ 33827, 36724, 26296, 19883, 21304, 21304, 25940, 21304, 21304, 21304, 21304, 31071, 36177, 31000, 21304,
  /* 14385 */ 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559, 34714, 25914, 21304, 21304, 21304, 21304,
  /* 14400 */ 21304, 21304, 21304, 24181, 36177, 30999, 21304, 24180, 26267, 32902, 32902, 32902, 38403, 21559, 21559,
  /* 14415 */ 21559, 26383, 25912, 36508, 21304, 21304, 21304, 21304, 21304, 21304, 31644, 30999, 21304, 37243, 32902,
  /* 14430 */ 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 21304, 21304, 21304, 21304, 21304, 37242, 31000,
  /* 14445 */ 24181, 29089, 32902, 32902, 39822, 26330, 21559, 21559, 39070, 21304, 21304, 21304, 21304, 30997, 35087,
  /* 14460 */ 32902, 32902, 26322, 21559, 21559, 26361, 21304, 21304, 21304, 32396, 27044, 32902, 37041, 21559, 26364,
  /* 14475 */ 21304, 21304, 39594, 36758, 40610, 29502, 34196, 21304, 26237, 40612, 27332, 24180, 36125, 30744, 41583,
  /* 14490 */ 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304,
  /* 14505 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14520 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14535 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14550 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14565 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14580 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304,
  /* 14595 */ 36509, 36793, 36810, 35538, 21304, 36816, 37361, 36833, 36862, 36875, 36879, 36846, 36895, 24038, 18273,
  /* 14610 */ 21304, 36911, 42467, 36930, 32369, 21304, 36946, 36979, 37000, 27449, 20037, 18306, 32771, 37061, 37089,
  /* 14625 */ 40104, 37817, 36247, 37105, 21304, 21304, 21304, 27552, 37121, 37139, 37169, 21304, 37238, 37259, 31000,
  /* 14640 */ 21304, 34864, 37280, 37305, 28692, 41756, 32902, 24060, 37339, 40215, 40222, 35518, 21304, 21304, 28267,
  /* 14655 */ 37359, 24876, 21304, 35333, 33524, 36177, 37377, 21304, 37410, 26489, 32902, 37446, 30854, 39765, 37463,
  /* 14670 */ 37482, 26332, 40512, 25912, 36508, 21304, 37502, 36062, 30322, 37523, 37547, 35026, 37569, 27747, 37585,
  /* 14685 */ 32902, 29141, 37638, 37323, 26328, 33440, 27805, 25731, 37681, 37531, 21304, 35817, 37708, 20245, 37242,
  /* 14700 */ 31000, 37732, 37771, 32902, 32902, 39822, 37806, 21559, 21559, 21796, 21304, 37833, 37852, 21304, 30997,
  /* 14715 */ 35087, 32902, 32902, 37871, 21559, 38871, 26361, 21304, 37895, 21304, 39349, 37421, 31592, 31344, 34540,
  /* 14730 */ 26364, 38067, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 27332, 37913, 37942, 40469,
  /* 14745 */ 41583, 37963, 37979, 32979, 25913, 27430, 30741, 38016, 38046, 21768, 26752, 21304, 21304, 21304, 21304,
  /* 14760 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14775 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14790 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14805 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14820 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 14835 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480, 21304,
  /* 14850 */ 21304, 21304, 38062, 38083, 38107, 38124, 38140, 22867, 38204, 38219, 38231, 38247, 38261, 38275, 24038,
  /* 14865 */ 38291, 21304, 27263, 42467, 21304, 21304, 38313, 21304, 28136, 38338, 30007, 39041, 27265, 38360, 38369,
  /* 14880 */ 38385, 31896, 38419, 31882, 35710, 41622, 33972, 21304, 25940, 38443, 21304, 21304, 21304, 27166, 38476,
  /* 14895 */ 28783, 38501, 21304, 29641, 38485, 38517, 38538, 32902, 38557, 21610, 21559, 34714, 38599, 33402, 21304,
  /* 14910 */ 33979, 33505, 38643, 21304, 21304, 24181, 36177, 30999, 21304, 38667, 26267, 32902, 32902, 32902, 32659,
  /* 14925 */ 21559, 21559, 21559, 26383, 25912, 36508, 41492, 21304, 38696, 32306, 23662, 34087, 31644, 38719, 38745,
  /* 14940 */ 38762, 32902, 37447, 31851, 38778, 31381, 21559, 38794, 29538, 25300, 38830, 38851, 36383, 21304, 21304,
  /* 14955 */ 29003, 38344, 18619, 29089, 31727, 29318, 39822, 26330, 42040, 38869, 39070, 21304, 31804, 21304, 42556,
  /* 14970 */ 30997, 35087, 36487, 37647, 39419, 37993, 28500, 26361, 21304, 37123, 35420, 34952, 38887, 32902, 37041,
  /* 14985 */ 21559, 38911, 38932, 40486, 38680, 38953, 40132, 31120, 29906, 31673, 26968, 40612, 32612, 24180, 38974,
  /* 15000 */ 39023, 41583, 30744, 39057, 30747, 35487, 32641, 21069, 21727, 21727, 21768, 26752, 21304, 21304, 21304,
  /* 15015 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15030 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15045 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15060 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15075 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15090 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21480,
  /* 15105 */ 21304, 21304, 21304, 19668, 25670, 21304, 21304, 39098, 23347, 41302, 41317, 25597, 39121, 39135, 39149,
  /* 15120 */ 24038, 39165, 30562, 30395, 42467, 21304, 39188, 39220, 24357, 23605, 39253, 29841, 23759, 39304, 24639,
  /* 15135 */ 39338, 39365, 39381, 39453, 31927, 39505, 27630, 22157, 39521, 39897, 21304, 21304, 39543, 39570, 39587,
  /* 15150 */ 39610, 39648, 39681, 39700, 32105, 39751, 32902, 39781, 39797, 39844, 26537, 29555, 32745, 39867, 39952,
  /* 15165 */ 24123, 40346, 23398, 39968, 21304, 21304, 33618, 39995, 36620, 40037, 40075, 40120, 40148, 25464, 27208,
  /* 15180 */ 32659, 40183, 40203, 21559, 40238, 25115, 36508, 40262, 36037, 30307, 21304, 40281, 30331, 39281, 40318,
  /* 15195 */ 40370, 18777, 25255, 42125, 32719, 40439, 40455, 40502, 21559, 40528, 37036, 40478, 40556, 28156, 37716,
  /* 15210 */ 21304, 31449, 39288, 41359, 40573, 34768, 40607, 39822, 40628, 40652, 21559, 39070, 40668, 36660, 21304,
  /* 15225 */ 40691, 40741, 40775, 40799, 32902, 30443, 40824, 21559, 40847, 20729, 40880, 20619, 32396, 34441, 40899,
  /* 15240 */ 40917, 40187, 32080, 21304, 21304, 41667, 21844, 40947, 42360, 34196, 41000, 37073, 30523, 26922, 24180,
  /* 15255 */ 36125, 30744, 41583, 30744, 41586, 29931, 36152, 41039, 41065, 21727, 21727, 41081, 26752, 21304, 21304,
  /* 15270 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15285 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15300 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15315 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15330 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15345 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15360 */ 21480, 21304, 21304, 21304, 23432, 25670, 21304, 23794, 21304, 41116, 41132, 41147, 41163, 41179, 41193,
  /* 15375 */ 41207, 24038, 18273, 21304, 21304, 20610, 21304, 33020, 21304, 21304, 24181, 36178, 21304, 21304, 41223,
  /* 15390 */ 21304, 23932, 34384, 29879, 21704, 25510, 26296, 19563, 21304, 21304, 25940, 21304, 21304, 33335, 25414,
  /* 15405 */ 36320, 36177, 31000, 21304, 29660, 42073, 28633, 41244, 32902, 34311, 41261, 21559, 21559, 35917, 41287,
  /* 15420 */ 41351, 30634, 41375, 21304, 37387, 21304, 34641, 40049, 34242, 41393, 30638, 28762, 26267, 33928, 34172,
  /* 15435 */ 28958, 32659, 21542, 26468, 41419, 26383, 25912, 36508, 27587, 21304, 21304, 21304, 21304, 41453, 28775,
  /* 15450 */ 30999, 21304, 37243, 28396, 32902, 32902, 21849, 41475, 21559, 21559, 21559, 37036, 31418, 26622, 21304,
  /* 15465 */ 21304, 21304, 37242, 31000, 19677, 29089, 32902, 32902, 39822, 26330, 21559, 21559, 39070, 41491, 21304,
  /* 15480 */ 29616, 21304, 30997, 30228, 32902, 32902, 39632, 21559, 21559, 26361, 40856, 21304, 21304, 32396, 27044,
  /* 15495 */ 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237, 41508, 41532,
  /* 15510 */ 24180, 36125, 30744, 41583, 30744, 41586, 30747, 31503, 41578, 30741, 21727, 41602, 21768, 26752, 21304,
  /* 15525 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15540 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15555 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15570 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15585 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15600 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15615 */ 21304, 21480, 21304, 21304, 21304, 21304, 25670, 24843, 22204, 21304, 41638, 41654, 25365, 21304, 22071,
  /* 15630 */ 36538, 41683, 24038, 18273, 21304, 21304, 42467, 21304, 21304, 21304, 21304, 24181, 36178, 21304, 21304,
  /* 15645 */ 21304, 21304, 24183, 41699, 29879, 35569, 25510, 26296, 21304, 27921, 34268, 25940, 21304, 21304, 21304,
  /* 15660 */ 21304, 33172, 36177, 42095, 21304, 21304, 24182, 28633, 41734, 41753, 32902, 41772, 26673, 21559, 34714,
  /* 15675 */ 41808, 21304, 21304, 21304, 21304, 21304, 38453, 21304, 24181, 25181, 32334, 21304, 24180, 26267, 32902,
  /* 15690 */ 38396, 32902, 32659, 21559, 38000, 21559, 26383, 25912, 36508, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15705 */ 31644, 30999, 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 21304, 21304,
  /* 15720 */ 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330, 21559, 21559, 39070, 21304,
  /* 15735 */ 21304, 41866, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361, 21304, 41883, 21304, 32396,
  /* 15750 */ 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 41905, 26237, 40612,
  /* 15765 */ 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752,
  /* 15780 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15795 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15810 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15825 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15840 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15855 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 15870 */ 21304, 21304, 21480, 21304, 21304, 21304, 20158, 25670, 21304, 20930, 21916, 20273, 41927, 41942, 41957,
  /* 15885 */ 41973, 41987, 42001, 24038, 18273, 21304, 21304, 42467, 21304, 21304, 21304, 21304, 24181, 36178, 21304,
  /* 15900 */ 21304, 21304, 21304, 24183, 28881, 40808, 33459, 25510, 42017, 21304, 21304, 21304, 25940, 21304, 21304,
  /* 15915 */ 21304, 28842, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902, 24060, 21559, 21559,
  /* 15930 */ 34714, 25914, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24181, 36177, 30999, 21304, 24180, 26267,
  /* 15945 */ 32902, 32902, 32902, 32659, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21304, 21304, 21304, 31253,
  /* 15960 */ 21304, 31644, 30999, 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559, 21559, 37036, 21304,
  /* 15975 */ 20199, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 28389, 42337, 39822, 26330, 42033, 37343, 39070,
  /* 15990 */ 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361, 21304, 21304, 21304,
  /* 16005 */ 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304, 26237,
  /* 16020 */ 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727, 21768,
  /* 16035 */ 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16050 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16065 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16080 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16095 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16110 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16125 */ 21304, 21304, 21304, 24199, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 36314, 30971,
  /* 16140 */ 21304, 21304, 37926, 42056, 24038, 18273, 21304, 21304, 19413, 21304, 23274, 21304, 21304, 42072, 42089,
  /* 16155 */ 26698, 26704, 30978, 26702, 18769, 42111, 29879, 37615, 25510, 26296, 21304, 21304, 23453, 25940, 22739,
  /* 16170 */ 23626, 33299, 21304, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 37316, 24060, 21559,
  /* 16185 */ 27245, 34714, 25914, 42146, 21304, 21304, 21304, 21304, 21304, 21304, 24181, 36177, 30999, 21304, 24180,
  /* 16200 */ 26267, 32902, 32902, 32902, 32659, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21304, 21304, 21304,
  /* 16215 */ 21304, 21304, 31644, 30999, 21304, 37243, 32902, 32902, 32902, 29287, 42168, 21559, 21559, 21559, 37036,
  /* 16230 */ 42533, 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330, 21559, 21559,
  /* 16245 */ 39070, 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361, 21304, 21304,
  /* 16260 */ 21304, 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196, 21304,
  /* 16275 */ 26237, 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727, 21727,
  /* 16290 */ 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16305 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16320 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16335 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16350 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16365 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16380 */ 21304, 21304, 21304, 21304, 21480, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361, 36314,
  /* 16395 */ 30971, 21304, 21304, 37028, 37665, 24038, 42191, 21304, 21304, 42467, 21304, 21304, 24322, 21304, 24181,
  /* 16410 */ 36178, 21304, 21304, 21304, 21304, 24183, 42217, 26246, 21560, 25510, 42242, 21304, 21304, 21304, 25940,
  /* 16425 */ 21304, 21304, 21304, 21304, 31071, 36177, 31000, 21304, 21304, 34432, 28633, 32902, 32902, 25455, 24060,
  /* 16440 */ 21559, 21559, 42258, 25914, 21304, 42293, 21304, 32438, 21304, 21304, 21304, 24181, 36177, 42310, 21304,
  /* 16455 */ 24180, 26267, 36772, 32902, 42336, 32659, 33242, 21559, 42353, 26383, 25912, 36508, 20308, 21304, 21304,
  /* 16470 */ 21304, 21304, 21304, 37744, 30999, 21304, 37243, 32902, 42376, 32902, 29094, 26328, 26915, 21559, 21559,
  /* 16485 */ 42394, 21304, 21304, 42415, 21304, 21304, 37242, 31000, 24181, 42433, 38541, 32902, 35792, 26330, 38814,
  /* 16500 */ 21559, 42454, 21304, 21304, 33026, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 34808, 21304,
  /* 16515 */ 21304, 42778, 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559, 34196,
  /* 16530 */ 21304, 26237, 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741, 21727,
  /* 16545 */ 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16560 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16575 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16590 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16605 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16620 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16635 */ 21304, 21304, 21304, 21304, 21304, 21480, 21304, 21304, 21304, 21304, 25670, 21304, 21304, 21304, 37361,
  /* 16650 */ 39268, 30971, 21304, 21304, 37028, 37665, 24038, 18273, 21304, 21304, 42467, 21304, 21304, 21304, 21304,
  /* 16665 */ 24181, 36178, 21304, 21304, 21304, 21304, 24183, 28881, 29879, 21559, 25510, 26296, 21304, 21304, 21304,
  /* 16680 */ 25940, 21304, 21304, 21304, 21304, 31071, 36177, 31000, 21304, 21304, 24182, 28633, 32902, 32902, 32902,
  /* 16695 */ 24060, 21559, 21559, 34714, 25914, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 24181, 36177, 30999,
  /* 16710 */ 21304, 24180, 26267, 32902, 32902, 32902, 32659, 21559, 21559, 21559, 26383, 25912, 36508, 21304, 21304,
  /* 16725 */ 21304, 21304, 21304, 21304, 31644, 30999, 21304, 37243, 32902, 32902, 32902, 29094, 26328, 21559, 21559,
  /* 16740 */ 21559, 37036, 21304, 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089, 32902, 32902, 39822, 26330,
  /* 16755 */ 21559, 21559, 39070, 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902, 26322, 21559, 21559, 26361,
  /* 16770 */ 21304, 21304, 21304, 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304, 39594, 21844, 40610, 21559,
  /* 16785 */ 34196, 21304, 26237, 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586, 30747, 25913, 27430, 30741,
  /* 16800 */ 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16815 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16830 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16845 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16860 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16875 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 16890 */ 21304, 21304, 21304, 21304, 21304, 21304, 20083, 21304, 21304, 21304, 21304, 42490, 34649, 42575, 42515,
  /* 16905 */ 42499, 42549, 42572, 24082, 42600, 42593, 41459, 42623, 18273, 21304, 21304, 42467, 21304, 24147, 41228,
  /* 16920 */ 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18683, 42639, 39936, 19966, 24665, 41911,
  /* 16935 */ 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269, 18450,
  /* 16950 */ 21197, 42697, 19276, 18457, 21204, 18738, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528, 18565,
  /* 16965 */ 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224, 36599,
  /* 16980 */ 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975, 42709,
  /* 16995 */ 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200, 19219,
  /* 17010 */ 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935, 19383,
  /* 17025 */ 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693, 19709,
  /* 17040 */ 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921, 19951,
  /* 17055 */ 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17070 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17085 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17100 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17115 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17130 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17145 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 21304, 21304, 21304, 21304, 25670, 21304, 21304,
  /* 17160 */ 42730, 37361, 35533, 35315, 42749, 42755, 42771, 31424, 20137, 18273, 21304, 21304, 42467, 21304, 24147,
  /* 17175 */ 21304, 21304, 20177, 18543, 21304, 42794, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294, 24665,
  /* 17190 */ 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549, 19269,
  /* 17205 */ 18450, 21197, 18480, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819, 18528,
  /* 17220 */ 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737, 19224,
  /* 17235 */ 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022, 18975,
  /* 17250 */ 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181, 19200,
  /* 17265 */ 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661, 19935,
  /* 17280 */ 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656, 19693,
  /* 17295 */ 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299, 19921,
  /* 17310 */ 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17325 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17340 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17355 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17370 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17385 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17400 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 21304, 21304, 21304, 21304, 25670, 42811,
  /* 17415 */ 21304, 21304, 21449, 42829, 41889, 42867, 42867, 42879, 27595, 20137, 18273, 21304, 21304, 42467, 21304,
  /* 17430 */ 24147, 36362, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719, 39936, 24294,
  /* 17445 */ 24665, 41911, 18291, 25940, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428, 18434, 18549,
  /* 17460 */ 19269, 18450, 21197, 42902, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304, 18503, 34819,
  /* 17475 */ 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718, 42914, 18737,
  /* 17490 */ 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714, 19001, 19022,
  /* 17505 */ 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102, 19127, 19181,
  /* 17520 */ 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932, 19380, 42661,
  /* 17535 */ 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599, 19615, 19656,
  /* 17550 */ 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464, 18680, 19299,
  /* 17565 */ 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17580 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17595 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17610 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17625 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17640 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17655 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 20083, 21304, 21304, 21304, 21304, 25670,
  /* 17670 */ 21304, 21304, 21304, 37361, 35533, 21304, 21304, 21304, 21304, 37897, 24038, 18273, 21304, 21304, 42467,
  /* 17685 */ 21304, 21304, 21304, 21304, 24181, 36178, 21304, 21304, 21304, 21304, 24183, 28881, 29879, 21559, 25510,
  /* 17700 */ 26296, 21304, 21304, 21304, 25940, 21304, 21304, 21304, 21304, 31071, 36177, 31000, 21304, 21304, 24182,
  /* 17715 */ 19511, 32902, 32902, 32902, 21538, 21559, 21559, 34714, 25914, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17730 */ 21304, 24181, 36177, 30999, 21304, 24180, 26267, 32902, 32902, 32902, 34475, 21559, 21559, 21559, 26383,
  /* 17745 */ 25912, 36508, 21304, 21304, 21304, 21304, 21304, 21304, 31644, 30999, 21304, 37243, 32902, 32902, 32902,
  /* 17760 */ 29094, 26328, 21559, 21559, 21559, 37036, 21304, 21304, 21304, 21304, 21304, 37242, 31000, 24181, 29089,
  /* 17775 */ 32902, 32902, 39822, 26330, 21559, 21559, 39070, 21304, 21304, 21304, 21304, 30997, 35087, 32902, 32902,
  /* 17790 */ 26322, 21559, 21559, 26361, 21304, 21304, 21304, 32396, 27044, 32902, 37041, 21559, 26364, 21304, 21304,
  /* 17805 */ 39594, 21844, 40610, 21559, 34196, 21304, 26237, 40612, 27332, 24180, 36125, 30744, 41583, 30744, 41586,
  /* 17820 */ 30747, 25913, 27430, 30741, 21727, 21727, 21768, 26752, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17835 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17850 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17865 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17880 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17895 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17910 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 17925 */ 21304, 21304, 21304, 42844, 21304, 25639, 39000, 39007, 39007, 25636, 25626, 24147, 21304, 21304, 21304,
  /* 17940 */ 21304, 21304, 24147, 21304, 21304, 20177, 18543, 21304, 21304, 21304, 21304, 20179, 39921, 18721, 18719,
  /* 17955 */ 39936, 19140, 24665, 41911, 18291, 21304, 21304, 24512, 21304, 21304, 39910, 18333, 18387, 18403, 18428,
  /* 17970 */ 18434, 18549, 19269, 18450, 21197, 42697, 19276, 18457, 21204, 18720, 21304, 39315, 21304, 21304, 21304,
  /* 17985 */ 18503, 34819, 18528, 18565, 18581, 18611, 18512, 18635, 18651, 18702, 18719, 18667, 18648, 18699, 18718,
  /* 18000 */ 42914, 18737, 19224, 36599, 18754, 18793, 18840, 20490, 21304, 18863, 18902, 42152, 18944, 18980, 42714,
  /* 18015 */ 19001, 19022, 18975, 42709, 18996, 19017, 18719, 18317, 40704, 39979, 19038, 19059, 19111, 19086, 19102,
  /* 18030 */ 19127, 19181, 19200, 19219, 19240, 19184, 19203, 19292, 34828, 19315, 18412, 21304, 19337, 22079, 19932,
  /* 18045 */ 19380, 42661, 19935, 19383, 19399, 19542, 19449, 21522, 19484, 19527, 19579, 18487, 19583, 42681, 19599,
  /* 18060 */ 19615, 19656, 19693, 19709, 19701, 19725, 19762, 19808, 19837, 19868, 19905, 20466, 20669, 18677, 18464,
  /* 18075 */ 18680, 19299, 19921, 19951, 19982, 39929, 20011, 20053, 23425, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 18090 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 18105 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 18120 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 18135 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 18150 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304,
  /* 18165 */ 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 21304, 0, 2, 3, 94212, 5, 6, 0, 0,
  /* 18184 */ 0, 0, 0, 0, 73995, 73995, 73995, 73995, 0, 0, 78094, 78094, 73995, 73995, 78094, 78094, 78094, 78094,
  /* 18202 */ 78094, 78094, 78094, 78094, 78094, 78094, 0, 0, 73995, 78094, 73995, 78094, 78094, 78094, 78094, 78094,
  /* 18218 */ 78094, 78094, 40960, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094,
  /* 18233 */ 78094, 78094, 78094, 78094, 0, 0, 78094, 325, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094,
  /* 18249 */ 78094, 78094, 78094, 78094, 78094, 78094, 45056, 49152, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 73995, 0, 0,
  /* 18270 */ 78094, 0, 2105344, 273, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1715, 0, 2871296, 0, 0, 0, 0, 0,
  /* 18298 */ 0, 0, 0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 791, 0, 0, 0, 787, 0, 683, 0, 0, 0, 0, 0, 0, 2486272, 0, 0, 0,
  /* 18327 */ 0, 0, 0, 0, 0, 2600960, 2158592, 2158592, 2621440, 2158592, 2158592, 2686976, 2158592, 2703360, 2158592,
  /* 18342 */ 2158592, 2756608, 2777088, 2797568, 2158592, 2834432, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18353 */ 2158592, 2158592, 2158592, 2158592, 0, 0, 2163515, 2442043, 2450235, 2163515, 2163515, 2163515, 2601787,
  /* 18366 */ 2626363, 2163515, 2163515, 2163515, 2695995, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515,
  /* 18377 */ 2163515, 2622267, 2163515, 2163515, 2163515, 2163515, 2687803, 2163515, 2704187, 2163515, 2883584,
  /* 18388 */ 2158592, 2158592, 2158592, 3067904, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 0, 2621440, 0, 2686976,
  /* 18403 */ 2703360, 0, 0, 2756608, 2777088, 2797568, 0, 2834432, 2883584, 0, 0, 0, 0, 0, 0, 0, 0, 2715648, 0, 0,
  /* 18423 */ 3039232, 0, 0, 0, 3022848, 0, 2777088, 2883584, 0, 0, 0, 2883584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18446 */ 2719744, 2158592, 2158592, 2158592, 2711552, 2162688, 2162688, 2756608, 2162688, 2777088, 2797568,
  /* 18457 */ 2162688, 2162688, 2834432, 2162688, 2162688, 2883584, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18468 */ 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2502656, 0, 0, 0, 0, 0, 881, 0, 0, 884, 2162688, 2441216,
  /* 18486 */ 2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2498560,
  /* 18497 */ 2539520, 2543616, 2162688, 2162688, 2592768, 2162688, 0, 0, 0, 2772992, 0, 0, 0, 0, 2113536, 0, 0, 0, 0,
  /* 18516 */ 0, 0, 0, 0, 2809856, 0, 0, 0, 0, 0, 0, 2158592, 0, 2379776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2428928,
  /* 18543 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18554 */ 2158592, 2158592, 2158592, 2158592, 0, 0, 2162688, 2441216, 2449408, 2162688, 2162688, 2158592, 2158592,
  /* 18567 */ 2158592, 2158592, 2158592, 2580480, 2158592, 2158592, 2613248, 2158592, 2658304, 2158592, 2158592,
  /* 18578 */ 2158592, 2158592, 2785280, 2809856, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18589 */ 2158592, 2158592, 2428928, 0, 0, 2580480, 0, 0, 0, 0, 325, 325, 325, 0, 0, 0, 0, 0, 0, 0, 655, 656, 0, 0,
  /* 18613 */ 2809856, 0, 0, 0, 0, 2809856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 770048, 0, 0, 0, 0, 415, 415, 2158592, 2158592,
  /* 18637 */ 2158592, 2809856, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2162688, 2162688,
  /* 18648 */ 2428928, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18659 */ 2162688, 2162688, 2580480, 2162688, 2162688, 2162688, 2162688, 2613248, 2162688, 3080192, 2162688,
  /* 18670 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688,
  /* 18685 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18696 */ 2163569, 0, 2162688, 2162688, 2162688, 2613248, 2162688, 2162688, 2162688, 2658304, 2162688, 2162688,
  /* 18708 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2785280, 2809856, 2162688, 2162688, 2809856,
  /* 18719 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18730 */ 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2162688, 2801664, 2162688, 2162688, 2162688, 2162688,
  /* 18742 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18753 */ 4263936, 2854912, 0, 0, 0, 0, 0, 0, 0, 0, 3051520, 3055616, 0, 0, 0, 3141632, 0, 0, 0, 0, 812, 0, 0, 0, 0,
  /* 18778 */ 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 1765, 415, 415, 522, 0, 3158016, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18803 */ 2875392, 0, 2768896, 0, 0, 0, 0, 0, 1679, 0, 1680, 0, 0, 0, 1684, 0, 0, 0, 0, 0, 1022, 0, 0, 0, 0, 0, 0,
  /* 18830 */ 0, 0, 0, 0, 1683, 0, 0, 0, 0, 0, 0, 0, 0, 2838528, 0, 0, 2854912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 303, 0,
  /* 18859 */ 0, 0, 0, 0, 0, 0, 2158592, 2473984, 2478080, 2158592, 2158592, 2158592, 2158592, 2596864, 2158592,
  /* 18874 */ 2158592, 2158592, 2707456, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 2163515,
  /* 18887 */ 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2581307, 2163515,
  /* 18898 */ 2163515, 2163515, 2163515, 2614075, 2875392, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18909 */ 2158592, 2158592, 2158592, 2478080, 0, 0, 2707456, 0, 0, 0, 0, 325, 325, 325, 0, 0, 0, 0, 0, 0, 654, 0, 0,
  /* 18932 */ 0, 0, 779, 762, 0, 0, 785, 0, 620, 0, 657, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18953 */ 2158592, 2158592, 2158592, 2158592, 3158016, 2158592, 2162688, 273, 0, 0, 0, 273, 0, 274, 0, 0, 0, 274, 0,
  /* 18972 */ 0, 0, 2473984, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2473984, 2478080, 2162688, 2162688, 2162688,
  /* 18987 */ 2519040, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2596864, 2162688, 2760704,
  /* 18998 */ 2162688, 2162688, 2162688, 2854912, 2875392, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19009 */ 2162688, 2162688, 2162688, 2994176, 3018752, 2162688, 2162688, 2162688, 2994176, 3018752, 2162688,
  /* 19020 */ 2162688, 2162688, 3051520, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19031 */ 3158016, 2162688, 0, 0, 0, 0, 2121728, 0, 0, 0, 0, 3043328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 305,
  /* 19056 */ 306, 307, 0, 2527232, 2695168, 0, 3145728, 0, 0, 0, 0, 0, 0, 2572288, 0, 0, 0, 0, 0, 0, 2092, 0, 0, 0, 0,
  /* 19081 */ 0, 0, 2099, 2100, 0, 2887680, 2158592, 2158592, 2158592, 3026944, 3076096, 3096576, 2158592, 3145728, 0,
  /* 19096 */ 0, 0, 0, 0, 0, 3076096, 3096576, 0, 0, 0, 0, 0, 2887680, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592,
  /* 19119 */ 2527232, 2158592, 2158592, 2600960, 2158592, 2695168, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 19130 */ 2158592, 2158592, 2162688, 2162688, 2162688, 2162688, 2490368, 2162688, 2162688, 2527232, 2162688,
  /* 19141 */ 2162688, 2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0,
  /* 19154 */ 0, 0, 0, 0, 1694, 0, 0, 0, 0, 0, 1404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337, 2162688, 2162688,
  /* 19183 */ 2162688, 2600960, 2625536, 2162688, 2162688, 2162688, 2695168, 2162688, 2162688, 2162688, 2162688,
  /* 19194 */ 2162688, 2162688, 2162688, 2162688, 2887680, 2162688, 2162688, 2887680, 2162688, 2162688, 2162688,
  /* 19205 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3026944, 2162688, 2162688, 3076096, 2162688,
  /* 19216 */ 3096576, 2162688, 2162688, 3096576, 2162688, 2162688, 2162688, 3145728, 2162688, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19233 */ 0, 0, 0, 0, 0, 0, 2473984, 0, 0, 2162688, 2162688, 2162688, 2162688, 2490368, 2162688, 2162688, 2527232,
  /* 19250 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 941, 0, 2162688, 2162688, 2162688, 2162688,
  /* 19263 */ 2162688, 2162688, 2162688, 940, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19276 */ 2621440, 2162688, 2162688, 2162688, 2162688, 2686976, 2162688, 2703360, 2162688, 2711552, 2162688,
  /* 19287 */ 2162688, 2756608, 2162688, 2777088, 2797568, 2162688, 3145728, 2162688, 2437120, 2437120, 2162688,
  /* 19298 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 2162688,
  /* 19315 */ 0, 0, 0, 3153920, 0, 2813952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 277, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592,
  /* 19340 */ 2158592, 2158592, 2633728, 2158592, 2158592, 2961408, 2158592, 3022848, 2158592, 0, 0, 2633728, 0, 0, 0,
  /* 19355 */ 0, 961, 965, 0, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 0, 366, 0, 0, 0, 0, 366, 0, 0, 0, 45056,
  /* 19379 */ 49152, 2162688, 2752512, 2813952, 2818048, 2162688, 2162688, 2908160, 2162688, 2162688, 2953216, 2162688,
  /* 19391 */ 2961408, 2162688, 2162688, 3022848, 3047424, 2162688, 2162688, 2162688, 2162688, 2162688, 3174400,
  /* 19402 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 2514944, 0, 0, 0, 0, 325, 325, 325, 0,
  /* 19421 */ 0, 0, 0, 0, 653, 0, 0, 0, 0, 297, 342, 344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 984, 0, 0, 0, 0, 0, 0, 2727936, 0,
  /* 19451 */ 0, 0, 0, 0, 2891776, 0, 0, 0, 3014656, 0, 2539520, 0, 0, 0, 0, 0, 1914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19478 */ 122880, 122880, 122880, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2543616, 2158592, 2158592, 2158592,
  /* 19492 */ 2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 2448, 0, 0, 0, 0, 0, 0, 0, 415, 1954, 415, 415, 415, 415, 415, 415,
  /* 19517 */ 415, 415, 415, 0, 0, 522, 522, 522, 522, 522, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2162688,
  /* 19536 */ 2162688, 2162688, 2162688, 2162688, 2498560, 2539520, 2543616, 2592768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19555 */ 0, 3133440, 0, 0, 0, 0, 962, 966, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 970, 0, 0, 0, 0, 0, 2162688, 2162688,
  /* 19581 */ 2592768, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2891776, 2162688, 2162688, 2957312,
  /* 19592 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 3108864, 0, 2682880, 0, 2641920,
  /* 19605 */ 2609152, 2691072, 0, 0, 0, 0, 2936832, 0, 0, 3084288, 0, 2940928, 3129344, 2416640, 0, 0, 0, 0, 0, 0, 0,
  /* 19626 */ 2723840, 0, 0, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19658 */ 2158592, 2482176, 2158592, 2158592, 2740224, 2158592, 2158592, 3108864, 2482176, 2740224, 0, 0, 0, 0, 0,
  /* 19673 */ 314, 315, 316, 317, 0, 0, 0, 0, 0, 0, 0, 1973, 0, 0, 0, 0, 0, 0, 415, 415, 0, 0, 2158592, 2158592,
  /* 19697 */ 2158592, 2420736, 2162688, 2162688, 2482176, 2162688, 2162688, 2162688, 2584576, 2162688, 2162688,
  /* 19708 */ 2682880, 2740224, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19719 */ 2162688, 3108864, 3121152, 2420736, 2162688, 2162688, 2162688, 2162688, 2162688, 3108864, 3121152,
  /* 19730 */ 2162688, 2162688, 2162688, 2162688, 0, 2494464, 0, 0, 0, 2826240, 0, 0, 0, 0, 963, 967, 0, 0, 0, 0, 0, 0,
  /* 19752 */ 0, 0, 0, 0, 1463, 0, 0, 0, 0, 0, 2973696, 0, 0, 0, 3100672, 0, 0, 0, 0, 0, 0, 0, 2916352, 0, 2445312, 0,
  /* 19778 */ 0, 0, 0, 963, 967, 0, 0, 0, 0, 0, 0, 0, 0, 973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1404, 0, 0, 0, 0,
  /* 19808 */ 2445312, 2494464, 2158592, 2744320, 2973696, 2744320, 0, 0, 2158592, 2162688, 2445312, 2453504, 2494464,
  /* 19821 */ 2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19833 */ 2162688, 0, 2, 0, 2162688, 2650112, 2744320, 2826240, 2928640, 2162688, 2973696, 2162688, 2162688,
  /* 19846 */ 2162688, 3100672, 2162688, 2445312, 2453504, 2494464, 2162688, 2162688, 2162688, 0, 2162688, 2162688,
  /* 19858 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 960, 6, 2162688, 2162688, 2162688,
  /* 19871 */ 2650112, 2744320, 2826240, 2928640, 2162688, 2973696, 2162688, 2162688, 2162688, 3100672, 2162688,
  /* 19882 */ 2162688, 0, 0, 0, 0, 964, 968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936, 167936, 0, 0, 0, 0,
  /* 19907 */ 0, 0, 2846720, 0, 0, 0, 0, 0, 0, 2805760, 0, 3178496, 2560000, 2560000, 2588672, 2162688, 2162688,
  /* 19924 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2588672, 2162688, 2162688, 2162688,
  /* 19935 */ 2162688, 2162688, 2547712, 2162688, 2162688, 2162688, 2162688, 2633728, 2162688, 2162688, 2715648,
  /* 19946 */ 2736128, 2162688, 2162688, 2752512, 2813952, 2162688, 2162688, 2465792, 0, 2531328, 2985984, 0, 0, 0, 0,
  /* 19961 */ 2162688, 2162688, 2605056, 2162688, 2830336, 2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688,
  /* 19973 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 4263936, 6, 2162688, 2162688, 2985984, 2162688,
  /* 19986 */ 2162688, 2605056, 2162688, 2830336, 2162688, 2162688, 2162688, 2985984, 2523136, 0, 0, 0, 0, 0, 1938, 0,
  /* 20002 */ 0, 0, 0, 0, 0, 1944, 1945, 0, 0, 0, 2424832, 2162688, 2162688, 2162688, 2162688, 2981888, 2424832,
  /* 20019 */ 2162688, 2162688, 2162688, 2162688, 2981888, 2535424, 0, 0, 0, 0, 325, 325, 325, 0, 0, 0, 0, 652, 0, 0, 0,
  /* 20040 */ 0, 0, 777, 0, 0, 0, 0, 0, 704, 0, 0, 787, 0, 2912256, 2162688, 2654208, 2932736, 2162688, 2162688,
  /* 20059 */ 2654208, 2932736, 2162688, 2637824, 2699264, 2555904, 2162688, 2555904, 2162688, 2162688, 2162688, 0,
  /* 20071 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 257, 4297296, 0, 2, 3,
  /* 20086 */ 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 283, 283, 0, 0, 0, 0, 111024, 111024, 111024, 111024, 432,
  /* 20110 */ 111024, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 0, 0, 0, 0, 0, 0,
  /* 20127 */ 0, 0, 0, 0, 0, 0, 0, 36864, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 118784, 0, 0,
  /* 20156 */ 273, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 321, 322, 323, 324, 0, 325, 273, 0, 0, 0, 0, 0, 0, 0,
  /* 20184 */ 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20211 */ 0, 0, 0, 1908, 0, 273, 273, 273, 273, 273, 273, 273, 273, 273, 0, 0, 273, 273, 0, 0, 0, 0, 0, 0, 0, 273,
  /* 20237 */ 0, 0, 0, 273, 119162, 49152, 21076, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1947, 0, 0, 0, 273,
  /* 20265 */ 0, 0, 0, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 0, 320, 0, 0, 321, 0, 320, 0, 0, 0, 45056, 49152, 0,
  /* 20290 */ 2, 2183427, 94212, 5, 6, 263, 0, 0, 0, 0, 0, 263, 0, 0, 0, 0, 0, 2107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1648,
  /* 20319 */ 0, 0, 0, 0, 0, 0, 325, 0, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 615, 0, 0, 415, 415, 0, 0,
  /* 20347 */ 122880, 0, 122880, 122880, 0, 122880, 122880, 122880, 0, 122880, 0, 0, 0, 0, 0, 343, 0, 0, 0, 347, 348,
  /* 20368 */ 350, 303, 0, 0, 0, 122880, 122880, 122880, 122880, 0, 122880, 122880, 122880, 0, 122880, 122880, 0, 0,
  /* 20386 */ 122880, 0, 0, 0, 0, 325, 325, 325, 0, 0, 147456, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20414 */ 122880, 122880, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2183427,
  /* 20439 */ 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 2162688, 3080192, 2162688, 2162688, 2162688, 2162688,
  /* 20458 */ 2162688, 2162688, 2162688, 2162688, 1548, 0, 0, 1553, 0, 2162688, 2551808, 2560000, 2162688, 2162688,
  /* 20472 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3092480, 2162688, 2551808, 2560000, 0, 325, 0, 0, 0,
  /* 20487 */ 131072, 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3088384, 0, 0, 0, 0, 0, 0, 0, 131072, 131072, 131072,
  /* 20510 */ 131072, 131072, 131072, 131072, 131072, 131072, 0, 0, 131072, 131072, 0, 0, 0, 0, 131072, 0, 0, 0, 131072,
  /* 20529 */ 0, 0, 0, 0, 0, 0, 0, 233472, 0, 0, 0, 0, 0, 0, 0, 0, 681, 0, 0, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0,
  /* 20561 */ 135168, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 45056, 49152, 0, 135168, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0,
  /* 20587 */ 0, 0, 0, 0, 616, 0, 0, 415, 415, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168,
  /* 20605 */ 135168, 0, 0, 135168, 135168, 0, 0, 0, 0, 325, 325, 325, 0, 650, 0, 0, 0, 0, 0, 0, 0, 2250, 0, 0, 0, 0, 0,
  /* 20632 */ 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 597, 598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2129,
  /* 20661 */ 1227, 0, 0, 1230, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 20674 */ 2162688, 2162688, 2162688, 3092480, 0, 0, 0, 0, 0, 2850816, 0, 139264, 0, 0, 274, 139264, 0, 0, 0, 0, 0,
  /* 20695 */ 0, 0, 0, 0, 0, 0, 707, 0, 807, 0, 0, 0, 325, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 291, 0, 0,
  /* 20726 */ 0, 0, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2232, 0, 274, 274, 274, 274, 274, 274, 274, 274,
  /* 20754 */ 274, 0, 0, 274, 274, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 274, 45056, 139646, 273, 21079, 0, 0, 0, 0, 0, 0,
  /* 20781 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2257, 0, 0, 271, 271, 0, 0, 271, 271, 143631, 271, 271, 271, 271, 271, 271,
  /* 20806 */ 271, 143631, 271, 143631, 271, 271, 271, 271, 271, 271, 271, 271, 271, 143690, 271, 271, 271, 271, 271,
  /* 20825 */ 271, 271, 143690, 271, 143631, 271, 143690, 45056, 49152, 271, 271, 271, 143631, 143631, 143631, 143631,
  /* 20841 */ 143631, 143631, 143631, 271, 143631, 271, 271, 271, 271, 326, 271, 143631, 271, 271, 271, 271, 271,
  /* 20858 */ 143631, 330, 271, 271, 271, 271, 271, 40960, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
  /* 20878 */ 271, 271, 271, 271, 143631, 271, 143631, 143631, 143631, 143631, 143631, 143631, 143631, 143631, 271,
  /* 20893 */ 143631, 271, 143631, 271, 143631, 143631, 143631, 143631, 143690, 143690, 143690, 143690, 143690, 143690,
  /* 20907 */ 143631, 143631, 143631, 143631, 0, 0, 0, 271, 0, 271, 271, 271, 143631, 271, 143631, 143631, 0, 0, 0, 0,
  /* 20927 */ 2179719, 2179719, 2179719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 155648, 0,
  /* 20953 */ 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 155648, 155648, 155648, 155648, 0, 0, 0, 0, 0,
  /* 20977 */ 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0,
  /* 21006 */ 0, 155648, 0, 0, 0, 155648, 0, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648,
  /* 21022 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 2, 2, 0, 94212, 5, 6, 126976, 0, 0, 0, 0, 0, 0, 0,
  /* 21043 */ 0, 2105344, 0, 0, 0, 159744, 0, 159744, 159744, 159744, 159744, 159744, 0, 159744, 0, 0, 0, 0, 0, 522,
  /* 21063 */ 522, 522, 2486, 522, 522, 522, 522, 522, 522, 544, 2569, 544, 544, 544, 544, 544, 544, 544, 0, 0, 0, 0,
  /* 21085 */ 2535, 0, 0, 2538, 522, 522, 0, 0, 0, 0, 159744, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 21104 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 0,
  /* 21118 */ 0, 0, 0, 0, 90655, 0, 0, 0, 159744, 0, 0, 0, 0, 325, 325, 325, 649, 0, 0, 0, 0, 0, 0, 0, 0, 997, 0, 0, 0,
  /* 21147 */ 0, 0, 0, 0, 0, 0, 90655, 90655, 90655, 90655, 90655, 90655, 90655, 90655, 159744, 159744, 159744, 90655,
  /* 21165 */ 0, 0, 0, 0, 325, 325, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 615, 0, 615, 0, 0, 0, 0, 881, 0, 90112, 884,
  /* 21192 */ 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 21203 */ 2162688, 3067904, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 21214 */ 2162688, 0, 0, 2162688, 2162688, 2162688, 2162688, 3080192, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 21227 */ 2162688, 2162688, 2162688, 0, 0, 0, 0, 90112, 2162688, 2162688, 2162688, 940, 2162688, 2162688, 2162688,
  /* 21242 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 0, 163840, 0, 163840, 163840,
  /* 21259 */ 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  /* 21272 */ 163840, 0, 0, 0, 0, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 0, 0,
  /* 21289 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1019904, 0, 0, 1048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292,
  /* 21321 */ 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21347 */ 0, 0, 0, 0, 0, 0, 2350, 167936, 0, 0, 0, 40960, 167936, 167936, 0, 0, 167936, 0, 167936, 0, 167936,
  /* 21368 */ 167936, 0, 0, 0, 0, 1007, 1137, 0, 0, 0, 0, 0, 0, 0, 1117, 0, 0, 0, 0, 705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21398 */ 715, 0, 2, 3, 260, 5, 6, 0, 264, 0, 0, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0,
  /* 21429 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 21442 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1101824,
  /* 21463 */ 381, 381, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 21479 */ 53503, 53503, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 697, 0, 0, 0, 0, 0, 2, 2, 3, 0, 5, 6, 0,
  /* 21509 */ 593, 0, 0, 0, 0, 0, 0, 0, 2105344, 0, 0, 0, 1068, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2920448, 0, 0,
  /* 21538 */ 881, 0, 0, 884, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1571, 544, 2039,
  /* 21559 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 931, 0, 0, 415, 415, 415,
  /* 21581 */ 2362, 522, 522, 522, 522, 522, 522, 2368, 522, 522, 522, 0, 522, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 21602 */ 255, 2, 6, 544, 544, 544, 544, 2386, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1260, 544,
  /* 21623 */ 544, 544, 544, 522, 2423, 522, 2424, 2425, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544,
  /* 21643 */ 544, 544, 2308, 544, 544, 544, 544, 544, 544, 2435, 544, 2436, 2437, 544, 544, 544, 544, 544, 544, 522,
  /* 21663 */ 544, 0, 0, 1318, 0, 0, 0, 0, 0, 1324, 0, 0, 0, 0, 0, 0, 1123, 0, 0, 0, 0, 1127, 1128, 0, 1130, 0, 0, 522,
  /* 21691 */ 2455, 522, 522, 522, 522, 522, 522, 2461, 522, 522, 522, 544, 2465, 544, 544, 544, 544, 544, 901, 544,
  /* 21711 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 1857, 1858, 544, 544, 544, 544, 544, 0, 522, 522, 522, 522,
  /* 21732 */ 522, 522, 544, 544, 544, 544, 544, 544, 0, 0, 0, 0, 0, 2119, 0, 0, 0, 0, 0, 2125, 0, 0, 0, 0, 0, 1368, 0,
  /* 21759 */ 0, 0, 0, 0, 0, 0, 1376, 0, 1378, 0, 522, 522, 522, 522, 544, 544, 544, 544, 0, 0, 522, 522, 544, 544, 522,
  /* 21784 */ 522, 522, 522, 1622, 522, 522, 522, 544, 544, 544, 544, 1629, 544, 544, 544, 522, 544, 522, 522, 2069,
  /* 21804 */ 522, 544, 544, 2072, 544, 2074, 2075, 0, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0,
  /* 21829 */ 180591, 180793, 180793, 180793, 180793, 180793, 180793, 180793, 180793, 0, 0, 180591, 180793, 53503,
  /* 21843 */ 53503, 0, 0, 415, 415, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 1820, 1552,
  /* 21865 */ 188849, 188849, 188849, 188849, 0, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849,
  /* 21879 */ 188849, 188849, 0, 0, 0, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849,
  /* 21894 */ 0, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0, 0, 279, 278, 0, 278, 278, 279, 279, 0, 0, 192512, 0, 0, 0, 0, 0, 0, 0,
  /* 21923 */ 0, 0, 0, 0, 0, 0, 0, 0, 320, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 368, 368, 368,
  /* 21952 */ 368, 368, 368, 368, 368, 368, 0, 0, 368, 368, 53503, 53503, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21978 */ 0, 272, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 329, 0, 0, 1049, 0, 0, 0, 0, 0, 0, 0, 1056, 0,
  /* 22009 */ 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 1355, 0, 0, 1358, 1359, 0, 0, 0, 1314, 0, 0, 0, 1320, 0, 0,
  /* 22039 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 711, 0, 0, 714, 0, 544, 1314, 1633, 0, 0, 0, 0, 1320, 1635, 0, 0, 0, 0, 0, 0,
  /* 22068 */ 0, 346, 301, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2813952, 2158592, 2158592,
  /* 22091 */ 2158592, 2162688, 2162688, 2162688, 1821, 0, 0, 0, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 22110 */ 544, 544, 544, 1849, 544, 1633, 0, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 0, 0, 0, 327, 0, 0,
  /* 22138 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2415, 0, 0, 277, 277, 277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
  /* 22170 */ 0, 0, 0, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704,
  /* 22185 */ 200704, 200704, 200704, 200981, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200980, 200704,
  /* 22198 */ 200980, 200704, 200980, 200704, 200704, 200704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 2, 2, 3,
  /* 22223 */ 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 151552, 2105344, 273, 274, 0, 208896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22250 */ 0, 0, 363, 0, 0, 0, 0, 0, 0, 0, 2179720, 151552, 2179720, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 651264, 0, 0,
  /* 22276 */ 0, 0, 0, 0, 0, 415, 2712379, 2163515, 2163515, 2757435, 2163515, 2777915, 2798395, 2163515, 2163515,
  /* 22291 */ 2835259, 2163515, 2163515, 2884411, 2163515, 2163515, 2163515, 0, 2163515, 2163571, 2163571, 2163571,
  /* 22303 */ 2163571, 2163571, 2163571, 2163571, 2163571, 0, 2, 6, 881, 0, 0, 884, 2163571, 2442099, 2450291, 2163571,
  /* 22319 */ 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 0, 2502656, 0, 0, 0, 0, 0,
  /* 22334 */ 2622323, 2163571, 2163571, 2163571, 2163571, 2687859, 2163571, 2704243, 2163571, 2712435, 2163571,
  /* 22345 */ 2163571, 2757491, 2163571, 2777971, 2798451, 3068787, 2163571, 2163571, 2163571, 2163571, 2163571,
  /* 22356 */ 2163571, 2163571, 2163571, 2163515, 2163515, 0, 0, 2163571, 2163571, 2163515, 2163571, 2163515, 2163571,
  /* 22369 */ 2945851, 2945907, 0, 0, 0, 0, 0, 0, 0, 0, 0, 657, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2809856,
  /* 22391 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2162688, 2163515, 2429755, 2163515,
  /* 22402 */ 2163515, 2163515, 2659131, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515,
  /* 22413 */ 2786107, 2810683, 2163515, 2163515, 2474811, 2478907, 2163515, 2163515, 2163515, 2519867, 2163515,
  /* 22424 */ 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2597691, 2163515, 3081019, 2163515, 2163515,
  /* 22435 */ 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 0, 0, 0, 0, 0, 2163571, 2163571, 2163571, 2474867,
  /* 22450 */ 2478963, 2163571, 2163571, 2163571, 2519923, 2163571, 2163571, 2163571, 2429811, 2163571, 2163571,
  /* 22461 */ 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2581363,
  /* 22472 */ 2163571, 2163571, 2465792, 0, 2531328, 2985984, 0, 0, 0, 0, 2163515, 2163515, 2605883, 2163515, 2831163,
  /* 22487 */ 2163515, 2810739, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571,
  /* 22498 */ 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2802547, 2163515, 2163515, 2163515,
  /* 22509 */ 2163515, 2163515, 2163515, 2163515, 2163515, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571,
  /* 22520 */ 2163571, 2163571, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 22535 */ 2158592, 3158016, 2158592, 2163515, 2163515, 2593595, 2163515, 2163515, 2163515, 2163515, 2163515,
  /* 22546 */ 2163515, 2892603, 2163515, 2163515, 2958139, 2163515, 2163515, 2163515, 2163515, 2163571, 2163571,
  /* 22557 */ 2163571, 2163571, 2163571, 2499443, 2540403, 2544499, 2163571, 2163571, 2593651, 2163571, 2855739,
  /* 22568 */ 2876219, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2995003,
  /* 22579 */ 3019579, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2708283, 2163515, 2163515, 2163515,
  /* 22590 */ 2163515, 2163515, 2761531, 2163515, 2163515, 2163515, 2163515, 2163515, 2548539, 2163515, 2163515,
  /* 22601 */ 2163515, 2163515, 2634555, 2163515, 2163515, 2716475, 2736955, 2163515, 3052347, 2163515, 2163515,
  /* 22612 */ 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 3158843, 2163515, 0, 0, 0, 0, 2121728, 2995059,
  /* 22626 */ 3019635, 2163571, 2163571, 2163571, 3052403, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571,
  /* 22637 */ 2163571, 2163571, 3158899, 2163571, 2163571, 2835315, 2163571, 2163571, 2884467, 2163571, 2163571,
  /* 22648 */ 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 3027827, 2163571, 2163571,
  /* 22659 */ 3076979, 2163571, 3097459, 2163571, 2163571, 2158592, 2158592, 2158592, 2158592, 2158592, 2163515,
  /* 22670 */ 2163515, 2163515, 2163515, 2491195, 2163515, 2163515, 2528059, 2163515, 2163515, 2163515, 2163515,
  /* 22681 */ 2163515, 3175227, 0, 0, 0, 0, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 3081075, 2163571,
  /* 22695 */ 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163515, 2802491, 2163571, 2163515,
  /* 22706 */ 2888507, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 3027771,
  /* 22717 */ 2163515, 2163515, 3076923, 2163515, 2163515, 2986811, 2163571, 2163571, 2605939, 2163571, 2831219,
  /* 22728 */ 2163571, 2163571, 2163571, 2986867, 2523136, 0, 0, 0, 0, 0, 2224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1027, 0,
  /* 22751 */ 0, 0, 0, 0, 3097403, 2163515, 2163515, 2163515, 3146555, 2163515, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 637, 638,
  /* 22773 */ 0, 0, 0, 642, 0, 0, 2163571, 2163571, 2163571, 2163571, 2491251, 2163571, 2163571, 2528115, 2163571,
  /* 22788 */ 2163571, 2163571, 2163571, 2163571, 2163571, 2597747, 2163571, 2163571, 2163571, 2163571, 2163571,
  /* 22799 */ 2163571, 2708339, 2163571, 2163571, 2163571, 2163571, 2163515, 2163515, 0, 0, 0, 2163571, 2163571,
  /* 22812 */ 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 3068731, 2163515, 2163515, 2163515,
  /* 22823 */ 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515,
  /* 22834 */ 2163515, 2163515, 882, 2163571, 2601843, 2626419, 2163571, 2163571, 2163571, 2696051, 2163571, 2163571,
  /* 22846 */ 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2888563, 2163571, 2163571, 3175283, 2163515,
  /* 22857 */ 2163515, 2163515, 2163571, 2163571, 2163571, 0, 0, 0, 0, 2514944, 0, 0, 0, 0, 328, 0, 311, 373, 375, 0, 0,
  /* 22878 */ 0, 328, 0, 45056, 49152, 2163571, 3146611, 2163571, 2437947, 2438003, 2163515, 2163515, 2163515, 2163515,
  /* 22892 */ 2163571, 2163571, 2163571, 2163571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473984, 2163515, 2753339,
  /* 22913 */ 2814779, 2818875, 2163515, 2163515, 2908987, 2163515, 2163515, 2954043, 2163515, 2962235, 2163515,
  /* 22924 */ 2163515, 3023675, 3048251, 2818931, 2163571, 2163571, 2909043, 2163571, 2163571, 2954099, 2163571,
  /* 22935 */ 2962291, 2163571, 2163571, 3023731, 3048307, 2163571, 2163571, 2163571, 2650995, 2745203, 2827123,
  /* 22946 */ 2929523, 2163571, 2974579, 2163571, 2163571, 2163571, 3101555, 2163515, 2163571, 0, 0, 0, 0, 0, 2158592,
  /* 22961 */ 2158592, 2158592, 2158592, 2163515, 2163515, 2163515, 2163515, 2163515, 2499387, 2540347, 2544443, 0, 0,
  /* 22974 */ 2158592, 2158592, 2158592, 2421563, 2163515, 2163515, 2483003, 2163515, 2163515, 2163515, 2585403,
  /* 22985 */ 2163515, 2163515, 2683707, 2741051, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515,
  /* 22996 */ 2163515, 2163515, 2163515, 3109691, 3121979, 2421619, 2163571, 2163571, 2548595, 2163571, 2163571,
  /* 23007 */ 2163571, 2163571, 2634611, 2163571, 2163571, 2716531, 2737011, 2163571, 2163571, 2753395, 2814835,
  /* 23018 */ 2483059, 2163571, 2163571, 2163571, 2585459, 2163571, 2163571, 2683763, 2741107, 2163571, 2163571,
  /* 23029 */ 2163571, 2163571, 2163571, 2163571, 2163571, 3109747, 3122035, 2163515, 2163515, 2163571, 2163571, 0,
  /* 23041 */ 2494464, 0, 0, 0, 2826240, 0, 2445312, 2494464, 2158592, 2744320, 2973696, 2744320, 0, 0, 2158592,
  /* 23056 */ 2163515, 2446139, 2454331, 2495291, 2163515, 2163515, 2163515, 2163571, 2163571, 2163571, 2457600, 0, 0,
  /* 23069 */ 0, 0, 0, 0, 0, 2895872, 0, 2163515, 2650939, 2745147, 2827067, 2929467, 2163515, 2974523, 2163515,
  /* 23084 */ 2163515, 2163515, 3101499, 2163571, 2446195, 2454387, 2495347, 2163571, 2761587, 2163571, 2163571,
  /* 23095 */ 2163571, 2855795, 2876275, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571,
  /* 23106 */ 2163571, 3093363, 0, 0, 0, 0, 0, 2850816, 0, 0, 2163515, 2552635, 2560827, 2163515, 2163515, 2163515,
  /* 23122 */ 2163515, 2163515, 2163515, 2163515, 2163515, 3093307, 2163571, 2552691, 2560883, 2589499, 2163515,
  /* 23133 */ 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163571, 2163571, 2589555, 2163571, 2163571,
  /* 23144 */ 2163571, 2163571, 2163571, 2614131, 2163571, 2163571, 2163571, 2659187, 2163571, 2163571, 2163571,
  /* 23155 */ 2163571, 2163571, 2163571, 2163571, 2163571, 2786163, 0, 2163515, 2163515, 2163515, 2163515, 2163515,
  /* 23167 */ 2163515, 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 0, 0, 0, 0, 0, 0, 0, 0, 2163515, 2163515,
  /* 23184 */ 0, 2425659, 2163515, 2163515, 2163515, 2163515, 2982715, 2425715, 2163571, 2163571, 2163571, 2163571,
  /* 23196 */ 2982771, 2535424, 0, 0, 0, 0, 333, 0, 334, 0, 0, 0, 0, 0, 0, 292, 334, 295, 2912256, 2163515, 2655035,
  /* 23217 */ 2933563, 2163515, 2163571, 2655091, 2933619, 2163571, 2637824, 2699264, 2556731, 2163515, 2556787,
  /* 23228 */ 2163571, 2163515, 2163571, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163571,
  /* 23239 */ 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 2892659, 2163571, 2163571, 2958195, 2163571,
  /* 23250 */ 2163571, 2163571, 2163571, 2163571, 2163571, 2163571, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 0,
  /* 23271 */ 0, 217088, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 217088, 217088, 217088, 217088,
  /* 23294 */ 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 0, 0, 0,
  /* 23309 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 639, 0, 0, 0, 0, 0, 0, 2772992, 0, 0, 0, 0, 2113536, 0, 0, 0, 0, 0, 0, 57344,
  /* 23338 */ 0, 0, 0, 28672, 0, 0, 2658304, 0, 2785280, 0, 0, 0, 0, 0, 0, 0, 374, 316, 0, 0, 0, 0, 0, 45056, 49152,
  /* 23363 */ 273, 0, 274, 0, 0, 0, 2486272, 0, 0, 0, 0, 0, 0, 0, 0, 2600960, 3096576, 2162688, 2162688, 2162688,
  /* 23383 */ 3145728, 2162688, 881, 0, 0, 0, 881, 0, 884, 0, 0, 0, 0, 0, 2343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1373, 0,
  /* 23410 */ 0, 0, 0, 0, 884, 0, 2162688, 2162688, 2162688, 2162688, 2490368, 2162688, 2162688, 2527232, 2162688,
  /* 23425 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2945024, 2945024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 319, 0, 0,
  /* 23445 */ 0, 0, 0, 0, 0, 0, 0, 221576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1000, 0, 0, 0, 0, 221618, 221618, 221618,
  /* 23472 */ 221618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 685, 0, 0, 0, 0, 221751, 221751, 221751, 221751, 221751,
  /* 23495 */ 221751, 221751, 221751, 221751, 221618, 221618, 221764, 221764, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23516 */ 297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 2162688,
  /* 23544 */ 2162688, 2162688, 237568, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 23556 */ 0, 2, 6, 0, 2, 3, 94212, 5, 6, 0, 0, 249856, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23587 */ 0, 366, 250291, 250291, 250291, 250291, 249856, 250291, 250291, 250291, 250291, 250291, 250291, 250291,
  /* 23601 */ 250291, 250291, 250291, 250291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 729, 0, 415, 415, 273, 274, 0, 0,
  /* 23625 */ 212992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1044, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 23647 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 114688, 0,
  /* 23659 */ 241664, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1060, 0, 0, 0, 2162688, 2162688, 2162688, 241664,
  /* 23682 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 2, 3, 94212,
  /* 23698 */ 5, 6, 0, 0, 0, 258048, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 1037, 0, 0, 0, 0, 0, 0, 0, 1045, 0, 0, 0, 0, 0,
  /* 23727 */ 250291, 0, 250291, 250291, 250291, 249856, 250291, 249856, 249856, 249856, 249856, 249856, 249856, 249856,
  /* 23741 */ 249856, 249856, 249856, 249856, 249856, 249856, 250291, 250291, 249856, 258484, 258484, 258484, 258484, 0,
  /* 23755 */ 0, 0, 0, 258048, 0, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0, 769, 0, 774, 0, 729, 2, 2, 3, 94212, 0, 6, 0, 0,
  /* 23783 */ 274432, 0, 0, 0, 0, 0, 0, 2105344, 273, 274, 196608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 353, 0, 0, 0,
  /* 23811 */ 0, 253952, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1143, 973, 0, 0, 176128, 294912, 0, 0, 0, 0, 0,
  /* 23837 */ 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 0, 632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0,
  /* 23865 */ 2, 3, 94212, 2195717, 6, 0, 0, 0, 0, 265, 0, 0, 0, 0, 265, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336,
  /* 23893 */ 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 270336, 270336, 270336,
  /* 23918 */ 270336, 270336, 270336, 270336, 270336, 0, 0, 270336, 270336, 0, 0, 0, 0, 379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23941 */ 0, 0, 678, 415, 415, 415, 415, 2, 2, 3, 94212, 2195717, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 2162688,
  /* 23965 */ 2162688, 2162688, 245760, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 23977 */ 0, 2, 6, 0, 0, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 0, 0, 0, 278528, 0, 0, 0,
  /* 23997 */ 0, 488, 0, 0, 0, 488, 0, 488, 488, 488, 488, 488, 488, 514, 488, 534, 534, 534, 534, 534, 557, 534, 534,
  /* 24020 */ 534, 534, 534, 534, 557, 557, 557, 557, 557, 557, 557, 557, 576, 576, 534, 586, 53503, 53503, 2, 2, 3,
  /* 24041 */ 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 699, 0, 0, 0, 0, 0, 881, 91341, 1164, 884, 544, 544, 544, 544,
  /* 24068 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2324, 544, 0, 2245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24094 */ 0, 0, 0, 1085440, 1404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1410, 0, 0, 0, 0, 0, 2408, 0, 2409, 0, 0, 0,
  /* 24122 */ 2413, 0, 0, 0, 0, 0, 1339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 258484, 258484, 258484, 258484, 0, 0, 0, 1701, 0,
  /* 24148 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 542, 542, 545, 545, 545, 545, 545, 545, 545, 545, 542,
  /* 24174 */ 542, 542, 545, 53503, 53503, 2114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 53504,
  /* 24200 */ 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 700, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720, 0,
  /* 24226 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0,
  /* 24240 */ 0, 286720, 286720, 286720, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1330, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
  /* 24267 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1390, 0, 0, 0, 3067904, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 24287 */ 2162688, 2162688, 2162688, 2162688, 2162688, 0, 303104, 2162688, 2162688, 2162688, 0, 2162688, 2162688,
  /* 24300 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 2940928, 3129344, 2416640,
  /* 24314 */ 229376, 0, 0, 0, 0, 0, 0, 2723840, 0, 0, 0, 0, 0, 694, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1930, 0, 0, 0, 0, 0,
  /* 24344 */ 0, 0, 257, 3, 94212, 5, 262, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 706, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088,
  /* 24374 */ 217088, 217088, 217088, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2106032, 0, 325, 0, 0,
  /* 24401 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 290816, 290816, 290816, 290816, 290816, 0, 0, 0, 40960, 0, 0, 0,
  /* 24425 */ 0, 0, 0, 0, 0, 0, 290816, 0, 0, 290816, 290816, 290816, 290816, 0, 0, 290816, 290816, 290816, 290816,
  /* 24444 */ 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 0, 0, 0,
  /* 24459 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1465, 0, 0, 0, 257, 257, 3, 94212, 5, 4297296, 0, 0, 0, 594, 0, 0, 0, 0, 0,
  /* 24487 */ 2105344, 0, 258, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 710, 0, 0, 0, 0, 716, 0, 269, 0, 0, 0, 0,
  /* 24516 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2109440, 0, 568, 568, 568, 568, 568, 568, 568, 568, 568, 0, 0, 568, 568,
  /* 24542 */ 0, 0, 0, 0, 488, 494, 488, 488, 488, 488, 488, 488, 488, 488, 0, 488, 4264527, 258, 3, 94212, 5, 6, 0, 0,
  /* 24566 */ 0, 0, 0, 595, 0, 0, 0, 2105344, 0, 0, 299008, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 0,
  /* 24591 */ 763, 0, 0, 0, 0, 0, 0, 624, 0, 0, 0, 0, 278, 279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 624, 0, 0, 0,
  /* 24622 */ 325, 0, 0, 0, 0, 0, 0, 0, 279, 0, 0, 0, 0, 0, 0, 0, 2179720, 0, 0, 0, 0, 0, 0, 0, 0, 729, 0, 0, 0, 601, 0,
  /* 24653 */ 0, 0, 0, 0, 0, 278, 0, 279, 0, 278, 278, 279, 0, 0, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 2469888, 0, 0,
  /* 24679 */ 0, 0, 0, 0, 0, 370, 372, 279, 0, 0, 0, 0, 279, 0, 377, 0, 45056, 49152, 481, 481, 509, 481, 523, 523, 523,
  /* 24704 */ 523, 523, 546, 523, 523, 523, 523, 565, 565, 570, 570, 570, 570, 570, 570, 570, 570, 572, 572, 581, 582,
  /* 24725 */ 53503, 53503, 273, 274, 0, 0, 0, 0, 0, 602, 0, 0, 605, 606, 0, 0, 0, 0, 0, 764, 0, 0, 0, 0, 0, 775, 0, 0,
  /* 24753 */ 639, 0, 0, 0, 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 671, 0, 0, 0, 0, 1053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24785 */ 0, 1400, 1401, 0, 1403, 0, 0, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 684, 0, 0, 0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
  /* 24815 */ 0, 0, 0, 0, 131072, 0, 0, 0, 45056, 49152, 690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 698, 0, 0, 0, 0, 602, 0, 763,
  /* 24843 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 605, 0, 0, 0, 0, 0, 802, 652, 0, 0, 0, 0, 0, 0, 0,
  /* 24875 */ 680, 0, 0, 0, 0, 0, 0, 0, 0, 1386, 0, 0, 0, 0, 0, 0, 0, 810, 811, 0, 0, 0, 0, 652, 0, 652, 0, 652, 0, 415,
  /* 24905 */ 415, 732, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 755, 415, 415, 415, 0, 415, 819, 755, 415,
  /* 24926 */ 415, 415, 684, 652, 0, 522, 522, 831, 522, 522, 522, 522, 522, 522, 1772, 522, 522, 522, 522, 522, 1777,
  /* 24947 */ 522, 1779, 522, 544, 544, 888, 544, 544, 544, 544, 544, 544, 544, 914, 544, 919, 544, 922, 544, 544, 544,
  /* 24968 */ 544, 544, 1577, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1568, 544, 544, 544, 544, 544, 544, 934,
  /* 24989 */ 544, 544, 522, 939, 0, 0, 0, 544, 943, 522, 522, 831, 522, 948, 865, 522, 522, 0, 522, 544, 544, 888, 544,
  /* 25012 */ 956, 922, 544, 544, 53503, 2, 6, 0, 1066, 0, 0, 0, 1070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 999, 0, 0, 0, 0, 0,
  /* 25041 */ 0, 0, 0, 1064, 415, 415, 415, 1110, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 0, 0, 0,
  /* 25068 */ 0, 0, 814, 415, 415, 415, 415, 415, 415, 415, 415, 1160, 415, 415, 415, 1086, 1164, 522, 522, 522, 522,
  /* 25089 */ 522, 522, 0, 2023, 0, 0, 0, 0, 0, 2025, 0, 0, 544, 1283, 544, 544, 544, 544, 544, 544, 544, 522, 522, 0,
  /* 25113 */ 0, 544, 544, 522, 522, 1621, 522, 522, 1623, 522, 522, 544, 544, 1628, 544, 544, 1630, 544, 0, 0, 1336, 0,
  /* 25135 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 707, 415, 415, 0, 0, 1350, 0, 0, 0, 0, 0, 0, 0, 1357, 0, 0, 0, 0, 0,
  /* 25166 */ 0, 2108, 0, 0, 0, 0, 0, 0, 0, 2113, 0, 415, 415, 415, 1432, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 25190 */ 415, 415, 415, 1438, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1447, 415, 1449, 415, 0, 0, 0, 0, 0, 0,
  /* 25213 */ 274, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 415, 415, 415, 415, 1481, 415, 415, 415, 1485, 415, 415,
  /* 25234 */ 1164, 522, 522, 522, 522, 522, 522, 1798, 522, 522, 522, 1802, 522, 522, 522, 522, 522, 522, 522, 2290,
  /* 25254 */ 2291, 522, 522, 522, 522, 522, 522, 522, 522, 1773, 522, 522, 1776, 522, 522, 522, 522, 1539, 522, 522,
  /* 25274 */ 522, 522, 1543, 522, 522, 522, 522, 1549, 1552, 91341, 1554, 1552, 544, 544, 544, 544, 544, 1609, 544,
  /* 25293 */ 544, 544, 544, 544, 544, 1616, 522, 522, 544, 522, 522, 522, 522, 522, 967178, 1073674, 544, 544, 544,
  /* 25312 */ 544, 544, 967200, 1073696, 544, 544, 544, 1608, 544, 544, 544, 544, 1612, 544, 544, 544, 544, 1617, 522,
  /* 25331 */ 1618, 0, 1640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 415, 415, 1719, 1720, 415, 415,
  /* 25358 */ 415, 415, 415, 415, 415, 415, 1727, 415, 415, 415, 415, 415, 0, 415, 336, 0, 369, 0, 369, 0, 0, 0, 0, 0,
  /* 25382 */ 1644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 354, 349, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 25408 */ 415, 1738, 1739, 0, 0, 1741, 0, 0, 0, 0, 1062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 901120, 0, 0, 0, 0, 0, 0,
  /* 25437 */ 0, 0, 1738, 415, 415, 1760, 415, 415, 415, 415, 415, 415, 415, 415, 522, 522, 1984, 1985, 522, 522, 522,
  /* 25458 */ 522, 522, 522, 522, 522, 1218, 522, 522, 522, 522, 522, 522, 522, 522, 1514, 522, 522, 522, 522, 522, 522,
  /* 25479 */ 522, 522, 1530, 522, 522, 522, 522, 522, 522, 522, 522, 1546, 522, 0, 1552, 91341, 0, 1552, 544, 522, 544,
  /* 25500 */ 522, 522, 1879, 522, 522, 522, 522, 544, 544, 1883, 544, 544, 544, 544, 522, 522, 0, 0, 0, 544, 544, 522,
  /* 25522 */ 522, 522, 522, 522, 522, 522, 1625, 544, 544, 544, 544, 544, 544, 544, 544, 2502, 0, 0, 0, 0, 0, 0, 0,
  /* 25545 */ 979, 0, 415, 415, 415, 415, 1092, 415, 415, 1633, 0, 1635, 0, 0, 1887, 0, 0, 0, 0, 0, 0, 1893, 0, 0, 0, 0,
  /* 25571 */ 0, 2483, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2493, 522, 522, 522, 2021, 522, 522, 0, 2023, 0, 0,
  /* 25593 */ 0, 0, 0, 2025, 0, 0, 0, 0, 490, 0, 490, 496, 496, 496, 496, 499, 499, 499, 447, 490, 2066, 544, 544, 522,
  /* 25617 */ 544, 522, 522, 522, 522, 544, 544, 544, 544, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 106496, 106496, 106496,
  /* 25639 */ 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 2079, 0, 0, 0, 0, 0, 2084, 0, 0, 0, 0,
  /* 25669 */ 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1756, 0, 0, 0, 2105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25702 */ 0, 0, 1685, 0, 0, 0, 0, 0, 0, 2117, 2118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1119, 0, 415, 415, 415, 544,
  /* 25730 */ 2197, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1875, 2283, 522, 522,
  /* 25750 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2295, 522, 522, 522, 522, 1809, 522, 522, 522, 522,
  /* 25771 */ 522, 522, 0, 0, 0, 0, 1552, 2479, 0, 0, 2482, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544,
  /* 25794 */ 2549, 544, 544, 544, 544, 544, 544, 2509, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544, 544,
  /* 25815 */ 544, 544, 2306, 544, 544, 544, 544, 544, 544, 544, 0, 0, 0, 280, 281, 282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25841 */ 1075, 0, 0, 0, 0, 0, 0, 0, 0, 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 0, 384, 0, 40960, 0, 0,
  /* 25870 */ 384, 0, 0, 0, 0, 0, 0, 371, 415, 415, 415, 415, 415, 0, 2417, 0, 415, 522, 522, 522, 522, 522, 522, 522,
  /* 25894 */ 522, 2013, 522, 522, 522, 522, 2017, 522, 522, 371, 371, 510, 371, 522, 522, 522, 522, 522, 544, 522, 522,
  /* 25915 */ 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544, 544, 544, 0, 1404, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25939 */ 1408, 0, 0, 0, 0, 0, 0, 325, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 135168, 0, 0, 0, 0, 415, 415, 415,
  /* 25967 */ 415, 415, 1445, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 325, 325, 0, 0, 0, 0, 0, 0, 979, 0, 0, 0, 0, 0, 0,
  /* 25995 */ 0, 0, 0, 0, 0, 1329, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1965, 0, 0, 0, 0, 0, 0, 325,
  /* 26022 */ 325, 0, 0, 0, 0, 0, 1015, 978, 0, 0, 0, 544, 544, 2029, 2030, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 26046 */ 544, 1259, 544, 544, 544, 544, 544, 0, 0, 522, 522, 522, 522, 2515, 522, 2517, 522, 2519, 522, 544, 544,
  /* 26067 */ 544, 544, 522, 522, 0, 0, 0, 544, 544, 522, 522, 522, 848, 522, 2525, 544, 2527, 544, 2529, 544, 0, 0, 0,
  /* 26090 */ 0, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2492, 544, 0, 288, 385, 386, 40960, 386, 393,
  /* 26113 */ 385, 386, 393, 283, 393, 0, 393, 410, 417, 417, 417, 417, 417, 438, 417, 438, 438, 453, 457, 466, 457,
  /* 26134 */ 457, 457, 457, 482, 457, 482, 482, 497, 497, 498, 498, 498, 498, 498, 482, 498, 498, 498, 498, 498, 498,
  /* 26155 */ 498, 498, 498, 498, 498, 498, 498, 511, 498, 524, 524, 524, 524, 524, 547, 524, 524, 524, 524, 524, 524,
  /* 26176 */ 547, 547, 547, 547, 547, 547, 547, 547, 574, 574, 574, 584, 53503, 53503, 866, 522, 522, 0, 522, 544, 544,
  /* 26197 */ 544, 544, 544, 923, 544, 544, 53503, 2, 6, 0, 0, 0, 978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1753, 0, 0,
  /* 26225 */ 0, 0, 0, 0, 1084, 0, 1084, 0, 0, 0, 415, 1088, 415, 415, 415, 415, 415, 0, 0, 0, 415, 522, 522, 522, 522,
  /* 26250 */ 522, 522, 522, 522, 874, 522, 522, 522, 522, 522, 0, 544, 415, 415, 415, 1098, 415, 415, 415, 415, 415,
  /* 26271 */ 415, 415, 415, 415, 415, 415, 415, 1164, 522, 522, 522, 522, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 26292 */ 0, 1164, 1165, 1167, 522, 522, 522, 0, 522, 544, 544, 544, 544, 544, 544, 544, 544, 53503, 2, 6, 522,
  /* 26313 */ 1175, 522, 1180, 522, 522, 522, 522, 522, 1186, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 544, 544, 544,
  /* 26335 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1604, 881, 91341, 1164, 884, 1232, 1234, 544,
  /* 26355 */ 544, 544, 544, 1242, 544, 1247, 544, 544, 544, 522, 522, 522, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26380 */ 544, 544, 1253, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 522, 522, 544, 0, 0,
  /* 26401 */ 1365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 713, 0, 0, 0, 1395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26434 */ 379, 379, 1404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1411, 0, 0, 0, 0, 544, 544, 544, 544, 544, 1831, 544,
  /* 26461 */ 544, 544, 544, 544, 544, 544, 1272, 544, 544, 544, 544, 544, 544, 544, 544, 1579, 544, 544, 544, 544, 544,
  /* 26482 */ 544, 544, 415, 415, 415, 415, 1433, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1164, 522, 522,
  /* 26503 */ 522, 1490, 0, 0, 0, 1692, 0, 0, 0, 0, 0, 0, 0, 1404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1413, 544,
  /* 26533 */ 544, 544, 544, 1866, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1261, 544, 544, 1264, 544,
  /* 26553 */ 544, 544, 544, 2056, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1280, 544, 544, 415,
  /* 26574 */ 415, 415, 415, 415, 415, 2135, 415, 415, 415, 415, 415, 0, 0, 0, 2141, 0, 0, 0, 2145, 0, 0, 0, 2148, 415,
  /* 26598 */ 415, 415, 2151, 415, 522, 522, 522, 0, 522, 544, 544, 544, 905, 544, 544, 544, 544, 53503, 2, 6, 0, 0, 0,
  /* 26621 */ 2222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1905, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 2264, 415, 415,
  /* 26648 */ 0, 0, 0, 2269, 0, 0, 0, 0, 544, 544, 544, 544, 1830, 544, 1832, 544, 544, 544, 1835, 544, 544, 544, 544,
  /* 26671 */ 2314, 2315, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1262, 544, 544, 544, 544, 544, 2396,
  /* 26691 */ 544, 544, 544, 522, 522, 544, 544, 0, 0, 0, 0, 0, 0, 0, 767, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26720 */ 188849, 0, 0, 0, 522, 522, 522, 2514, 522, 522, 522, 522, 522, 522, 544, 544, 544, 2524, 0, 522, 522, 522,
  /* 26742 */ 2605, 544, 544, 544, 2607, 0, 0, 522, 522, 544, 544, 522, 544, 522, 544, 522, 544, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26767 */ 0, 616, 0, 616, 0, 0, 0, 0, 0, 0, 0, 291, 359, 0, 0, 291, 0, 0, 0, 0, 0, 0, 0, 0, 1025, 0, 0, 0, 0, 0, 0,
  /* 26798 */ 0, 0, 0, 335, 0, 40960, 0, 0, 335, 0, 0, 395, 0, 400, 408, 411, 418, 418, 418, 418, 418, 439, 418, 439,
  /* 26822 */ 439, 439, 458, 467, 458, 458, 458, 458, 483, 458, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 26843 */ 483, 483, 483, 483, 483, 483, 483, 418, 483, 525, 525, 525, 525, 525, 548, 525, 525, 525, 525, 525, 525,
  /* 26864 */ 548, 548, 548, 548, 548, 548, 548, 548, 525, 525, 525, 548, 53503, 53503, 415, 415, 415, 415, 415, 745,
  /* 26884 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 1119, 0, 848, 522, 522, 522, 522, 522, 522,
  /* 26907 */ 522, 522, 522, 522, 522, 522, 522, 0, 544, 544, 544, 544, 544, 1841, 1842, 544, 544, 544, 544, 544, 544,
  /* 26928 */ 544, 544, 544, 2439, 544, 544, 544, 522, 544, 0, 990, 0, 0, 992, 993, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1003,
  /* 26954 */ 415, 1097, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1105, 415, 415, 415, 415, 415, 0, 0,
  /* 26975 */ 806912, 807327, 522, 522, 522, 522, 522, 522, 522, 866, 522, 522, 522, 522, 522, 522, 0, 544, 1107, 415,
  /* 26995 */ 415, 415, 415, 415, 415, 1113, 415, 1115, 0, 0, 0, 0, 0, 0, 325, 325, 0, 0, 1012, 0, 0, 0, 0, 0, 983, 0,
  /* 27021 */ 1134, 0, 0, 0, 993, 0, 0, 0, 0, 0, 0, 0, 0, 1145, 992, 0, 0, 0, 0, 1115, 0, 0, 0, 0, 0, 0, 0, 415, 415,
  /* 27050 */ 415, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2379, 522, 522, 544, 544, 544, 415, 1156, 415,
  /* 27071 */ 415, 415, 415, 1161, 415, 415, 0, 1164, 1166, 522, 522, 522, 522, 522, 522, 1815, 2023, 0, 0, 0, 0, 1821,
  /* 27093 */ 2025, 0, 0, 881, 91341, 1164, 884, 1233, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1251, 1265,
  /* 27113 */ 544, 544, 1267, 544, 1269, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1277, 544, 544, 544, 544,
  /* 27133 */ 544, 1363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 603, 1632, 0, 1633, 0, 0, 0, 0, 0, 1635, 0, 0, 0,
  /* 27163 */ 0, 0, 1638, 0, 0, 0, 0, 1085, 0, 971, 1085, 0, 415, 415, 1089, 415, 1093, 415, 1095, 0, 0, 1950, 1951, 0,
  /* 27187 */ 1953, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1487, 1164, 522, 522, 522, 522, 522, 522, 522,
  /* 27207 */ 2008, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1536, 1537, 522, 0, 0, 544, 2028,
  /* 27228 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1601, 544, 544, 2053, 544, 544, 544, 544,
  /* 27249 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1282, 0, 2103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27275 */ 0, 0, 641, 0, 0, 0, 415, 415, 415, 415, 2134, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 980, 0, 0,
  /* 27301 */ 0, 0, 0, 0, 986, 0, 0, 0, 544, 544, 544, 2189, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 27325 */ 544, 1874, 544, 544, 544, 544, 2198, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 522,
  /* 27346 */ 544, 0, 544, 544, 2397, 544, 544, 522, 522, 544, 544, 0, 0, 0, 0, 0, 0, 0, 996, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27373 */ 1086, 415, 415, 415, 415, 415, 415, 415, 544, 2495, 544, 544, 544, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0,
  /* 27396 */ 0, 0, 522, 2540, 0, 0, 522, 522, 522, 522, 522, 2516, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544,
  /* 27418 */ 544, 544, 522, 522, 522, 544, 53503, 53838, 544, 2526, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 0, 522,
  /* 27441 */ 522, 522, 522, 522, 522, 293, 294, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 777, 778, 0, 295, 333, 0,
  /* 27468 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1047, 689, 476, 459, 459, 474, 484, 459, 484, 484, 484, 484, 484,
  /* 27494 */ 484, 484, 484, 484, 501, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 419, 484, 526,
  /* 27515 */ 526, 526, 526, 526, 549, 526, 526, 526, 526, 526, 526, 549, 549, 549, 549, 549, 549, 549, 549, 526, 526,
  /* 27536 */ 526, 549, 53503, 53503, 0, 612, 613, 0, 0, 0, 0, 0, 0, 0, 0, 622, 0, 0, 0, 0, 0, 1009, 325, 325, 0, 0, 0,
  /* 27563 */ 0, 0, 0, 0, 1016, 0, 0, 0, 630, 631, 0, 0, 0, 0, 636, 0, 0, 0, 0, 0, 0, 325, 325, 1010, 0, 0, 0, 0, 0, 0,
  /* 27593 */ 0, 1646, 0, 0, 0, 0, 0, 0, 0, 0, 1101824, 383, 1102207, 1102207, 1102207, 1102207, 0, 0, 0, 0, 675, 0, 0,
  /* 27616 */ 0, 679, 0, 0, 0, 0, 0, 0, 0, 0, 689, 0, 0, 692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 972, 0, 0, 415,
  /* 27647 */ 734, 415, 415, 742, 415, 748, 415, 751, 415, 754, 415, 415, 415, 415, 0, 0, 0, 0, 1338, 0, 0, 0, 0, 0,
  /* 27671 */ 1342, 0, 1344, 1345, 0, 1347, 0, 0, 776, 0, 0, 0, 0, 0, 0, 728, 0, 768, 0, 786, 0, 0, 0, 0, 544, 544,
  /* 27697 */ 1829, 544, 544, 544, 544, 544, 544, 544, 544, 544, 0, 0, 0, 2505, 0, 0, 2508, 0, 0, 655, 0, 0, 0, 776,
  /* 27721 */ 794, 0, 0, 0, 0, 0, 794, 794, 797, 0, 0, 728, 0, 0, 0, 0, 0, 803, 0, 0, 0, 0, 0, 0, 0, 1040, 0, 0, 0, 0,
  /* 27751 */ 0, 0, 0, 0, 1750, 1751, 0, 0, 0, 1754, 0, 0, 415, 415, 820, 415, 415, 415, 786, 803, 0, 522, 522, 522,
  /* 27775 */ 834, 522, 522, 845, 522, 854, 522, 858, 522, 522, 864, 867, 871, 522, 522, 522, 522, 522, 0, 544, 544,
  /* 27796 */ 544, 544, 544, 2058, 544, 544, 544, 544, 2062, 544, 544, 544, 544, 544, 544, 544, 1855, 544, 544, 544,
  /* 27816 */ 544, 544, 1861, 544, 544, 544, 544, 544, 891, 544, 544, 902, 544, 911, 544, 915, 544, 544, 921, 924, 928,
  /* 27837 */ 949, 871, 522, 0, 522, 544, 953, 544, 544, 544, 957, 928, 544, 53503, 2, 6, 0, 1005, 0, 0, 0, 0, 325, 325,
  /* 27861 */ 0, 0, 0, 0, 0, 0, 0, 0, 1041, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1020, 0, 0, 0, 0, 0, 0, 0, 0, 1029, 0, 0, 0,
  /* 27893 */ 0, 0, 111024, 0, 111024, 111024, 111024, 432, 111024, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
  /* 27912 */ 432, 432, 432, 432, 111024, 432, 0, 0, 1067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 987, 0, 0, 415, 415,
  /* 27939 */ 415, 415, 415, 1111, 415, 415, 1114, 0, 0, 0, 0, 0, 0, 0, 1049, 1049, 0, 0, 0, 0, 0, 0, 1056, 415, 415,
  /* 27964 */ 415, 415, 415, 1111, 415, 415, 415, 0, 1164, 522, 522, 522, 522, 522, 522, 522, 1499, 522, 522, 522, 522,
  /* 27985 */ 522, 522, 522, 522, 522, 876, 522, 522, 522, 522, 0, 544, 881, 91341, 1164, 884, 544, 544, 544, 544, 544,
  /* 28006 */ 544, 544, 544, 544, 1248, 544, 544, 544, 522, 544, 522, 2068, 522, 522, 544, 2071, 544, 544, 0, 0, 2076,
  /* 28027 */ 544, 1252, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1263, 544, 544, 544, 522, 544, 365066,
  /* 28047 */ 522, 522, 522, 365088, 544, 544, 544, 0, 0, 0, 0, 0, 163840, 0, 163840, 163840, 163840, 0, 163840, 0, 0,
  /* 28068 */ 0, 0, 0, 522, 522, 2485, 522, 522, 522, 522, 522, 522, 522, 544, 2303, 544, 544, 544, 544, 544, 544, 544,
  /* 28090 */ 544, 544, 544, 1871, 544, 1873, 544, 544, 544, 544, 1284, 544, 544, 544, 544, 1291, 544, 544, 522, 522, 0,
  /* 28111 */ 0, 544, 544, 522, 1620, 522, 651786, 522, 522, 522, 522, 544, 1627, 544, 651808, 544, 544, 544, 522, 522,
  /* 28131 */ 522, 544, 544, 544, 2215, 0, 0, 0, 0, 0, 0, 724, 0, 726, 0, 0, 0, 0, 0, 415, 731, 1348, 0, 0, 1351, 0, 0,
  /* 28158 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1919, 0, 0, 0, 1394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1399, 0, 0, 1402, 0, 0, 0,
  /* 28189 */ 0, 544, 1828, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1581, 544, 544, 1585, 544, 544, 1414, 0,
  /* 28210 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1425, 0, 0, 415, 1427, 1428, 415, 415, 415, 415, 415, 1434, 415, 415, 1436,
  /* 28234 */ 415, 415, 415, 415, 1440, 415, 415, 415, 1483, 415, 415, 415, 415, 1164, 1488, 522, 1489, 522, 415, 415,
  /* 28254 */ 1442, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 1453, 0, 0, 0, 0, 1352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28282 */ 0, 2229, 0, 0, 0, 0, 0, 1456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1466, 872448, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
  /* 28312 */ 0, 1424, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1725, 1726, 415, 415, 415, 1491, 522, 522,
  /* 28334 */ 522, 522, 522, 522, 522, 1500, 522, 522, 522, 522, 1504, 522, 522, 522, 0, 944, 952, 544, 544, 906, 544,
  /* 28355 */ 544, 544, 544, 53503, 2, 6, 522, 1507, 522, 522, 522, 522, 522, 522, 1513, 1515, 522, 522, 522, 522, 1520,
  /* 28376 */ 1521, 522, 1523, 1524, 522, 522, 522, 522, 522, 522, 1531, 522, 1533, 522, 522, 522, 522, 522, 522, 1996,
  /* 28396 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1775, 522, 522, 522, 522, 522, 522, 522, 1540, 522, 522,
  /* 28417 */ 522, 522, 522, 522, 1547, 0, 1552, 91341, 0, 1552, 1557, 544, 1558, 544, 1560, 544, 544, 544, 544, 544,
  /* 28437 */ 544, 544, 1569, 544, 544, 544, 544, 522, 522, 0, 0, 0, 544, 544, 522, 522, 522, 850, 522, 1573, 544, 544,
  /* 28459 */ 544, 1576, 544, 544, 544, 544, 544, 544, 1582, 1584, 544, 544, 544, 522, 522, 522, 544, 544, 544, 0, 0, 0,
  /* 28481 */ 0, 0, 0, 2220, 544, 1589, 1590, 544, 1592, 1593, 544, 544, 544, 544, 544, 544, 1600, 544, 1602, 544, 544,
  /* 28502 */ 544, 544, 544, 2200, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2440, 544, 544, 522, 544, 0, 544,
  /* 28523 */ 1619, 522, 522, 1515, 1524, 522, 1624, 522, 1626, 544, 544, 1584, 1593, 544, 1631, 0, 0, 0, 1642, 1643, 0,
  /* 28544 */ 0, 0, 1647, 0, 0, 0, 0, 0, 0, 0, 1055, 0, 0, 0, 0, 974, 0, 0, 0, 0, 0, 0, 892928, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28575 */ 0, 0, 0, 0, 1933, 0, 0, 0, 1700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1712, 0, 1714, 0, 0, 0, 0, 1458, 0,
  /* 28604 */ 1460, 0, 0, 1462, 0, 0, 0, 0, 0, 0, 283, 284, 285, 286, 287, 288, 289, 0, 0, 0, 0, 1717, 415, 415, 415,
  /* 28629 */ 415, 415, 415, 1723, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 1164, 522, 522, 522, 522, 522, 415,
  /* 28650 */ 415, 415, 415, 415, 415, 415, 415, 415, 1737, 0, 0, 0, 0, 0, 0, 341, 364, 0, 0, 0, 0, 0, 0, 45056, 49152,
  /* 28675 */ 1757, 0, 0, 0, 415, 415, 415, 415, 415, 1763, 415, 415, 415, 415, 415, 522, 1983, 522, 522, 522, 522, 522,
  /* 28697 */ 522, 522, 522, 522, 522, 1188, 522, 522, 522, 522, 522, 544, 1838, 544, 1840, 544, 544, 544, 544, 544,
  /* 28717 */ 544, 544, 544, 544, 544, 544, 544, 544, 2050, 544, 544, 0, 0, 1897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28744 */ 1030, 0, 1032, 1922, 1923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364544, 0, 0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
  /* 28773 */ 0, 0, 0, 0, 415, 415, 415, 415, 415, 1722, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 1116, 0, 0, 0,
  /* 28797 */ 0, 0, 0, 0, 1936, 0, 0, 0, 0, 0, 0, 0, 0, 1943, 0, 0, 0, 0, 0, 1038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1917,
  /* 28828 */ 0, 0, 0, 0, 0, 415, 415, 415, 1963, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
  /* 28856 */ 0, 0, 2158592, 2813952, 2158592, 2158592, 2158592, 2163515, 2163515, 2163515, 0, 1007616, 1007616, 0, 0,
  /* 28871 */ 520192, 1922, 0, 0, 0, 0, 0, 0, 827392, 364959, 415, 415, 415, 415, 415, 415, 0, 0, 0, 522, 522, 522, 522,
  /* 28894 */ 522, 522, 522, 2518, 522, 2520, 544, 544, 544, 544, 415, 415, 415, 415, 1008031, 522, 522, 522, 522, 522,
  /* 28914 */ 522, 522, 522, 522, 522, 1990, 522, 1992, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2002,
  /* 28934 */ 522, 2004, 522, 2006, 522, 522, 522, 2010, 522, 522, 522, 522, 2015, 522, 522, 522, 522, 522, 522, 522,
  /* 28954 */ 1512, 522, 522, 1516, 522, 522, 522, 522, 522, 522, 522, 1529, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 28974 */ 522, 2429, 522, 544, 544, 544, 544, 544, 522, 2019, 1008138, 522, 522, 522, 0, 2023, 0, 0, 0, 0, 0, 2025,
  /* 28996 */ 0, 0, 0, 0, 616, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1960, 544, 544,
  /* 29021 */ 2055, 544, 544, 544, 544, 2060, 544, 544, 544, 544, 544, 544, 2064, 1008160, 415, 415, 415, 415, 415, 415,
  /* 29041 */ 415, 2136, 415, 415, 415, 415, 0, 0, 0, 0, 0, 1054, 0, 0, 0, 1059, 0, 0, 977, 0, 0, 0, 0, 982, 0, 0, 0, 0,
  /* 29069 */ 0, 0, 0, 0, 1708, 0, 1710, 0, 0, 0, 0, 0, 2142, 0, 2144, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 522, 522,
  /* 29096 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 1552, 522, 522, 522, 2159, 522, 522, 522, 522,
  /* 29118 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 1778, 522, 522, 2168, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 29139 */ 522, 2173, 522, 522, 522, 522, 522, 522, 522, 1786, 1787, 522, 1789, 522, 522, 522, 522, 522, 522, 522,
  /* 29159 */ 1799, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1219, 522, 522, 522, 522, 522, 522, 2187, 544, 544,
  /* 29179 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2196, 544, 544, 544, 544, 544, 544, 1610, 544, 544, 544,
  /* 29200 */ 544, 544, 544, 522, 522, 544, 544, 0, 0, 0, 0, 2403, 0, 0, 0, 0, 0, 667648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29228 */ 0, 0, 2098, 0, 0, 0, 0, 415, 2260, 415, 415, 415, 2263, 415, 2265, 415, 2267, 0, 2268, 0, 0, 0, 0, 0,
  /* 29252 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
  /* 29265 */ 167936, 167936, 167936, 479232, 0, 0, 2274, 415, 415, 2276, 415, 522, 522, 522, 2281, 522, 522, 522, 522,
  /* 29284 */ 522, 522, 2011, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1816, 0, 0, 0, 1552, 522, 522, 522,
  /* 29306 */ 2286, 522, 522, 2289, 522, 522, 522, 522, 522, 522, 2294, 2296, 522, 522, 522, 522, 2009, 522, 522, 522,
  /* 29326 */ 522, 522, 522, 522, 522, 522, 522, 522, 878, 522, 522, 0, 544, 522, 2299, 522, 2301, 544, 544, 544, 2305,
  /* 29347 */ 544, 544, 544, 544, 544, 544, 544, 2310, 544, 544, 2313, 544, 544, 544, 544, 544, 544, 2318, 2320, 544,
  /* 29367 */ 544, 2323, 544, 2325, 522, 522, 2327, 544, 544, 2329, 0, 0, 0, 0, 2333, 0, 0, 2335, 0, 0, 0, 0, 627, 0, 0,
  /* 29392 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 640, 0, 0, 0, 0, 415, 415, 415, 522, 522, 2364, 522, 522, 522, 522, 522,
  /* 29418 */ 522, 522, 522, 522, 1501, 522, 522, 522, 522, 522, 522, 522, 522, 2372, 522, 522, 522, 522, 522, 522, 522,
  /* 29439 */ 522, 522, 522, 544, 544, 2382, 0, 522, 522, 522, 522, 2457, 522, 522, 522, 522, 522, 522, 522, 544, 544,
  /* 29460 */ 544, 0, 0, 0, 0, 0, 2334, 0, 0, 0, 0, 544, 2467, 544, 544, 544, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0,
  /* 29486 */ 2478, 0, 0, 522, 522, 2513, 522, 522, 522, 522, 522, 522, 522, 544, 544, 2523, 544, 544, 544, 544, 544,
  /* 29507 */ 2387, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2203, 544, 544, 544, 544, 544, 522, 2541, 522,
  /* 29527 */ 2543, 522, 522, 522, 522, 2548, 544, 544, 2550, 544, 2552, 544, 544, 544, 544, 544, 544, 1867, 544, 1869,
  /* 29547 */ 544, 544, 544, 544, 544, 544, 544, 906, 544, 544, 544, 544, 544, 544, 544, 544, 1275, 1276, 544, 544, 544,
  /* 29568 */ 544, 544, 544, 0, 522, 2579, 522, 522, 522, 2583, 544, 2585, 544, 544, 544, 2589, 0, 0, 0, 0, 0, 172032,
  /* 29590 */ 0, 172032, 172032, 172032, 0, 172032, 0, 0, 0, 0, 0, 522, 2484, 522, 522, 522, 2488, 522, 522, 522, 522,
  /* 29611 */ 544, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2111, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 329, 0, 0,
  /* 29643 */ 0, 0, 0, 0, 0, 1121, 0, 1150, 1151, 0, 1121, 415, 415, 415, 0, 0, 338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29672 */ 0, 1062, 0, 0, 0, 0, 329, 0, 0, 0, 0, 0, 0, 376, 0, 329, 0, 376, 45056, 49152, 0, 329, 0, 387, 40960, 387,
  /* 29698 */ 387, 296, 387, 387, 0, 387, 0, 387, 387, 420, 387, 527, 527, 527, 527, 527, 550, 527, 527, 527, 527, 527,
  /* 29720 */ 527, 420, 420, 420, 420, 420, 0, 420, 0, 0, 329, 387, 468, 470, 470, 470, 475, 387, 470, 387, 387, 387,
  /* 29742 */ 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 527, 527, 550, 550, 550, 550, 550, 550,
  /* 29763 */ 550, 550, 527, 527, 527, 550, 53503, 53503, 0, 691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
  /* 29789 */ 691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 0, 0, 415, 415, 849, 522, 522, 522, 522, 522, 522,
  /* 29816 */ 522, 522, 522, 522, 522, 522, 522, 0, 544, 544, 544, 544, 544, 2398, 522, 2399, 544, 0, 0, 0, 0, 0, 0, 0,
  /* 29840 */ 1138, 0, 0, 0, 0, 0, 0, 0, 0, 769, 0, 774, 0, 0, 0, 0, 0, 0, 0, 0, 1052, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29872 */ 0, 2230, 0, 0, 0, 522, 1176, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 544,
  /* 29895 */ 881, 91341, 1164, 884, 544, 544, 544, 544, 544, 544, 1243, 544, 544, 544, 544, 544, 522, 909834, 544,
  /* 29914 */ 909856, 2400, 0, 0, 2402, 0, 0, 0, 1299, 522, 522, 522, 522, 522, 522, 544, 1307, 544, 544, 544, 544, 544,
  /* 29936 */ 544, 0, 0, 2533, 2534, 0, 0, 0, 0, 522, 522, 544, 544, 1852, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 29959 */ 544, 544, 544, 544, 522, 544, 2442, 0, 0, 1911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1078, 0, 0, 415,
  /* 29986 */ 415, 1962, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 1970, 0, 0, 0, 0, 1643, 0, 1748, 0, 0, 0, 0, 0, 0,
  /* 30013 */ 0, 0, 0, 772, 0, 0, 0, 0, 0, 0, 415, 415, 415, 1981, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 30037 */ 522, 522, 522, 1534, 522, 522, 522, 0, 2578, 522, 522, 522, 522, 522, 2584, 544, 544, 544, 544, 544, 0, 0,
  /* 30059 */ 0, 0, 0, 188849, 0, 188849, 188849, 188849, 0, 188849, 0, 0, 0, 0, 0, 627, 783, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30085 */ 1140, 0, 0, 0, 0, 0, 0, 0, 2604, 522, 522, 522, 2606, 544, 544, 544, 0, 0, 522, 522, 544, 544, 522, 522,
  /* 30109 */ 522, 522, 2169, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 1817, 0, 0, 1552, 0, 0, 0, 340,
  /* 30132 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2255, 0, 0, 0, 0, 0, 0, 388, 40960, 388, 388, 0, 388, 388, 0, 388,
  /* 30160 */ 402, 388, 388, 421, 421, 421, 421, 421, 441, 421, 441, 441, 441, 460, 441, 460, 460, 460, 460, 460, 460,
  /* 30181 */ 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 421, 460, 528, 528, 528, 528, 528, 551, 528,
  /* 30202 */ 528, 528, 528, 528, 528, 551, 551, 551, 551, 551, 551, 551, 551, 528, 528, 528, 551, 53503, 53503, 0, 0,
  /* 30223 */ 0, 1469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 522, 522, 2155, 522, 544, 522, 522,
  /* 30248 */ 522, 1880, 522, 522, 522, 544, 544, 544, 1884, 544, 544, 544, 522, 522, 522, 544, 544, 544, 0, 0, 0, 0, 0,
  /* 30271 */ 2219, 0, 0, 0, 2116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1129, 0, 0, 2244, 0, 0, 0, 0, 0, 0, 0, 2251,
  /* 30301 */ 0, 0, 0, 0, 0, 2256, 0, 0, 0, 0, 1665, 0, 0, 0, 0, 0, 0, 1671, 0, 1672, 1673, 0, 0, 0, 0, 1678, 0, 0, 0,
  /* 30330 */ 1681, 0, 0, 0, 0, 0, 0, 0, 1707, 0, 0, 0, 0, 0, 0, 0, 0, 2338, 2339, 0, 0, 0, 0, 0, 0, 522, 522, 2300,
  /* 30358 */ 522, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2204, 544, 544, 2351, 0, 2353, 415,
  /* 30379 */ 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 617, 0, 619, 620, 0, 0, 0, 0, 0, 0, 633, 634, 635, 0, 0,
  /* 30406 */ 0, 0, 0, 0, 0, 2083, 0, 0, 0, 0, 0, 0, 0, 0, 1326, 0, 1328, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 522, 2363,
  /* 30435 */ 522, 522, 522, 522, 522, 522, 522, 2370, 522, 522, 522, 522, 2180, 522, 0, 0, 0, 0, 544, 544, 544, 544,
  /* 30457 */ 544, 2186, 522, 522, 522, 2373, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544, 2381, 544, 544, 544,
  /* 30477 */ 544, 544, 2471, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 0, 2562, 522, 522, 522, 522, 522, 415, 415, 2416, 415,
  /* 30501 */ 415, 0, 0, 0, 415, 522, 522, 522, 522, 522, 2420, 522, 522, 522, 522, 2287, 2288, 522, 522, 522, 522,
  /* 30522 */ 2292, 522, 522, 522, 522, 522, 522, 522, 2427, 522, 522, 522, 544, 544, 544, 544, 2431, 2432, 544, 544,
  /* 30542 */ 544, 544, 544, 544, 2438, 544, 544, 544, 544, 544, 522, 544, 0, 1633, 0, 0, 0, 0, 0, 1635, 0, 0, 0, 0, 0,
  /* 30567 */ 0, 0, 618, 0, 0, 621, 0, 0, 0, 0, 0, 0, 522, 522, 2595, 2596, 522, 522, 544, 544, 2599, 2600, 544, 544, 0,
  /* 30592 */ 0, 0, 0, 0, 221618, 0, 221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618,
  /* 30608 */ 221618, 221618, 221618, 221618, 221618, 221618, 707, 0, 0, 0, 0, 0, 0, 707, 0, 0, 0, 0, 0, 707, 707, 0, 0,
  /* 30631 */ 0, 0, 1693, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1343, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 761,
  /* 30660 */ 0, 0, 0, 522, 522, 832, 522, 522, 522, 522, 522, 522, 2023, 0, 2025, 0, 544, 544, 544, 544, 544, 544, 544,
  /* 30683 */ 1271, 544, 544, 544, 544, 544, 544, 544, 544, 1273, 544, 544, 544, 544, 544, 544, 544, 544, 544, 889, 544,
  /* 30704 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2395, 544, 544, 935, 544, 522, 522,
  /* 30725 */ 0, 0, 0, 544, 544, 522, 522, 832, 522, 522, 522, 522, 522, 2426, 522, 522, 522, 522, 522, 544, 544, 544,
  /* 30747 */ 544, 544, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 522, 522, 878, 0, 522, 544, 544, 889, 544,
  /* 30772 */ 544, 544, 544, 935, 53503, 2, 6, 522, 1210, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 30793 */ 522, 522, 522, 2167, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1486, 415, 1164, 522, 522, 522, 522,
  /* 30813 */ 522, 522, 2161, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1221, 522, 522, 522, 522, 522, 1639, 0,
  /* 30834 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 626, 2360, 0, 2361, 415, 415, 522, 522, 522, 522, 522, 522, 522,
  /* 30861 */ 522, 522, 522, 522, 522, 1535, 522, 522, 522, 0, 0, 0, 298, 297, 0, 0, 0, 0, 0, 0, 0, 297, 0, 45056,
  /* 30885 */ 49152, 495, 495, 512, 495, 529, 529, 529, 529, 529, 552, 529, 529, 529, 529, 529, 529, 552, 552, 552, 552,
  /* 30906 */ 552, 552, 552, 552, 575, 575, 575, 585, 53503, 53503, 643, 644, 645, 0, 325, 325, 325, 0, 0, 0, 0, 0, 0,
  /* 30929 */ 0, 0, 0, 998, 0, 0, 1001, 1002, 0, 0, 0, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1392, 0, 0, 0, 0,
  /* 30960 */ 720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 645, 415, 415, 415, 415, 415, 0, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 0,
  /* 30989 */ 767, 0, 0, 0, 0, 415, 735, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0,
  /* 31014 */ 0, 0, 789, 0, 765, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 789, 789, 0, 0, 0, 0, 1739, 0, 0, 1749, 0, 0, 0, 0, 0,
  /* 31044 */ 0, 0, 0, 795, 0, 0, 0, 0, 0, 0, 0, 0, 0, 765, 0, 0, 0, 0, 0, 0, 804, 0, 645, 0, 0, 0, 804, 0, 0, 0, 0, 0,
  /* 31076 */ 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 821, 415, 824, 0, 0, 804, 522, 522, 522,
  /* 31099 */ 835, 522, 522, 522, 0, 522, 544, 544, 544, 907, 544, 544, 544, 544, 53503, 2, 6, 544, 544, 544, 892, 544,
  /* 31121 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2393, 544, 544, 544, 544, 936, 544, 522, 522,
  /* 31142 */ 0, 0, 0, 544, 544, 522, 522, 522, 522, 522, 522, 522, 1997, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 31164 */ 1788, 522, 522, 522, 522, 522, 522, 522, 950, 879, 0, 522, 544, 544, 544, 544, 544, 544, 958, 936, 53503,
  /* 31185 */ 2, 6, 1004, 0, 0, 0, 0, 0, 325, 325, 0, 0, 0, 0, 0, 0, 0, 0, 1125, 0, 0, 0, 0, 415, 415, 415, 415, 415,
  /* 31213 */ 415, 415, 415, 415, 415, 415, 1101, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 1164, 522, 522, 522,
  /* 31234 */ 522, 1170, 415, 415, 415, 415, 415, 415, 1112, 415, 415, 0, 0, 0, 0, 0, 0, 0, 1139, 0, 0, 0, 0, 0, 0, 0,
  /* 31260 */ 0, 1696, 0, 0, 0, 0, 0, 0, 0, 0, 1120, 0, 0, 0, 0, 0, 0, 0, 0, 1126, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 0, 0,
  /* 31291 */ 2254, 0, 0, 0, 0, 881, 91341, 1164, 884, 544, 544, 544, 544, 1237, 544, 544, 544, 544, 544, 544, 544, 905,
  /* 31313 */ 544, 544, 544, 544, 544, 544, 544, 544, 1258, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1287, 544,
  /* 31334 */ 544, 544, 544, 544, 522, 522, 0, 0, 544, 544, 522, 522, 522, 522, 2302, 544, 544, 544, 544, 544, 544, 544,
  /* 31356 */ 544, 544, 544, 544, 2319, 544, 544, 544, 544, 544, 0, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1346, 0,
  /* 31382 */ 0, 0, 0, 1827, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2390, 544, 544, 544, 544, 544, 0, 0,
  /* 31405 */ 0, 1366, 1367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1377, 0, 0, 0, 0, 1886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31434 */ 1094081, 1094081, 1094081, 1094081, 0, 0, 0, 0, 1415, 1416, 0, 0, 1419, 0, 0, 0, 0, 0, 0, 0, 415, 415,
  /* 31456 */ 1955, 415, 415, 415, 415, 1958, 415, 415, 415, 415, 415, 415, 415, 1444, 415, 415, 415, 415, 415, 0, 0, 0,
  /* 31478 */ 0, 0, 0, 663, 0, 0, 666, 0, 668, 0, 670, 0, 0, 415, 415, 415, 1480, 415, 415, 415, 415, 415, 415, 415,
  /* 31502 */ 1164, 522, 522, 522, 522, 522, 522, 2546, 522, 544, 544, 544, 544, 544, 544, 544, 544, 2045, 544, 544,
  /* 31522 */ 544, 544, 544, 544, 544, 1587, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1599, 544, 544, 544, 544,
  /* 31543 */ 522, 522, 0, 0, 0, 544, 544, 944, 522, 522, 849, 522, 0, 0, 1677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1686, 0,
  /* 31570 */ 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1389, 0, 0, 0, 0, 522, 1768, 522, 522, 522, 522, 522, 522,
  /* 31598 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 2297, 1909, 0, 0, 0, 1913, 0, 0, 0, 0, 1916, 0, 0, 0, 0, 0,
  /* 31623 */ 0, 707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 784, 0, 0, 0, 0, 0, 0, 1948, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415,
  /* 31652 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 1106, 415, 415, 415, 415, 415, 415, 415, 1964, 415, 0, 1966,
  /* 31673 */ 0, 0, 0, 0, 0, 0, 466944, 0, 2410, 2411, 0, 0, 0, 0, 0, 0, 1645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
  /* 31703 */ 0, 0, 0, 0, 0, 1906, 0, 0, 0, 0, 0, 0, 0, 1974, 0, 0, 0, 415, 1977, 415, 415, 415, 415, 1964, 522, 522,
  /* 31729 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2001, 522, 522, 522, 522, 522, 2020, 522, 522, 522, 0,
  /* 31750 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1752, 0, 0, 0, 0, 0, 544, 544, 544, 544, 2042, 544, 544, 544, 544, 544, 544,
  /* 31776 */ 544, 544, 544, 544, 544, 1615, 544, 522, 522, 544, 2130, 415, 2132, 415, 415, 415, 415, 415, 415, 2137,
  /* 31796 */ 415, 415, 0, 0, 0, 0, 0, 1353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2096, 0, 0, 0, 0, 2101, 522, 2157, 522, 522,
  /* 31824 */ 522, 522, 522, 522, 522, 522, 522, 2165, 522, 522, 522, 522, 522, 1214, 522, 522, 522, 522, 1220, 522,
  /* 31844 */ 522, 522, 522, 522, 522, 522, 2012, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1801, 522, 522, 522, 522,
  /* 31865 */ 522, 522, 522, 2177, 522, 522, 522, 522, 0, 0, 0, 0, 544, 2182, 544, 544, 2185, 544, 544, 544, 544, 829,
  /* 31887 */ 522, 0, 0, 0, 886, 544, 829, 522, 522, 852, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 31909 */ 522, 0, 544, 544, 544, 544, 544, 2199, 544, 544, 544, 544, 2202, 544, 544, 544, 544, 2205, 544, 544, 544,
  /* 31930 */ 544, 830, 522, 0, 0, 0, 887, 544, 830, 522, 522, 853, 522, 522, 522, 522, 2374, 522, 522, 522, 522, 522,
  /* 31952 */ 522, 522, 522, 544, 544, 544, 0, 2330, 0, 0, 0, 0, 0, 0, 0, 0, 657, 785, 0, 785, 779, 0, 0, 0, 0, 0, 2246,
  /* 31979 */ 0, 0, 0, 0, 0, 0, 0, 2253, 0, 0, 0, 0, 0, 0, 696320, 1015808, 0, 0, 0, 0, 0, 0, 2349, 0, 2258, 415, 415,
  /* 32006 */ 415, 415, 2262, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1042, 0, 0, 0, 0, 0,
  /* 32035 */ 0, 2284, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2293, 522, 522, 522, 522, 522, 1497, 522, 522,
  /* 32056 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 1517, 522, 522, 522, 522, 2453, 522, 522, 522, 522, 522, 522,
  /* 32077 */ 522, 522, 522, 522, 522, 522, 544, 544, 544, 0, 0, 0, 2332, 0, 0, 0, 0, 0, 2336, 544, 544, 544, 2497, 544,
  /* 32101 */ 2499, 2500, 2501, 544, 0, 0, 0, 0, 0, 0, 0, 1144, 0, 0, 0, 1014, 1144, 1152, 415, 415, 0, 522, 522, 522,
  /* 32125 */ 522, 544, 544, 544, 544, 0, 0, 522, 522, 544, 544, 2610, 2611, 522, 544, 522, 544, 522, 544, 0, 0, 0, 0,
  /* 32148 */ 0, 0, 0, 0, 0, 1058, 0, 0, 0, 0, 0, 0, 1851, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 32173 */ 544, 544, 544, 1603, 0, 0, 339, 341, 0, 0, 0, 341, 0, 0, 0, 0, 0, 0, 0, 0, 1366, 0, 0, 0, 0, 0, 0, 415, 0,
  /* 32202 */ 0, 0, 389, 40960, 389, 389, 0, 389, 389, 396, 389, 0, 389, 389, 423, 423, 423, 423, 423, 443, 423, 443,
  /* 32224 */ 443, 443, 462, 443, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 32245 */ 462, 423, 519, 530, 530, 530, 530, 530, 553, 530, 530, 530, 530, 530, 530, 553, 553, 553, 553, 553, 553,
  /* 32266 */ 553, 553, 530, 530, 530, 553, 53503, 53503, 0, 0, 0, 614, 615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1374, 0,
  /* 32292 */ 0, 0, 0, 0, 0, 0, 693, 0, 0, 0, 0, 693, 0, 699, 0, 0, 0, 0, 0, 0, 761856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
  /* 32323 */ 0, 0, 0, 0, 415, 415, 415, 415, 736, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0,
  /* 32347 */ 0, 0, 1454, 0, 0, 0, 615, 0, 0, 0, 0, 0, 0, 0, 0, 805, 0, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32378 */ 0, 683, 0, 0, 687, 0, 0, 0, 0, 0, 693, 615, 0, 0, 0, 0, 0, 677, 0, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 32405 */ 415, 0, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 768, 0, 773, 0, 776, 0, 0, 0, 0, 0, 1006, 0, 0,
  /* 32435 */ 0, 325, 325, 0, 0, 0, 0, 0, 0, 0, 0, 1371, 0, 0, 0, 0, 0, 0, 0, 1017, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32467 */ 0, 1031, 0, 0, 0, 0, 1899, 0, 0, 1901, 0, 0, 0, 0, 0, 0, 0, 0, 1669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32497 */ 315392, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 1090, 1171, 1177, 522, 522, 522, 522, 522, 522, 522, 522, 1187,
  /* 32520 */ 522, 522, 522, 522, 522, 522, 522, 2162, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2014, 522, 522, 522,
  /* 32541 */ 522, 522, 522, 522, 522, 1211, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1223, 522, 522, 522, 0, 828,
  /* 32562 */ 885, 544, 544, 955, 544, 544, 544, 544, 53503, 2, 6, 881, 91341, 1164, 884, 544, 544, 544, 544, 544, 1238,
  /* 32583 */ 1244, 544, 544, 544, 544, 544, 544, 544, 2201, 544, 544, 544, 544, 544, 544, 544, 544, 1274, 544, 544,
  /* 32603 */ 544, 544, 544, 544, 544, 544, 544, 544, 1254, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 32624 */ 544, 807434, 807456, 0, 522, 1171, 522, 522, 1211, 522, 522, 544, 544, 1238, 544, 544, 1278, 544, 544, 0,
  /* 32644 */ 2557, 0, 0, 0, 0, 0, 0, 522, 2563, 522, 522, 522, 522, 522, 2170, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 32667 */ 522, 522, 0, 1552, 91341, 0, 1552, 544, 415, 1430, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 32688 */ 415, 415, 415, 761, 0, 522, 1493, 1494, 522, 522, 522, 1498, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 32709 */ 522, 1532, 522, 522, 522, 522, 522, 522, 522, 1508, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 32730 */ 522, 522, 522, 1804, 522, 544, 544, 544, 544, 1562, 1563, 544, 544, 544, 1567, 544, 544, 544, 544, 544,
  /* 32750 */ 544, 544, 1292, 544, 522, 522, 0, 0, 544, 544, 1298, 415, 415, 415, 415, 1732, 415, 415, 415, 415, 415, 0,
  /* 32772 */ 0, 0, 0, 0, 0, 801, 0, 0, 0, 0, 0, 0, 0, 0, 809, 544, 544, 544, 1853, 544, 544, 544, 544, 544, 544, 544,
  /* 32798 */ 544, 544, 544, 544, 544, 1570, 544, 544, 544, 544, 544, 1864, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 32819 */ 544, 544, 544, 544, 544, 923, 544, 0, 0, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2034, 544, 544, 544,
  /* 32841 */ 544, 522, 522, 0, 0, 184320, 544, 544, 522, 522, 522, 522, 522, 522, 0, 0, 1819, 0, 0, 0, 0, 0, 1825, 0,
  /* 32865 */ 415, 2131, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 2139, 0, 0, 0, 0, 0, 258484, 0, 258484,
  /* 32886 */ 258484, 258484, 258484, 258484, 258484, 258484, 258484, 258484, 258484, 258484, 258484, 258484, 258484,
  /* 32899 */ 258484, 258484, 2156, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 32918 */ 1191, 2342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 688, 368, 522, 522, 2542, 522, 2544, 522, 522,
  /* 32944 */ 522, 544, 544, 544, 544, 2551, 544, 2553, 544, 544, 544, 544, 894, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 32965 */ 544, 544, 544, 1859, 544, 544, 544, 1863, 522, 522, 522, 2568, 544, 544, 544, 544, 544, 544, 544, 544, 0,
  /* 32986 */ 0, 0, 0, 0, 2536, 2537, 0, 522, 522, 0, 522, 2594, 522, 522, 522, 522, 544, 2598, 544, 544, 544, 544, 0,
  /* 33009 */ 0, 0, 0, 0, 286720, 0, 286720, 286720, 286720, 0, 286720, 0, 0, 0, 0, 0, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33035 */ 0, 532480, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 331, 486, 486, 513, 486, 531,
  /* 33063 */ 531, 531, 531, 531, 554, 531, 531, 531, 531, 566, 566, 571, 571, 571, 571, 571, 571, 571, 571, 531, 531,
  /* 33084 */ 566, 571, 53503, 53838, 415, 415, 737, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0,
  /* 33105 */ 1740, 0, 0, 0, 850, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 544, 544, 544,
  /* 33127 */ 544, 895, 544, 544, 907, 544, 544, 544, 544, 544, 544, 544, 544, 1566, 544, 544, 544, 544, 544, 544, 544,
  /* 33148 */ 0, 0, 0, 1135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2347, 0, 0, 0, 0, 0, 0, 1148, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33180 */ 0, 415, 415, 415, 415, 415, 1094, 415, 415, 415, 415, 415, 1159, 415, 415, 415, 415, 0, 1164, 522, 522,
  /* 33201 */ 522, 522, 522, 522, 522, 2171, 522, 522, 522, 522, 2174, 522, 522, 522, 1172, 522, 522, 522, 522, 522,
  /* 33221 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1206, 881, 91341, 1164, 884, 544, 544, 544, 544, 544,
  /* 33241 */ 1239, 544, 544, 544, 544, 544, 544, 544, 1565, 544, 544, 544, 544, 544, 544, 544, 544, 2193, 544, 544,
  /* 33261 */ 544, 544, 544, 544, 544, 544, 1266, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1279, 544, 544, 544,
  /* 33282 */ 522, 522, 522, 544, 544, 544, 0, 0, 2217, 0, 0, 0, 0, 0, 1383, 0, 1385, 0, 0, 0, 0, 0, 0, 0, 0, 1057, 0,
  /* 33309 */ 0, 0, 0, 0, 0, 0, 522, 1172, 522, 522, 522, 1304, 522, 544, 544, 1239, 544, 544, 544, 1312, 544, 0, 0, 0,
  /* 33333 */ 0, 1937, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1061, 0, 1062, 0, 0, 0, 1316, 0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
  /* 33363 */ 0, 0, 0, 0, 1931, 0, 0, 0, 0, 0, 0, 0, 0, 1337, 0, 0, 0, 0, 0, 1341, 0, 0, 0, 0, 0, 0, 803, 776, 0, 776,
  /* 33393 */ 0, 0, 415, 815, 415, 415, 0, 0, 565248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1331, 0, 0, 0, 1690, 0, 0,
  /* 33422 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1412, 0, 0, 1823, 0, 0, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 33449 */ 544, 544, 544, 1847, 1848, 544, 1850, 544, 544, 1839, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 33469 */ 544, 544, 544, 544, 927, 544, 0, 0, 415, 415, 975263, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 33490 */ 522, 522, 2016, 522, 522, 522, 975392, 544, 544, 544, 544, 522, 522, 544, 544, 0, 0, 0, 0, 0, 0, 0, 1370,
  /* 33513 */ 0, 1372, 0, 0, 1375, 0, 0, 0, 0, 325, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1352, 415, 415, 0, 0, 0,
  /* 33543 */ 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 347, 0, 0, 0, 0, 347, 0, 0, 0, 45056, 49152, 451, 504, 451, 451,
  /* 33570 */ 451, 451, 506, 504, 451, 451, 451, 451, 451, 451, 451, 451, 425, 451, 532, 532, 532, 532, 532, 555, 532,
  /* 33591 */ 532, 532, 532, 532, 532, 555, 555, 555, 555, 555, 555, 555, 555, 532, 532, 532, 555, 53503, 53503, 657, 0,
  /* 33612 */ 0, 0, 0, 662, 0, 664, 0, 0, 0, 0, 0, 0, 0, 0, 1421, 0, 0, 0, 0, 0, 415, 415, 673, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33643 */ 0, 0, 0, 0, 0, 0, 0, 689, 0, 0, 719, 0, 0, 0, 0, 0, 0, 0, 0, 617, 0, 0, 415, 730, 415, 415, 738, 415, 415,
  /* 33672 */ 746, 415, 415, 415, 752, 415, 415, 415, 759, 415, 0, 0, 0, 0, 1972, 0, 0, 0, 0, 0, 0, 0, 1976, 0, 415,
  /* 33697 */ 415, 415, 415, 415, 415, 415, 415, 2266, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 762, 0,
  /* 33723 */ 0, 617, 799, 0, 657, 0, 0, 0, 779, 0, 806, 0, 808, 0, 0, 0, 0, 2080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33752 */ 1649, 0, 0, 0, 0, 0, 0, 0, 762, 617, 813, 0, 0, 0, 0, 0, 0, 730, 415, 415, 817, 415, 415, 415, 415, 759,
  /* 33778 */ 415, 0, 0, 0, 522, 828, 522, 522, 839, 522, 522, 522, 522, 1181, 522, 522, 522, 1185, 522, 522, 522, 522,
  /* 33800 */ 522, 522, 522, 522, 1813, 522, 522, 0, 0, 0, 0, 1552, 851, 522, 522, 522, 860, 522, 522, 522, 522, 875,
  /* 33822 */ 522, 522, 522, 522, 0, 544, 544, 544, 544, 897, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 33843 */ 2047, 544, 2049, 544, 2051, 544, 544, 885, 544, 544, 896, 544, 544, 908, 544, 544, 544, 917, 544, 544,
  /* 33863 */ 544, 544, 522, 856, 0, 0, 0, 544, 913, 522, 522, 946, 522, 522, 932, 544, 544, 544, 828, 522, 0, 0, 0,
  /* 33886 */ 885, 544, 828, 522, 522, 947, 522, 522, 522, 857, 522, 862, 522, 865, 522, 522, 877, 522, 522, 522, 0,
  /* 33907 */ 544, 544, 544, 544, 544, 1290, 544, 544, 544, 522, 522, 0, 0, 544, 544, 522, 522, 522, 522, 1796, 1797,
  /* 33928 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1502, 522, 522, 522, 522, 975, 976, 0, 0, 0, 0, 0,
  /* 33951 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1687, 0, 0, 0, 0, 1007, 0, 0, 325, 325, 0, 1011, 0, 0, 0, 0, 0, 0, 981, 0, 0,
  /* 33981 */ 0, 0, 0, 0, 0, 0, 0, 1356, 0, 0, 0, 0, 0, 0, 0, 0, 1035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1360,
  /* 34012 */ 1361, 0, 0, 0, 1147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 1154, 415, 415, 415, 1158, 415, 415, 415,
  /* 34037 */ 415, 415, 0, 1164, 522, 522, 522, 522, 522, 522, 522, 2377, 522, 522, 522, 522, 522, 544, 544, 544, 0, 0,
  /* 34059 */ 2331, 0, 0, 0, 569344, 0, 0, 0, 522, 1300, 522, 522, 1303, 522, 522, 544, 544, 1308, 544, 544, 1311, 544,
  /* 34081 */ 544, 0, 0, 0, 0, 2091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1711, 0, 0, 0, 0, 415, 415, 1431, 415, 415, 415,
  /* 34109 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 760, 415, 0, 0, 0, 0, 1457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34135 */ 0, 0, 0, 131072, 0, 0, 131072, 0, 1468, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 1153, 415, 415, 415,
  /* 34162 */ 415, 415, 415, 415, 415, 1484, 415, 415, 415, 1164, 522, 522, 522, 522, 522, 1510, 522, 522, 522, 522,
  /* 34182 */ 522, 522, 522, 1519, 522, 522, 544, 544, 1607, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 522, 522,
  /* 34203 */ 544, 544, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 522, 2564, 522, 2565, 1675, 1676, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34230 */ 0, 0, 0, 0, 0, 1698, 0, 1716, 0, 1718, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 34253 */ 1437, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1735, 415, 415, 0, 0, 0, 0, 0, 0, 995, 0, 0,
  /* 34277 */ 0, 0, 0, 0, 0, 0, 0, 1890, 0, 1892, 0, 0, 1895, 0, 0, 0, 1745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34307 */ 1391, 0, 0, 1767, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1226, 0, 0,
  /* 34329 */ 0, 1912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 276, 277, 0, 0, 0, 0, 1925, 0, 1926, 0, 0, 0, 0, 0,
  /* 34358 */ 0, 0, 0, 0, 0, 2412, 0, 0, 0, 0, 0, 0, 1949, 0, 0, 1952, 415, 415, 415, 415, 415, 1957, 415, 415, 415,
  /* 34383 */ 1959, 415, 415, 415, 415, 415, 415, 0, 0, 0, 522, 522, 522, 522, 522, 844, 522, 522, 522, 1212, 522, 522,
  /* 34405 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1791, 522, 522, 415, 1961, 415, 415, 415, 415, 415,
  /* 34426 */ 415, 415, 0, 0, 0, 1968, 0, 0, 0, 0, 0, 335872, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 522, 522, 2280,
  /* 34452 */ 522, 522, 522, 522, 522, 415, 415, 1980, 415, 415, 522, 522, 522, 522, 522, 522, 1987, 522, 522, 522, 522,
  /* 34473 */ 522, 1527, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 91341, 0, 0, 544, 1991, 522, 1993, 522,
  /* 34495 */ 522, 522, 522, 522, 522, 522, 522, 2000, 522, 522, 522, 522, 522, 1810, 522, 1812, 522, 522, 522, 0, 0, 0,
  /* 34517 */ 0, 1552, 0, 0, 544, 544, 544, 544, 544, 544, 2032, 544, 544, 544, 544, 2036, 544, 2038, 544, 544, 544,
  /* 34538 */ 544, 2057, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2321, 544, 544, 544, 544, 0, 2089, 0, 0,
  /* 34560 */ 0, 0, 0, 0, 2094, 2095, 0, 0, 0, 0, 0, 0, 998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 766, 0, 766, 0, 0, 0, 0, 522,
  /* 34590 */ 522, 522, 2179, 522, 522, 0, 0, 0, 0, 544, 544, 544, 544, 544, 544, 544, 1833, 544, 544, 544, 544, 544,
  /* 34612 */ 544, 544, 544, 2190, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2441, 544, 522, 544, 0, 2207,
  /* 34633 */ 544, 544, 2209, 522, 522, 2212, 544, 544, 0, 0, 0, 0, 0, 0, 0, 1407, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 0,
  /* 34659 */ 0, 0, 0, 0, 0, 0, 0, 2259, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 2271, 0, 2272, 0, 0,
  /* 34685 */ 415, 415, 415, 415, 522, 2279, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 544, 544, 544, 2184, 544, 544,
  /* 34707 */ 2311, 2312, 544, 544, 544, 544, 2316, 544, 544, 544, 544, 544, 544, 544, 544, 544, 522, 522, 0, 0, 544,
  /* 34728 */ 544, 522, 0, 2352, 415, 415, 2354, 2355, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 1023, 0, 0, 0, 0, 1028, 0,
  /* 34753 */ 0, 0, 0, 0, 0, 415, 415, 415, 522, 522, 522, 522, 2365, 2366, 2367, 522, 522, 522, 522, 522, 1995, 522,
  /* 34775 */ 522, 522, 1998, 1999, 522, 522, 522, 522, 522, 522, 1544, 522, 522, 522, 0, 1552, 91341, 0, 1552, 544,
  /* 34795 */ 544, 2383, 2384, 2385, 544, 544, 544, 544, 544, 544, 544, 544, 2392, 544, 544, 544, 522, 522, 522, 544,
  /* 34815 */ 544, 544, 0, 2216, 0, 0, 0, 0, 0, 0, 2658304, 0, 2785280, 0, 0, 0, 0, 0, 0, 0, 0, 2818048, 0, 2879488, 0,
  /* 34840 */ 2961408, 0, 2977792, 0, 544, 2433, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 522, 544, 0, 0,
  /* 34861 */ 0, 0, 2106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1142, 0, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522, 2459, 522,
  /* 34889 */ 522, 522, 522, 522, 544, 544, 544, 2570, 544, 2571, 544, 544, 544, 0, 0, 0, 0, 0, 2559, 2560, 0, 522, 522,
  /* 34912 */ 522, 522, 522, 522, 522, 522, 522, 522, 2463, 522, 544, 544, 544, 544, 544, 544, 2469, 544, 544, 544, 544,
  /* 34933 */ 544, 0, 2475, 0, 0, 868352, 0, 0, 0, 0, 721, 0, 0, 0, 0, 727, 0, 0, 652, 0, 415, 415, 415, 415, 415, 415,
  /* 34959 */ 415, 415, 415, 0, 409600, 0, 0, 0, 0, 0, 1396, 0, 0, 0, 1398, 0, 0, 0, 0, 0, 0, 649, 0, 649, 0, 0, 0, 415,
  /* 34987 */ 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 974848, 0, 0, 544, 544, 2496, 544, 544, 544, 544, 544, 544, 0,
  /* 35010 */ 0, 0, 0, 2506, 0, 0, 0, 0, 722, 723, 0, 725, 0, 0, 728, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 35036 */ 415, 415, 415, 415, 415, 1728, 544, 544, 544, 2528, 544, 2530, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 522, 522,
  /* 35060 */ 2487, 522, 2489, 2490, 2491, 522, 544, 0, 522, 522, 2580, 2581, 522, 522, 544, 544, 2586, 2587, 544, 544,
  /* 35080 */ 0, 0, 0, 0, 0, 1069056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 522, 522, 522, 0, 305, 307,
  /* 35106 */ 306, 40960, 306, 306, 307, 394, 306, 305, 306, 0, 306, 394, 426, 426, 426, 426, 426, 446, 426, 446, 446,
  /* 35127 */ 454, 463, 469, 463, 463, 473, 463, 473, 473, 463, 487, 473, 487, 487, 487, 487, 487, 487, 487, 487, 487,
  /* 35148 */ 487, 487, 487, 487, 487, 487, 487, 487, 487, 426, 487, 533, 533, 533, 533, 533, 556, 533, 533, 533, 533,
  /* 35169 */ 533, 533, 556, 556, 556, 556, 556, 556, 556, 556, 533, 533, 533, 556, 53503, 53503, 273, 274, 0, 0, 0, 0,
  /* 35191 */ 0, 0, 603, 0, 0, 0, 607, 608, 609, 610, 611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 623, 0, 625, 0, 0, 0, 0,
  /* 35220 */ 2223, 0, 933888, 0, 2226, 0, 0, 0, 0, 2231, 0, 0, 0, 0, 661, 0, 0, 0, 665, 0, 667, 0, 0, 0, 0, 0, 0, 2120,
  /* 35248 */ 2121, 0, 0, 2124, 0, 0, 0, 0, 0, 0, 2147, 0, 415, 415, 2150, 415, 415, 522, 522, 522, 0, 0, 0, 646, 325,
  /* 35273 */ 325, 325, 0, 0, 0, 651, 0, 0, 0, 0, 0, 0, 937984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1327, 0, 0, 0, 0, 0, 0, 701,
  /* 35303 */ 702, 703, 0, 0, 0, 0, 0, 709, 0, 0, 712, 745472, 0, 0, 0, 0, 0, 1094081, 0, 1094081, 1094081, 1094081, 0,
  /* 35326 */ 1094081, 0, 0, 0, 0, 0, 1666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1409, 0, 0, 0, 0, 0, 733, 415, 415, 741, 415,
  /* 35354 */ 415, 415, 750, 415, 415, 415, 415, 757, 415, 415, 0, 0, 0, 0, 2236, 2237, 0, 2238, 0, 905216, 0, 0, 0,
  /* 35377 */ 2241, 0, 2243, 0, 0, 0, 781, 782, 0, 0, 0, 709, 0, 0, 0, 0, 0, 0, 0, 1456, 0, 0, 0, 1474, 0, 1328, 1328,
  /* 35404 */ 1477, 0, 790, 0, 0, 0, 703, 793, 0, 0, 0, 703, 0, 0, 796, 646, 0, 0, 0, 0, 2247, 2248, 0, 0, 0, 0, 0, 0,
  /* 35432 */ 0, 0, 0, 0, 217088, 0, 217088, 217088, 217088, 217088, 0, 798, 0, 0, 0, 800, 0, 0, 0, 639, 0, 646, 0, 0,
  /* 35456 */ 0, 639, 798, 798, 639, 0, 0, 0, 0, 625, 0, 670, 0, 639, 415, 415, 816, 415, 415, 415, 415, 415, 415, 0, 0,
  /* 35481 */ 0, 522, 522, 522, 522, 837, 522, 522, 522, 522, 522, 2545, 522, 522, 544, 544, 544, 544, 544, 544, 544,
  /* 35502 */ 2554, 818, 415, 415, 757, 415, 825, 0, 0, 639, 522, 522, 833, 836, 522, 843, 522, 522, 522, 1302, 522,
  /* 35523 */ 522, 1305, 544, 544, 544, 544, 1310, 544, 544, 1313, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35549 */ 308, 0, 0, 0, 0, 522, 522, 856, 859, 522, 522, 522, 868, 872, 522, 522, 522, 522, 522, 0, 544, 544, 544,
  /* 35572 */ 544, 898, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1870, 544, 544, 544, 544, 544, 544, 544,
  /* 35593 */ 544, 890, 893, 544, 900, 544, 544, 544, 913, 916, 544, 544, 544, 925, 929, 868, 872, 951, 0, 522, 544,
  /* 35614 */ 544, 954, 544, 544, 925, 929, 959, 53503, 2, 6, 1033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
  /* 35641 */ 2179719, 2179719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3088384, 0, 57344, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415,
  /* 35665 */ 1100, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 1117, 0, 0, 0, 0, 544, 544, 544, 1288, 544, 544,
  /* 35688 */ 544, 544, 544, 522, 522, 0, 0, 544, 544, 522, 522, 522, 1495, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 35709 */ 1503, 522, 522, 522, 0, 829, 886, 544, 544, 909, 544, 544, 544, 544, 53503, 2, 6, 0, 0, 1405, 0, 699, 0,
  /* 35732 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1661, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 1448, 415, 415, 0, 0,
  /* 35759 */ 0, 0, 0, 0, 1039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 709, 0, 0, 0, 0, 415, 415, 1478, 415, 651679, 415, 415, 415,
  /* 35786 */ 415, 415, 415, 415, 415, 1164, 522, 522, 522, 522, 522, 2022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2110, 0, 0, 0,
  /* 35812 */ 0, 0, 0, 0, 1653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1921, 0, 1664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35844 */ 0, 0, 0, 0, 0, 780, 0, 1555, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 35867 */ 2065, 0, 2143, 0, 0, 0, 2146, 0, 0, 415, 415, 415, 415, 2152, 2153, 522, 522, 522, 522, 1196, 522, 522,
  /* 35889 */ 522, 522, 522, 522, 522, 522, 522, 1204, 522, 2176, 522, 522, 522, 522, 522, 0, 0, 0, 0, 2181, 544, 544,
  /* 35911 */ 544, 544, 544, 544, 544, 2317, 544, 544, 544, 544, 544, 544, 544, 544, 1293, 522, 522, 0, 0, 544, 544,
  /* 35932 */ 522, 0, 0, 2221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1408, 415, 415, 0, 415, 415, 2261, 415, 415, 415,
  /* 35959 */ 415, 415, 415, 0, 0, 0, 0, 0, 0, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 1080, 2443, 0, 0, 2446, 0, 0, 0, 0, 0, 0,
  /* 35988 */ 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 522, 2154, 522, 0, 522, 522, 522, 2456, 522, 522, 522, 522, 522,
  /* 36011 */ 522, 522, 522, 544, 544, 544, 544, 544, 544, 544, 544, 573, 573, 573, 583, 53503, 53503, 2466, 544, 544,
  /* 36031 */ 544, 544, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 1659, 0, 0, 0, 0, 1662, 0, 0, 0, 2494, 544, 544, 544,
  /* 36057 */ 2498, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 1668, 0, 0, 0, 0, 0, 0, 0, 1674, 2577, 522, 522, 522, 522,
  /* 36083 */ 522, 522, 544, 544, 544, 544, 544, 544, 0, 2591, 2592, 544, 2612, 2613, 522, 544, 522, 544, 0, 0, 0, 0, 0,
  /* 36106 */ 0, 0, 0, 0, 1125, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 823, 415, 0, 0, 0, 522, 522, 522, 522, 522, 522,
  /* 36132 */ 522, 522, 522, 522, 522, 522, 544, 544, 544, 933, 544, 544, 544, 522, 522, 0, 0, 0, 544, 544, 522, 522,
  /* 36154 */ 522, 522, 522, 522, 522, 2547, 544, 544, 544, 544, 544, 544, 544, 544, 1856, 544, 544, 544, 544, 544, 544,
  /* 36175 */ 544, 1096, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 1173, 522,
  /* 36196 */ 522, 522, 522, 1183, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1790, 522, 522, 522, 522, 522,
  /* 36217 */ 1192, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1207, 881, 91341, 1164, 884, 544,
  /* 36237 */ 544, 544, 544, 544, 1240, 544, 544, 544, 544, 1250, 544, 544, 544, 544, 938, 522, 0, 0, 0, 942, 544, 522,
  /* 36259 */ 522, 522, 522, 863, 544, 544, 1286, 544, 544, 544, 544, 544, 544, 522, 1295, 0, 0, 544, 1297, 522, 522,
  /* 36280 */ 522, 1525, 1526, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2380, 544, 544, 522,
  /* 36300 */ 1173, 522, 522, 522, 522, 522, 544, 544, 1240, 544, 544, 544, 544, 544, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0,
  /* 36324 */ 0, 0, 0, 0, 0, 415, 415, 415, 1091, 415, 415, 415, 0, 1317, 0, 0, 0, 1323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36352 */ 159744, 0, 0, 0, 0, 0, 0, 0, 0, 1381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1110016, 0, 0, 0, 0, 0, 0, 0,
  /* 36382 */ 913408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1918, 0, 0, 0, 0, 522, 522, 1782, 522, 522, 1785, 522, 522, 522,
  /* 36408 */ 522, 522, 522, 522, 522, 522, 522, 522, 1815, 0, 0, 0, 1552, 0, 1824, 0, 0, 544, 544, 544, 544, 544, 544,
  /* 36431 */ 544, 544, 544, 544, 544, 544, 1860, 544, 544, 544, 0, 0, 0, 1898, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36457 */ 2085, 0, 0, 0, 2087, 2005, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 36478 */ 1538, 0, 0, 2273, 0, 415, 2275, 415, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2164, 522, 522,
  /* 36499 */ 522, 522, 522, 522, 522, 2326, 522, 544, 2328, 544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 0,
  /* 36526 */ 2444, 0, 0, 0, 0, 0, 0, 2449, 0, 0, 0, 2452, 0, 0, 415, 0, 539, 539, 539, 539, 539, 562, 539, 539, 539,
  /* 36551 */ 539, 539, 539, 0, 2480, 2481, 0, 851968, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544, 522, 522,
  /* 36572 */ 522, 522, 1881, 522, 522, 544, 544, 544, 544, 1885, 544, 544, 544, 522, 2210, 522, 544, 2213, 544, 0, 0,
  /* 36593 */ 0, 0, 0, 0, 0, 708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2596864, 0, 0, 2760704, 0, 0, 0, 415, 415, 739, 415, 415,
  /* 36620 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 1451, 1452, 0, 0, 0, 0, 766, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36646 */ 766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2097, 0, 0, 0, 0, 415, 415,
  /* 36678 */ 415, 415, 415, 415, 0, 0, 0, 522, 522, 522, 522, 840, 522, 522, 522, 522, 1213, 522, 522, 522, 1216, 522,
  /* 36700 */ 522, 522, 522, 522, 522, 522, 522, 1199, 522, 522, 522, 522, 522, 522, 522, 522, 1217, 522, 522, 522, 522,
  /* 36721 */ 1224, 522, 522, 544, 544, 544, 937, 522, 522, 0, 0, 0, 544, 544, 522, 522, 522, 522, 522, 522, 1184, 522,
  /* 36743 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2430, 544, 544, 544, 544, 0, 0, 415, 415, 415, 522, 522,
  /* 36765 */ 522, 522, 522, 522, 522, 522, 2369, 522, 522, 522, 522, 1496, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 36786 */ 522, 522, 1201, 522, 522, 522, 522, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 974, 0, 325, 0, 0,
  /* 36814 */ 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 989, 0, 0, 309, 308, 40960, 308, 308, 309, 308,
  /* 36842 */ 308, 0, 308, 0, 308, 308, 427, 308, 535, 535, 535, 535, 535, 558, 535, 535, 535, 535, 535, 535, 427, 427,
  /* 36864 */ 427, 427, 427, 0, 427, 0, 0, 0, 308, 309, 308, 308, 308, 308, 480, 308, 308, 308, 308, 308, 308, 308, 308,
  /* 36887 */ 308, 308, 308, 308, 308, 308, 308, 308, 535, 535, 558, 558, 558, 558, 558, 558, 558, 558, 535, 535, 535,
  /* 36908 */ 558, 53503, 53503, 0, 628, 629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1650, 1651, 0, 0, 0, 0, 660, 0, 0,
  /* 36936 */ 0, 0, 0, 0, 0, 0, 669, 0, 0, 672, 0, 0, 0, 704, 0, 0, 0, 0, 0, 628, 0, 0, 0, 0, 0, 0, 1369, 0, 0, 0, 0, 0,
  /* 36968 */ 0, 0, 0, 0, 1124, 0, 0, 0, 0, 0, 0, 0, 718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 1090, 415,
  /* 36998 */ 415, 415, 415, 415, 415, 415, 743, 415, 415, 415, 415, 753, 415, 415, 758, 415, 415, 0, 0, 0, 0, 40960, 0,
  /* 37021 */ 0, 0, 0, 0, 0, 0, 399, 0, 0, 415, 0, 522, 522, 522, 522, 522, 544, 522, 522, 522, 522, 522, 522, 522, 544,
  /* 37046 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1586, 544, 0, 0, 778, 0, 0, 0, 0, 0, 0,
  /* 37070 */ 0, 0, 778, 415, 415, 415, 415, 415, 0, 0, 0, 415, 522, 522, 522, 522, 2419, 522, 522, 415, 415, 415, 822,
  /* 37093 */ 415, 415, 0, 0, 778, 522, 522, 522, 522, 522, 522, 846, 522, 873, 522, 0, 938, 942, 544, 544, 544, 920,
  /* 37115 */ 544, 930, 544, 53503, 2, 6, 0, 1018, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2242, 0, 0, 1034, 0, 1036,
  /* 37143 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1046, 0, 0, 0, 0, 762, 0, 0, 0, 0, 771, 0, 0, 0, 0, 0, 779, 0, 1050, 0, 0, 0,
  /* 37174 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1063, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 403, 0, 298, 422, 422, 422, 422,
  /* 37203 */ 422, 442, 422, 442, 442, 442, 461, 442, 461, 461, 461, 461, 485, 461, 495, 495, 495, 495, 495, 495, 495,
  /* 37224 */ 495, 495, 502, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 0, 1082, 1083, 0, 0, 0, 0, 0, 0,
  /* 37247 */ 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 522, 415, 415, 415, 415, 1099, 415, 415, 415, 415,
  /* 37268 */ 415, 415, 415, 415, 415, 415, 415, 2138, 0, 2140, 0, 0, 0, 1146, 0, 0, 0, 0, 1149, 0, 0, 0, 0, 0, 0, 415,
  /* 37294 */ 415, 415, 415, 522, 522, 522, 522, 2282, 522, 522, 522, 415, 415, 1157, 415, 415, 415, 415, 415, 1163,
  /* 37314 */ 1046, 1164, 522, 522, 522, 522, 522, 522, 1215, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1814, 0,
  /* 37335 */ 0, 0, 0, 1552, 544, 544, 544, 1255, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2063, 544,
  /* 37357 */ 544, 544, 0, 1364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 415, 415, 415, 415, 415, 1446,
  /* 37383 */ 415, 415, 415, 1450, 0, 0, 0, 0, 0, 0, 1384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1709, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37412 */ 581632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 2277, 2278, 522, 522, 522, 522, 522, 522, 522,
  /* 37437 */ 522, 975370, 522, 522, 522, 522, 544, 544, 544, 1506, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 37457 */ 522, 522, 522, 522, 522, 1793, 544, 544, 1559, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 37478 */ 544, 544, 1281, 544, 544, 544, 544, 1575, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 37498 */ 2195, 544, 544, 544, 0, 0, 1654, 1655, 1656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2240, 0, 0, 0, 0, 1689, 0,
  /* 37525 */ 0, 0, 0, 0, 311296, 1695, 0, 0, 0, 0, 0, 0, 0, 0, 1889, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1702, 0, 1704, 1705, 0,
  /* 37554 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 0, 200704, 200704, 200704, 200704, 415, 1729, 1730, 415, 415, 415, 415,
  /* 37576 */ 415, 415, 415, 0, 0, 0, 0, 0, 1742, 0, 0, 0, 0, 311711, 1759, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 37600 */ 522, 522, 522, 1541, 522, 522, 522, 522, 522, 522, 0, 1552, 91341, 0, 1552, 544, 544, 544, 544, 899, 544,
  /* 37621 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2061, 544, 544, 544, 544, 544, 544, 522, 522, 1794, 522,
  /* 37642 */ 522, 522, 522, 522, 1800, 522, 522, 522, 522, 522, 522, 522, 522, 2172, 522, 522, 522, 522, 522, 522, 522,
  /* 37663 */ 522, 2428, 522, 522, 544, 544, 544, 544, 544, 544, 544, 544, 522, 522, 522, 544, 53503, 53503, 522, 544,
  /* 37683 */ 311818, 1878, 522, 522, 522, 522, 522, 311840, 1882, 544, 544, 544, 544, 544, 544, 544, 2473, 544, 0, 0,
  /* 37703 */ 0, 2477, 0, 0, 0, 0, 0, 1924, 0, 0, 0, 0, 1928, 0, 0, 0, 0, 0, 0, 0, 0, 1929, 0, 0, 1932, 0, 0, 0, 0, 0,
  /* 37733 */ 0, 0, 1971, 0, 0, 0, 0, 0, 0, 0, 1975, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 1724, 415, 415, 415,
  /* 37758 */ 415, 415, 0, 0, 0, 415, 522, 522, 522, 522, 522, 522, 2421, 415, 1979, 415, 415, 415, 522, 522, 522, 522,
  /* 37780 */ 522, 522, 522, 522, 1988, 522, 522, 522, 522, 1509, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 37801 */ 0, 1818, 0, 0, 1552, 0, 0, 544, 544, 544, 544, 544, 544, 544, 544, 2033, 544, 544, 544, 544, 544, 544,
  /* 37823 */ 903, 544, 544, 544, 544, 918, 920, 544, 544, 930, 2088, 0, 2090, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37849 */ 1894, 0, 0, 0, 0, 2104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1934, 0, 0, 522, 522, 2178, 522, 522, 522,
  /* 37877 */ 0, 0, 0, 0, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2035, 544, 2037, 544, 0, 2233, 0, 0, 0, 0,
  /* 37901 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53503, 53503, 0, 0, 2445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 0, 541,
  /* 37931 */ 541, 541, 541, 541, 564, 541, 541, 541, 541, 541, 541, 0, 2454, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 37952 */ 2462, 522, 522, 2464, 544, 544, 544, 544, 544, 544, 2059, 544, 544, 544, 544, 544, 544, 544, 544, 544, 0,
  /* 37973 */ 0, 0, 0, 0, 2507, 0, 0, 2510, 522, 2512, 522, 522, 522, 522, 522, 522, 522, 522, 544, 2522, 544, 544, 544,
  /* 37996 */ 544, 544, 544, 2192, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1580, 544, 544, 544, 544, 544, 544, 0,
  /* 38017 */ 522, 522, 522, 522, 2582, 522, 544, 544, 544, 544, 2588, 544, 2590, 0, 0, 0, 0, 763, 0, 0, 0, 605, 0, 0,
  /* 38041 */ 0, 0, 0, 0, 788, 2593, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544, 0, 2602, 2603, 0, 310,
  /* 38064 */ 311, 312, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2340, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0,
  /* 38095 */ 0, 0, 0, 0, 2149, 415, 415, 415, 415, 522, 522, 522, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38123 */ 1131, 311, 0, 0, 0, 328, 0, 345, 0, 310, 0, 0, 0, 0, 0, 355, 356, 0, 357, 0, 0, 0, 0, 357, 0, 0, 361, 0,
  /* 38151 */ 0, 0, 328, 365, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 404, 0, 331, 424, 424, 424, 424, 424, 444, 424,
  /* 38177 */ 444, 452, 444, 331, 444, 331, 331, 331, 331, 486, 331, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
  /* 38198 */ 486, 486, 486, 486, 486, 486, 0, 0, 0, 390, 40960, 390, 390, 0, 390, 390, 375, 390, 0, 390, 413, 428, 428,
  /* 38221 */ 428, 428, 428, 0, 428, 0, 310, 0, 464, 0, 464, 464, 464, 464, 489, 464, 489, 489, 489, 489, 489, 489, 489,
  /* 38244 */ 489, 413, 503, 413, 413, 413, 413, 503, 505, 413, 413, 489, 507, 489, 489, 489, 489, 489, 489, 515, 520,
  /* 38265 */ 536, 536, 536, 536, 536, 559, 536, 536, 536, 536, 536, 536, 559, 559, 559, 559, 559, 559, 559, 559, 577,
  /* 38286 */ 577, 536, 587, 53503, 53503, 273, 274, 0, 0, 0, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 200980, 200704,
  /* 38310 */ 200704, 0, 0, 0, 600, 0, 0, 0, 0, 0, 0, 600, 0, 0, 0, 0, 0, 0, 0, 1915, 0, 0, 0, 0, 0, 1920, 0, 0, 415,
  /* 38339 */ 415, 415, 415, 415, 747, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 1969, 0, 0, 726, 0, 0,
  /* 38363 */ 0, 772, 0, 0, 0, 0, 0, 0, 0, 726, 0, 772, 0, 0, 0, 0, 0, 0, 731, 415, 415, 747, 415, 415, 415, 415, 415,
  /* 38390 */ 415, 0, 0, 0, 522, 829, 522, 522, 522, 522, 522, 522, 1511, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 38412 */ 522, 1551, 1552, 91341, 1556, 1552, 544, 544, 886, 544, 544, 544, 544, 544, 909, 544, 544, 544, 544, 544,
  /* 38432 */ 544, 544, 544, 1596, 544, 544, 544, 544, 544, 544, 544, 0, 0, 1019, 0, 0, 0, 0, 1024, 0, 1026, 0, 0, 0, 0,
  /* 38457 */ 0, 0, 1397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1903, 0, 0, 0, 0, 1907, 0, 415, 415, 415, 415, 415, 415, 415, 415,
  /* 38484 */ 415, 1102, 415, 415, 415, 415, 415, 415, 415, 415, 0, 1164, 522, 522, 522, 1169, 522, 0, 0, 1121, 0, 0, 0,
  /* 38507 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1132, 522, 1178, 522, 522, 1182, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 38531 */ 522, 522, 522, 2166, 522, 522, 522, 522, 522, 1193, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 38552 */ 522, 522, 522, 2003, 522, 881, 91341, 1164, 884, 544, 544, 544, 1236, 544, 544, 1245, 544, 544, 1249, 544,
  /* 38572 */ 544, 544, 544, 544, 544, 2388, 544, 544, 544, 544, 2391, 544, 544, 544, 544, 522, 522, 0, 0, 0, 544, 544,
  /* 38594 */ 522, 945, 522, 522, 522, 522, 522, 1193, 522, 522, 522, 522, 544, 544, 544, 1260, 544, 544, 544, 544, 0,
  /* 38615 */ 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 405, 0, 0, 415, 0, 522, 542, 542, 542, 522, 545, 542, 542, 542, 542,
  /* 38641 */ 542, 542, 1379, 0, 0, 0, 1382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
  /* 38670 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 2357, 415, 0, 0, 0, 0, 0, 2359, 0, 0,
  /* 38698 */ 1073152, 0, 0, 0, 1667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1387, 0, 0, 0, 0, 0, 0, 415, 415, 415, 1731, 415, 415,
  /* 38725 */ 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 1471, 0, 0, 1472, 0, 0, 1475, 0, 0, 415, 1743, 0, 0, 0, 0, 0, 0, 0,
  /* 38753 */ 0, 0, 0, 0, 0, 0, 0, 0, 1362, 0, 966656, 1758, 0, 415, 415, 415, 415, 415, 415, 967071, 1764, 415, 415,
  /* 38776 */ 1073567, 1766, 522, 1806, 522, 1808, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 1552, 544, 544, 544,
  /* 38797 */ 544, 1854, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1862, 544, 544, 544, 544, 1256, 544, 544, 544,
  /* 38817 */ 544, 544, 544, 544, 544, 544, 544, 544, 2048, 544, 544, 544, 544, 0, 1318, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
  /* 38841 */ 0, 0, 0, 0, 0, 225280, 0, 0, 0, 0, 0, 692224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 544,
  /* 38870 */ 2054, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2206, 0, 0, 0, 0, 410015,
  /* 38892 */ 415, 415, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2378, 522, 522, 522, 544, 544, 544, 410122,
  /* 38912 */ 522, 522, 410144, 544, 544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1637, 0, 0, 962560, 0, 1052672, 0, 2337,
  /* 38937 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 573440, 0, 0, 0, 0, 0, 909312, 415, 909727, 415, 522, 522, 522, 522, 522,
  /* 38963 */ 522, 522, 522, 522, 522, 522, 879, 522, 522, 0, 544, 0, 522, 522, 522, 522, 522, 2458, 522, 2460, 522,
  /* 38984 */ 522, 522, 522, 544, 544, 544, 522, 522, 2211, 544, 544, 2214, 0, 0, 0, 2218, 0, 0, 0, 0, 0, 106496, 0,
  /* 39007 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
  /* 39020 */ 106496, 106496, 106496, 544, 544, 2468, 544, 2470, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 1940, 1941, 0,
  /* 39042 */ 0, 0, 0, 0, 0, 0, 726, 0, 0, 0, 0, 772, 0, 0, 0, 0, 0, 2511, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 39069 */ 2521, 544, 544, 544, 522, 544, 522, 522, 522, 522, 544, 544, 544, 544, 0, 0, 0, 1634, 0, 963, 0, 0, 0,
  /* 39092 */ 1636, 0, 967, 0, 0, 0, 0, 358, 0, 0, 0, 0, 358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1423, 0, 0, 1426, 0, 415, 415,
  /* 39121 */ 447, 447, 447, 447, 490, 447, 447, 447, 499, 508, 499, 499, 499, 499, 499, 499, 516, 521, 537, 537, 537,
  /* 39142 */ 537, 537, 560, 537, 537, 537, 537, 537, 537, 560, 560, 560, 560, 560, 560, 560, 560, 578, 578, 537, 588,
  /* 39163 */ 53503, 53503, 273, 274, 0, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 676,
  /* 39192 */ 0, 0, 0, 0, 0, 0, 0, 0, 686, 0, 0, 0, 0, 0, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515, 2163515,
  /* 39213 */ 2163515, 2163515, 2163515, 2163571, 2163571, 2163571, 2163571, 0, 0, 0, 601, 686, 0, 695, 696, 601, 0, 0,
  /* 39231 */ 0, 0, 0, 0, 0, 2093, 0, 0, 0, 0, 0, 0, 0, 0, 983, 0, 0, 0, 0, 0, 988, 0, 415, 415, 415, 415, 744, 415,
  /* 39259 */ 749, 415, 415, 415, 415, 756, 415, 415, 415, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 406, 0, 0, 415, 415,
  /* 39285 */ 415, 415, 1721, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 1967, 0, 0, 0, 0, 0, 0, 0, 618, 0, 792,
  /* 39310 */ 0, 0, 0, 0, 792, 0, 0, 0, 0, 0, 0, 2613248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 333, 333, 362, 0, 0, 0, 0, 0,
  /* 39340 */ 0, 601, 0, 0, 729, 0, 729, 0, 729, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 2270, 0,
  /* 39365 */ 415, 415, 756, 415, 415, 415, 774, 826, 0, 522, 830, 522, 522, 522, 522, 847, 853, 855, 522, 522, 522,
  /* 39386 */ 522, 522, 869, 522, 522, 522, 522, 522, 522, 0, 544, 544, 544, 544, 1268, 544, 544, 544, 544, 544, 544,
  /* 39407 */ 1278, 544, 544, 544, 544, 522, 522, 0, 0, 688, 544, 544, 522, 522, 522, 522, 522, 522, 0, 1819, 0, 1825,
  /* 39429 */ 544, 544, 544, 544, 544, 544, 544, 1578, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2474, 0, 2476, 0, 0,
  /* 39451 */ 0, 0, 544, 887, 544, 544, 544, 544, 904, 910, 912, 544, 544, 544, 544, 544, 926, 544, 544, 544, 544, 1289,
  /* 39473 */ 544, 544, 544, 544, 522, 522, 0, 0, 544, 544, 522, 544, 2614, 2615, 522, 544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39498 */ 1087, 415, 415, 415, 415, 415, 415, 869, 522, 522, 0, 830, 887, 544, 544, 910, 544, 926, 544, 544, 53503,
  /* 39519 */ 2, 6, 0, 0, 991, 0, 0, 994, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250291, 250291, 250291, 250291, 0, 0, 0, 0,
  /* 39545 */ 1051, 0, 0, 0, 0, 0, 0, 0, 1060, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946, 0, 1065, 0, 0, 0, 0, 0,
  /* 39576 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1393, 1081, 0, 0, 0, 0, 0, 972, 0, 0, 415, 415, 415, 415, 415, 415, 415,
  /* 39603 */ 415, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1103, 415, 1104, 415, 415, 415, 415,
  /* 39626 */ 415, 0, 0, 0, 415, 2418, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 544, 544, 2183, 544, 544, 544, 415,
  /* 39649 */ 1108, 1109, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 2109, 0, 0, 0, 0, 0, 0, 0, 0, 1073, 0, 0,
  /* 39676 */ 0, 1077, 0, 0, 0, 0, 0, 1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2086, 0, 0, 1133, 1065, 0, 1013,
  /* 39704 */ 1136, 0, 0, 0, 765952, 0, 0, 0, 994, 0, 1144, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 217088,
  /* 39730 */ 0, 0, 0, 0, 1021, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1076, 0, 0, 0, 0, 1155, 415, 415, 415, 415, 415, 415,
  /* 39758 */ 1162, 415, 0, 1164, 522, 522, 1168, 522, 522, 522, 522, 1542, 522, 522, 1545, 522, 522, 0, 1552, 91341, 0,
  /* 39779 */ 1552, 544, 522, 522, 1194, 522, 522, 1197, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1208, 1209, 522,
  /* 39799 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1225, 522, 522, 522, 1769, 522, 1771, 522,
  /* 39819 */ 522, 522, 1774, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 615, 0, 0, 0, 0, 0, 881,
  /* 39845 */ 91341, 1164, 884, 544, 544, 1235, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1597, 544, 544, 544, 544,
  /* 39865 */ 544, 544, 522, 522, 1301, 522, 522, 522, 522, 1306, 544, 544, 1309, 544, 544, 544, 544, 0, 0, 0, 0, 40960,
  /* 39887 */ 0, 0, 0, 0, 0, 0, 277, 0, 0, 200704, 0, 0, 0, 0, 1008, 0, 325, 325, 0, 0, 0, 1013, 1014, 0, 0, 0, 0, 0,
  /* 39915 */ 2441216, 0, 0, 0, 2158592, 2441216, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 0,
  /* 39930 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 39941 */ 2162688, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 1318, 0, 0, 0,
  /* 39958 */ 1324, 0, 0, 0, 0, 0, 0, 0, 1332, 1333, 0, 724992, 1380, 0, 0, 0, 0, 0, 0, 0, 1388, 0, 0, 0, 0, 0, 0,
  /* 39985 */ 2646016, 0, 2781184, 0, 0, 0, 0, 0, 0, 3125248, 1429, 415, 415, 415, 415, 415, 415, 1435, 415, 415, 415,
  /* 40006 */ 415, 415, 1439, 415, 415, 415, 415, 415, 0, 415, 0, 0, 0, 371, 384, 371, 371, 371, 371, 371, 371, 371,
  /* 40028 */ 371, 371, 371, 371, 371, 371, 371, 371, 371, 1455, 0, 0, 0, 0, 0, 0, 0, 1461, 0, 0, 1464, 0, 0, 0, 0, 0,
  /* 40054 */ 1418, 0, 1420, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 1762, 415, 415, 415, 415, 415, 415, 522, 1461, 0, 0,
  /* 40078 */ 0, 0, 0, 0, 0, 0, 0, 1473, 0, 0, 1476, 1451, 415, 415, 415, 415, 415, 415, 0, 0, 0, 522, 522, 522, 522,
  /* 40103 */ 838, 522, 522, 522, 522, 861, 863, 522, 522, 873, 522, 522, 522, 522, 522, 0, 544, 415, 1479, 415, 415,
  /* 40124 */ 415, 1482, 415, 415, 415, 415, 415, 1164, 522, 522, 522, 522, 522, 2375, 522, 522, 522, 522, 522, 522,
  /* 40144 */ 522, 544, 544, 544, 1492, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1505, 522, 522,
  /* 40165 */ 522, 1783, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2175, 522, 522, 544, 544, 544,
  /* 40186 */ 1561, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2322, 544, 544, 544, 544, 1574, 544,
  /* 40206 */ 544, 544, 544, 544, 544, 544, 544, 544, 1583, 544, 544, 544, 544, 544, 544, 1270, 544, 544, 544, 544, 544,
  /* 40227 */ 544, 544, 544, 544, 1294, 522, 0, 0, 1296, 544, 522, 1605, 1606, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 40248 */ 544, 544, 544, 522, 522, 544, 544, 0, 0, 2401, 0, 0, 0, 2404, 0, 0, 1641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40276 */ 0, 0, 2112, 0, 0, 0, 0, 1691, 0, 0, 0, 0, 0, 0, 0, 577536, 0, 0, 1697, 0, 0, 0, 0, 766, 0, 0, 0, 0, 0, 0,
  /* 40306 */ 0, 415, 415, 415, 415, 1956, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1733, 1734, 415, 1736,
  /* 40327 */ 415, 0, 0, 0, 0, 0, 0, 1658, 0, 1660, 0, 0, 0, 0, 0, 0, 0, 1340, 651264, 0, 0, 0, 0, 0, 0, 0, 1354, 0, 0,
  /* 40356 */ 0, 0, 0, 0, 0, 0, 2239, 0, 0, 0, 0, 0, 0, 0, 0, 1744, 0, 1746, 0, 1747, 0, 0, 0, 0, 0, 0, 0, 0, 1755, 0,
  /* 40386 */ 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 278, 0, 407, 409, 416, 416, 416, 416, 416, 437, 416, 437, 437, 437, 456,
  /* 40411 */ 437, 456, 456, 456, 456, 481, 493, 481, 481, 481, 481, 481, 481, 481, 481, 481, 500, 481, 481, 481, 481,
  /* 40432 */ 481, 481, 481, 481, 481, 481, 481, 522, 522, 1807, 522, 522, 522, 1811, 522, 522, 522, 522, 0, 0, 1819, 0,
  /* 40454 */ 1552, 0, 0, 1825, 0, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1834, 544, 544, 544, 544, 544, 544,
  /* 40475 */ 2472, 544, 544, 0, 0, 0, 0, 0, 0, 0, 1888, 0, 0, 0, 0, 0, 0, 0, 0, 2344, 0, 0, 0, 0, 2348, 0, 0, 1837,
  /* 40503 */ 544, 544, 544, 544, 544, 544, 544, 544, 1845, 544, 544, 544, 544, 544, 544, 544, 1611, 544, 544, 1614,
  /* 40523 */ 544, 544, 522, 522, 544, 544, 544, 544, 1865, 544, 544, 544, 1868, 544, 544, 544, 1872, 544, 544, 544,
  /* 40543 */ 544, 544, 544, 1564, 544, 544, 544, 544, 544, 544, 544, 544, 1572, 1896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40568 */ 0, 0, 0, 0, 1467, 415, 415, 415, 415, 415, 1982, 522, 522, 522, 522, 1986, 522, 522, 522, 522, 522, 522,
  /* 40590 */ 1528, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1550, 1552, 91341, 1555, 1552, 544, 522, 522,
  /* 40609 */ 2007, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 0, 0,
  /* 40630 */ 2027, 544, 544, 544, 544, 2031, 544, 544, 544, 544, 544, 544, 544, 544, 1844, 544, 544, 544, 544, 544,
  /* 40650 */ 544, 544, 544, 544, 2040, 544, 544, 544, 2043, 2044, 544, 544, 544, 544, 544, 544, 544, 2052, 0, 413696,
  /* 40670 */ 2078, 0, 0, 2081, 2082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1682, 0, 0, 0, 0, 0, 0, 0, 2115, 0, 0, 0, 0, 0, 0,
  /* 40699 */ 2122, 0, 0, 0, 2126, 0, 0, 0, 0, 0, 2887680, 0, 0, 0, 0, 3026944, 0, 0, 0, 0, 0, 0, 1939, 0, 0, 1942, 0,
  /* 40726 */ 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 415, 415, 415, 2133, 415, 415, 415, 415, 415, 415,
  /* 40751 */ 415, 415, 0, 0, 0, 0, 0, 1459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111024, 111024, 111024, 111024, 0, 0, 0, 0,
  /* 40777 */ 0, 0, 1064960, 0, 0, 0, 415, 415, 415, 415, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1989, 522,
  /* 40799 */ 522, 522, 2158, 522, 2160, 522, 522, 522, 2163, 522, 522, 522, 522, 522, 522, 522, 870, 522, 522, 522,
  /* 40819 */ 522, 522, 522, 0, 544, 544, 2188, 544, 544, 544, 2191, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 40840 */ 1613, 544, 544, 544, 522, 522, 544, 544, 2208, 544, 522, 522, 522, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0,
  /* 40863 */ 2225, 0, 0, 0, 0, 0, 0, 0, 0, 2113536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40894 */ 0, 0, 2127, 2128, 0, 522, 2285, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 40915 */ 1205, 522, 2298, 522, 522, 522, 544, 544, 2304, 544, 544, 544, 544, 544, 544, 2309, 544, 544, 544, 544,
  /* 40935 */ 544, 544, 2531, 2532, 0, 0, 0, 0, 0, 0, 2539, 522, 522, 2371, 522, 522, 522, 522, 2376, 522, 522, 522,
  /* 40957 */ 522, 522, 522, 544, 544, 544, 522, 544, 522, 522, 522, 2070, 544, 544, 544, 2073, 0, 0, 0, 0, 0, 634880,
  /* 40979 */ 2447, 0, 0, 2450, 2451, 0, 0, 0, 0, 415, 415, 415, 1761, 415, 415, 415, 415, 415, 415, 415, 522, 0, 2405,
  /* 41002 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2414, 0, 0, 0, 0, 770, 0, 0, 0, 0, 0, 0, 0, 0, 0, 770, 0, 0, 0, 0, 0, 0,
  /* 41035 */ 415, 415, 415, 745, 544, 2556, 0, 0, 0, 0, 2558, 0, 0, 2561, 522, 522, 522, 522, 522, 522, 0, 0, 0, 2024,
  /* 41059 */ 0, 1550, 0, 0, 0, 2026, 2566, 2567, 522, 544, 544, 544, 544, 544, 544, 2572, 2573, 544, 0, 0, 2575, 2576,
  /* 41081 */ 0, 522, 522, 522, 522, 544, 544, 544, 544, 0, 0, 522, 2608, 544, 2609, 522, 522, 522, 1795, 522, 522, 522,
  /* 41103 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1803, 522, 522, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 318,
  /* 41128 */ 0, 0, 45056, 49152, 0, 318, 0, 0, 40960, 0, 0, 0, 0, 0, 398, 0, 0, 0, 0, 430, 430, 430, 430, 430, 448,
  /* 41153 */ 430, 448, 448, 455, 0, 455, 0, 319, 319, 319, 477, 319, 319, 319, 491, 319, 491, 491, 491, 491, 491, 491,
  /* 41175 */ 448, 448, 448, 491, 448, 448, 455, 448, 491, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 517,
  /* 41196 */ 448, 538, 538, 538, 538, 538, 561, 538, 538, 538, 538, 538, 538, 561, 561, 561, 561, 561, 561, 561, 561,
  /* 41217 */ 538, 538, 538, 561, 53503, 53503, 0, 0, 0, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1089536, 0, 0, 0, 0,
  /* 41244 */ 1174, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1805, 881, 91341, 1164,
  /* 41264 */ 884, 544, 544, 544, 544, 544, 1241, 544, 544, 544, 544, 544, 544, 544, 1843, 544, 544, 1846, 544, 544,
  /* 41284 */ 544, 544, 544, 522, 1174, 522, 522, 522, 522, 522, 544, 544, 1241, 544, 544, 544, 544, 544, 0, 0, 0, 0,
  /* 41306 */ 40960, 0, 0, 0, 0, 0, 316, 0, 0, 0, 0, 429, 429, 429, 429, 429, 447, 429, 447, 447, 447, 0, 447, 0, 0, 0,
  /* 41332 */ 0, 0, 1406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2228, 0, 0, 0, 0, 0, 0, 0, 0, 1319, 0, 0, 0, 1325, 0, 0, 0, 0,
  /* 41363 */ 0, 0, 0, 0, 1040384, 0, 0, 0, 0, 0, 415, 415, 0, 1349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168,
  /* 41392 */ 135168, 415, 415, 415, 1443, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 1706, 0, 0, 0, 0, 0, 0, 1713,
  /* 41417 */ 0, 0, 1588, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1598, 544, 544, 544, 544, 544, 544, 1257, 544,
  /* 41438 */ 544, 544, 544, 544, 544, 544, 544, 544, 522, 522, 1068, 0, 544, 544, 522, 0, 0, 0, 1703, 0, 0, 0, 0, 0, 0,
  /* 41463 */ 0, 0, 0, 0, 0, 0, 1085440, 1085440, 0, 0, 0, 0, 0, 0, 0, 1826, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 41487 */ 544, 544, 544, 1836, 2077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1652, 2422, 522, 522, 522, 522,
  /* 41513 */ 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544, 544, 544, 544, 0, 2574, 0, 0, 544, 544, 2434,
  /* 41535 */ 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 522, 544, 0, 0, 0, 0, 40960, 0, 0, 0, 295, 294, 0, 0,
  /* 41559 */ 401, 294, 412, 419, 419, 419, 419, 419, 440, 419, 450, 440, 440, 459, 440, 459, 459, 459, 474, 2555, 544,
  /* 41580 */ 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 0, 522, 522,
  /* 41605 */ 522, 522, 2597, 522, 544, 544, 544, 544, 2601, 544, 0, 0, 0, 0, 297, 298, 299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41631 */ 969, 0, 0, 971, 0, 0, 0, 0, 0, 369, 0, 0, 0, 0, 0, 0, 0, 0, 369, 0, 0, 45056, 49152, 0, 369, 0, 0, 40960,
  /* 41659 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 2356, 415, 415, 0, 0, 2358, 0, 471040, 0, 539, 539,
  /* 41685 */ 562, 562, 562, 562, 562, 562, 562, 562, 539, 539, 539, 562, 53503, 53503, 415, 415, 415, 415, 415, 415, 0,
  /* 41706 */ 0, 0, 522, 522, 522, 522, 841, 522, 522, 522, 522, 1770, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 41728 */ 522, 522, 880, 522, 0, 544, 522, 522, 1179, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 41749 */ 522, 1190, 522, 522, 522, 522, 1195, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 41769 */ 1203, 522, 522, 881, 91341, 1164, 884, 544, 544, 544, 544, 544, 544, 544, 1246, 544, 544, 544, 544, 544,
  /* 41789 */ 544, 1594, 1595, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2503, 0, 2504, 0, 0, 0, 0, 522, 522, 1195,
  /* 41811 */ 522, 522, 522, 522, 544, 544, 544, 1262, 544, 544, 544, 544, 0, 0, 0, 0, 40960, 0, 0, 302, 0, 0, 397, 0,
  /* 41835 */ 0, 0, 0, 425, 425, 425, 425, 425, 445, 425, 451, 451, 451, 451, 445, 471, 471, 471, 471, 451, 471, 451,
  /* 41857 */ 451, 451, 451, 451, 451, 451, 451, 451, 451, 2102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1663, 0,
  /* 41884 */ 0, 0, 2235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102207, 0, 1102207, 1102207, 1102207, 1102207, 0, 0,
  /* 41907 */ 2406, 2407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2719744, 0, 0, 0, 0, 0, 0, 0, 0, 391, 40960, 391, 391, 0,
  /* 41935 */ 391, 391, 321, 391, 0, 391, 414, 431, 431, 431, 431, 431, 0, 431, 0, 0, 0, 465, 0, 465, 472, 472, 472,
  /* 41958 */ 478, 479, 472, 492, 472, 492, 492, 492, 492, 492, 492, 492, 492, 414, 492, 414, 414, 414, 414, 492, 414,
  /* 41979 */ 414, 414, 492, 414, 492, 492, 492, 492, 492, 492, 518, 492, 540, 540, 540, 540, 540, 563, 540, 540, 540,
  /* 42000 */ 540, 540, 540, 563, 563, 563, 563, 563, 563, 563, 563, 579, 579, 540, 589, 53503, 53503, 870, 522, 522, 0,
  /* 42021 */ 522, 544, 544, 544, 544, 544, 927, 544, 544, 53503, 2, 6, 544, 544, 544, 2041, 544, 544, 544, 544, 544,
  /* 42042 */ 544, 544, 544, 544, 544, 544, 544, 2046, 544, 544, 544, 544, 544, 544, 541, 541, 564, 564, 564, 564, 564,
  /* 42063 */ 564, 564, 564, 541, 541, 541, 564, 53503, 53503, 717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415,
  /* 42088 */ 1091, 415, 415, 740, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 1118, 0, 0, 0,
  /* 42111 */ 415, 415, 415, 415, 415, 415, 0, 0, 0, 522, 522, 522, 522, 842, 522, 522, 522, 522, 1784, 522, 522, 522,
  /* 42133 */ 522, 522, 522, 522, 522, 522, 522, 522, 1189, 522, 522, 522, 522, 1315, 0, 0, 0, 1321, 0, 0, 0, 0, 0, 0,
  /* 42157 */ 0, 0, 0, 0, 0, 3158016, 0, 0, 0, 0, 0, 1822, 0, 0, 0, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 42182 */ 544, 544, 2194, 544, 544, 544, 544, 544, 544, 273, 274, 0, 0, 0, 0, 0, 0, 0, 604, 0, 0, 0, 0, 0, 0, 1900,
  /* 42208 */ 0, 1902, 0, 0, 1904, 0, 1906, 0, 0, 415, 415, 415, 415, 415, 415, 0, 0, 694, 522, 522, 522, 522, 522, 522,
  /* 42232 */ 522, 1198, 522, 522, 1200, 522, 1202, 522, 522, 522, 522, 874, 522, 0, 522, 544, 544, 544, 544, 544, 544,
  /* 42253 */ 931, 544, 53503, 2, 6, 544, 1285, 544, 544, 544, 544, 544, 544, 544, 522, 522, 0, 0, 544, 544, 522, 522,
  /* 42275 */ 522, 1994, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1518, 522, 522, 1334, 0, 0, 0,
  /* 42297 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1688, 415, 1441, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0,
  /* 42324 */ 0, 0, 1927, 0, 0, 0, 0, 0, 0, 0, 0, 1935, 1522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 42348 */ 522, 522, 522, 522, 2018, 544, 544, 544, 1591, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  /* 42369 */ 2389, 544, 544, 544, 544, 2394, 544, 1780, 1781, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 42389 */ 522, 522, 522, 1792, 522, 1876, 1877, 522, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544,
  /* 42409 */ 544, 544, 2307, 544, 544, 544, 0, 1910, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 0, 1978, 415,
  /* 42435 */ 415, 415, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1222, 522, 522, 522, 522, 544, 544,
  /* 42456 */ 2067, 522, 544, 522, 522, 522, 522, 544, 544, 544, 544, 0, 0, 0, 0, 325, 325, 325, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42482 */ 0, 291, 291, 0, 335, 0, 0, 0, 1085440, 325, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440,
  /* 42507 */ 0, 1085440, 0, 0, 0, 1085440, 1085820, 1085820, 0, 0, 1085440, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0,
  /* 42528 */ 0, 0, 0, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085820, 0, 0, 0, 0, 0,
  /* 42559 */ 0, 0, 0, 0, 0, 0, 2123, 0, 0, 0, 0, 0, 0, 1085440, 0, 1085440, 0, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42587 */ 0, 0, 0, 0, 802816, 0, 0, 1085440, 1085440, 1085440, 0, 0, 0, 0, 0, 0, 1085440, 1085440, 0, 0, 0, 0, 0, 0,
  /* 42611 */ 0, 0, 0, 0, 0, 2227, 0, 0, 0, 0, 0, 0, 2, 4263936, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 307200, 0, 0,
  /* 42638 */ 2105344, 2163572, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 42649 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3174400, 881, 0, 884, 0, 2162688, 2162688, 2162688,
  /* 42663 */ 2162688, 2162688, 2162688, 3174400, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 42677 */ 245760, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2457600, 0, 0, 0, 0, 0, 0, 0,
  /* 42695 */ 2895872, 0, 0, 0, 0, 0, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 42710 */ 2162688, 2162688, 2162688, 2596864, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2707456,
  /* 42721 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2760704, 2162688, 2162688, 2162688, 1093632, 0, 1093632, 0,
  /* 42734 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2341, 0, 0, 0, 0, 0, 0, 1094081, 0, 1094081, 1094081, 1094081,
  /* 42758 */ 1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 1094081,
  /* 42769 */ 1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2252, 0, 0, 0,
  /* 42791 */ 0, 0, 0, 1097728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1699, 0, 1101824, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42821 */ 0, 0, 0, 0, 0, 0, 1105920, 0, 1102207, 0, 0, 0, 381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102207, 0, 0, 0, 0,
  /* 42848 */ 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 1102207, 1102207, 1102207, 1102207,
  /* 42871 */ 1102207, 1102207, 1102207, 1102207, 1102207, 1102207, 1102207, 1102207, 1102207, 1102207, 1102207,
  /* 42882 */ 1102207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2345, 2346, 0, 0, 0, 0, 0, 1228, 0, 0, 1231, 2162688,
  /* 42907 */ 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 42918 */ 3080192, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2801664,
  /* 42929 */ 2162688
];

XQueryParser.EXPECTED =
[
  /*    0 */ 736, 739, 741, 739, 745, 749, 753, 757, 761, 1534, 775, 1105, 1250, 2129, 1534, 1272, 780, 784, 788, 1534,
  /*   20 */ 795, 1788, 985, 800, 1534, 1553, 871, 829, 877, 806, 810, 1534, 2131, 815, 819, 1761, 827, 871, 833, 877,
  /*   40 */ 839, 843, 1534, 2348, 1199, 821, 849, 871, 855, 877, 858, 862, 1534, 1552, 802, 870, 851, 876, 906, 1534,
  /*   60 */ 1534, 867, 871, 875, 835, 1534, 986, 881, 904, 888, 2220, 893, 913, 823, 884, 1917, 897, 901, 910, 917,
  /*   80 */ 921, 925, 929, 932, 937, 933, 941, 945, 949, 953, 957, 776, 963, 2136, 1534, 968, 1534, 1534, 1534, 975,
  /*  100 */ 1936, 1534, 1534, 1746, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 979, 1534, 1534, 1534, 984, 1534, 1534,
  /*  118 */ 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1580, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 2420, 1534,
  /*  136 */ 1534, 1534, 1534, 1534, 1534, 1534, 990, 1534, 1534, 1534, 1534, 1580, 1534, 1534, 1534, 2420, 1534, 1534,
  /*  154 */ 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1168, 1782, 1534, 996, 1205, 1000, 1004, 1008, 1012,
  /*  172 */ 1016, 1534, 1505, 1022, 1026, 1032, 1428, 1036, 2062, 1040, 1044, 1534, 1534, 1910, 1050, 1056, 2142, 2201,
  /*  190 */ 1534, 1062, 1611, 1067, 1534, 1534, 1909, 1191, 1131, 1071, 1534, 1418, 1075, 889, 1080, 1534, 1534, 1084,
  /*  208 */ 1088, 1028, 1092, 1534, 1097, 796, 1102, 1534, 1237, 1109, 2292, 1534, 1052, 1534, 1116, 1937, 1263, 1468,
  /*  226 */ 964, 1534, 1122, 1303, 1628, 1058, 1239, 1814, 1128, 1468, 1342, 1704, 1701, 1340, 1138, 1148, 1145, 1152,
  /*  244 */ 1417, 1534, 2404, 1534, 2198, 1669, 1156, 1160, 1163, 1167, 2218, 2203, 971, 1172, 1176, 1180, 1184, 1188,
  /*  262 */ 1197, 1203, 1209, 2203, 971, 1215, 1219, 1224, 1228, 1243, 2465, 1249, 1470, 2216, 1500, 970, 1378, 1254,
  /*  280 */ 1260, 1267, 1271, 2482, 1276, 1535, 1281, 2381, 959, 1285, 1536, 2407, 1289, 1798, 1294, 811, 1300, 1595,
  /*  298 */ 1307, 1311, 1315, 1534, 1425, 980, 1319, 1597, 1323, 1327, 1523, 1098, 1337, 1346, 1350, 1666, 1357, 2065,
  /*  316 */ 1361, 1362, 1366, 1382, 1398, 1402, 1406, 1410, 1353, 1414, 1422, 1534, 2059, 1133, 1432, 1444, 1448, 1452,
  /*  334 */ 1456, 1534, 1460, 1465, 1474, 2298, 1478, 1482, 1491, 1438, 1495, 1499, 1504, 1695, 1509, 1513, 1517, 1440,
  /*  352 */ 1521, 1527, 2278, 1533, 1906, 1118, 1141, 2265, 1512, 1540, 1112, 1277, 1544, 1798, 1550, 1947, 1934, 1256,
  /*  370 */ 2445, 1557, 1698, 2373, 1561, 1534, 1566, 1534, 2172, 1572, 1584, 1485, 1333, 1534, 2439, 1534, 1588, 1592,
  /*  388 */ 1601, 1609, 2512, 1808, 1615, 1621, 2012, 2510, 2295, 1625, 2519, 2520, 1632, 1903, 1636, 767, 791, 1646,
  /*  406 */ 1650, 1654, 1658, 1534, 1932, 1575, 1663, 1673, 1677, 1681, 1685, 1659, 1692, 1766, 1296, 1708, 1642, 1712,
  /*  424 */ 1716, 1720, 1735, 1562, 1724, 1766, 1771, 1826, 1728, 1732, 1745, 1750, 1798, 1756, 1760, 1391, 1765, 1770,
  /*  442 */ 1825, 1775, 1779, 2037, 1792, 1534, 1797, 1802, 2032, 1865, 2002, 2477, 1211, 1562, 1807, 1534, 1812, 1534,
  /*  460 */ 1818, 1822, 2380, 1862, 1568, 1534, 1435, 1220, 1375, 1830, 1134, 1837, 1529, 845, 1842, 1534, 2475, 1846,
  /*  478 */ 1851, 1534, 1855, 1193, 1980, 2258, 2231, 1859, 2255, 2233, 1869, 1534, 1534, 1534, 2000, 1875, 1879, 1883,
  /*  496 */ 1887, 1891, 1895, 2460, 1487, 1900, 1617, 2092, 1896, 1914, 1921, 1925, 1388, 2425, 1929, 2052, 1838, 1955,
  /*  514 */ 1847, 1941, 1534, 1945, 1545, 1951, 1954, 2500, 2051, 1579, 1959, 1546, 1963, 1076, 1969, 1970, 1974, 1978,
  /*  532 */ 1741, 1984, 1245, 2093, 1738, 1989, 1988, 1534, 1993, 1997, 2006, 2022, 2214, 2010, 1372, 1534, 2289, 2016,
  /*  550 */ 2020, 2026, 2030, 2036, 1688, 2041, 2045, 2056, 2069, 2073, 2077, 2081, 2085, 2089, 2097, 2102, 2106, 2110,
  /*  568 */ 2114, 2118, 2122, 2126, 2135, 1534, 2140, 2191, 2146, 2150, 2154, 2158, 1534, 992, 2162, 2169, 2176, 2311,
  /*  586 */ 2180, 2327, 2184, 2188, 2195, 1063, 2207, 2211, 2224, 1965, 2343, 2248, 1534, 2228, 771, 2237, 1534, 2241,
  /*  604 */ 2165, 2455, 1871, 2245, 2252, 2273, 2262, 1798, 2269, 2272, 2432, 2320, 2277, 2282, 2286, 1803, 2302, 1534,
  /*  622 */ 2315, 863, 2319, 2324, 2331, 2335, 2452, 1534, 2472, 1018, 2340, 2489, 1562, 2347, 2305, 2352, 2356, 1578,
  /*  640 */ 2360, 2364, 2368, 2492, 2493, 2372, 1394, 1793, 2048, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 2377, 2385,
  /*  658 */ 2389, 2393, 2397, 2401, 1534, 1461, 1534, 1752, 2442, 2336, 1234, 2411, 1603, 2415, 2419, 1290, 1534, 1534,
  /*  676 */ 1833, 1534, 1231, 1369, 1534, 2424, 991, 2429, 1534, 2436, 1534, 1832, 1534, 2449, 2459, 1534, 2464, 1534,
  /*  694 */ 1605, 1534, 2469, 1534, 770, 1046, 2481, 1534, 2486, 1534, 2497, 1124, 1534, 1833, 764, 1534, 1385, 1534,
  /*  712 */ 2308, 2507, 1329, 1785, 1093, 1534, 2308, 2504, 1639, 1534, 1534, 2516, 770, 1534, 1534, 1331, 1534, 1331,
  /*  730 */ 1534, 1534, 1534, 1534, 1534, 2100, 2524, 2642, 2531, 2536, 2536, 2536, 2536, 4747, 2536, 2548, 2536, 2535,
  /*  748 */ 2541, 2545, 2537, 2552, 2559, 2561, 2562, 2556, 2566, 2570, 2574, 2578, 2581, 2585, 2846, 2759, 4012, 2618,
  /*  766 */ 4012, 4012, 2619, 3824, 3823, 4012, 4012, 4012, 4852, 4123, 4012, 4012, 4012, 2840, 3239, 2603, 2604, 2648,
  /*  784 */ 2613, 2614, 2654, 2624, 3375, 2629, 4495, 4012, 2620, 4395, 4394, 4122, 4012, 4012, 4012, 2861, 3665, 3665,
  /*  802 */ 3665, 2709, 4012, 3662, 2614, 2658, 2605, 2609, 2681, 4012, 4012, 4012, 3020, 2673, 4012, 4012, 3662, 3665,
  /*  820 */ 3665, 3665, 3241, 4012, 4012, 2707, 3669, 3665, 3668, 2604, 2604, 2652, 2614, 2604, 2691, 2614, 2614, 2685,
  /*  838 */ 3379, 2614, 2725, 2625, 2608, 2680, 2766, 4012, 4012, 2760, 4012, 3663, 3666, 2604, 2604, 3670, 2700, 2604,
  /*  856 */ 2698, 2702, 2614, 2614, 2721, 2608, 2758, 4012, 4012, 4012, 3048, 3665, 3240, 4012, 3667, 2604, 2604, 2604,
  /*  874 */ 2604, 3670, 2703, 2614, 2614, 2614, 2614, 3663, 2604, 2604, 2604, 2607, 2614, 2714, 2739, 4012, 4012, 4012,
  /*  892 */ 3069, 2695, 2604, 2604, 2606, 2614, 3379, 4099, 2605, 2614, 3379, 3372, 2723, 2614, 2614, 2614, 2688, 3377,
  /*  910 */ 2615, 3041, 2604, 2614, 2614, 2725, 3379, 2617, 3372, 2607, 2616, 2718, 2729, 2718, 2729, 2738, 2664, 2661,
  /*  928 */ 3080, 4092, 4526, 2743, 2681, 2681, 2681, 2681, 2774, 2681, 2747, 2751, 2755, 2764, 2772, 2778, 2782, 2789,
  /*  946 */ 2793, 2797, 2800, 2803, 2807, 2810, 2814, 2785, 2818, 2822, 4303, 3381, 2834, 4012, 4012, 2955, 4012, 2853,
  /*  964 */ 4012, 4012, 4012, 3137, 4155, 2859, 4012, 4012, 2986, 4012, 4012, 4012, 4966, 4012, 3549, 4354, 4012, 4012,
  /*  982 */ 4012, 3149, 4533, 4012, 4012, 4012, 3238, 3241, 3532, 4012, 4012, 4012, 3242, 3246, 3288, 3256, 4550, 2872,
  /* 1000 */ 2890, 4462, 2900, 2909, 2912, 2916, 2919, 2923, 2926, 2928, 2932, 2934, 2938, 2942, 3852, 2949, 3026, 2867,
  /* 1018 */ 4012, 4012, 3050, 4021, 2962, 2966, 4012, 2855, 4954, 2973, 4012, 4012, 3084, 3496, 2992, 4012, 2998, 4651,
  /* 1036 */ 3005, 4235, 4012, 3011, 4658, 3016, 4268, 3823, 3025, 2866, 4012, 4012, 3103, 4012, 3030, 3040, 4012, 4012,
  /* 1054 */ 3109, 4012, 3458, 3079, 4012, 4012, 3136, 4012, 4130, 4012, 4012, 4012, 3245, 2958, 4012, 3308, 2867, 4012,
  /* 1072 */ 4947, 4012, 3859, 3061, 4012, 4012, 4012, 3259, 2984, 4518, 4012, 4821, 3819, 4012, 4012, 4953, 3078, 4012,
  /* 1090 */ 4012, 3079, 3090, 4012, 4012, 4012, 3357, 3096, 4012, 4012, 4012, 3484, 3085, 4518, 4090, 4012, 2868, 4012,
  /* 1108 */ 2589, 3132, 4012, 4439, 4012, 2874, 3783, 4023, 3115, 4832, 4012, 4012, 3315, 4012, 3532, 3851, 4012, 4012,
  /* 1126 */ 3564, 4012, 3125, 3177, 3754, 4012, 2993, 4012, 4012, 3295, 4012, 4012, 3160, 3159, 3811, 4012, 3006, 3798,
  /* 1144 */ 3034, 3691, 4012, 3851, 3694, 3693, 4753, 3692, 3161, 4098, 3159, 4098, 3595, 3187, 3191, 3194, 3198, 3202,
  /* 1162 */ 3204, 3204, 3208, 3209, 3210, 3214, 4012, 4012, 4012, 3515, 3454, 3229, 3250, 3571, 3265, 4012, 4012, 4627,
  /* 1180 */ 3021, 3269, 2595, 3429, 3273, 3277, 3283, 3287, 3293, 4012, 3301, 4012, 3057, 4012, 4012, 3232, 4152, 4161,
  /* 1198 */ 3307, 4012, 4012, 3664, 3665, 3474, 3473, 4012, 4012, 3721, 2878, 4729, 3167, 4012, 4012, 3737, 3296, 3456,
  /* 1216 */ 3313, 2829, 3319, 3331, 4012, 4012, 4012, 3583, 4628, 4012, 4046, 4812, 3336, 4012, 3335, 4012, 3063, 3382,
  /* 1234 */ 4012, 3065, 3092, 4012, 3100, 4012, 4012, 3309, 4012, 4162, 3340, 4012, 4012, 3738, 3457, 3348, 4012, 4012,
  /* 1252 */ 4012, 3662, 3362, 3369, 4012, 4012, 3797, 3033, 3386, 3702, 3706, 4012, 3122, 4012, 3466, 2634, 4012, 4260,
  /* 1270 */ 3392, 3396, 4012, 4012, 4012, 3663, 3404, 4012, 4012, 4012, 3715, 2633, 4012, 3601, 3408, 4876, 2827, 3178,
  /* 1288 */ 3879, 3412, 4012, 4012, 4012, 3886, 3421, 3427, 4012, 4012, 3823, 3480, 2633, 3602, 3433, 4012, 3139, 4012,
  /* 1306 */ 3130, 2592, 2676, 4012, 3878, 3611, 2618, 4012, 3442, 2635, 4260, 3447, 3428, 3602, 3452, 4012, 4311, 4903,
  /* 1324 */ 3471, 2636, 3148, 3564, 3448, 4012, 4012, 3824, 4012, 4012, 4012, 3831, 4057, 3490, 4012, 4021, 4012, 3160,
  /* 1342 */ 3811, 4012, 4012, 3145, 2987, 3542, 3459, 3494, 3501, 3020, 3506, 3737, 4901, 3563, 3569, 3018, 3512, 3531,
  /* 1360 */ 3899, 4243, 3657, 3525, 4012, 4260, 3530, 4367, 3179, 4012, 3242, 4959, 4012, 3259, 4420, 4012, 3297, 4388,
  /* 1378 */ 4012, 3355, 2825, 2829, 3537, 4012, 3536, 4012, 3357, 4012, 4012, 3400, 3399, 4012, 3417, 4081, 4012, 3502,
  /* 1396 */ 4012, 4868, 4112, 3541, 3927, 3736, 3734, 3242, 3546, 3559, 3558, 3242, 4901, 4646, 4645, 4899, 4644, 4643,
  /* 1414 */ 3575, 3159, 3581, 3159, 4012, 4012, 4012, 3486, 4305, 3693, 3587, 4012, 3565, 3423, 4012, 3155, 4012, 4069,
  /* 1432 */ 3599, 3606, 3610, 4012, 3679, 4145, 4012, 3710, 4012, 4012, 3866, 4641, 4355, 3616, 3235, 3620, 3623, 3627,
  /* 1450 */ 3631, 3635, 3639, 3647, 3644, 3640, 3651, 3651, 3652, 3656, 4281, 4012, 4012, 4012, 3887, 3295, 2768, 3034,
  /* 1468 */ 4012, 3754, 4012, 4012, 3472, 3472, 4405, 4012, 4153, 3779, 3661, 4012, 4271, 2880, 3126, 3443, 3674, 3242,
  /* 1486 */ 3778, 4012, 4012, 4232, 4012, 3678, 3683, 3690, 3700, 3719, 4012, 4012, 4412, 4411, 4012, 4012, 4012, 3899,
  /* 1504 */ 4280, 4012, 4012, 4012, 3901, 4405, 4012, 4153, 3725, 4012, 2983, 4012, 3242, 3731, 4012, 4012, 3743, 3747,
  /* 1522 */ 3751, 4012, 4012, 3997, 3478, 3438, 3758, 4012, 4012, 4143, 4012, 3767, 4012, 4012, 4012, 4012, 2633, 3704,
  /* 1540 */ 4535, 3771, 4012, 3776, 3789, 4012, 4012, 4012, 4013, 3916, 3793, 4057, 4012, 4012, 4156, 3665, 2646, 2981,
  /* 1558 */ 4012, 3242, 4897, 3802, 4012, 4012, 4012, 4034, 4894, 3836, 4012, 4012, 4186, 4012, 3806, 4012, 3868, 2988,
  /* 1576 */ 4012, 3296, 4012, 3822, 4012, 4012, 4012, 4389, 2618, 3810, 4012, 3817, 3542, 4012, 3841, 3035, 3868, 4012,
  /* 1594 */ 2982, 4012, 3900, 4012, 2955, 2760, 3463, 3845, 3856, 4012, 4012, 4238, 4012, 4959, 4959, 3074, 3863, 4012,
  /* 1612 */ 4012, 4241, 4769, 3006, 3872, 4012, 4012, 4258, 3917, 2945, 4012, 3883, 3778, 2944, 4012, 3897, 3177, 3177,
  /* 1630 */ 3036, 3138, 4336, 4439, 4442, 4147, 3893, 4012, 4395, 3827, 4012, 4012, 4012, 3991, 3111, 3995, 2618, 4393,
  /* 1648 */ 4012, 4396, 2620, 3826, 4395, 4337, 3824, 4337, 3824, 3905, 3907, 4012, 4012, 4012, 4035, 4370, 3911, 2760,
  /* 1666 */ 4012, 3996, 3508, 4012, 3183, 4012, 4441, 3915, 3921, 4566, 3931, 3935, 3939, 3943, 3947, 3954, 3952, 3948,
  /* 1684 */ 3958, 3962, 3964, 3968, 4012, 4007, 4436, 4245, 4178, 4012, 4012, 2951, 2768, 3034, 4012, 3777, 2873, 4012,
  /* 1702 */ 3812, 4012, 4098, 3154, 4012, 3153, 3012, 4012, 4012, 3985, 4001, 4005, 4260, 4011, 4259, 4018, 4027, 4033,
  /* 1720 */ 2969, 4012, 4012, 4039, 4177, 4012, 4012, 2951, 4056, 4012, 4317, 4062, 4066, 3325, 3436, 4012, 4043, 2904,
  /* 1738 */ 2903, 4402, 4247, 4012, 4029, 3051, 3812, 3053, 4012, 4012, 4012, 4110, 3564, 4073, 4012, 4012, 4287, 4012,
  /* 1756 */ 4077, 2860, 4012, 2985, 3073, 4012, 4012, 4012, 4155, 3006, 4117, 3973, 3980, 2854, 2854, 4012, 4012, 3825,
  /* 1774 */ 2894, 4087, 4012, 2669, 3713, 4082, 3415, 3052, 4012, 4052, 2865, 4012, 2635, 4012, 4012, 2710, 2633, 2640,
  /* 1792 */ 4096, 4012, 4012, 4012, 4242, 4103, 4012, 4012, 4012, 4260, 3072, 4012, 4012, 4012, 4261, 4127, 4012, 4012,
  /* 1810 */ 4012, 4303, 4134, 4097, 4012, 4012, 4297, 4953, 4422, 4012, 3295, 3343, 4389, 4012, 4012, 2894, 4805, 4012,
  /* 1828 */ 4012, 4694, 2892, 4804, 4012, 4012, 4395, 4012, 4012, 4184, 4012, 4012, 4012, 4334, 3785, 4012, 4557, 4152,
  /* 1846 */ 4683, 4012, 4012, 4012, 4341, 2733, 4386, 4012, 4151, 4684, 4012, 4012, 4684, 3600, 4242, 4241, 4012, 4138,
  /* 1864 */ 2952, 4012, 4116, 3344, 4121, 4244, 4392, 4012, 4012, 4543, 4738, 4166, 4169, 4242, 4752, 4173, 4182, 4449,
  /* 1882 */ 4193, 3521, 4197, 4201, 4205, 4208, 4211, 4221, 4215, 4219, 4222, 4226, 4226, 4228, 4012, 4012, 4012, 4343,
  /* 1900 */ 4251, 2849, 4189, 4012, 4146, 3177, 4012, 3981, 3981, 4012, 3821, 4012, 3380, 4012, 2979, 4278, 4285, 4012,
  /* 1918 */ 4155, 2603, 2606, 4291, 3253, 4302, 4664, 4309, 4012, 4014, 4316, 4845, 4012, 4321, 4012, 4176, 4012, 4012,
  /* 1936 */ 4279, 4012, 4012, 4012, 3140, 4347, 4351, 3531, 4246, 4476, 4359, 4012, 4012, 4642, 4642, 4364, 4012, 4012,
  /* 1954 */ 4398, 4012, 4012, 4012, 4375, 4334, 4012, 4012, 4374, 4379, 4245, 4012, 4012, 4689, 4698, 4383, 4012, 4012,
  /* 1972 */ 4012, 4476, 4427, 4012, 4012, 4397, 3467, 3177, 4012, 4012, 4699, 4012, 3387, 4710, 3322, 4507, 4428, 4012,
  /* 1990 */ 4012, 4012, 4477, 3260, 4360, 4012, 3380, 3772, 4012, 4012, 4260, 4844, 4012, 4012, 4557, 3012, 4844, 4168,
  /* 2008 */ 4709, 4254, 4416, 3175, 4012, 4012, 4887, 4012, 4432, 4012, 2836, 3051, 3387, 3001, 4507, 4012, 4012, 4409,
  /* 2026 */ 3739, 4012, 4564, 4098, 4483, 4012, 4012, 4034, 4107, 4012, 3261, 4012, 4012, 4012, 4488, 3176, 4501, 3289,
  /* 2044 */ 4083, 4447, 3822, 3763, 4012, 4244, 4012, 4012, 4251, 2849, 4328, 3822, 4169, 3577, 3177, 4012, 4279, 3594,
  /* 2062 */ 4012, 3612, 3761, 4012, 2843, 3178, 3519, 4453, 4438, 4012, 4034, 4455, 4835, 4012, 4459, 4470, 4474, 3762,
  /* 2080 */ 4396, 4169, 4481, 4012, 3225, 4487, 4012, 3225, 4493, 4499, 4505, 4814, 4167, 4012, 4265, 4012, 4012, 4511,
  /* 2098 */ 2994, 4517, 4012, 4298, 4523, 4530, 4539, 3693, 2885, 2883, 4547, 3118, 3216, 2984, 3219, 3358, 2885, 2884,
  /* 2116 */ 3117, 2883, 4487, 2886, 3358, 3218, 2885, 3351, 3976, 3351, 3976, 4464, 4466, 3665, 2599, 4012, 4012, 2618,
  /* 2134 */ 2668, 2709, 4012, 4012, 4012, 4519, 3244, 4554, 4012, 4012, 4945, 2976, 3925, 3695, 2527, 4561, 4570, 4574,
  /* 2152 */ 4578, 4582, 4586, 4590, 4594, 4598, 4601, 4604, 4604, 4607, 4556, 4012, 4022, 3969, 3923, 3278, 4139, 3923,
  /* 2170 */ 3696, 3327, 4012, 4304, 4012, 3007, 2905, 2830, 4012, 2896, 4615, 4012, 4619, 3987, 4634, 4650, 4012, 4655,
  /* 2188 */ 4012, 4960, 4662, 4012, 4310, 2882, 4330, 4669, 4668, 4012, 4012, 4312, 3172, 4012, 3045, 4012, 4012, 3223,
  /* 2206 */ 4012, 4555, 4012, 4022, 3969, 3923, 3278, 4673, 4012, 4375, 4012, 4012, 4730, 3168, 4012, 4012, 3664, 3241,
  /* 2224 */ 4677, 3600, 4012, 4682, 4714, 4724, 4012, 4012, 4392, 4390, 4012, 4160, 4012, 4734, 4012, 2954, 2954, 3243,
  /* 2242 */ 4758, 4012, 4022, 3727, 4782, 3465, 2955, 2953, 3086, 4707, 2873, 4051, 4012, 4012, 4392, 4391, 4012, 4145,
  /* 2260 */ 3388, 4803, 4791, 2860, 4012, 4012, 4405, 4012, 4805, 4744, 4720, 4012, 4751, 4012, 4012, 4012, 4714, 4678,
  /* 2278 */ 4012, 4012, 4012, 4740, 3105, 4738, 4762, 4440, 2956, 4049, 4012, 4012, 4426, 4438, 4012, 4188, 3497, 4012,
  /* 2296 */ 2950, 3891, 4012, 2981, 4012, 4058, 4717, 4663, 4012, 4012, 4489, 3850, 4012, 4541, 4012, 4012, 4611, 4012,
  /* 2314 */ 4443, 4859, 4797, 4012, 2957, 3162, 4012, 3875, 3279, 2732, 4766, 3600, 4012, 4012, 4624, 4632, 4638, 3303,
  /* 2332 */ 4773, 4692, 4442, 4779, 4012, 4012, 4012, 4751, 4864, 3279, 4801, 4012, 4703, 4012, 3466, 4818, 4012, 4012,
  /* 2350 */ 4012, 4775, 2618, 4825, 4012, 4829, 3526, 4012, 4012, 4294, 3849, 4012, 4012, 3847, 3851, 4012, 4839, 4953,
  /* 2368 */ 4850, 4389, 4012, 4324, 4863, 4012, 4012, 4012, 4784, 3885, 4875, 3355, 4154, 4012, 4012, 4012, 4311, 3457,
  /* 2386 */ 2594, 4012, 4880, 2593, 2591, 3365, 4891, 4907, 4911, 4915, 4919, 4928, 4923, 4927, 4932, 4938, 4934, 4942,
  /* 2404 */ 4012, 4728, 3166, 4012, 3019, 4012, 4871, 3590, 4012, 4012, 3589, 4012, 4951, 4012, 3686, 3685, 4012, 4012,
  /* 2422 */ 4012, 4802, 2734, 4012, 4012, 4012, 4841, 4240, 3278, 3278, 4012, 4757, 4012, 4021, 4261, 4959, 4012, 4012,
  /* 2440 */ 4784, 3835, 4012, 3824, 2880, 4012, 3868, 3012, 2732, 2710, 3381, 4012, 4012, 4788, 4719, 4012, 4677, 3600,
  /* 2458 */ 4513, 3553, 4012, 4012, 4012, 4842, 4952, 4012, 4012, 4012, 4846, 4260, 4958, 4012, 4012, 4795, 4726, 4012,
  /* 2476 */ 4685, 4012, 4012, 4441, 4012, 3551, 4012, 4012, 4012, 4871, 4239, 4012, 4012, 4012, 4809, 3141, 2669, 4012,
  /* 2494 */ 4012, 4856, 4012, 2734, 4012, 3554, 4012, 4843, 4012, 3813, 4259, 4012, 4012, 4012, 4883, 4012, 4012, 4885,
  /* 2512 */ 4012, 4012, 4274, 3837, 4012, 4964, 4012, 4012, 4886, 4012, 4012, 4620, 5225, 5329, 5406, 5567, 5630, 5570,
  /* 2530 */ 5463, 5279, 4984, 4988, 5026, 5008, 5013, 5013, 5013, 5013, 5031, 5024, 5028, 5024, 5010, 5012, 5013, 5023,
  /* 2548 */ 5013, 5024, 5006, 5028, 5032, 5034, 5042, 5035, 5038, 5043, 5037, 5043, 5046, 5045, 5045, 5045, 5045, 5036,
  /* 2566 */ 5040, 5039, 5049, 5048, 5043, 5051, 5113, 5053, 5058, 5060, 5055, 5054, 5056, 5062, 5063, 5062, 5065, 5067,
  /* 2584 */ 5094, 5117, 5329, 5406, 5567, 5098, 5071, 5641, 5570, 5570, 5641, 5570, 5570, 5570, 5370, 5470, 5470, 5470,
  /* 2602 */ 5906, 5632, 5107, 5107, 5107, 5107, 5115, 5391, 5391, 5391, 5116, 5102, 5391, 5391, 5391, 5391, 5570, 5570,
  /* 2620 */ 5570, 4992, 5014, 5570, 5111, 5112, 5107, 5107, 5107, 5391, 5391, 5392, 5467, 4993, 5570, 5570, 5570, 4993,
  /* 2638 */ 5570, 5796, 5394, 5395, 5570, 5570, 4970, 4989, 5079, 5107, 5107, 5107, 5113, 5217, 5815, 5820, 5391, 5391,
  /* 2656 */ 5107, 5570, 5112, 5472, 5390, 5112, 5112, 5112, 5218, 5632, 5115, 5112, 4993, 5570, 5570, 5219, 5570, 5394,
  /* 2674 */ 5395, 5097, 5570, 4971, 5570, 5443, 5103, 5017, 5017, 5017, 5017, 5391, 5112, 5107, 5391, 5112, 5112, 5107,
  /* 2692 */ 5086, 5817, 5819, 5570, 5470, 5471, 5107, 5108, 5086, 5086, 5818, 5818, 5391, 5391, 5391, 5470, 5470, 5079,
  /* 2710 */ 5570, 5570, 5570, 4994, 5391, 5391, 5112, 5218, 5632, 5107, 5107, 5115, 5107, 5107, 5107, 5391, 5391, 5112,
  /* 2728 */ 5115, 5391, 5391, 5218, 5570, 4971, 5570, 5570, 5570, 5524, 5632, 5107, 5115, 5391, 5570, 5161, 5137, 4985,
  /* 2746 */ 5154, 5126, 5001, 5016, 5018, 5021, 5160, 5130, 5136, 5139, 4986, 5153, 5017, 5017, 5570, 5570, 5570, 4971,
  /* 2764 */ 5141, 5017, 5017, 5017, 4999, 5570, 5280, 5299, 5143, 5017, 5017, 5017, 5001, 5159, 5145, 5184, 5147, 5150,
  /* 2782 */ 5019, 5134, 5136, 5017, 5020, 5183, 5186, 5131, 5152, 5156, 5017, 5016, 5158, 5164, 5163, 5166, 5166, 5167,
  /* 2800 */ 5167, 5168, 5168, 5169, 5169, 5171, 5174, 5192, 5172, 5192, 5175, 5193, 5177, 5177, 5192, 5180, 5570, 5132,
  /* 2818 */ 5188, 5190, 5196, 5195, 5191, 5178, 5198, 5570, 4971, 5570, 5656, 5637, 5570, 5570, 5570, 5301, 5632, 5120,
  /* 2836 */ 5570, 5570, 4974, 5120, 5570, 5570, 5634, 5570, 4971, 5656, 5570, 4971, 5796, 5573, 4992, 5279, 5228, 4991,
  /* 2854 */ 5570, 5570, 5570, 4999, 5570, 5205, 5228, 5570, 5570, 5570, 5013, 5290, 5719, 5462, 5570, 5570, 5570, 5069,
  /* 2872 */ 5769, 5570, 5570, 5570, 5074, 5220, 5636, 5816, 5570, 5570, 4974, 5570, 5570, 5570, 5715, 5406, 5570, 5528,
  /* 2890 */ 5810, 5309, 5570, 5570, 4974, 5655, 5570, 5570, 4981, 5228, 5765, 5570, 5764, 5570, 4972, 5570, 5570, 5570,
  /* 2908 */ 5574, 5770, 5104, 5237, 5241, 5238, 5238, 5239, 5244, 5243, 5243, 5243, 5247, 5246, 5249, 5251, 5251, 5253,
  /* 2926 */ 5255, 5254, 5255, 5255, 5256, 5255, 5255, 5258, 5258, 5258, 5260, 5261, 5263, 5263, 5264, 5263, 5266, 5268,
  /* 2944 */ 5570, 5570, 4992, 5425, 5570, 5641, 5657, 5570, 5570, 5469, 5570, 5570, 5570, 5075, 5570, 5570, 5074, 5468,
  /* 2962 */ 5308, 5570, 5570, 5233, 5570, 5570, 5764, 5570, 4972, 5670, 5913, 5570, 5570, 5750, 5795, 5074, 5468, 5570,
  /* 2980 */ 4973, 5570, 5570, 5513, 5468, 5570, 5570, 5074, 5570, 5570, 5327, 5570, 5571, 5274, 5570, 5570, 5570, 5078,
  /* 2998 */ 5570, 5749, 5531, 5907, 5081, 4992, 5124, 5346, 5570, 5570, 5570, 5079, 4998, 5379, 5570, 5570, 5570, 5095,
  /* 3016 */ 5382, 5407, 5570, 5570, 4992, 5570, 5570, 5570, 5363, 5640, 5570, 5783, 5290, 5719, 5766, 5272, 5271, 5299,
  /* 3034 */ 5536, 5558, 5570, 5570, 5570, 5460, 5304, 5570, 5570, 5570, 5107, 5302, 5400, 5305, 5570, 4974, 5910, 5326,
  /* 3052 */ 5570, 5570, 5570, 5682, 5570, 5766, 5570, 5215, 5795, 5316, 5228, 5570, 5570, 4997, 5570, 5570, 4996, 5570,
  /* 3070 */ 5796, 5796, 5074, 5074, 5570, 5570, 5570, 5576, 5461, 5749, 5570, 5570, 5570, 5123, 5683, 5417, 5570, 5570,
  /* 3088 */ 5074, 5889, 5420, 5228, 5570, 5570, 5004, 5949, 5570, 5460, 5900, 5275, 5570, 5570, 5774, 5570, 4995, 5570,
  /* 3106 */ 5570, 5573, 5905, 5460, 5318, 5228, 5570, 5783, 5212, 5796, 5425, 5570, 5528, 5570, 5096, 5472, 5570, 5570,
  /* 3124 */ 5798, 5321, 5570, 5570, 5570, 5234, 5570, 5570, 5766, 5766, 5206, 5570, 5570, 5460, 5318, 5570, 5570, 5570,
  /* 3142 */ 5220, 5570, 5570, 5570, 5570, 5798, 5798, 5570, 4992, 5570, 4992, 5632, 5329, 5570, 5570, 5570, 5277, 5570,
  /* 3160 */ 5570, 5632, 5570, 5570, 5570, 5279, 5087, 5091, 5418, 5559, 5570, 5570, 5908, 5456, 5322, 5570, 4998, 5206,
  /* 3178 */ 5570, 5570, 5570, 5226, 5466, 5092, 5570, 5095, 5468, 5640, 5642, 5435, 5324, 5646, 5332, 5336, 5336, 5335,
  /* 3196 */ 5334, 5338, 5348, 5349, 5349, 5349, 5339, 5339, 5340, 5340, 5340, 5340, 5341, 5342, 5342, 5342, 5342, 5343,
  /* 3214 */ 5344, 5345, 5570, 5570, 5074, 5903, 5468, 5570, 5528, 5570, 5664, 5570, 5570, 5076, 5581, 5570, 5570, 5645,
  /* 3232 */ 5327, 5570, 5326, 5301, 5570, 5080, 5469, 5470, 5470, 5470, 5570, 5570, 5570, 4974, 5084, 5090, 5790, 5445,
  /* 3250 */ 5570, 5570, 5647, 5570, 4998, 5711, 5570, 5003, 5097, 5570, 4972, 5109, 5294, 5119, 5310, 5351, 5570, 5645,
  /* 3268 */ 5373, 5284, 5570, 5645, 5366, 5367, 5570, 5570, 5372, 5410, 5570, 5570, 5570, 5281, 5907, 5570, 5570, 5648,
  /* 3286 */ 5649, 5409, 5570, 5570, 5570, 5289, 5570, 5570, 5648, 5570, 5570, 5079, 5570, 5570, 5352, 5375, 5377, 5570,
  /* 3304 */ 5570, 5082, 5578, 5376, 5570, 5570, 5570, 5291, 5570, 5645, 4971, 5570, 5656, 5567, 5570, 5299, 5570, 5644,
  /* 3322 */ 5570, 5003, 5826, 5227, 5558, 5622, 5570, 5280, 4990, 5645, 5384, 5719, 5128, 5570, 5570, 5649, 5570, 5570,
  /* 3340 */ 5777, 5538, 5228, 5570, 5096, 5352, 5570, 5767, 5772, 5413, 5128, 5570, 5097, 5570, 5715, 5570, 5640, 5570,
  /* 3358 */ 5570, 5096, 5570, 5570, 5299, 5570, 5570, 5415, 5570, 5473, 5915, 5225, 5718, 5559, 5570, 5107, 5107, 5107,
  /* 3376 */ 5472, 5115, 5391, 5218, 5570, 5570, 5570, 4998, 5570, 5570, 4992, 5653, 5570, 5570, 5570, 5352, 5428, 5416,
  /* 3394 */ 5393, 5792, 5773, 5537, 5206, 5570, 5181, 5805, 5570, 5570, 5775, 5772, 5418, 5538, 5085, 5397, 5455, 5719,
  /* 3412 */ 5775, 5773, 5537, 5570, 5199, 5570, 5570, 5448, 5541, 5428, 5416, 5393, 5776, 5529, 5570, 5418, 5530, 5570,
  /* 3430 */ 5570, 5570, 5367, 5397, 5455, 5720, 5570, 5200, 5570, 5570, 5437, 5553, 5797, 5567, 5570, 5570, 5148, 5448,
  /* 3448 */ 5093, 5775, 5773, 5907, 5397, 5455, 5570, 5570, 5100, 5640, 5570, 5570, 5570, 5299, 5570, 5570, 5657, 5570,
  /* 3466 */ 5570, 5206, 5570, 5570, 5015, 5225, 5570, 5570, 5570, 5381, 5570, 5570, 5776, 5426, 5570, 5570, 5206, 5624,
  /* 3484 */ 4993, 4992, 5570, 5570, 5213, 5215, 5437, 5087, 5091, 5468, 5454, 5226, 5570, 5570, 5213, 5329, 5128, 4993,
  /* 3502 */ 5570, 5797, 5570, 5570, 5571, 5452, 5791, 5773, 5907, 5570, 4993, 5570, 5571, 5223, 5570, 4974, 5072, 5571,
  /* 3520 */ 5226, 5570, 5570, 5220, 5787, 5295, 5907, 5570, 5570, 5301, 5223, 5655, 5570, 5570, 5570, 5405, 5570, 5571,
  /* 3538 */ 5214, 5768, 5570, 5570, 5570, 5656, 5570, 5570, 5397, 5570, 5656, 5570, 5210, 5570, 5570, 4974, 5281, 5570,
  /* 3556 */ 5570, 5280, 5570, 5570, 5632, 5768, 5570, 5478, 5570, 5570, 5570, 5432, 5416, 5632, 5907, 5570, 5570, 5226,
  /* 3574 */ 5643, 5098, 5657, 5570, 5632, 5127, 4998, 5570, 5657, 5570, 5632, 5587, 5570, 5472, 5472, 5570, 5570, 5282,
  /* 3592 */ 5570, 5570, 5476, 5570, 5570, 5570, 5434, 4999, 5405, 5570, 5570, 5570, 5437, 5085, 5469, 5570, 4998, 5679,
  /* 3610 */ 5291, 5720, 5570, 5570, 5570, 5378, 5480, 5570, 5570, 5482, 5354, 5570, 5469, 5788, 5789, 5485, 5788, 5484,
  /* 3628 */ 5487, 5491, 5491, 5488, 5488, 5489, 5493, 5496, 5497, 5495, 5497, 5499, 5501, 5501, 5501, 5501, 5503, 5501,
  /* 3646 */ 5501, 5501, 5502, 5501, 5501, 5505, 5505, 5505, 5505, 5507, 5507, 5570, 5570, 5570, 5459, 5235, 5570, 5570,
  /* 3664 */ 5570, 5470, 5470, 5470, 5470, 5471, 5107, 5107, 5107, 5086, 5402, 5570, 5573, 5523, 5527, 5570, 5570, 5570,
  /* 3682 */ 5471, 5570, 5807, 5570, 5570, 5283, 5570, 5570, 5533, 5570, 5570, 5570, 5472, 5570, 5570, 5570, 5280, 5570,
  /* 3700 */ 5570, 5806, 5570, 5570, 5284, 5796, 5422, 5570, 5286, 5570, 4976, 4978, 4980, 5570, 5212, 5570, 5570, 5437,
  /* 3718 */ 5639, 4977, 4979, 5570, 5570, 5289, 5637, 5570, 5509, 5570, 5570, 5293, 5771, 5540, 5635, 5544, 5570, 5213,
  /* 3736 */ 5300, 5907, 5570, 5570, 5570, 5396, 5640, 5570, 5546, 5784, 5749, 5570, 5762, 5570, 5000, 5549, 5570, 5763,
  /* 3754 */ 5570, 5213, 5329, 5206, 5541, 5784, 5358, 5408, 5570, 5570, 5570, 5096, 5089, 5471, 5635, 5216, 5359, 5565,
  /* 3772 */ 5206, 5570, 5570, 5127, 5570, 5564, 5457, 5570, 5570, 5570, 5509, 5570, 5756, 5570, 5570, 5326, 5405, 5716,
  /* 3790 */ 5329, 5584, 5228, 5576, 5580, 5328, 5583, 5079, 4998, 5570, 5280, 5299, 5716, 5329, 5278, 5128, 5570, 5679,
  /* 3808 */ 5536, 5558, 5425, 5570, 5570, 5570, 5536, 5570, 5653, 5586, 5457, 5570, 5570, 5417, 5220, 5570, 5570, 5570,
  /* 3826 */ 5098, 5570, 5570, 5570, 5099, 5437, 5577, 5325, 5278, 5716, 5900, 5457, 5228, 5570, 5570, 5079, 4998, 5570,
  /* 3844 */ 5680, 4974, 5457, 5570, 5570, 5424, 5329, 5787, 5570, 5570, 5570, 5223, 5570, 5589, 5206, 5570, 5214, 5329,
  /* 3862 */ 5305, 5696, 5278, 5128, 5570, 5221, 5570, 5570, 5326, 5003, 4999, 5299, 5787, 5720, 5798, 5096, 5299, 5570,
  /* 3880 */ 5415, 5225, 5719, 5570, 5457, 5570, 5570, 5432, 5438, 5570, 5570, 4998, 5299, 5558, 5570, 4992, 5014, 5570,
  /* 3898 */ 5457, 5570, 5663, 5570, 5570, 5570, 5312, 5570, 5513, 5570, 5099, 4992, 5014, 5326, 5106, 5767, 5551, 4998,
  /* 3916 */ 5798, 5570, 5570, 5570, 5557, 5105, 4999, 5766, 5570, 5097, 5226, 5570, 5299, 5226, 5213, 5088, 5542, 5591,
  /* 3934 */ 5224, 5593, 5596, 5596, 5596, 5595, 5598, 5600, 5602, 5608, 5607, 5611, 5603, 5609, 5604, 5604, 5604, 5615,
  /* 3952 */ 5605, 5613, 5604, 5604, 5613, 5604, 5616, 5616, 5616, 5616, 5617, 5620, 5620, 5620, 5618, 5617, 5621, 5570,
  /* 3970 */ 5570, 5570, 5558, 5352, 5570, 5215, 5301, 5570, 5715, 5301, 5778, 5570, 5570, 5570, 5561, 5626, 5518, 5629,
  /* 3988 */ 5570, 5808, 5628, 5570, 5570, 5660, 5676, 5569, 5570, 5570, 5571, 5452, 5393, 5627, 5570, 5570, 5568, 5562,
  /* 4006 */ 5411, 5570, 5570, 5433, 5078, 5667, 5570, 5570, 5570, 5570, 4972, 5759, 5572, 5809, 5662, 5570, 5279, 5570,
  /* 4024 */ 5570, 5570, 5387, 5570, 5666, 5570, 5570, 5437, 5120, 5658, 5570, 5570, 5570, 5573, 5540, 5570, 5669, 5912,
  /* 4042 */ 5629, 5298, 5570, 5297, 5570, 5285, 5386, 5570, 5074, 5691, 5570, 5570, 5570, 5783, 5518, 5128, 5570, 5570,
  /* 4060 */ 5570, 5516, 5675, 5121, 5570, 5211, 5570, 5570, 5687, 5570, 5288, 5570, 5713, 5674, 5671, 5519, 5128, 5686,
  /* 4078 */ 5911, 5672, 5446, 5511, 5570, 5570, 5570, 5622, 5080, 5570, 5690, 5206, 5570, 5291, 5567, 5570, 5566, 5573,
  /* 4096 */ 5671, 5446, 5570, 5570, 5570, 5632, 5107, 5573, 5897, 5700, 5206, 5540, 5510, 5567, 5570, 5296, 5570, 5570,
  /* 4114 */ 4974, 5397, 5079, 5570, 5683, 4992, 5096, 5550, 5570, 5570, 5570, 5636, 5637, 5471, 5700, 5206, 5570, 5303,
  /* 4132 */ 5794, 5228, 5570, 5570, 5695, 5699, 5570, 5570, 5907, 5570, 4971, 5570, 5471, 5782, 5570, 5570, 5570, 5638,
  /* 4150 */ 5206, 5654, 5570, 5570, 5080, 5570, 5570, 5570, 5469, 5470, 5014, 5570, 5570, 5570, 5650, 5652, 5514, 5570,
  /* 4168 */ 5570, 5570, 5653, 5570, 5570, 5907, 5326, 5095, 5573, 5540, 5510, 5566, 5570, 5570, 5704, 5029, 5570, 5570,
  /* 4186 */ 5469, 5699, 5570, 5570, 5468, 5570, 5423, 5423, 5570, 5570, 5292, 5570, 5570, 5724, 5721, 5723, 5722, 5721,
  /* 4204 */ 5706, 5708, 5708, 5708, 5709, 5326, 5727, 5726, 5726, 5729, 5731, 5736, 5708, 5708, 5737, 5708, 5734, 5733,
  /* 4222 */ 5733, 5733, 5733, 5739, 5739, 5739, 5739, 5739, 5741, 5740, 5536, 5570, 5289, 5570, 5307, 5795, 5570, 4974,
  /* 4240 */ 5097, 5570, 5570, 5570, 5796, 5570, 5570, 5570, 5127, 5570, 5570, 5570, 5907, 5570, 5095, 5003, 5826, 5227,
  /* 4258 */ 5570, 5571, 5570, 5570, 5570, 5571, 5082, 5570, 5571, 5357, 5570, 5314, 5407, 5570, 4974, 5521, 5570, 4974,
  /* 4276 */ 5577, 5900, 5779, 5570, 5570, 5570, 5656, 5476, 5570, 5745, 5711, 5570, 5654, 5079, 5220, 5747, 5752, 5755,
  /* 4294 */ 5570, 5326, 5570, 5219, 5570, 5570, 5570, 5227, 5710, 5570, 5570, 5570, 5657, 5570, 5472, 5760, 5570, 5570,
  /* 4312 */ 5570, 5663, 5570, 5094, 5761, 5570, 5570, 5570, 5678, 5570, 5787, 5289, 5570, 5326, 5570, 5220, 5570, 5468,
  /* 4330 */ 5570, 5567, 5558, 5798, 5570, 5525, 5570, 5570, 5513, 5570, 5098, 5570, 5570, 5743, 5570, 5570, 4975, 4975,
  /* 4348 */ 5570, 5570, 5780, 5570, 5745, 5206, 5570, 5326, 5570, 5570, 5017, 5440, 5310, 5720, 5570, 5570, 5439, 5441,
  /* 4366 */ 5822, 5570, 5327, 5657, 5570, 5206, 4992, 5097, 5570, 5570, 5812, 5653, 5570, 5472, 4998, 5206, 5655, 5119,
  /* 4384 */ 5310, 5720, 5570, 5352, 5570, 5301, 5570, 5570, 5570, 5014, 5570, 5570, 5099, 5570, 5570, 5570, 5015, 5824,
  /* 4402 */ 5633, 5206, 5655, 5570, 5352, 5573, 5655, 5096, 5089, 5570, 5570, 5535, 5570, 5570, 4973, 5570, 5633, 5319,
  /* 4420 */ 5119, 5310, 5570, 5570, 5540, 5587, 5814, 5078, 5118, 5357, 5822, 5570, 4998, 5206, 4998, 5206, 5118, 5357,
  /* 4438 */ 5311, 5570, 5570, 5570, 5683, 5570, 5570, 5570, 5203, 5003, 5826, 5228, 5528, 5570, 5536, 5570, 5573, 5078,
  /* 4456 */ 5717, 5311, 5570, 5828, 5570, 5570, 5653, 5233, 5570, 5097, 5074, 5079, 5570, 5079, 5570, 5570, 5907, 5095,
  /* 4474 */ 4993, 5774, 5570, 5570, 5570, 5814, 5078, 5632, 5127, 5127, 5570, 5127, 5570, 5406, 5570, 5570, 5570, 5689,
  /* 4492 */ 5424, 5406, 5570, 5570, 4998, 5017, 4999, 5684, 5206, 5570, 5570, 5570, 5828, 5783, 5653, 5570, 5528, 5570,
  /* 4510 */ 5220, 5633, 4999, 5570, 5570, 5570, 5894, 5290, 5468, 5570, 5570, 5570, 5202, 5078, 5290, 5468, 4998, 5002,
  /* 4528 */ 5133, 5020, 4999, 5570, 5783, 5570, 5353, 5570, 5570, 4974, 5509, 5528, 5570, 5570, 5097, 5570, 5570, 5570,
  /* 4546 */ 5902, 5406, 5570, 5570, 5783, 5289, 5783, 5771, 5790, 5445, 5567, 5570, 5570, 5570, 5693, 5830, 5753, 5631,
  /* 4564 */ 5570, 5357, 5570, 5570, 5567, 5099, 5570, 5631, 5832, 5230, 5229, 5834, 5832, 5231, 5838, 5838, 5838, 5837,
  /* 4582 */ 5836, 5840, 5840, 5842, 5847, 5842, 5843, 5843, 5849, 5849, 5851, 5852, 5844, 5854, 5845, 5853, 5856, 5860,
  /* 4600 */ 5857, 5857, 5858, 5862, 5863, 5863, 5863, 5863, 5864, 5865, 5867, 5570, 5570, 5869, 5871, 5873, 5570, 5570,
  /* 4618 */ 5368, 4982, 5570, 5570, 5570, 5720, 4981, 5875, 5228, 5570, 5361, 5228, 5570, 5570, 5877, 5207, 5570, 4981,
  /* 4636 */ 5208, 5228, 4981, 4981, 5879, 5570, 5387, 5570, 5570, 5570, 5475, 5907, 5570, 5570, 5881, 5570, 5570, 5570,
  /* 4654 */ 5748, 5800, 5802, 5228, 5570, 5389, 5654, 5388, 5801, 5803, 5570, 5570, 5570, 5758, 5570, 5799, 5883, 5570,
  /* 4672 */ 5570, 5570, 5907, 5570, 4990, 5570, 5574, 5570, 5570, 5301, 4981, 5570, 5570, 5570, 5781, 5570, 5570, 5570,
  /* 4690 */ 5570, 5885, 5578, 5793, 5570, 5570, 5571, 5674, 5330, 5570, 5570, 5570, 5782, 5570, 5887, 5653, 5364, 5570,
  /* 4708 */ 5891, 5570, 5570, 5570, 5907, 5080, 5570, 5570, 5893, 5089, 5293, 5120, 5785, 5803, 5570, 5570, 5355, 5399,
  /* 4726 */ 5786, 5228, 5570, 5570, 5571, 5464, 5087, 5091, 5449, 5356, 5400, 5803, 5444, 5228, 5570, 5570, 5571, 5556,
  /* 4744 */ 5896, 5517, 5471, 5120, 5025, 5026, 5027, 5075, 5570, 5570, 5570, 5787, 5570, 5083, 5090, 5899, 5511, 5570,
  /* 4762 */ 5219, 5578, 5653, 5401, 5570, 5573, 5228, 5570, 5398, 5074, 5468, 5330, 5570, 5570, 5219, 5097, 5570, 5570,
  /* 4780 */ 5570, 5691, 5570, 5401, 5570, 5570, 5571, 5576, 5570, 5573, 5223, 5293, 5547, 5784, 5786, 5082, 5690, 5554,
  /* 4798 */ 5784, 5786, 5228, 5003, 5570, 5405, 5570, 5570, 5095, 5570, 5570, 5570, 5573, 5326, 5570, 5404, 5570, 5570,
  /* 4816 */ 5096, 5099, 5690, 5797, 5697, 5570, 5405, 5419, 5567, 5899, 5570, 5570, 5663, 5798, 5570, 5226, 5570, 5405,
  /* 4834 */ 5787, 5570, 4998, 5206, 5127, 5656, 5326, 5570, 5570, 5571, 5702, 5444, 5570, 5570, 5570, 5651, 5226, 5622,
  /* 4852 */ 5570, 5570, 5571, 5896, 5219, 5797, 5697, 5570, 5432, 5223, 5517, 5570, 5570, 5766, 5570, 5299, 5570, 5570,
  /* 4870 */ 5797, 5570, 5432, 5429, 5093, 5640, 5570, 5640, 5570, 5327, 5657, 5073, 5641, 5570, 5432, 5570, 5570, 5577,
  /* 4888 */ 5457, 5570, 5570, 5918, 5570, 5916, 5570, 5437, 5577, 5328, 5457, 5570, 5570, 5397, 5656, 5570, 5570, 5226,
  /* 4906 */ 5571, 5570, 5572, 5099, 5920, 5640, 5640, 5430, 5076, 5077, 5924, 5923, 5923, 5928, 5922, 5927, 5926, 5933,
  /* 4924 */ 5934, 5932, 5933, 5930, 5926, 5926, 5926, 5931, 5936, 5937, 5939, 5939, 5939, 5939, 5939, 5941, 5939, 5939,
  /* 4942 */ 5943, 5945, 5947, 5570, 5450, 5570, 5712, 5714, 5468, 5570, 5524, 5570, 5570, 5570, 5798, 5270, 5082, 5281,
  /* 4960 */ 5570, 5570, 5570, 5799, 5570, 5572, 5570, 5570, 5630, 5080, 1073872896, 131072, 0, 3, 0, 4, 0, 5, 16832,
  /* 4979 */ 688128, -1200619520, 0, 6, 0x80000000, 262146, 262160, 524304, 524304, 268566528, 131072, 131072, 24, 0, 8,
  /* 4994 */ 0, 12, 0, 14, 0, 16, 0, 20, 16, 2, 0, 30, 33816576, 537133056, 262174, 262160, 268444864, 10560, 33816576,
  /* 5013 */ 262144, 262144, 0, 48, 16, 16, 17, 16, 20, 24, 8768, 262144, 262160, 537133056, -2147221504, -2147221504,
  /* 5029 */ 262144, 0x80000000, 33816576, 278528, 278544, 537149440, 278530, 772014080, 168034304, -1375469568,
  /* 5039 */ 772014080, 235143168, -1375469568, 537149440, 772014080, 772014080, 168034304, 168034304, 772014080,
  /* 5048 */ 235143168, 235143168, 772014080, 772030464, 772014080, 163872, 294944, -2147188704, 294944, -2147188674,
  /* 5058 */ 163840, 2392096, 294944, 537165856, -2145091522, -2145091522, -2111537090, 772046880, 772046880,
  /* 5067 */ -1375436738, -1910210498, 12, 14, 8256, 0, 1280, 0, 2048, 0, 3072, 3072, 16384, 0, 4096, 2, 4, 8, 16, 32,
  /* 5087 */ 32, 128, 128, 256, 512, 4096, 2048, 4096, 4096, 0, 64, 0, 128, 0, 132, 2129952, 2129920, 16, 1048576,
  /* 5106 */ 65600, 32768, 32768, 32, 3072, 12, 2129920, 32768, 32800, 32768, 2129920, 65536, 65536, 131072, 262144,
  /* 5121 */ 524288, 0x80000000, 1024, 268435456, 0x80000000, 131088, 16, 536870912, 0x80000000, 1048848, 272, 16,
  /* 5133 */ 1073774592, 16, 165675008, 272, 272, 65552, 272, 1572880, 48, 524304, 28, 17, 28, 16, 28, 0, 17408, 2, 304,
  /* 5152 */ 524560, 1048592, 1048592, 268435472, 272, 1114416, 84, 20, 304, 48, 80, -165649452, -165649452, 372,
  /* 5166 */ -165649451, -701431504, -701431504, -701430800, -701430800, -164559888, -164535308, -700906508, -700906512,
  /* 5175 */ -164535308, -164535312, -164535308, -164273164, -26121227, -164535308, 0, 19504, 112, 21, 16, 21, 53,
  /* 5188 */ 140511253, 140515349, 140539925, 140540573, -164535308, -164535308, -164273168, 140540573, 140540573,
  /* 5197 */ 140540605, -26141771, 0, 24576, 0x80000000, 163577856, 0, 28672, 100663296, 536870912, 0, 30720, 6815744,
  /* 5210 */ 239075328, 0, 40960, 0, 49152, 65536, 1048576, 2097152, 2129920, 0, 8192, 0, 10240, 4, 128, 4096, 65536, 0,
  /* 5228 */ 0x80000000, 0, -2147483646, -2147483646, -2147483642, 2629632, 0, 688128, 806354944, 1226311744, 941162496,
  /* 5239 */ 805371937, 805371937, 941162496, 941162496, 154732609, 154732609, 847314977, 152635457, 152635457,
  /* 5248 */ 154867777, 689506369, 689506371, 957941825, 957941825, 957941857, 154740803, 957941857, 957941857,
  /* 5257 */ 957941859, -1199980544, -1199980544, -1199718400, -1199718400, -1199717854, -1199717846, -1199717846,
  /* 5265 */ -1199717782, -1183201183, -1183201183, -1182938525, -1182938517, 1574912, 1207959552, 0, 1572864, 65536,
  /* 5275 */ 805306368, 0x80000000, 1640448, 134217728, 268435456, 0, 32, 0, 36, 0, 40, 0, 44, 3872768, 0, 2097152,
  /* 5291 */ 8388608, 33554432, 8192, 16384, 65536, 12582912, 0, 59392, 0, 65536, 8388608, 0, 114688, 1572864,
  /* 5305 */ 939524096, 0x80000000, 1640448, 16777216, 2105344, 2097152, 25165824, 0, 526336, 8243200, 8243200, 4194304,
  /* 5317 */ 939524096, 4194304, 536870912, 512, 1048576, 536870912, 536870912, 67109121, 131072, 4194304, 0, 131072,
  /* 5329 */ 1048576, 4194304, 0x80000000, 67174657, 637604097, -1876951032, -2145386488, -1507782399, -1507782399,
  /* 5338 */ -2145386456, -434827007, -1507782391, -1507782391, -1344145085, -1344145085, -1344145077, -1344145077, 0,
  /* 5347 */ 3745792, -2145381716, -434827007, -434827007, 637534208, 0, 4194304, 8388608, 4096, 57344, 262144, 2097152,
  /* 5359 */ 4194304, -1207959552, 8, 2097152, -1879048192, 0, 6291456, 1380352, -436207616, 0, 6815744, 172, 2101760,
  /* 5372 */ 265, 2166784, -1509949440, 323, 14809088, -1358954496, 0, 7979008, -1207959552, 331, 0, 7981056, 69632,
  /* 5385 */ 2097152, 1310720, 1610612736, 0, 8241152, 0, 2129920, 2129920, 4096, 8192, 64, 64, 128, 512, 262144,
  /* 5400 */ 1572864, 6291456, 0, 10496, 172, 0, 8388608, 16777216, -1207959552, 0, -1509949440, 0, -1476395008,
  /* 5413 */ 50331648, 201326592, 1, 256, 2048, 16777216, 33554432, 134217728, 805306368, 1048576, 1073741824, 8192,
  /* 5425 */ 262144, 16777216, 134217728, 2, 64, 256, 3072, 1, 2, 32, 4740, 536871168, 1, 4, 32, 19456, 458752, 2097152,
  /* 5443 */ 1024, 524288, 4194304, 16777216, 536870912, 2, 256, 4096, 196608, 2, 2048, 1, 4096, 16777216, 268435456,
  /* 5458 */ 536870912, 1, 49152, 1048576, 134217728, 1073741824, 4, 16, 1, 65536, 16777216, 0, 16384, 16384, 32768, 0,
  /* 5474 */ 4352, 32768, 8388608, 1073741824, 32768, 134217728, 514, 8388608, 16384, 1073741824, 17039368, 131328,
  /* 5486 */ 131328, 1073873152, 807043332, 806912004, 806928388, 807043332, 807043332, 1074430208, 806929412,
  /* 5495 */ 1074440452, 1074440448, 1074440448, 1074440962, 1612349700, 1074440448, 1880785156, 1880785156, 1889173780,
  /* 5504 */ 1880785156, -1199914555, -1199914555, -126172731, -126172731, 256, 131072, 16777216, 1073741824, 8, 262144,
  /* 5515 */ 33554432, 4, 256, 8192, 524288, 16777216, 557056, 806354944, 11008, 4, 64, 384, 1611661312, 0, 16777216,
  /* 5530 */ 201326592, 0, 3737600, 20, 1888485376, -126877696, 0, 33554432, 201326592, 536870912, 256, 32768, 131072,
  /* 5543 */ 536871040, 1048576, 805306368, 4, 32768, 262144, 1887436800, 0, 50331648, 16777216, 448, 16384, 262144, 4,
  /* 5557 */ 448, 0, 67108864, 536870912, -134217728, 0, 67633152, 4, 1048576, 268435456, 1073741824, 0, -1073741824, 0,
  /* 5571 */ 0, 1, 0, 2, 0x80000000, 4, 192, 16384, 524288, 256, 16384, 2097152, 4194304, 402653184, 536870912, 4,
  /* 5587 */ 131072, 1073741824, 4, 268435456, 128, 1075839492, 128, 536887424, -2146819039, -1610079071, -1610079071,
  /* 5598 */ -2146950111, -2146917343, -1073208287, -1610070879, -1073077215, -1542962015, -1610062687, -1610062687,
  /* 5606 */ -1559731039, -1542962015, -1542962015, -1408744287, -1610062687, -1408744287, -1408744287, -1593285471,
  /* 5614 */ -1610062687, -1610062671, -1592859485, -1592859485, -1592857437, -1592859485, -1592857437, -1592857437, 0,
  /* 5623 */ 134217728, 516, 2097152, 1, 1184, -1610612736, -1610612736, 0, 138412032, 0, 32768, 16, 131072, 524288,
  /* 5637 */ 524288, 0, 192, 256, 0, 256, 257, 69632, 0, 257, 525312, 0, 265, 0, 323, 129024, 2097152, 0, 512, 0, 1024,
  /* 5658 */ 0, 1200, 1, 1056, 50855936, 0, 268435456, 4608, 1, 24576, -1610612736, 3, 1184, 57344, 393216, 524288, 160,
  /* 5675 */ 1024, 8192, 655360, 1, 32, 65536, 33554432, 24576, 0, 536870912, 16, 2, 160, 0x80000000, 2, 128, 8192,
  /* 5692 */ 6291456, 4, 512, 2, 16384, 4194304, 33554432, 32768, 393216, 16777216, 4, 262144, 268435464, 4096, 448,
  /* 5707 */ 262145, 2359297, 2359297, 0, 538968064, 0, 671088640, 939524096, 2048, 16384, 131072, 2097152, 33554432,
  /* 5720 */ 67108864, 0, 262145, 262145, 524292, 262145, 3407875, 3407875, 524292, 3407875, 3440643, 539230225,
  /* 5732 */ 3408387, 539230225, 539230225, -2145124351, 2359297, 572784657, 35913729, 94850083, 94850083, 631721011,
  /* 5742 */ 631721011, 3, 3145728, 1, 16, 572522496, 0, 805306368, 0, 1638400, 35651584, 0, 1073741824, -2145386496, 0,
  /* 5757 */ 1610612736, 3, 19488, 458752, 94371840, 0, 1879048192, 0, 41943040, 0, 1048576, 8388608, 134217728,
  /* 5770 */ 134217728, 524288, 2097152, 12582912, 16777216, 8192, 114688, 12582912, 50331648, 0, 294912, 0, 393216, 0,
  /* 5784 */ 524288, 1048576, 6291456, 33554432, 0, 131328, 1024, 4096, 114688, 2097152, 6291456, 939524096, 0, 262144,
  /* 5798 */ 1048576, 0, 135, 323840, 7864320, 33554432, 0x80000000, 631242752, 0, 1880096768, 0, 17301504, 0, 17303552,
  /* 5812 */ 1, 262144, 3, 32, 2097152, 2097152, 2097184, 2097184, 2129920, 2097184, 25165824, 67108864, 603979776, 0,
  /* 5826 */ 8, 268435456, 4, 524288, 131104, 1048, -2147483646, 0, -2147483646, 8389656, 271085568, 2650112,
  /* 5838 */ -2142744570, -2142744570, 141062144, -2147483642, -1593835514, -1593835514, -2146953210, -2144833530,
  /* 5846 */ -2146953210, -1593835514, -1593311226, -2146936826, -2146936826, -2146928634, -2144831482, -2144833530,
  /* 5854 */ -2144833530, -2140639226, -2077724666, -2144831482, -2144831482, -2140637178, -2144767994, -2144831482,
  /* 5862 */ -2144700378, -2105740921, -2105740921, -2105738873, -2105740921, -2105738873, 0, 6, 20480, 4718592,
  /* 5872 */ 0x80000000, 2621440, 0, 6144, 524288, 22528, 0, 94208, 0, 38, 161792, 325888, 0x80000000, 6, 4096, 24576,
  /* 5888 */ 524288, 24576, 6291456, 38, 0, 1, 6, 0, 6, 128, 57344, 1024, 4194304, 134217728, 6, 16384, 8388608, 4,
  /* 5906 */ 16384, 134217728, 0, 4608, 8, 1024, 57344, 17694720, -1610612736, 17152, 17152, 0, 12288, 0, 12292, 0,
  /* 5922 */ 12334, 12302, 12302, 3072, 15396, 15396, 12302, 12318, 15396, 15364, 15652, 15364, 15364, 15620, 15396,
  /* 5937 */ 15652, 15652, 68, 68, 324, 324, 4164, 8260, 15716, 15716, 15428, 15460, 46, 0
];

XQueryParser.TOKEN =
[
  "(0)",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "URIQualifiedName",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "CharRef",
  "NCName",
  "QName",
  "StringConstructorChars",
  "S",
  "S",
  "CommentContents",
  "PragmaContents",
  "Wildcard",
  "DirCommentContents",
  "DirPIContents",
  "CDataSectionContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'<![CDATA['",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']]>'",
  "']``'",
  "'``['",
  "'`{'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exponent-separator'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'intersect'",
  "'into'",
  "'invoke'",
  "'is'",
  "'item'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'lowercase'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'occurs'",
  "'of'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'transform'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'update'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'|'",
  "'||'",
  "'}'",
  "'}`'",
  "'}}'"
];

// End
