{


  "http://expath.org/ns/error" : {
    "ns" : "http://expath.org/ns/error", 
    "description" : " This module defines all errors for the http-client module.\n", 
    "sees" : [  ], 
    "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Markus Pilman</xqdoc:author>" ], 
    "version" : null, 
    "encoding" : "utf-8", 
    "namespaces" : [ {
      "uri" : "http://expath.org/ns/error", 
      "prefix" : "err"
    } ], 
    "functions" : [  ], 
    "variables" : [ {
      "name" : "err:errNS", 
      "type" : "xs:string", 
      "description" : " Error namespace URI.\n"
    }, {
      "name" : "err:HC001", 
      "type" : "xs:QName", 
      "description" : " An HTTP error occurred.\n"
    }, {
      "name" : "err:HC002", 
      "type" : "xs:QName", 
      "description" : " Error parsing the entity content as XML or HTML.\n"
    }, {
      "name" : "err:HC003", 
      "type" : "xs:QName", 
      "description" : " With a multipart response, the override-media-type must be either a multipart media type or application/octet-stream.\n"
    }, {
      "name" : "err:HC004", 
      "type" : "xs:QName", 
      "description" : " The src attribute on the body element is mutually exclusive with all other attribute (except the media-type).\n"
    }, {
      "name" : "err:HC005", 
      "type" : "xs:QName", 
      "description" : " The request element is not valid.\n"
    }, {
      "name" : "err:HC006", 
      "type" : "xs:QName", 
      "description" : " A timeout occurred waiting for the response.\n"
    }, {
      "name" : "err:HCV01", 
      "type" : "xs:QName", 
      "description" : " This error is not defined in the specification but used by the Zorba implementation.\n It gets thrown when the user gives wrong arguments which are statically correct,\n but make no sense (for example: http:send-request((), ())).\n"
    }, {
      "name" : "err:HCV02", 
      "type" : "xs:QName", 
      "description" : " Zorba specific error\n This error is raised if trying to follow a redirect for a POST, PUT, or\n DELETE request\n"
    } ]
  }, 

  "http://expath.org/ns/http-client" : {
    "ns" : "http://expath.org/ns/http-client", 
    "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n This module provides an implementation of the\n <a href=\"http://expath.org/modules/http-client/\">EXPath Http Client</a>.\n It provides functions for making HTTP requests and is a superset of the\n module specified by EXPath.\n Specifically, it implements the <code>http:send-request()</code> functions\n as specified by EXPath. Moreover, it adds an additional function\n <code>http:read()</code> (with several arities for the sake of ease).\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n In general, both functions take a description of the HTTP request to make\n as parameter, execute the request, and return a representation of the HTTP\n response. For instance, in the following code snippet, we fetch the Zorba\n home page:\n </p>\n <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" class=\"ace-static\" ace-mode=\"xquery\">import module namespace http = \"http://expath.org/ns/http-client\";\n http:send-request(\n  &lt;http:request href=\"http://zorba.io\" method=\"get\" /&gt;\n )\n </pre>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n The <code>http:send-request()</code> functions are declared as sequential.\n Sequential functions are allowed to have side effects. For example, most probably,\n an HTTP POST request is a request that has side effects because it adds/changes\n a remote resource. Sequential functions are specified in the\n <a href=\"http://zorba.io/documentation/2.9/zorba/scripting_tutorial.html\">XQuery Scripting Extension</a>.\n In contrast, the http:read() functions are not declared as sequential -\n they are declared as being non deterministic though, which\n means that several calls may return different results.\n HTTP requests performed using these functions are <b>not</b> allowed to have\n side effects.\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n The response is returned as a sequence of one or more items. The first\n one is an <code>http:response</code> element with quite the same\n structure as an http:request, but without the content itself.\n The content is returned as the second item (or several items in case of\n a multipart response) as a string, a document node, or a binary item.\n This depends on the content-type returned.\n Specifically, the rules are as follows:\n <ul>\n  <li>A document node is returned if the media type has a MIME type of\n     text/xml, application/xml, text/xml-external-parsed-entity, or\n     application/xml-external-parsed-entity, as defined in [RFC 3023]\n     (except that application/xml-dtd is considered a text media type).\n     MIME types ending by +xml are also XML media types.</li>\n  <li>A document node is returned if the media type has a MIME type of\n      text/html. In order to be able to make HTML parseable, tidy is automatically\n      invoked. If you want to prevent that, you can also set your own content-type\n      by setting the override-media-type attribute in the request element.\n       For tidying, the following <a href=\"http://tidy.sourceforge.net/docs/quickref.html\">options</a>\n       will be used:\n       <ul>\n         <li>TidyXmlOut=yes</li>\n         <li>TidyDoctypeMode=TidyDoctypeOmit</li>\n         <li>TidyQuoteNbsp=yes</li>\n         <li>TidyCharEncoding=\"utf8\"</li>\n         <li>TidyNewline=\"LF\"</li>\n       </ul>\n  </li>\n  <li>An xs:string item is returned if the media type has a text MIME type,\n     i.e. beginning with text/.</li>\n  <li>An xs:base64Binary item is returned for all the other media types.</li>\n </ul>\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n The structure of a request element is defined in the schema that is imported\n by this module. The details are described in the\n <a href=\"http://expath.org/spec/http-client#d2e183\">specification</a>.\n Analogously, the response element is also described in this\n <a href=\"http://expath.org/spec/http-client#d2e491\">specification</a>.\n </p>\n", 
    "sees" : [ "<xqdoc:see xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><a href=\"http://www.w3.org/TR/xquery-3/#FunctionDeclns\">XQuery 3.0: Function Declaration</a></xqdoc:see>" ], 
    "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Federico Cavalieri, Markus Pilman</xqdoc:author>" ], 
    "version" : null, 
    "encoding" : "utf-8", 
    "namespaces" : [ {
      "uri" : "http://zorba.io/annotations", 
      "prefix" : "an"
    }, {
      "uri" : "http://expath.org/ns/error", 
      "prefix" : "err"
    }, {
      "uri" : "http://expath.org/ns/http-client", 
      "prefix" : "http"
    }, {
      "uri" : "http://zorba.io/modules/http-client-wrapper", 
      "prefix" : "http-wrapper"
    }, {
      "uri" : "http://expath.org/ns/http-client", 
      "prefix" : "https"
    }, {
      "uri" : "http://www.zorba-xquery.com/modules/converters/html", 
      "prefix" : "tidy"
    }, {
      "uri" : "http://www.zorba-xquery.com/modules/converters/html-options", 
      "prefix" : "tidy-options"
    }, {
      "uri" : "http://zorba.io/options/versioning", 
      "prefix" : "ver"
    } ], 
    "functions" : [ {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "send-request", 
      "qname" : "http:send-request", 
      "signature" : "($request as element(*)) as item()+", 
      "description" : " Function for convenience.\n Calling this function is equivalent to calling\n <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n http:send-request($request, (), ())\n </code>\n", 
      "summary" : "<p> Function for convenience.</p>", 
      "annotation_str" : " %an:sequential", 
      "annotations" : [ {
        "prefix" : "an", 
        "ns" : "http://zorba.io/annotations", 
        "name" : "sequential", 
        "value" : ""
      } ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "request", 
        "type" : "element(*)", 
        "occurrence" : null, 
        "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> see request parameter of the sequential <a href=\"#send-request-3\">send-request</a> function with three parameters.</div>"
      } ], 
      "returns" : {
        "type" : "item()+", 
        "description" : "see return value of the sequential <a xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" href=\"#send-request-3\">send-request</a> function with three parameters."
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "send-request", 
      "qname" : "http:send-request", 
      "signature" : "($request as element(*)?, $href as xs:string?) as item()+", 
      "description" : " Function for convenience.\n Calling this function is equivalent to calling\n <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n http:send-request($request, $href, ())\n </code>\n", 
      "summary" : "<p> Function for convenience.</p>", 
      "annotation_str" : " %an:sequential", 
      "annotations" : [ {
        "prefix" : "an", 
        "ns" : "http://zorba.io/annotations", 
        "name" : "sequential", 
        "value" : ""
      } ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "request", 
        "type" : "element(*)", 
        "occurrence" : "?", 
        "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> see request parameter of the sequential <a href=\"#send-request-3\">send-request</a> function with three parameters.</div>"
      }, {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> see href parameter of the sequential <a href=\"#send-request-3\">send-request</a> function with three parameters.</div>"
      } ], 
      "returns" : {
        "type" : "item()+", 
        "description" : "see return of <a xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" href=\"#send-request-3\">send-request</a>"
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "send-request", 
      "qname" : "http:send-request", 
      "signature" : "($request as element(*)?, $href as xs:string?, $bodies as item()*) as item()+", 
      "description" : " This function sends an HTTP request and returns the corresponding response.\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n This function is declared as sequential (see XQuery Scripting).\n Sequential functions are allowed to have side effects. For example, most probably,\n an HTTP POST request is a request that has side effects because it adds/changes\n a remote resource.\n </p>\n", 
      "summary" : "<p> This function sends an HTTP request and returns the corresponding response.</p>", 
      "annotation_str" : " %an:sequential", 
      "annotations" : [ {
        "prefix" : "an", 
        "ns" : "http://zorba.io/annotations", 
        "name" : "sequential", 
        "value" : ""
      } ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "request", 
        "type" : "element(*)", 
        "occurrence" : "?", 
        "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> Contains the various parameters of the request. See the <a href=\"http://expath.org/spec/http-client#d2e183\">specification</a>. for a full description of the structure of this element.</div>"
      }, {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> is the HTTP or HTTPS URI to send the request to. It must be a valid xs:anyURI, but is declared as a string to be able to pass literal strings (without requiring to explicitly cast it to an xs:anyURI.)</div>"
      }, {
        "name" : "bodies", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()+", 
        "description" : "a sequence of items, where the first item is a element of type http:responseType. The response element is also described in the <a xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" href=\"http://expath.org/spec/http-client#d2e483\">specification</a>. If there is one (or several, in case of multipart) response body, the response bodies are the next items in the sequence."
      }, 
      "errors" : [  ]
    } ], 
    "variables" : [  ]
  }, 

  "http://www.w3.org/2005/xqt-errors" : {
    "ns" : "http://www.w3.org/2005/xqt-errors", 
    "description" : " This module contains one variable declaration for each diagnostic of the\n http://www.w3.org/2005/xqt-errors namespace.\n The variables serves as documentation for the errors but can also\n be used in the code. For example, one useful scenario is to compare\n an error caught in the catch clause of a try-catch expression with one of\n the variables.\n", 
    "sees" : [  ], 
    "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Carlos Lopez</xqdoc:author>" ], 
    "version" : null, 
    "encoding" : "utf-8", 
    "namespaces" : [ {
      "uri" : "http://www.w3.org/2005/xqt-errors", 
      "prefix" : "err"
    } ], 
    "functions" : [  ], 
    "variables" : [ {
      "name" : "err:FORG0006", 
      "type" : "xs:QName", 
      "description" : " Invalid argument type.\n"
    }, {
      "name" : "err:FODF1280", 
      "type" : "xs:QName", 
      "description" : " Invalid decimal format name supplied to \\c fn:format-number().\n"
    }, {
      "name" : "err:FODF1310", 
      "type" : "xs:QName", 
      "description" : " Invalid decimal/integer format picture string.\n"
    }, {
      "name" : "err:FODT0001", 
      "type" : "xs:QName", 
      "description" : " Overflow/underflow in date/time operation.\n"
    }, {
      "name" : "err:FODT0002", 
      "type" : "xs:QName", 
      "description" : " Overflow/underflow in duration operation.\n"
    }, {
      "name" : "err:FODT0003", 
      "type" : "xs:QName", 
      "description" : " Invalid timezone value.\n"
    }, {
      "name" : "err:FONS0004", 
      "type" : "xs:QName", 
      "description" : " No namespace found for prefix.\n"
    }, {
      "name" : "err:FONS0005", 
      "type" : "xs:QName", 
      "description" : " Base-URI not defined in static context.\n"
    }, {
      "name" : "err:FORG0001", 
      "type" : "xs:QName", 
      "description" : " Invalid value for cast/constructor.\n"
    }, {
      "name" : "err:FORG0002", 
      "type" : "xs:QName", 
      "description" : " Invalid argument to \\c fn:resolve-uri().\n"
    }, {
      "name" : "err:FORG0003", 
      "type" : "xs:QName", 
      "description" : " \\c fn:zero-or-one() called with a sequence containing more than one\n item.\n"
    }, {
      "name" : "err:FORG0004", 
      "type" : "xs:QName", 
      "description" : " \\c fn:one-or-more() called with a sequence containing no items.\n"
    }, {
      "name" : "err:FORG0005", 
      "type" : "xs:QName", 
      "description" : " \\c fn:exactly-one() called with a sequence containing zero or more\n than one item.\n"
    }, {
      "name" : "err:FODC0007", 
      "type" : "xs:QName", 
      "description" : " Base URI passed to \\c fn:parse() is not a valid absolute URI.\n"
    }, {
      "name" : "err:FORG0008", 
      "type" : "xs:QName", 
      "description" : " The two arguments to fn:dateTime() have inconsistent timezones.\n"
    }, {
      "name" : "err:FORG0009", 
      "type" : "xs:QName", 
      "description" : " Error in resolving a relative URI against a base URI in\n \\c fn:resolve-uri().\n"
    }, {
      "name" : "err:FORX0001", 
      "type" : "xs:QName", 
      "description" : " Invalid regular expression flags.\n"
    }, {
      "name" : "err:FORX0002", 
      "type" : "xs:QName", 
      "description" : " Invalid regular expression.\n"
    }, {
      "name" : "err:FORX0003", 
      "type" : "xs:QName", 
      "description" : " Regular expression matches zero-length string.\n"
    }, {
      "name" : "err:FORX0004", 
      "type" : "xs:QName", 
      "description" : " Invalid replacement string.\n"
    }, {
      "name" : "err:FOTY0012", 
      "type" : "xs:QName", 
      "description" : " Argument node does not have a typed value.\n"
    }, {
      "name" : "err:FOTY0013", 
      "type" : "xs:QName", 
      "description" : " An argument to \\c fn:data() contains a node that does not have a typed\n value.\n"
    }, {
      "name" : "err:FOTY0014", 
      "type" : "xs:QName", 
      "description" : " The argument to \\c fn:string() is a function item.\n"
    }, {
      "name" : "err:FOTY0015", 
      "type" : "xs:QName", 
      "description" : " An argument to \\c fn:deep-equal() contains a function item.\n"
    }, {
      "name" : "err:FOUT1170", 
      "type" : "xs:QName", 
      "description" : " Identifier cannot be used to retrive a resource containing text\n"
    }, {
      "name" : "err:FOCA0005", 
      "type" : "xs:QName", 
      "description" : " NaN supplied as float/double value.\n"
    }, {
      "name" : "err:FTDY0016", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if a weight value is not within the required range\n of values; it is also a dynamic error if an implementation that does not\n support negative weights encounters a negative weight value.\n"
    }, {
      "name" : "err:FTDY0017", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if an implementation encounters a mild not\n selection, one of whose operands evaluates to an AllMatches that\n contains a StringExclude.\n"
    }, {
      "name" : "err:FTST0018", 
      "type" : "xs:QName", 
      "description" : " It is a static error if, during the static analysis phase, the query is\n found to contain a thesaurus option that refers to a thesaurus that is\n not found in the statically known thesauri.\n"
    }, {
      "name" : "err:FTST0019", 
      "type" : "xs:QName", 
      "description" : " It is a static error if, within a single FTMatchOptions, there is more\n than one match option of any given match option group.\n"
    }, {
      "name" : "err:FTDY0020", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if, when \"wildcards\" is in effect, a query string\n violates wildcard syntax.\n"
    }, {
      "name" : "err:FOER0000", 
      "type" : "xs:QName", 
      "description" : " Unidentified error.\n"
    }, {
      "name" : "err:FOAR0001", 
      "type" : "xs:QName", 
      "description" : " Division by zero.\n"
    }, {
      "name" : "err:FOAR0002", 
      "type" : "xs:QName", 
      "description" : " Numeric operation overflow/underflow.\n"
    }, {
      "name" : "err:FOCA0001", 
      "type" : "xs:QName", 
      "description" : " Input value too large for decimal.\n"
    }, {
      "name" : "err:FOCA0002", 
      "type" : "xs:QName", 
      "description" : " Invalid lexical value.\n"
    }, {
      "name" : "err:FOCA0003", 
      "type" : "xs:QName", 
      "description" : " Input value too large for integer.\n"
    }, {
      "name" : "err:FOUT1190", 
      "type" : "xs:QName", 
      "description" : " Retrieved resource contains octets that cannot be decoded into Unicode\n using the specified encoding, the resulting characters are not\n permitted XML characters or requested encoding not supported\n"
    }, {
      "name" : "err:FOCA0006", 
      "type" : "xs:QName", 
      "description" : " Raised when casting a string to xs:decimal if the string has more\n digits of precision than the implementation can represent (the\n implementation also has the option of rounding).\n"
    }, {
      "name" : "err:FOCH0001", 
      "type" : "xs:QName", 
      "description" : " Code point not valid.\n"
    }, {
      "name" : "err:FOCH0002", 
      "type" : "xs:QName", 
      "description" : " Unsupported collation.\n"
    }, {
      "name" : "err:FOCH0003", 
      "type" : "xs:QName", 
      "description" : " Unsupported normalization form.\n"
    }, {
      "name" : "err:FOCH0004", 
      "type" : "xs:QName", 
      "description" : " Collation does not support collation units.\n"
    }, {
      "name" : "err:FODC0001", 
      "type" : "xs:QName", 
      "description" : " No context document.\n"
    }, {
      "name" : "err:FODC0002", 
      "type" : "xs:QName", 
      "description" : " Error retrieving resource.\n"
    }, {
      "name" : "err:FODC0003", 
      "type" : "xs:QName", 
      "description" : " Raised by fn:doc, fn:collection to indicate that it is not possible to\n return a result that is guaranteed deterministic.\n"
    }, {
      "name" : "err:FODC0004", 
      "type" : "xs:QName", 
      "description" : " Invalid argument to \\c fn:collection().\n"
    }, {
      "name" : "err:FODC0005", 
      "type" : "xs:QName", 
      "description" : " Invalid argument to \\c fn:doc() or \\c fn:doc-available().\n"
    }, {
      "name" : "err:FODC0006", 
      "type" : "xs:QName", 
      "description" : " Invalid content passed to \\c fn:parse().\n"
    }, {
      "name" : "err:SERE0005", 
      "type" : "xs:QName", 
      "description" : " It is an error if the serialized result would contain an NCName Names\n that contains a character that is not permitted by the version of\n Namespaces in XML specified by the version parameter.\n"
    }, {
      "name" : "err:XUDY0024", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the effect of a set of updating expressions is\n to introduce conflicting namespace bindings into an element node.\n"
    }, {
      "name" : "err:XUDY0027", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the target expression of an insert, replace, or\n rename expression evaluates to an empty sequence.\n"
    }, {
      "name" : "err:XUST0028", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a function declaration specifies both \\c updating\n and a return type.\n"
    }, {
      "name" : "err:XUDY0029", 
      "type" : "xs:QName", 
      "description" : " In an insert expression where \\c before or \\c after is specified, it is\n a dynamic error if the node returned by the target expression does not\n have a parent.\n"
    }, {
      "name" : "err:XUDY0030", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if an insert expression specifies the insertion of\n an attribute node before or after a child of a document node.\n"
    }, {
      "name" : "err:XUDY0031", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if multiple calls to \\c fn:put() in the same\n snapshot specify the same URI (after resolution of relative URIs).\n"
    }, {
      "name" : "err:FOUP0001", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the first operand of \\c fn:put() is not a node\n of a supported kind.\n"
    }, {
      "name" : "err:FOUP0002", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the second operand of \\c fn:put() is not a valid\n lexical representation of the \\c xs:anyURI type.\n"
    }, {
      "name" : "err:SENR0001", 
      "type" : "xs:QName", 
      "description" : " It is an error if an item in S6 in sequence normalization is an attribute\n node or a namespace node.\n"
    }, {
      "name" : "err:SERE0003", 
      "type" : "xs:QName", 
      "description" : " It is an error if the serializer is unable to satisfy the rules for\n either a well-formed XML document entity or a well-formed XML external\n general parsed entity, or both, except for content modified by the\n character expansion phase of serialization.\n"
    }, {
      "name" : "err:SEPM0004", 
      "type" : "xs:QName", 
      "description" : " It is an error to specify the doctype-system parameter, or to specify\n the standalone parameter with a value other than omit, if the instance\n of the data model contains text nodes or multiple element nodes as\n children of the root node.\n"
    }, {
      "name" : "err:XUDY0023", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if an insert, replace, or rename expression\n affects an element node by introducing a new namespace binding that\n conflicts with one of its existing namespace bindings.\n"
    }, {
      "name" : "err:SERE0006", 
      "type" : "xs:QName", 
      "description" : " It is an error if the serialized result would contain a character that is\n not permitted by the version of XML specified by the version parameter.\n"
    }, {
      "name" : "err:SESU0007", 
      "type" : "xs:QName", 
      "description" : " It is an error if an output encoding other than UTF-8 or UTF-16 is\n requested and the serializer does not support that encoding.\n"
    }, {
      "name" : "err:SERE0008", 
      "type" : "xs:QName", 
      "description" : " It is an error if a character that cannot be represented in the encoding\n that the serializer is using for output appears in a context where\n character references are not allowed (for example if the character\n occurs in the name of an element).\n"
    }, {
      "name" : "err:SEPM0009", 
      "type" : "xs:QName", 
      "description" : " It is an error if the omit-xml-declaration parameter has the value yes,\n and the standalone attribute has a value other than omit; or the version\n parameter has a value other than 1.0 and the doctype-system parameter is\n specified.\n"
    }, {
      "name" : "err:SEPM0010", 
      "type" : "xs:QName", 
      "description" : " It is an error if the output method is xml, the value of the\n undeclare-prefixes parameter is yes, and the value of the version\n parameter is 1.0.\n"
    }, {
      "name" : "err:SESU0011", 
      "type" : "xs:QName", 
      "description" : " It is an error if the value of the normalization-form parameter\n specifies a normalization form that is not supported by the serializer.\n"
    }, {
      "name" : "err:SERE0012", 
      "type" : "xs:QName", 
      "description" : " It is an error if the value of the normalization-form parameter is\n fully-normalized and any relevant construct of the result begins with a\n combining character.\n"
    }, {
      "name" : "err:SESU0013", 
      "type" : "xs:QName", 
      "description" : " It is an error if the serializer does not support the version of XML or\n HTML specified by the version parameter.\n"
    }, {
      "name" : "err:SERE0014", 
      "type" : "xs:QName", 
      "description" : " It is an error to use the HTML output method when characters which are\n legal in XML but not in HTML, specifically the control characters\n #x7F-#x9F, appear in the instance of the data model.\n"
    }, {
      "name" : "err:SERE0015", 
      "type" : "xs:QName", 
      "description" : " It is an error to use the HTML output method when \\c &gt; appears within a\n processing instruction in the data model instance being serialized.\n"
    }, {
      "name" : "err:SEPM0016", 
      "type" : "xs:QName", 
      "description" : " It is a an error if a parameter value is invalid for the defined domain.\n"
    }, {
      "name" : "err:XUTY0010", 
      "type" : "xs:QName", 
      "description" : " In a replace expression where value of is not specified and\n the target is an element, text, comment, or processing instruction node,\n it is a type error if the replacement sequence does not consist of zero\n or more element, text, comment, or processing instruction nodes.\n"
    }, {
      "name" : "err:FOFL0001", 
      "type" : "xs:QName", 
      "description" : " This error is raised if the fn:function-lookup returns a context-dependent function and the context-dependent function is then called.\n"
    }, {
      "name" : "err:FOCZ0001", 
      "type" : "xs:QName", 
      "description" : " Invalid content passed to \\c x:canonicalize().\n"
    }, {
      "name" : "err:XUST0001", 
      "type" : "xs:QName", 
      "description" : " It is a static error if an updating expression is used in any position\n other than one of the following:\n - The topmost expression in the body of a query.\n - The \\c modify clause of a transform expression.\n - The \\c return clause of a FLWOR expression.\n - The \\c return clauses of a typeswitch expression in which every \\c\n return clause contains an updating expression or a vacuous expression.\n - The \\c then and \\c else clauses of a conditional statement in which\n both the \\c then and \\c else clauses contain either an updating\n expression or a vacuous expression.\n - An operand of a comma expression in which each operand is either an\n updating expression or a vacuous expression.\n - The content of a parenthesized expression.\n - The body of a function declaration in which the keyword \\c updating is\n specified.\n"
    }, {
      "name" : "err:XUST0002", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a simple expression that is not a vacuous\n expression is used in one of the following positions:\n - The \\c modify clause of a transform expression.\n - The top-level expression in the body of a function declaration in\n which the keyword \\c updating is specified.\n"
    }, {
      "name" : "err:XUST0003", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a Prolog contains more than one revalidation\n declaration.\n"
    }, {
      "name" : "err:XUTY0004", 
      "type" : "xs:QName", 
      "description" : " It is a type error if the insertion sequence of an insert expression\n contains an attribute node following a node that is not an attribute\n node.\n"
    }, {
      "name" : "err:XUTY0005", 
      "type" : "xs:QName", 
      "description" : " In an insert expression where into, as first\n into, or as last into is specified, it is a type\n error if the target expression returns a non-empty result that does not\n consist of a single element or document node.\n"
    }, {
      "name" : "err:XUTY0006", 
      "type" : "xs:QName", 
      "description" : " In an insert expression where \\c before or \\c after is specified, it is\n a type error if the target expression returns a non-empty result that\n does not consist of a single element, text, comment, or processing\n instruction node.\n"
    }, {
      "name" : "err:XUTY0007", 
      "type" : "xs:QName", 
      "description" : " It is a type error if the target expression of a delete expression does\n not return a sequence of zero or more nodes.\n"
    }, {
      "name" : "err:XUTY0008", 
      "type" : "xs:QName", 
      "description" : " In a replace expression, it is a type error if the target expression\n returns a non-empty result that does not consist of a single element,\n attribute, text, comment, or processing instruction node.\n"
    }, {
      "name" : "err:XUDY0009", 
      "type" : "xs:QName", 
      "description" : " In a replace expression where value of is not specified, it\n is a dynamic error if the node returned by the target expression does\n not have a parent.\n"
    }, {
      "name" : "err:FTST0009", 
      "type" : "xs:QName", 
      "description" : " It may be a static error if, during the static analysis phase, the query\n is found to contain a language identifier in a language option that the\n implementation does not support. The implementation may choose not to\n raise this error and instead provide some other implementation-defined\n behavior.\n"
    }, {
      "name" : "err:XUTY0011", 
      "type" : "xs:QName", 
      "description" : " In a replace expression where value of is not specified and\n the target is an attribute node, it is a type error if the replacement\n sequence does not consist of zero or more attribute nodes.\n"
    }, {
      "name" : "err:XUTY0012", 
      "type" : "xs:QName", 
      "description" : " In a rename expression, it is a type error if the target expression\n returns a non-empty result that does not consist of a single element,\n attribute, or processing instruction node.\n"
    }, {
      "name" : "err:XUTY0013", 
      "type" : "xs:QName", 
      "description" : " In a transform expression, it is a type error if a source expression in\n the \\c copy clause does not return a single node.\n"
    }, {
      "name" : "err:XUDY0014", 
      "type" : "xs:QName", 
      "description" : " In a transform expression, it is a dynamic error if the \\c modify clause\n modifies any node that was not created by the \\c copy clause.\n"
    }, {
      "name" : "err:XUDY0015", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if any node is the target of more than one \\c\n rename expression within the same query.\n"
    }, {
      "name" : "err:XUDY0016", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if any node is the target of more than one \\c\n replace expression (without value of being specified)\n within the same query.\n"
    }, {
      "name" : "err:XUDY0017", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if any node is the target of more than one\n replace value of expression within the same query.\n"
    }, {
      "name" : "err:XUDY0018", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if a function that was declared to be \\c external\n but not \\c updating returns a non-empty pending update list.\n"
    }, {
      "name" : "err:XUDY0019", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if a function that was declared to be both \\c\n external and \\c updating returns a non-empty data model instance.\n"
    }, {
      "name" : "err:XUDY0021", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the XDM instance that would result from\n applying all the updates in a query violates any constraint specified in\n [XQuery 1.0 and XPath 2.0 Data Model]. In this case, none of the updates\n in the query are made effective.\n"
    }, {
      "name" : "err:XUTY0022", 
      "type" : "xs:QName", 
      "description" : " It is a type error if an insert expression specifies the insertion of an\n attribute node into a document node.\n"
    }, {
      "name" : "err:XQST0052", 
      "type" : "xs:QName", 
      "description" : " The type must be the name of a type defined in the in-scope schema types,\n and the {variety} of the type must be simple.\n"
    }, {
      "name" : "err:XQST0033", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a module contains multiple bindings for the same\n namespace prefix.\n"
    }, {
      "name" : "err:XQST0034", 
      "type" : "xs:QName", 
      "description" : " It is a static error if multiple functions declared or imported by a\n module have the same number of arguments and their expanded QNames are\n equal (as defined by the eq operator).\n"
    }, {
      "name" : "err:XQST0035", 
      "type" : "xs:QName", 
      "description" : " It is a static error to import two schema components that both define the\n same name in the same symbol space and in the same scope.\n"
    }, {
      "name" : "err:XQST0036", 
      "type" : "xs:QName", 
      "description" : " It is a static error to import a module if the in-scope schema\n definitions of the importing module do not include all of the following:\n -# An in-scope schema type for each type-name that appears:\n - in the type of a variable that is declared in the imported module\n and referenced in the importing module, OR\n - in a parameter-type or result-type of a function that is declared in\n the imported module and referenced in the importing module.\n -# An in-scope element declaration for each element-name \\c EN such that:\n - \\c schema-element(EN) appears in the declared type of a variable in\n the imported module, and that variable is referenced in the\n importing module, OR\n - \\c schema-element(EN) appears in a parameter-type or result-type\n of a function declared in the imported module, and that function is\n referenced in the importing module.\n -# An in-scope attribute declaration for each attribute-name \\c AN such\n that:\n - \\c schema-attribute(AN) appears in the declared type of a variable\n in the imported module, and that variable is referenced in the\n importing module, OR\n - \\c schema-attribute(AN) appears in a parameter-type or result-type\n of a function declared in the imported module, and that function is\n referenced in the importing module.\n"
    }, {
      "name" : "err:XQST0038", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a Prolog contains more than one default collation\n declaration, or the value specified by a default collation declaration is\n not present in statically known collations.\n"
    }, {
      "name" : "err:XQST0039", 
      "type" : "xs:QName", 
      "description" : " It is a static error for a function declaration to have more than one\n parameter with the same name.\n"
    }, {
      "name" : "err:XQST0040", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the attributes specified by a direct element\n constructor do not have distinct expanded QNames.\n"
    }, {
      "name" : "err:XQST0045", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the function name in a function declaration is in\n one of the following namespaces:\n http://www.w3.org/XML/1998/namespace,\n http://www.w3.org/2001/XMLSchema,\n http://www.w3.org/2001/XMLSchema-instance,\n http://www.w3.org/2005/xpath-functions.\n"
    }, {
      "name" : "err:XQST0046", 
      "type" : "xs:QName", 
      "description" : " An implementation MAY raise a static error if the value of a URILiteral\n is of nonzero length and is not in the lexical space of \\c xs:anyURI.\n"
    }, {
      "name" : "err:XQST0047", 
      "type" : "xs:QName", 
      "description" : " It is a static error if multiple module imports in the same Prolog\n specify the same target namespace.\n"
    }, {
      "name" : "err:XQST0048", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a function or variable declared in a library\n module is not in the target namespace of the library module.\n"
    }, {
      "name" : "err:XQST0049", 
      "type" : "xs:QName", 
      "description" : " It is a static error if two or more variables declared or imported by a\n module have equal expanded QNames (as defined by the eq operator.)\n"
    }, {
      "name" : "err:XQST0032", 
      "type" : "xs:QName", 
      "description" : " A static error is raised if a Prolog contains more than one base URI\n declaration.\n"
    }, {
      "name" : "err:XQST0054", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a variable depends on itself.\n"
    }, {
      "name" : "err:XQST0055", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a Prolog contains more than one copy-namespaces\n declaration.\n"
    }, {
      "name" : "err:XQST0057", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a schema import binds a namespace prefix but\n does not specify a target namespace other than a zero-length string.\n"
    }, {
      "name" : "err:XQST0058", 
      "type" : "xs:QName", 
      "description" : " It is a static error if multiple schema imports specify the same target\n namespace.\n"
    }, {
      "name" : "err:XQST0059", 
      "type" : "xs:QName", 
      "description" : " It is a static error if an implementation is unable to process a schema\n or module import by finding a schema or module with the specified\n target namespace.\n"
    }, {
      "name" : "err:XQST0060", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the name of a function in a function declaration\n is not in a namespace (expanded QName has a null namespace URI).\n"
    }, {
      "name" : "err:XQST0065", 
      "type" : "xs:QName", 
      "description" : " A static error is raised if a Prolog contains more than one ordering mode\n declaration.\n"
    }, {
      "name" : "err:XQST0066", 
      "type" : "xs:QName", 
      "description" : " A static error is raised if a Prolog contains more than one default\n element/type namespace declaration, or more than one default function\n namespace declaration.\n"
    }, {
      "name" : "err:XQST0067", 
      "type" : "xs:QName", 
      "description" : " A static error is raised if a Prolog contains more than one construction\n declaration.\n"
    }, {
      "name" : "err:XQST0068", 
      "type" : "xs:QName", 
      "description" : " A static error is raised if a Prolog contains more than one\n boundary-space declaration.\n"
    }, {
      "name" : "err:XQST0069", 
      "type" : "xs:QName", 
      "description" : " A static error is raised if a Prolog contains more than one empty order\n declaration.\n"
    }, {
      "name" : "err:XPTY0019", 
      "type" : "xs:QName", 
      "description" : " It is a type error if the result of a step (other than the last step) in a\n path expression contains an atomic value.\n"
    }, {
      "name" : "err:XPST0001", 
      "type" : "xs:QName", 
      "description" : " It is a static error if analysis of an expression relies on some\n component of the static context that has not been assigned a value.\n"
    }, {
      "name" : "err:XPST0003", 
      "type" : "xs:QName", 
      "description" : " It is a static error if an expression is not a valid instance of the\n grammar.\n"
    }, {
      "name" : "err:XPST0005", 
      "type" : "xs:QName", 
      "description" : " During the analysis phase, it is a static error if the static type\n assigned to an expression other than the expression \\c () or \\c data(())\n is \\c empty-sequence().\n"
    }, {
      "name" : "err:XPST0008", 
      "type" : "xs:QName", 
      "description" : " It is a static error if an expression refers to an element name,\n attribute name, schema type name, namespace prefix, or variable name\n that is not defined in the static context, except for an ElementName in\n an ElementTest or an AttributeName in an AttributeTest.\n"
    }, {
      "name" : "err:XPST0017", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the expanded QName and number of arguments in a\n function call do not match the name and arity of a function signature in\n the static context.\n"
    }, {
      "name" : "err:XPST0051", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a QName that is used as an AtomicType in a\n SequenceType is not defined in the in-scope schema types as an atomic\n type.\n"
    }, {
      "name" : "err:XPST0080", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the target type of a \\c cast or \\c castable\n expression is \\c xs:NOTATION or \\c xs:anyAtomicType.\n"
    }, {
      "name" : "err:XPST0081", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a QName used in a query contains a namespace\n prefix that cannot be expanded into a namespace URI by using the\n statically known namespaces.\n"
    }, {
      "name" : "err:XPST0083", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the target type of a \\c cast expression or\n constructor function is \\c xs:QName or a type derived from \\c xs:QName\n or \\c xs:NOTATION, and the argument of the cast expression or\n constructor function is not a string literal.\n"
    }, {
      "name" : "err:XPTY0004", 
      "type" : "xs:QName", 
      "description" : " It is a type error if, during the static analysis phase, an expression\n is found to have a static type that is not appropriate for the context\n in which the expression occurs, or during the dynamic evaluation phase,\n the dynamic type of a value does not match a required type as specified\n by the matching rules in 2.5.4 SequenceType Matching.\n"
    }, {
      "name" : "err:XPTY0018", 
      "type" : "xs:QName", 
      "description" : " It is a type error if the result of the last step in a path expression\n contains both nodes and non-nodes.\n"
    }, {
      "name" : "err:XQST0070", 
      "type" : "xs:QName", 
      "description" : " A static error is raised if one of the predefined prefixes \\c xml or \\c\n xmlns appears in a namespace declaration, or if any of the following\n conditions is statically detected in any expression or declaration:\n - The prefix \\c xml is bound to some namespace URI other than\n http://www.w3.org/XML/1998/namespace.\n - A prefix other than \\c xml is bound to the namespace URI\n http://www.w3.org/XML/1998/namespace.\n - The prefix \\c xmlns is bound to any namespace URI.\n - A prefix other than \\c xmlns is bound to the namespace URI\n http://www.w3.org/2000/xmlns/.\n"
    }, {
      "name" : "err:XPTY0020", 
      "type" : "xs:QName", 
      "description" : " It is a type error if, in an axis step, the context item is not a node.\n"
    }, {
      "name" : "err:XPTY0117", 
      "type" : "xs:QName", 
      "description" : " Attempt to cast to a namespace-sensitive type failed because the namespace\n bindings for the result can not be determined.\n"
    }, {
      "name" : "err:XQTY0024", 
      "type" : "xs:QName", 
      "description" : " It is a type error if the content sequence in an element constructor\n contains an attribute node following a node that is not an attribute node.\n"
    }, {
      "name" : "err:XQTY0030", 
      "type" : "xs:QName", 
      "description" : " It is a type error if the argument of a validate expression does not\n evaluate to exactly one document or element node.\n"
    }, {
      "name" : "err:XQTY0086", 
      "type" : "xs:QName", 
      "description" : " It is a type error if the typed value of a copied element or attribute\n node is namespace-sensitive when construction mode is \\c preserve and\n copy-namespaces mode is \\c no-preserve.\n"
    }, {
      "name" : "err:XQTY0105", 
      "type" : "xs:QName", 
      "description" : " It is a type error if the content sequence in an element constructor contains a function item.\n"
    }, {
      "name" : "err:XQST0009", 
      "type" : "xs:QName", 
      "description" : " An implementation that does not support the Schema Import Feature must\n raise a static error if a Prolog contains a schema import.\n"
    }, {
      "name" : "err:XQST0012", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the set of definitions contained in all schemas\n imported by a Prolog do not satisfy the conditions for schema validity\n specified in Sections 3 and 5 of [XML Schema] Part 1--i.e., each\n definition must be valid, complete, and unique.\n"
    }, {
      "name" : "err:XQST0013", 
      "type" : "xs:QName", 
      "description" : " It is a static error if an implementation recognizes a pragma but\n determines that its content is invalid.\n"
    }, {
      "name" : "err:XQST0022", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the value of a namespace declaration attribute is\n not a URILiteral.\n"
    }, {
      "name" : "err:XQST0031", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the version number specified in a version\n declaration is not supported by the implementation.\n"
    }, {
      "name" : "err:XQDY0072", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the result of the content expression of a\n computed comment constructor contains two adjacent hyphens or ends with\n a hyphen.\n"
    }, {
      "name" : "err:XQST0128", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a feature name that an implementation supports appears\n in a prohibit-feature option declaration, and the implementation is unable to\n disable the feature.\n"
    }, {
      "name" : "err:XPDY0002", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if evaluation of an expression relies on some part\n of the dynamic context that has not been assigned a value.\n"
    }, {
      "name" : "err:XPDY0050", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the dynamic type of the operand of a treat\n expression does not match the sequence type specified by the treat\n expression. This error might also be raised by a path expression\n beginning with \"/\" or \"//\" if the context node\n is not in a tree that is rooted at a document node. This is because a\n leading \"/\" or \"//\" in a path expression is an\n abbreviation for an initial step that includes the clause \\c treat as \\c\n document-node().\n"
    }, {
      "name" : "err:XQDY0025", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if any attribute of a constructed element does not\n have a name that is distinct from the names of all other attributes of\n the constructed element.\n"
    }, {
      "name" : "err:XQDY0026", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the result of the content expression of a\n computed processing instruction constructor contains the string \"?&gt;\".\n"
    }, {
      "name" : "err:XQDY0027", 
      "type" : "xs:QName", 
      "description" : " In a validate expression, it is a dynamic error if the root element\n information item in the PSVI resulting from validation does not have the\n expected validity property: \\c valid if validation mode is \\c strict, or\n either \\c valid or \\c notKnown if validation mode is \\c lax.\n"
    }, {
      "name" : "err:XQDY0041", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the value of the name expression in a computed\n processing instruction constructor cannot be cast to the type\n \\c xs:NCName.\n"
    }, {
      "name" : "err:XQDY0044", 
      "type" : "xs:QName", 
      "description" : " It is a static error the node-name of a node constructed by a computed\n attribute constructor has any of the following properties:\n - Its namespace prefix is \\c xmlns.\n - It has no namespace prefix and its local name is \\c xmlns.\n - Its namespace URI is http://www.w3.org/2000/xmlns/.\n - Its namespace prefix is \\c xml and its namespace URI is not\n http://www.w3.org/XML/1998/namespace.\n - Its namespace prefix is other than \\c xml and its namespace URI is\n http://www.w3.org/XML/1998/namespace.\n"
    }, {
      "name" : "err:XQDY0054", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if a cycle is encountered in the definition of a\n module's dynamic context components, for example because of a cycle in\n variable declarations.\n"
    }, {
      "name" : "err:XQDY0061", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the operand of a validate expression is a\n document node whose children do not consist of exactly one element node\n and zero or more comment and processing instruction nodes, in any order.\n"
    }, {
      "name" : "err:XQDY0064", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the value of the name expression in a computed\n processing instruction constructor is equal to \"XML\" (in any combination\n of upper and lower case).\n"
    }, {
      "name" : "err:XQST0127", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a given feature is both required and prohibited, directly or indirectly, in a module.\n"
    }, {
      "name" : "err:XQDY0074", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the value of the name expression in a computed\n element or attribute constructor cannot be converted to an expanded\n QName (for example, because it contains a namespace prefix not found in\n statically known namespaces).\n"
    }, {
      "name" : "err:XQDY0084", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error if the element validated by a \\c validate statement\n does not have a top-level element declaration in the in-scope element\n declarations, if validation mode is \\c strict.\n"
    }, {
      "name" : "err:XQDY0091", 
      "type" : "xs:QName", 
      "description" : " An implementation MAY raise a dynamic error if an \\c xml:id error, as\n defined in [XML ID], is encountered during construction of an attribute\n named \\c xml:id.\n"
    }, {
      "name" : "err:XQDY0092", 
      "type" : "xs:QName", 
      "description" : " An implementation MAY raise a dynamic error if a constructed attribute\n named \\c xml:space has a value other than \\c preserve or \\c default.\n"
    }, {
      "name" : "err:XQDY0096", 
      "type" : "xs:QName", 
      "description" : " It is a dynamic error the node-name of a node constructed by a computed\n element constructor has any of the following properties:\n - Its namespace prefix is \\c xmlns.\n - Its namespace URI is http://www.w3.org/2000/xmlns/.\n - Its namespace prefix is \\c xml and its namespace URI is not\n http://www.w3.org/XML/1998/namespace.\n - Its namespace prefix is other than \\c xml and its namespace URI is\n http://www.w3.org/XML/1998/namespace.\n"
    }, {
      "name" : "err:XQDY0101", 
      "type" : "xs:QName", 
      "description" : " Invalid prefix and/or uri in computed namespace constructor\n"
    }, {
      "name" : "err:XQDY0102", 
      "type" : "xs:QName", 
      "description" : " In an element constructor, if two or more namespace bindings in the in-scope bindings would have the same prefix, then an error is raised if they have different URIs; if they would have the same prefix and URI, duplicate bindings are ignored.\n"
    }, {
      "name" : "err:XTDE1310", 
      "type" : "xs:QName", 
      "description" : " It is a non-recoverable dynamic error if the picture string does not\n satisfy the format-number function rules.\n"
    }, {
      "name" : "err:FOFD1340", 
      "type" : "xs:QName", 
      "description" : " It is a non-recoverable dynamic error if the $picture, $language,\n $calendar, or $place argument for fn:format-date, fn:format-time, or\n fn:format-dateTime is invalid.\n"
    }, {
      "name" : "err:FOFD1350", 
      "type" : "xs:QName", 
      "description" : " It is a non-recoverable dynamic error if a component specifier within\n the picture refers to components that are not available in the given\n type of $value.\n"
    }, {
      "name" : "err:FTST0008", 
      "type" : "xs:QName", 
      "description" : " It is a static error if, during the static analysis phase, the query is\n found to contain a stop word option that refers to a stop word list that\n is not found in the statically known stop word lists.\n"
    }, {
      "name" : "err:XQST0098", 
      "type" : "xs:QName", 
      "description" : " It is a static error if, for any named or unnamed decimal format, the\n properties representing characters used in a picture string do not each\n have distinct values. These properties are decimal-separator-sign,\n grouping-separator, percent-sign, per-mille-sign, zero-digit,\n digit-sign, and pattern-separator-sign.\n"
    }, {
      "name" : "err:XQST0071", 
      "type" : "xs:QName", 
      "description" : " A static error is raised if the namespace declaration attributes of a\n direct element constructor do not have distinct names.\n"
    }, {
      "name" : "err:XQST0076", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a \\c collation subclause in an order by clause\n of a FLWOR expression does not identify a collation that is present in\n statically known collations.\n"
    }, {
      "name" : "err:XQST0079", 
      "type" : "xs:QName", 
      "description" : " It is a static error if an extension expression contains neither a\n pragma that is recognized by the implementation nor an expression\n enclosed in curly braces.\n"
    }, {
      "name" : "err:XQST0085", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the namespace URI in a namespace declaration\n attribute is a zero-length string, and the implementation does not\n support [XML Names 1.1].\n"
    }, {
      "name" : "err:XQST0087", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the encoding specified in a Version Declaration\n does not conform to the definition of \\c EncName specified in [XML 1.0]\n"
    }, {
      "name" : "err:XQST0088", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the literal that specifies the target namespace\n in a module import or a module declaration is of zero length.\n"
    }, {
      "name" : "err:XQST0089", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a variable bound in a \\c for or \\c window clause\n of a FLWOR expression, and its associated positional variable, do not\n have distinct names (expanded QNames).\n"
    }, {
      "name" : "err:XQST0090", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a character reference does not identify a valid\n character in the version of XML that is in use.\n"
    }, {
      "name" : "err:XQST0093", 
      "type" : "xs:QName", 
      "description" : " It is a static error to import a module M1 if there exists a sequence of\n modules M1 ... Mi ... M1 such that each module directly depends on the\n next module in the sequence (informally, if M1 depends on itself through\n some chain of module dependencies.)\n"
    }, {
      "name" : "err:XQST0094", 
      "type" : "xs:QName", 
      "description" : " In the group by clause of a FLWOR expression, it is a static error if the\n name of a grouping variable is not equal (by the eq operator on expanded\n QNames) to the name of a variable that is bound by a for or let clause\n that precedes the group by clause.\n"
    }, {
      "name" : "err:XQST0097", 
      "type" : "xs:QName", 
      "description" : " It is a static error for a decimal-format to specify a value that is\n not valid for a given property.\n"
    }, {
      "name" : "err:NS", 
      "type" : "item()*", 
      "description" : ""
    }, {
      "name" : "err:XQST0099", 
      "type" : "xs:QName", 
      "description" : " If a module contains more than one context item declaration, a static error is raised [err:XQST0099].\n"
    }, {
      "name" : "err:XQST0103", 
      "type" : "xs:QName", 
      "description" : " All variables in a window clause must have distinct names.\n"
    }, {
      "name" : "err:XQST0106", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a function's annotations contain more than one\n annotation named \\c private or \\c public.  It is a static error if a\n function's annotations contain more than one annotation named \\c\n deterministic or \\c nondeterministic.\n"
    }, {
      "name" : "err:XQST0111", 
      "type" : "xs:QName", 
      "description" : " It is a static error for a query prolog to contain two decimal formats\n with the same name, or to contain two default decimal formats.\n"
    }, {
      "name" : "err:XQST0113", 
      "type" : "xs:QName", 
      "description" : " Specifying a VarValue or VarDefaultValue for a context item declaration\n in a library module is a static error.\n"
    }, {
      "name" : "err:XQST0114", 
      "type" : "xs:QName", 
      "description" : " It is a static error for a decimal format declaration to define the\n same property more than once.\n"
    }, {
      "name" : "err:XQST0116", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a variable declaration contains both a %private\n and a %public annotation, more than one %private annotation, or more\n than one %public annotation.\n"
    }, {
      "name" : "err:XQST0120", 
      "type" : "xs:QName", 
      "description" : " It is a static error if a feature required by require-feature is not\n supported by the implementation.\n"
    }, {
      "name" : "err:XQST0122", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the name of a feature in require-feature or\n prohibit-feature is not in the lexical space of QName.\n"
    }, {
      "name" : "err:XQST0123", 
      "type" : "xs:QName", 
      "description" : " It is a static error if the name of a feature in require-feature is not\n recognized by the implementation.\n"
    }, {
      "name" : "err:XQST0126", 
      "type" : "xs:QName", 
      "description" : " It is a static error if all-extensions appears in a require-feature option declaration.\n"
    } ]
  }, 
 
  "http://www.w3.org/2005/xpath-functions/math" : {
    "ns" : "http://www.w3.org/2005/xpath-functions/math", 
    "description" : " This module contains all the functions part of the\n W3C XPath and XQuery Functions and Operators 3.0\n section \"4.7 Trigonometric and exponential functions\".\n", 
    "sees" : [ "<xqdoc:see xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http://www.w3.org/TR/xpath-functions-30/#trigonometry</xqdoc:see>" ], 
    "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">www.w3c.org</xqdoc:author>" ], 
    "version" : null, 
    "encoding" : "utf-8", 
    "namespaces" : [ {
      "uri" : "http://www.w3.org/2005/xpath-functions/math", 
      "prefix" : "math"
    } ], 
    "functions" : [ {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "acos", 
      "qname" : "math:acos", 
      "signature" : "($arg as xs:double?) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the arc cosine of the argument, the result being in the range zero to\n                +<var>œÄ</var> radians.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"acos\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is the arc cosine of <code>$</code><var>Œ∏</var>,\n             treated as an angle in radians, as defined in the <bibref ref=\"ieee754-2008\"/>\n             specification of the <code>acos</code> function applied to 64-bit binary floating point\n             values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of the <code>invalidOperation</code> exception is defined in <specref ref=\"op.numeric\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is <code>NaN</code>, or if its absolute value is greater than one,\n             then the result is <code>NaN</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In other cases the result is an <code>xs:double</code> value representing an angle\n                <var>Œ∏</var> in radians in the range <code>0 &lt;= $</code><var>Œ∏</var><code> &lt;=\n                +</code><var>œÄ</var>. </p></div>\n", 
      "summary" : "<p>  Returns the arc cosine of the argument, the result being in the range zero to\n                + œÄ  radians.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "asin", 
      "qname" : "math:asin", 
      "signature" : "($arg as xs:double?) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the arc sine of the argument, the result being in the range\n                -<var>œÄ</var>/2 to +<var>œÄ</var>/2 radians.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"asin\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is the arc sine of <code>$</code><var>Œ∏</var>,\n             treated as an angle in radians, as defined in the <bibref ref=\"ieee754-2008\"/>\n             specification of the <code>asin</code> function applied to 64-bit binary floating point\n             values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of the <code>invalidOperation</code> and <code>underflow</code> exceptions\n             is defined in <specref ref=\"op.numeric\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is positive or negative zero, the result is <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is <code>NaN</code>, or if its absolute value is greater than one,\n             then the result is <code>NaN</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In other cases the result is an <code>xs:double</code> value representing an angle\n                <var>Œ∏</var> in radians in the range -<var>œÄ</var><code>/2 &lt;=\n                $</code><var>Œ∏</var><code> &lt;= +</code><var>œÄ</var><code>/2</code>. </p></div>\n", 
      "summary" : "<p>  Returns the arc sine of the argument, the result being in the range\n                - œÄ /2 to + œÄ /2 radians.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "atan", 
      "qname" : "math:atan", 
      "signature" : "($arg as xs:double?) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the arc tangent of the argument, the result being in the range\n                -<var>œÄ</var>/2 to +<var>œÄ</var>/2 radians.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"atan\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is the arc tangent of <code>$</code><var>Œ∏</var>,\n             treated as an angle in radians, as defined in the <bibref ref=\"ieee754-2008\"/>\n             specification of the <code>atan</code> function applied to 64-bit binary floating point\n             values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of the <code>underflow</code> exception is defined in <specref ref=\"op.numeric\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is positive or negative zero, the result is <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is <code>NaN</code> then the result is <code>NaN</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In other cases the result is an <code>xs:double</code> value representing an angle\n                <var>Œ∏</var> in radians in the range -<var>œÄ</var><code>/2 &lt;=\n                $</code><var>Œ∏</var><code> &lt;= +</code><var>œÄ</var><code>/2</code>. </p></div>\n", 
      "summary" : "<p>  Returns the arc tangent of the argument, the result being in the range\n                - œÄ /2 to + œÄ /2 radians.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "atan2", 
      "qname" : "math:atan2", 
      "signature" : "($y as xs:double, $x as xs:double) as xs:double external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the angle in radians subtended at the origin by the point on a plane\n             with coordinates (x, y) and the positive x-axis, the result being in the range\n                -<var>œÄ</var> to +<var>œÄ</var>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"atan2\" return-type=\"xs:double\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"y\" type=\"xs:double\"/><arg name=\"x\" type=\"xs:double\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">The result is the value of <code>atan2(y, x)</code> as defined in the\n                <bibref ref=\"ieee754-2008\"/> specification of the <code>atan2</code> function applied\n             to 64-bit binary floating point values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of the <code>underflow</code> exception is defined in <specref ref=\"op.numeric\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <phrase diff=\"chg\" at=\"L\">either argument</phrase> is <code>NaN</code>\n             then the result is <code>NaN</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$y</code> is positive and <code>$x</code> is positive and finite, then\n             (subject to rules for overflow, underflow and approximation)\n          the value of <code>atan2($y, $x)</code> is <code>atan($y div $x)</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$y</code> is positive and <code>$x</code> is negative and finite, then\n             (subject to the same caveats)\n             the value of <code>atan2($y, $x)</code> is <var>œÄ</var> <code>- atan($y div $x)</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Some results for special values of the arguments are shown in the examples below.</p></div>\n", 
      "summary" : "<p>  Returns the angle in radians subtended at the origin by the point on a plane\n             with coordinates (x, y) and the positive x-axis, the result being in the range\n                - œÄ  to + œÄ .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "y", 
        "type" : "xs:double", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "x", 
        "type" : "xs:double", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "cos", 
      "qname" : "math:cos", 
      "signature" : "($theta as xs:double?) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the cosine of the argument, expressed in radians.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"cos\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"Œ∏\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$</code><var>Œ∏</var> is the empty sequence, the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$</code><var>Œ∏</var> is positive or negative infinity, or <code>NaN</code>,\n             then the result is <code>NaN</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is the cosine of <code>$</code><var>Œ∏</var>,\n             treated as an angle in radians, as defined in the <bibref ref=\"ieee754-2008\"/>\n             specification of the <code>cos</code> function applied to 64-bit binary floating point\n             values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of the <code>invalidOperation</code> exception is defined in <specref ref=\"op.numeric\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$</code><var>Œ∏</var> is positive or negative zero, the result is\n                <code>$</code><var>Œ∏</var>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$</code><var>Œ∏</var> is positive or negative infinity, or <code>NaN</code>,\n             then the result is <code>NaN</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise the result is always in the range -1.0e0 to +1.0e0</p></div>\n", 
      "summary" : "<p>  Returns the cosine of the argument, expressed in radians.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "theta", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "exp", 
      "qname" : "math:exp", 
      "signature" : "($arg as xs:double?) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of <var>e</var><sup><var>x</var></sup>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"exp\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is the mathematical constant <var>e</var>\n             raised to the power of <code>$arg</code>, as defined in the <bibref ref=\"ieee754-2008\"/>\n             specification of the <code>exp</code> function applied to 64-bit binary floating point\n             values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of overflow and underflow is defined in <specref ref=\"op.numeric\"/>.</p></div>\n", 
      "summary" : "<p>  Returns the value of  e x .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "exp10", 
      "qname" : "math:exp10", 
      "signature" : "($arg as xs:double?) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of <code>10</code><sup><var>x</var></sup>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"exp10\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is ten raised to the power of <code>$arg</code>,\n             as defined in the <bibref ref=\"ieee754-2008\"/> specification of the <code>exp10</code>\n             function applied to 64-bit binary floating point values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of overflow and underflow is defined in <specref ref=\"op.numeric\"/>.</p></div>\n", 
      "summary" : "<p>  Returns the value of  10 x .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "log", 
      "qname" : "math:log", 
      "signature" : "($arg as xs:double?) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the natural logarithm of the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"log\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is the natural logarithm of <code>$arg</code>, as\n             defined in the <bibref ref=\"ieee754-2008\"/> specification of the <code>log</code>\n             function applied to 64-bit binary floating point values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of <code>divideByZero</code> and <code>invalidOperation</code> exceptions\n             is defined in <specref ref=\"op.numeric\"/>. The effect is that if the argument is less\n             than or equal to zero, the result is <code>NaN</code>.</p></div>\n", 
      "summary" : "<p>  Returns the natural logarithm of the argument.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "log10", 
      "qname" : "math:log10", 
      "signature" : "($arg as xs:double?) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the base-ten logarithm of the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"log10\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is the base-10 logarithm of <code>$arg</code>, as\n             defined in the <bibref ref=\"ieee754-2008\"/> specification of the <code>log10</code>\n             function applied to 64-bit binary floating point values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of <code>divideByZero</code> and <code>invalidOperation</code> exceptions\n             is defined in <specref ref=\"op.numeric\"/>. The effect is that if the argument is less\n             than or equal to zero, the result is <code>NaN</code>.</p></div>\n", 
      "summary" : "<p>  Returns the base-ten logarithm of the argument.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "pi", 
      "qname" : "math:pi", 
      "signature" : "() as xs:double external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns an approximation to the mathematical constant <var>œÄ</var>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"pi\" return-type=\"xs:double\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function returns the <code>xs:double</code> value whose lexical representation is\n             3.141592653589793e0</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>2*math:pi()</code> returns <code>6.283185307179586e0</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>60 * (math:pi() div 180)</code> converts an angle of 60 degrees\n                to radians. </p></div>\n", 
      "summary" : "<p>  Returns an approximation to the mathematical constant  œÄ .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:double", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "pow", 
      "qname" : "math:pow", 
      "signature" : "($x as xs:double?, $y as numeric) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the result of raising the first argument to the power of the\n             second.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"pow\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"x\" type=\"xs:double?\"/><arg name=\"y\" type=\"numeric\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$x</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$y</code> is an instance of <code>xs:integer</code>, the result is\n                <code>$x</code> raised to the power of <code>$y</code> as defined in the <bibref ref=\"ieee754-2008\"/> specification of the <code>pown</code> function applied to a\n             64-bit binary floating point value and an integer.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise <code>$y</code> is converted to an <code>xs:double</code> by numeric\n             promotion, and the result is the value of <code>$x</code> raised to the power of\n                <code>$y</code> as defined in the <bibref ref=\"ieee754-2008\"/> specification of the\n                <code>pow</code> function applied to two 64-bit binary floating point values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of the <code>divideByZero</code> and <code>invalidOperation</code>\n             exceptions is defined in <specref ref=\"op.numeric\"/>. Some of the consequences are\n             illustrated in the examples below.</p></div>\n", 
      "summary" : "<p>  Returns the result of raising the first argument to the power of the\n             second.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "x", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "y", 
        "type" : "numeric", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "sin", 
      "qname" : "math:sin", 
      "signature" : "($theta as xs:double?) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the sine of the argument, expressed in radians.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"sin\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"Œ∏\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$</code><var>Œ∏</var> is the empty sequence, the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is the sine of <code>$</code><var>Œ∏</var>,\n             treated as an angle in radians, as defined in the <bibref ref=\"ieee754-2008\"/>\n             specification of the <code>sin</code> function applied to 64-bit binary floating point\n             values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of the <code>invalidOperation</code> and <code>underflow</code> exceptions\n             is defined in <specref ref=\"op.numeric\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$</code><var>Œ∏</var> is positive or negative zero, the result is\n                <code>$</code><var>Œ∏</var>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$</code><var>Œ∏</var> is positive or negative infinity, or <code>NaN</code>,\n             then the result is <code>NaN</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise the result is always in the range -1.0e0 to +1.0e0</p></div>\n", 
      "summary" : "<p>  Returns the sine of the argument, expressed in radians.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "theta", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "sqrt", 
      "qname" : "math:sqrt", 
      "signature" : "($arg as xs:double?) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the non-negative square root of the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"sqrt\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is the mathematical non-negative square root of\n                <code>$arg</code> as defined in the <bibref ref=\"ieee754-2008\"/> specification of the\n                <code>squareRoot</code> function applied to 64-bit binary floating point values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of the <code>invalidOperation</code> exception is defined in <specref ref=\"op.numeric\"/>. The effect is that if the argument is less than zero, the result\n             is <code>NaN</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is positive or negative zero, positive infinity, or\n                <code>NaN</code>, then the result is <code>$arg</code>. (Negative zero is the only\n             case where the result can have negative sign)</p></div>\n", 
      "summary" : "<p>  Returns the non-negative square root of the argument.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "tan", 
      "qname" : "math:tan", 
      "signature" : "($theta as xs:double?) as xs:double? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the tangent of the argument, expressed in radians.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"tan\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"Œ∏\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$</code><var>Œ∏</var> is the empty sequence, the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is the tangent of <code>$</code><var>Œ∏</var>,\n             treated as an angle in radians, as defined in the <bibref ref=\"ieee754-2008\"/>\n             specification of the <code>tan</code> function applied to 64-bit binary floating point\n             values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of the <code>invalidOperation</code> and <code>underflow</code> exceptions\n             is defined in <specref ref=\"op.numeric\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$</code><var>Œ∏</var> is positive or negative infinity, or <code>NaN</code>,\n             then the result is <code>NaN</code>.</p></div>\n", 
      "summary" : "<p>  Returns the tangent of the argument, expressed in radians.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "theta", 
        "type" : "xs:double", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double?", 
        "description" : ""
      }, 
      "errors" : [  ]
    } ], 
    "variables" : [  ]
  },
  "http://www.w3.org/2005/xpath-functions/array": {
    "ns": "http://www.w3.org/2005/xpath-functions/array",
    "functions" : [],
    "variables" : []
  },
  "http://www.w3.org/2005/xpath-functions/map": {
    "ns": "http://www.w3.org/2005/xpath-functions/map",
    "functions" : [],
    "variables" : []
  },
  "http://www.w3.org/2005/xpath-functions" : {
    "ns" : "http://www.w3.org/2005/xpath-functions", 
    "description" : " This module contains all the functions specified in the\n W3C XPath and XQuery Functions and Operators 3.0.\n", 
    "sees" : [ "<xqdoc:see xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http://www.w3.org/TR/xpath-functions-30/</xqdoc:see>" ], 
    "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">www.w3c.org</xqdoc:author>" ], 
    "version" : null, 
    "encoding" : "utf-8", 
    "namespaces" : [  ], 
    "functions" : [ {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "QName", 
      "qname" : "fn:QName", 
      "signature" : "($paramURI as xs:string?, $paramQName as xs:string) as xs:QName external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Constructs an <code>xs:QName</code> value given a namespace URI and a lexical\n             QName.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"QName\" return-type=\"xs:QName\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"paramURI\" type=\"xs:string?\"/><arg name=\"paramQName\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The namespace URI in the returned QName is taken from <code>$paramURI</code>. If\n                <code>$paramURI</code> is the zero-length string or the empty sequence, it represents\n             \"no namespace\".</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The prefix (or absence of a prefix) in <code>$paramQName</code> is retained in the\n             returned <code>xs:QName</code> value.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The local name in the result is taken from the local part of\n             <code>$paramQName</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"CA\" code=\"0002\"/> if <code>$paramQName</code> does\n             not have the correct lexical form for an instance of <code>xs:QName</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"CA\" code=\"0002\"/> if <code>$paramURI</code> is the\n             zero-length string or the empty sequence, and the value of <code>$paramQName</code>\n             contains a colon (<code>:</code>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"G\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"CA\" code=\"0002\"/> if <code>$paramURI</code> is not a valid URI (XML Namespaces 1.0) or\n             IRI (XML Namespaces 1.1). </p></div>\n", 
      "summary" : "<p>  Constructs an  xs:QName  value given a namespace URI and a lexical\n             QName.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "paramURI", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "paramQName", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:QName", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "abs", 
      "qname" : "fn:abs", 
      "signature" : "($arg as numeric?) as numeric? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the absolute value of <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"abs\" return-type=\"numeric?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"numeric?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">General rules: see <specref ref=\"numeric-value-functions\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is negative the function returns <code>-$arg</code>, otherwise it\n             returns <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the type of <code>$arg</code> is one of the four numeric types <code>xs:float</code>,\n                <code>xs:double</code>, <code>xs:decimal</code> or <code>xs:integer</code> the type\n             of the result is the same as the type of <code>$arg</code>. If the type of\n                <code>$arg</code> is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For <code>xs:float</code> and <code>xs:double</code> arguments, if the argument is\n             positive zero or negative zero, then positive zero is returned. If the argument is\n             positive or negative infinity, positive infinity is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:abs(10.5)</code> returns <code>10.5</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:abs(-10.5)</code> returns <code>10.5</code>.</p></div>\n", 
      "summary" : "<p>  Returns the absolute value of  $arg .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "numeric", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "numeric?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "adjust-date-to-timezone", 
      "qname" : "fn:adjust-date-to-timezone", 
      "signature" : "($arg as xs:date?) as xs:date? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Adjusts an <code>xs:date</code> value to a specific timezone, or to no timezone\n             at all; the result is the date in the target timezone that contains the starting instant\n             of the supplied date.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"adjust-date-to-timezone\" return-type=\"xs:date?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:date?\"/></proto></example><example role=\"signature\"><proto name=\"adjust-date-to-timezone\" return-type=\"xs:date?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:date?\"/><arg name=\"timezone\" type=\"xs:dayTimeDuration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$timezone</code> is not specified, then the effective value of\n                <code>$timezone</code> is the value of the implicit timezone in the dynamic\n             context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> is the empty sequence, then the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             the empty sequence, then the result is the value of <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             not the empty sequence, then the result is <code>$arg</code> with <code>$timezone</code>\n             as the timezone component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is the empty\n             sequence, then the result is the local value of <code>$arg</code> without its timezone\n             component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is not the\n             empty sequence, then the function returns the value of the expression:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>Let <code>$dt</code> be the value of <code>fn:dateTime($arg,\n                      xs:time('00:00:00'))</code>.</p></item><item><p>Let <code>$adt</code> be the value of <code>fn:adjust-dateTime-to-timezone($dt,\n                      $timezone)</code></p></item><item><p>The function returns the value of <code>xs:date($adt)</code></p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DT\" code=\"0003\"/> if <code>$timezone</code> is less\n             than <code>-PT14H</code> or greater than <code>PT14H</code> or is not an integral number\n             of minutes.</p></div>\n", 
      "summary" : "<p>  Adjusts an  xs:date  value to a specific timezone, or to no timezone\n             at all; the result is the date in the target timezone that contains the starting instant\n             of the supplied date.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:date", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:date?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "adjust-date-to-timezone", 
      "qname" : "fn:adjust-date-to-timezone", 
      "signature" : "($arg as xs:date?, $timezone as xs:dayTimeDuration?) as xs:date? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Adjusts an <code>xs:date</code> value to a specific timezone, or to no timezone\n             at all; the result is the date in the target timezone that contains the starting instant\n             of the supplied date.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"adjust-date-to-timezone\" return-type=\"xs:date?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:date?\"/></proto></example><example role=\"signature\"><proto name=\"adjust-date-to-timezone\" return-type=\"xs:date?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:date?\"/><arg name=\"timezone\" type=\"xs:dayTimeDuration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$timezone</code> is not specified, then the effective value of\n                <code>$timezone</code> is the value of the implicit timezone in the dynamic\n             context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> is the empty sequence, then the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             the empty sequence, then the result is the value of <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             not the empty sequence, then the result is <code>$arg</code> with <code>$timezone</code>\n             as the timezone component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is the empty\n             sequence, then the result is the local value of <code>$arg</code> without its timezone\n             component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is not the\n             empty sequence, then the function returns the value of the expression:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>Let <code>$dt</code> be the value of <code>fn:dateTime($arg,\n                      xs:time('00:00:00'))</code>.</p></item><item><p>Let <code>$adt</code> be the value of <code>fn:adjust-dateTime-to-timezone($dt,\n                      $timezone)</code></p></item><item><p>The function returns the value of <code>xs:date($adt)</code></p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DT\" code=\"0003\"/> if <code>$timezone</code> is less\n             than <code>-PT14H</code> or greater than <code>PT14H</code> or is not an integral number\n             of minutes.</p></div>\n", 
      "summary" : "<p>  Adjusts an  xs:date  value to a specific timezone, or to no timezone\n             at all; the result is the date in the target timezone that contains the starting instant\n             of the supplied date.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:date", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "timezone", 
        "type" : "xs:dayTimeDuration", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:date?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "adjust-dateTime-to-timezone", 
      "qname" : "fn:adjust-dateTime-to-timezone", 
      "signature" : "($arg as xs:dateTime?) as xs:dateTime external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Adjusts an <code>xs:dateTime</code> value to a specific timezone, or to no\n             timezone at all.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"adjust-dateTime-to-timezone\" return-type=\"xs:dateTime?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:dateTime?\"/></proto></example><example role=\"signature\"><proto name=\"adjust-dateTime-to-timezone\" return-type=\"xs:dateTime?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:dateTime?\"/><arg name=\"timezone\" type=\"xs:dayTimeDuration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$timezone</code> is not specified, then the effective value of\n                <code>$timezone</code> is the value of the implicit timezone in the dynamic\n             context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> is the empty sequence, then the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             the empty sequence, then the result is <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             not the empty sequence, then the result is <code>$arg</code> with <code>$timezone</code>\n             as the timezone component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is the empty\n             sequence, then the result is the local value of <code>$arg</code> without its timezone\n             component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is not the\n             empty sequence, then the result is the <code>xs:dateTime</code> value that is equal to\n                <code>$arg</code> and that has a timezone component equal to\n             <code>$timezone</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DT\" code=\"0003\"/> if <code>$timezone</code> is less\n             than <code>-PT14H</code> or greater than <code>PT14H</code> or is not an integral number\n             of minutes.</p></div>\n", 
      "summary" : "<p>  Adjusts an  xs:dateTime  value to a specific timezone, or to no\n             timezone at all.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:dateTime", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:dateTime", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "adjust-dateTime-to-timezone", 
      "qname" : "fn:adjust-dateTime-to-timezone", 
      "signature" : "($arg as xs:dateTime?, $timezone as xs:dayTimeDuration?) as xs:dateTime external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Adjusts an <code>xs:dateTime</code> value to a specific timezone, or to no\n             timezone at all.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"adjust-dateTime-to-timezone\" return-type=\"xs:dateTime?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:dateTime?\"/></proto></example><example role=\"signature\"><proto name=\"adjust-dateTime-to-timezone\" return-type=\"xs:dateTime?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:dateTime?\"/><arg name=\"timezone\" type=\"xs:dayTimeDuration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$timezone</code> is not specified, then the effective value of\n                <code>$timezone</code> is the value of the implicit timezone in the dynamic\n             context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> is the empty sequence, then the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             the empty sequence, then the result is <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             not the empty sequence, then the result is <code>$arg</code> with <code>$timezone</code>\n             as the timezone component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is the empty\n             sequence, then the result is the local value of <code>$arg</code> without its timezone\n             component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is not the\n             empty sequence, then the result is the <code>xs:dateTime</code> value that is equal to\n                <code>$arg</code> and that has a timezone component equal to\n             <code>$timezone</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DT\" code=\"0003\"/> if <code>$timezone</code> is less\n             than <code>-PT14H</code> or greater than <code>PT14H</code> or is not an integral number\n             of minutes.</p></div>\n", 
      "summary" : "<p>  Adjusts an  xs:dateTime  value to a specific timezone, or to no\n             timezone at all.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:dateTime", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "timezone", 
        "type" : "xs:dayTimeDuration", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:dateTime", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "adjust-time-to-timezone", 
      "qname" : "fn:adjust-time-to-timezone", 
      "signature" : "($arg as xs:time?) as xs:time? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Adjusts an <code>xs:time</code> value to a specific timezone, or to no timezone\n             at all.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"adjust-time-to-timezone\" return-type=\"xs:time?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:time?\"/></proto></example><example role=\"signature\"><proto name=\"adjust-time-to-timezone\" return-type=\"xs:time?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:time?\"/><arg name=\"timezone\" type=\"xs:dayTimeDuration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$timezone</code> is not specified, then the effective value of\n                <code>$timezone</code> is the value of the implicit timezone in the dynamic\n             context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> is the empty sequence, then the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             the empty sequence, then the result is <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             not the empty sequence, then the result is <code>$arg</code> with <code>$timezone</code>\n             as the timezone component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is the empty\n             sequence, then the result is the localized value of <code>$arg</code> without its\n             timezone component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is not the\n             empty sequence, then:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>Let <code>$dt</code> be the <code>xs:dateTime</code> value\n                      <code>fn:dateTime(xs:date('1972-12-31'), $arg)</code>.</p></item><item><p>Let <code>$adt</code> be the value of <code>fn:adjust-dateTime-to-timezone($dt,\n                      $timezone)</code>\n                </p></item><item><p>The function returns the <code>xs:time</code> value\n                   <code>xs:time($adt)</code>.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DT\" code=\"0003\"/> if <code>$timezone</code> is less\n             than <code>-PT14H</code> or greater than <code>PT14H</code> or if does not contain an\n             integral number of minutes.</p></div>\n", 
      "summary" : "<p>  Adjusts an  xs:time  value to a specific timezone, or to no timezone\n             at all.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:time", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:time?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "adjust-time-to-timezone", 
      "qname" : "fn:adjust-time-to-timezone", 
      "signature" : "($arg as xs:time?, $timezone as xs:dayTimeDuration?) as xs:time? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Adjusts an <code>xs:time</code> value to a specific timezone, or to no timezone\n             at all.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"adjust-time-to-timezone\" return-type=\"xs:time?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:time?\"/></proto></example><example role=\"signature\"><proto name=\"adjust-time-to-timezone\" return-type=\"xs:time?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:time?\"/><arg name=\"timezone\" type=\"xs:dayTimeDuration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$timezone</code> is not specified, then the effective value of\n                <code>$timezone</code> is the value of the implicit timezone in the dynamic\n             context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> is the empty sequence, then the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             the empty sequence, then the result is <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> does not have a timezone component and <code>$timezone</code> is\n             not the empty sequence, then the result is <code>$arg</code> with <code>$timezone</code>\n             as the timezone component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is the empty\n             sequence, then the result is the localized value of <code>$arg</code> without its\n             timezone component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$arg</code> has a timezone component and <code>$timezone</code> is not the\n             empty sequence, then:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>Let <code>$dt</code> be the <code>xs:dateTime</code> value\n                      <code>fn:dateTime(xs:date('1972-12-31'), $arg)</code>.</p></item><item><p>Let <code>$adt</code> be the value of <code>fn:adjust-dateTime-to-timezone($dt,\n                      $timezone)</code>\n                </p></item><item><p>The function returns the <code>xs:time</code> value\n                   <code>xs:time($adt)</code>.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DT\" code=\"0003\"/> if <code>$timezone</code> is less\n             than <code>-PT14H</code> or greater than <code>PT14H</code> or if does not contain an\n             integral number of minutes.</p></div>\n", 
      "summary" : "<p>  Adjusts an  xs:time  value to a specific timezone, or to no timezone\n             at all.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:time", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "timezone", 
        "type" : "xs:dayTimeDuration", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:time?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "analyze-string", 
      "qname" : "fn:analyze-string", 
      "signature" : "($input as xs:string?, $pattern as xs:string) as element(fn:analyze-string-result) external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Analyzes a string using a regular expression, returning an XML structure that\n             identifies which parts of the input string matched or failed to match the regular\n             expression, and in the case of matched substrings, which substrings matched each\n             capturing group in the regular expression.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"analyze-string\" return-type=\"element(fn:analyze-string-result)\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"analyze-string\" return-type=\"element(fn:analyze-string-result)\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/><arg name=\"flags\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-nondeterministic\">nondeterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of calling the first version of this function (omitting the argument\n                <code>$flags</code>) is the same as the effect of calling the second version with the\n                <code>$flags</code> argument set to a zero-length string. Flags are defined in\n                <specref ref=\"flags\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$flags</code> argument is interpreted in the same way as for the\n                <code>fn:matches</code> function.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$input</code> is the empty sequence the function behaves as if\n                <code>$input</code> were the zero-length string. In this situation the result will be\n             an element node with no children.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an element node whose local name is\n                <code>analyze-string-result</code>. This element and all its descendant elements have\n             the namespace URI <code>http://www.w3.org/2005/xpath-functions</code>. The namespace\n             prefix is <termref def=\"implementation-dependent\"/>. The children of this element are a\n             sequence of <code>fn:match</code> and <code>fn:non-match</code> elements. This sequence\n             is formed by breaking the <code>$input</code> string into a sequence of strings,\n             returning any substring that matches <code>$pattern</code> as the content of a\n                <code>match</code> element, and any intervening substring as the content of a\n                <code>non-match</code> element.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">More specifically, the function starts at the beginning of the input string and attempts\n             to find the first substring that matches the regular expression. If there are several\n             matches, the first match is defined to be the one whose starting position comes first in\n             the string. If several alternatives within the regular expression both match at the same\n             position in the input string, then the match that is chosen is the first alternative\n             that matches. For example, if the input string is <code>The quick brown fox jumps</code>\n             and the regular expression is <code>jump|jumps</code>, then the match that is chosen is\n                <code>jump</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Having found the first match, the instruction proceeds to find the second and subsequent\n             matches by repeating the search, starting at the first <termref def=\"character\">character</termref> that was not included in the previous match.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The input string is thus partitioned into a sequence of substrings, some of which match\n             the regular expression, others which do not match it. Each substring will contain at\n             least one character. This sequence is represented in the result by the sequence of\n                <code>fn:match</code> and <code>fn:non-match</code> children of the returned element\n             node; the string value of the <code>fn:match</code> or <code>fn:non-match</code> element\n             will be the corresponding substring of <code>$input</code>, and the string value of the\n             returned element node will therefore be the same as <code>$input</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The content of an <code>fn:non-match</code> element is always a single text node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The content of a <code>fn:match</code> element, however, is in general a sequence of\n             text nodes and <code>fn:group</code> element children. An <code>fn:group</code> element\n             with a <code>nr</code> attribute having the integer value <var>N</var> identifies the\n             substring captured by the <var>Nth</var> parenthesized sub-expression in the regular\n             expression. For each capturing subexpression there will be at most one corresponding\n                <code>fn:group</code> element in each <code>fn:match</code> element in the\n             result.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the function is called twice with the same arguments, it is <termref def=\"implementation-dependent\"/> whether the two calls return the same element node\n             or distinct (but deep equal) element nodes. In this respect it is\n             <termref def=\"nondeterministic\">nondeterministic</termref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"J\">The base URI of the element nodes in the result is\n          <termref def=\"implementation-dependent\"/></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A schema is defined for the structure of the returned element, containing the\n             definitions below. The returned element and its descendants will have type annotations\n             obtained by validating the returned element against this schema, unless the function is\n             used in an environment where type annotations are not supported (for example, a Basic\n             XSLT Processor), in which case the elements will all be annotated as\n                <code>xs:untyped</code> and the attributes as <code>xs:untypedAtomic</code>.</p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p diff=\"add\" at=\"M\">A free-standing copy of this schema can be found at <loc xmlns:xlink=\"http://www.w3.org/1999/xlink\" href=\"analyze-string.xsd\" xlink:type=\"simple\" xlink:show=\"replace\" xlink:actuate=\"onRequest\">analyze-string.xsd</loc></p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">\n             <eg xml:space=\"preserve\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n &lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n     targetNamespace=\"http://www.w3.org/2005/xpath-functions\"\n     xmlns:fn=\"http://www.w3.org/2005/xpath-functions\"\n     elementFormDefault=\"qualified\"&gt;\n     &lt;xs:element name=\"analyze-string-result\" type=\"fn:analyze-string-result-type\"/&gt;\n     &lt;xs:element name=\"match\" type=\"fn:match-type\"/&gt;\n     &lt;xs:element name=\"non-match\" type=\"xs:string\"/&gt;\n     &lt;xs:element name=\"group\" type=\"fn:group-type\"/&gt;\n     &lt;xs:complexType name=\"analyze-string-result-type\" mixed=\"true\"&gt;\n         &lt;xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\"&gt;\n             &lt;xs:element ref=\"fn:match\"/&gt;\n             &lt;xs:element ref=\"fn:non-match\"/&gt;\n         &lt;/xs:choice&gt;\n     &lt;/xs:complexType&gt;\n     &lt;xs:complexType name=\"match-type\" mixed=\"true\"&gt;\n         &lt;xs:sequence&gt;\n             &lt;xs:element ref=\"fn:group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n         &lt;/xs:sequence&gt;\n     &lt;/xs:complexType&gt;\n     &lt;xs:complexType name=\"group-type\" mixed=\"true\"&gt;\n         &lt;xs:sequence&gt;\n             &lt;xs:element ref=\"fn:group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n         &lt;/xs:sequence&gt;\n         &lt;xs:attribute name=\"nr\" type=\"xs:positiveInteger\"/&gt;\n     &lt;/xs:complexType&gt;\n &lt;/xs:schema&gt;\n </eg>\n          </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0002\"/> if the value of\n                <code>$pattern</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0001\"/> if the value of\n                <code>$flags</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0003\"/> if the supplied\n                <code>$pattern</code> matches a zero-length string, that is, if <code>fn:matches(\"\",\n                $pattern, $flags)</code> returns <code>true</code>.</p></div>\n", 
      "summary" : "<p>  Analyzes a string using a regular expression, returning an XML structure that\n             identifies which parts of the input string matched or failed to match the regular\n             expression, and in the case of matched substrings, which substrings matched each\n             capturing group in the regular expression.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "input", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "pattern", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "element(fn:analyze-string-result)", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "analyze-string", 
      "qname" : "fn:analyze-string", 
      "signature" : "($input as xs:string?, $pattern as xs:string, $flags as xs:string) as element(fn:analyze-string-result) external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Analyzes a string using a regular expression, returning an XML structure that\n             identifies which parts of the input string matched or failed to match the regular\n             expression, and in the case of matched substrings, which substrings matched each\n             capturing group in the regular expression.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"analyze-string\" return-type=\"element(fn:analyze-string-result)\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"analyze-string\" return-type=\"element(fn:analyze-string-result)\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/><arg name=\"flags\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-nondeterministic\">nondeterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of calling the first version of this function (omitting the argument\n                <code>$flags</code>) is the same as the effect of calling the second version with the\n                <code>$flags</code> argument set to a zero-length string. Flags are defined in\n                <specref ref=\"flags\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$flags</code> argument is interpreted in the same way as for the\n                <code>fn:matches</code> function.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$input</code> is the empty sequence the function behaves as if\n                <code>$input</code> were the zero-length string. In this situation the result will be\n             an element node with no children.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an element node whose local name is\n                <code>analyze-string-result</code>. This element and all its descendant elements have\n             the namespace URI <code>http://www.w3.org/2005/xpath-functions</code>. The namespace\n             prefix is <termref def=\"implementation-dependent\"/>. The children of this element are a\n             sequence of <code>fn:match</code> and <code>fn:non-match</code> elements. This sequence\n             is formed by breaking the <code>$input</code> string into a sequence of strings,\n             returning any substring that matches <code>$pattern</code> as the content of a\n                <code>match</code> element, and any intervening substring as the content of a\n                <code>non-match</code> element.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">More specifically, the function starts at the beginning of the input string and attempts\n             to find the first substring that matches the regular expression. If there are several\n             matches, the first match is defined to be the one whose starting position comes first in\n             the string. If several alternatives within the regular expression both match at the same\n             position in the input string, then the match that is chosen is the first alternative\n             that matches. For example, if the input string is <code>The quick brown fox jumps</code>\n             and the regular expression is <code>jump|jumps</code>, then the match that is chosen is\n                <code>jump</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Having found the first match, the instruction proceeds to find the second and subsequent\n             matches by repeating the search, starting at the first <termref def=\"character\">character</termref> that was not included in the previous match.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The input string is thus partitioned into a sequence of substrings, some of which match\n             the regular expression, others which do not match it. Each substring will contain at\n             least one character. This sequence is represented in the result by the sequence of\n                <code>fn:match</code> and <code>fn:non-match</code> children of the returned element\n             node; the string value of the <code>fn:match</code> or <code>fn:non-match</code> element\n             will be the corresponding substring of <code>$input</code>, and the string value of the\n             returned element node will therefore be the same as <code>$input</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The content of an <code>fn:non-match</code> element is always a single text node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The content of a <code>fn:match</code> element, however, is in general a sequence of\n             text nodes and <code>fn:group</code> element children. An <code>fn:group</code> element\n             with a <code>nr</code> attribute having the integer value <var>N</var> identifies the\n             substring captured by the <var>Nth</var> parenthesized sub-expression in the regular\n             expression. For each capturing subexpression there will be at most one corresponding\n                <code>fn:group</code> element in each <code>fn:match</code> element in the\n             result.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the function is called twice with the same arguments, it is <termref def=\"implementation-dependent\"/> whether the two calls return the same element node\n             or distinct (but deep equal) element nodes. In this respect it is\n             <termref def=\"nondeterministic\">nondeterministic</termref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"J\">The base URI of the element nodes in the result is\n          <termref def=\"implementation-dependent\"/></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A schema is defined for the structure of the returned element, containing the\n             definitions below. The returned element and its descendants will have type annotations\n             obtained by validating the returned element against this schema, unless the function is\n             used in an environment where type annotations are not supported (for example, a Basic\n             XSLT Processor), in which case the elements will all be annotated as\n                <code>xs:untyped</code> and the attributes as <code>xs:untypedAtomic</code>.</p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p diff=\"add\" at=\"M\">A free-standing copy of this schema can be found at <loc xmlns:xlink=\"http://www.w3.org/1999/xlink\" href=\"analyze-string.xsd\" xlink:type=\"simple\" xlink:show=\"replace\" xlink:actuate=\"onRequest\">analyze-string.xsd</loc></p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">\n             <eg xml:space=\"preserve\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n &lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n     targetNamespace=\"http://www.w3.org/2005/xpath-functions\"\n     xmlns:fn=\"http://www.w3.org/2005/xpath-functions\"\n     elementFormDefault=\"qualified\"&gt;\n     &lt;xs:element name=\"analyze-string-result\" type=\"fn:analyze-string-result-type\"/&gt;\n     &lt;xs:element name=\"match\" type=\"fn:match-type\"/&gt;\n     &lt;xs:element name=\"non-match\" type=\"xs:string\"/&gt;\n     &lt;xs:element name=\"group\" type=\"fn:group-type\"/&gt;\n     &lt;xs:complexType name=\"analyze-string-result-type\" mixed=\"true\"&gt;\n         &lt;xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\"&gt;\n             &lt;xs:element ref=\"fn:match\"/&gt;\n             &lt;xs:element ref=\"fn:non-match\"/&gt;\n         &lt;/xs:choice&gt;\n     &lt;/xs:complexType&gt;\n     &lt;xs:complexType name=\"match-type\" mixed=\"true\"&gt;\n         &lt;xs:sequence&gt;\n             &lt;xs:element ref=\"fn:group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n         &lt;/xs:sequence&gt;\n     &lt;/xs:complexType&gt;\n     &lt;xs:complexType name=\"group-type\" mixed=\"true\"&gt;\n         &lt;xs:sequence&gt;\n             &lt;xs:element ref=\"fn:group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n         &lt;/xs:sequence&gt;\n         &lt;xs:attribute name=\"nr\" type=\"xs:positiveInteger\"/&gt;\n     &lt;/xs:complexType&gt;\n &lt;/xs:schema&gt;\n </eg>\n          </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0002\"/> if the value of\n                <code>$pattern</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0001\"/> if the value of\n                <code>$flags</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0003\"/> if the supplied\n                <code>$pattern</code> matches a zero-length string, that is, if <code>fn:matches(\"\",\n                $pattern, $flags)</code> returns <code>true</code>.</p></div>\n", 
      "summary" : "<p>  Analyzes a string using a regular expression, returning an XML structure that\n             identifies which parts of the input string matched or failed to match the regular\n             expression, and in the case of matched substrings, which substrings matched each\n             capturing group in the regular expression.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "input", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "pattern", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "flags", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "element(fn:analyze-string-result)", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "available-environment-variables", 
      "qname" : "fn:available-environment-variables", 
      "signature" : "() as xs:string* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a list of environment variable names that are suitable for passing to\n                <code>fn:environment-variable</code>, as a (possibly empty) sequence of strings.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"available-environment-variables\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tenvironment variables.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence of strings, being the names of the environment variables\n             in the dynamic context in some <termref def=\"implementation-dependent\">implementation-dependent</termref> order.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function is <termref def=\"dt-deterministic\">deterministic</termref>: that is, the\n             set of available environment variables does not vary during evaluation.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a list of strings, containing no duplicates.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">It is intended that the strings in this list should be suitable for passing to\n                <code>fn:environment-variable</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">See also the note on security under the definition of the\n                <code>fn:environment-variable</code> function. If access to environment variables has\n             been disabled, <code>fn:available-environment-variables</code> always returns the empty\n             sequence.</p></div>\n", 
      "summary" : "<p>  Returns a list of environment variable names that are suitable for passing to\n                 fn:environment-variable , as a (possibly empty) sequence of strings.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:string*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "available-environment-variables", 
      "qname" : "fn:available-environment-variables", 
      "signature" : "() as xs:string* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a list of environment variable names that are suitable for passing to\n                <code>fn:environment-variable</code>, as a (possibly empty) sequence of strings.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"available-environment-variables\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tenvironment variables.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence of strings, being the names of the environment variables\n             in the dynamic context in some <termref def=\"implementation-dependent\">implementation-dependent</termref> order.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function is <termref def=\"dt-deterministic\">deterministic</termref>: that is, the\n             set of available environment variables does not vary during evaluation.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a list of strings, containing no duplicates.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">It is intended that the strings in this list should be suitable for passing to\n                <code>fn:environment-variable</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">See also the note on security under the definition of the\n                <code>fn:environment-variable</code> function. If access to environment variables has\n             been disabled, <code>fn:available-environment-variables</code> always returns the empty\n             sequence.</p></div>\n", 
      "summary" : "<p>  Returns a list of environment variable names that are suitable for passing to\n                 fn:environment-variable , as a (possibly empty) sequence of strings.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:string*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "avg", 
      "qname" : "fn:avg", 
      "signature" : "($arg as xs:anyAtomicType*) as xs:anyAtomicType? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the average of the values in the input sequence <code>$arg</code>, that\n             is, the sum of the values divided by the number of values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"avg\" return-type=\"xs:anyAtomicType?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the empty sequence is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> contains values of type <code>xs:untypedAtomic</code> they are cast\n             to <code>xs:double</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Duration values must either all be <code>xs:yearMonthDuration</code> values or must all\n             be <code>xs:dayTimeDuration</code> values. For numeric values, the numeric promotion\n             rules defined in <specref ref=\"op.numeric\"/> are used to promote all values to a single\n             common type. After these operations, <code>$arg</code> must contain items of a single\n             type, which must be one of the four numeric types, <code>xs:yearMonthDuration</code> or\n                <code>xs:dayTimeDuration</code> or one if its subtypes.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the average of the values as <code>sum($arg) div\n             count($arg)</code>; but the implementation may use an otherwise equivalent algorithm\n             that avoids arithmetic overflow.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A type error is raised <errorref class=\"RG\" code=\"0006\"/> if the input sequence contains\n             items of incompatible types, as described above.</p></div>\n", 
      "summary" : "<p>  Returns the average of the values in the input sequence  $arg , that\n             is, the sum of the values divided by the number of values.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyAtomicType?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "base-uri", 
      "qname" : "fn:base-uri", 
      "signature" : "() as xs:anyURI? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the base URI of a node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"base-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"base-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">The zero-argument version of the function returns the base URI of the\n             context node: it is equivalent to calling <code>fn:base-uri(.)</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">The single-argument version of the function behaves as follows:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item>If <code>$arg</code> is the empty sequence, the function returns the empty\n                sequence.</item><item>Otherwise, the function returns the value of the <code>dm:base-uri</code> accessor\n                applied to the node <code>$arg</code>. This accessor is defined, for each kind of\n                node, in the XDM specification (See <xspecref spec=\"DM30\" ref=\"dm-base-uri\"/>).</item></olist><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">As explained in XDM, document, element and processing-instruction nodes have a\n             base-uri property which may be empty. The base-uri property for all other node kinds is\n             the empty sequence. The dm:base-uri accessor returns the base-uri property of a node if\n             it exists and is non-empty; otherwise it returns the result of applying the dm:base-uri\n             accessor to its parent, recursively. If the node does not have a parent, or if the\n             recursive ascent up the ancestor chain encounters a parentless node whose base-uri\n             property is empty, the empty sequence is returned. In the case of namespace nodes,\n             however, the result is always an empty sequence -- it does not depend on the base URI of\n             the parent element.</note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">See also <code>fn:static-base-uri</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the base URI of a node.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:anyURI?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "base-uri", 
      "qname" : "fn:base-uri", 
      "signature" : "($arg as node()?) as xs:anyURI? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the base URI of a node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"base-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"base-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">The zero-argument version of the function returns the base URI of the\n             context node: it is equivalent to calling <code>fn:base-uri(.)</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">The single-argument version of the function behaves as follows:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item>If <code>$arg</code> is the empty sequence, the function returns the empty\n                sequence.</item><item>Otherwise, the function returns the value of the <code>dm:base-uri</code> accessor\n                applied to the node <code>$arg</code>. This accessor is defined, for each kind of\n                node, in the XDM specification (See <xspecref spec=\"DM30\" ref=\"dm-base-uri\"/>).</item></olist><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">As explained in XDM, document, element and processing-instruction nodes have a\n             base-uri property which may be empty. The base-uri property for all other node kinds is\n             the empty sequence. The dm:base-uri accessor returns the base-uri property of a node if\n             it exists and is non-empty; otherwise it returns the result of applying the dm:base-uri\n             accessor to its parent, recursively. If the node does not have a parent, or if the\n             recursive ascent up the ancestor chain encounters a parentless node whose base-uri\n             property is empty, the empty sequence is returned. In the case of namespace nodes,\n             however, the result is always an empty sequence -- it does not depend on the base URI of\n             the parent element.</note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">See also <code>fn:static-base-uri</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the base URI of a node.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "node()", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyURI?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "boolean", 
      "qname" : "fn:boolean", 
      "signature" : "($arg as item()*) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Computes the effective boolean value of the sequence <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"boolean\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function computes the effective boolean value of a sequence, defined according to\n             the following rules. See also <xspecref spec=\"XP30\" ref=\"id-ebv\"/>.</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If <code>$arg</code> is the empty sequence, <code>fn:boolean</code> returns\n                      <code>false</code>.</p></item><item><p>If <code>$arg</code> is a sequence whose first item is a node,\n                      <code>fn:boolean</code> returns <code>true</code>.</p></item><item><p>If <code>$arg</code> is a singleton value of type <code>xs:boolean</code> or a\n                   derived from <code>xs:boolean</code>, <code>fn:boolean</code> returns\n                      <code>$arg</code>.</p></item><item><p>If <code>$arg</code> is a singleton value of type <code>xs:string</code> or a type\n                   derived from <code>xs:string</code>, <code>xs:anyURI</code> or a type derived from\n                      <code>xs:anyURI</code> or <code>xs:untypedAtomic</code>,\n                      <code>fn:boolean</code> returns <code>false</code> if the operand value has\n                   zero length; otherwise it returns <code>true</code>.</p></item><item><p>If <code>$arg</code> is a singleton value of any numeric type or a type derived\n                   from a numeric type, <code>fn:boolean</code> returns <code>false</code> if the\n                   operand value is <code>NaN</code> or is numerically equal to zero; otherwise it\n                   returns <code>true</code>.</p></item><item><p>In all other cases, <code>fn:boolean</code> raises a type error <errorref class=\"RG\" code=\"0006\"/>.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">The static semantics of this function are described in [Formal\n             Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of this function is not necessarily the same as <code>$arg cast as\n                xs:boolean</code>. For example, <code>fn:boolean(\"false\")</code> returns the value\n                <code>true</code> whereas <code>\"false\" cast as xs:boolean</code> (which can also be\n             written <code>xs:boolean(\"false\")</code>) returns <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">let <code>$abc</code> := <code>(\"a\", \"b\", \"\")</code></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><code>fn:boolean($abc)</code> raises a type error <errorref class=\"RG\" code=\"0006\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:boolean($abc[1])</code> returns <code>true()</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:boolean($abc[0])</code> returns <code>false()</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:boolean($abc[3])</code> returns <code>false()</code>.</p></div>\n", 
      "summary" : "<p>  Computes the effective boolean value of the sequence  $arg .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "ceiling", 
      "qname" : "fn:ceiling", 
      "signature" : "($arg as numeric?) as numeric? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Rounds <code>$arg</code> upwards to a whole number.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"ceiling\" return-type=\"numeric?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"numeric?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">General rules: see <specref ref=\"numeric-value-functions\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the smallest (closest to negative infinity) number with no\n             fractional part that is not less than the value of <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the type of <code>$arg</code> is one of the four numeric types <code>xs:float</code>,\n                <code>xs:double</code>, <code>xs:decimal</code> or <code>xs:integer</code> the type\n             of the result is the same as the type of <code>$arg</code>. If the type of\n                <code>$arg</code> is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For <code>xs:float</code> and <code>xs:double</code> arguments, if the argument is\n             positive zero, then positive zero is returned. If the argument is negative zero, then\n             negative zero is returned. If the argument is less than zero and greater than -1,\n             negative zero is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:ceiling(10.5)</code> returns <code>11</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:ceiling(-10.5)</code> returns <code>-10</code>.</p></div>\n", 
      "summary" : "<p>  Rounds  $arg  upwards to a whole number.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "numeric", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "numeric?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "codepoint-equal", 
      "qname" : "fn:codepoint-equal", 
      "signature" : "($comparand1 as xs:string?, $comparand2 as xs:string?) as xs:boolean? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if two strings are equal, considered codepoint-by-codepoint.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"codepoint-equal\" return-type=\"xs:boolean?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"comparand1\" type=\"xs:string?\"/><arg name=\"comparand2\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If either argument is the empty sequence, the function returns the empty sequence. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns <code>true</code> or <code>false</code> depending on\n             whether the value of <code>$comparand1</code> is equal to the value of\n                <code>$comparand2</code>, according to the Unicode codepoint collation\n                (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function allows <code>xs:anyURI</code> values to be compared without having to\n             specify the Unicode codepoint collation.</p></div>\n", 
      "summary" : "<p>  Returns true if two strings are equal, considered codepoint-by-codepoint.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "comparand1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "comparand2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "codepoints-to-string", 
      "qname" : "fn:codepoints-to-string", 
      "signature" : "($arg as xs:integer*) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Creates an <code>xs:string</code> from a sequence of <termref def=\"codepoint\">codepoints</termref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"codepoints-to-string\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:integer*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the string made up from the <termref def=\"character\">characters</termref> whose Unicode <termref def=\"codepoint\">codepoints</termref> are\n             supplied in <code>$arg</code>. This will be the zero-length string if <code>$arg</code>\n             is the empty sequence. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised <errorref class=\"CH\" code=\"0001\"/> if any of the codepoints in\n                <code>$arg</code> is not a permitted XML character.</p></div>\n", 
      "summary" : "<p>  Creates an  xs:string  from a sequence of  codepoints .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:integer", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "codepoints-to-string", 
      "qname" : "fn:codepoints-to-string", 
      "signature" : "($arg as xs:integer*) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Creates an <code>xs:string</code> from a sequence of <termref def=\"codepoint\">codepoints</termref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"codepoints-to-string\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:integer*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the string made up from the <termref def=\"character\">characters</termref> whose Unicode <termref def=\"codepoint\">codepoints</termref> are\n             supplied in <code>$arg</code>. This will be the zero-length string if <code>$arg</code>\n             is the empty sequence. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised <errorref class=\"CH\" code=\"0001\"/> if any of the codepoints in\n                <code>$arg</code> is not a permitted XML character.</p></div>\n", 
      "summary" : "<p>  Creates an  xs:string  from a sequence of  codepoints .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:integer", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "collection", 
      "qname" : "fn:collection", 
      "signature" : "() as node()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a sequence of nodes representing a collection of documents indentified\n             by a collection URI; or a default collection if no URI is supplied.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"collection\" return-type=\"node()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"collection\" return-type=\"node()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tavailable node collections, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function takes an <code>xs:string</code> as argument and returns a sequence of\n             nodes obtained by interpreting <code>$arg</code> as an <code>xs:anyURI</code> and\n             resolving it according to the mapping specified in <term>Available node collections</term>\n             described in <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <term>Available node collections</term> provides a mapping from this string to a sequence\n             of nodes, the function returns that sequence. If <term>Available node collections</term> maps\n             the string to an empty sequence, then the function returns an empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is not specified, the function returns the sequence of the nodes in\n             the default node collection in the dynamic context. See <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is a relative <code>xs:anyURI</code>, it is resolved\n             against the value of the base-URI property from the static context. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">By default, this function is <termref def=\"deterministic\">deterministic</termref>.\n             This means that repeated\n             calls on the function with the same argument will return the same result. However, for\n             performance reasons, implementations may provide a user option to evaluate the function\n             without a guarantee of determinism. The manner in which any such option is provided is\n                <termref def=\"implementation-defined\"/>. If the user has not selected such an option,\n             a call to this function must either return a deterministic result or must raise a <phrase diff=\"add\" at=\"L\">dynamic</phrase> error\n                <errorref class=\"DC\" code=\"0003\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"G\">There is no requirement that the returned nodes should be in document\n             order, nor is there a requirement that the result should contain no duplicates.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/> if no URI is supplied and the\n             value of the default collection is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"J\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/> if <term>available\n                node collections</term> provides no mapping for the absolutized URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0004\"/> if <code>$arg</code> is not a\n             valid <code>xs:anyURI</code>.</p></div>\n", 
      "summary" : "<p>  Returns a sequence of nodes representing a collection of documents indentified\n             by a collection URI; or a default collection if no URI is supplied.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "node()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "collection", 
      "qname" : "fn:collection", 
      "signature" : "($arg as xs:string?) as node()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a sequence of nodes representing a collection of documents indentified\n             by a collection URI; or a default collection if no URI is supplied.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"collection\" return-type=\"node()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"collection\" return-type=\"node()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tavailable node collections, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function takes an <code>xs:string</code> as argument and returns a sequence of\n             nodes obtained by interpreting <code>$arg</code> as an <code>xs:anyURI</code> and\n             resolving it according to the mapping specified in <term>Available node collections</term>\n             described in <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <term>Available node collections</term> provides a mapping from this string to a sequence\n             of nodes, the function returns that sequence. If <term>Available node collections</term> maps\n             the string to an empty sequence, then the function returns an empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is not specified, the function returns the sequence of the nodes in\n             the default node collection in the dynamic context. See <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is a relative <code>xs:anyURI</code>, it is resolved\n             against the value of the base-URI property from the static context. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">By default, this function is <termref def=\"deterministic\">deterministic</termref>.\n             This means that repeated\n             calls on the function with the same argument will return the same result. However, for\n             performance reasons, implementations may provide a user option to evaluate the function\n             without a guarantee of determinism. The manner in which any such option is provided is\n                <termref def=\"implementation-defined\"/>. If the user has not selected such an option,\n             a call to this function must either return a deterministic result or must raise a <phrase diff=\"add\" at=\"L\">dynamic</phrase> error\n                <errorref class=\"DC\" code=\"0003\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"G\">There is no requirement that the returned nodes should be in document\n             order, nor is there a requirement that the result should contain no duplicates.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/> if no URI is supplied and the\n             value of the default collection is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"J\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/> if <term>available\n                node collections</term> provides no mapping for the absolutized URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0004\"/> if <code>$arg</code> is not a\n             valid <code>xs:anyURI</code>.</p></div>\n", 
      "summary" : "<p>  Returns a sequence of nodes representing a collection of documents indentified\n             by a collection URI; or a default collection if no URI is supplied.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "node()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "compare", 
      "qname" : "fn:compare", 
      "signature" : "($comparand1 as xs:string?, $comparand2 as xs:string?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns -1, 0, or 1, depending on whether <code>$comparand1</code> collates\n             before, equal to, or after <code>$comparand2</code> according to the rules of a selected\n             collation.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"compare\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"comparand1\" type=\"xs:string?\"/><arg name=\"comparand2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"compare\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"comparand1\" type=\"xs:string?\"/><arg name=\"comparand2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns -1, 0, or 1, depending on whether the value of the <code>$comparand1</code> is\n             respectively less than, equal to, or greater than the value of <code>$comparand2</code>,\n             according to the rules of the collation that is used. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If either <code>$comparand1</code> or <code>$comparand2</code> is the empty sequence,\n             the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function, called with the first signature, defines the semantics of the \"eq\", \"ne\",\n             \"gt\", \"lt\", \"le\" and \"ge\" operators on <code>xs:string</code> values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:compare('abc', 'abc')</code> returns <code>0</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:compare('Strasse', 'Stra√üe')</code> returns <code>0</code>. <emph>(Assuming the default collation includes provisions that equate\n                      <quote>ss</quote> and the (German) character <quote>√ü</quote>\n                      (<quote>sharp-s</quote>). Otherwise, the returned value depends on the\n                   semantics of the default collation.).</emph></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:compare('Strasse', 'Stra√üe',\n                   'http://example.com/deutsch')</code> returns <code>0</code>. <emph>(Assuming the collation identified by the URI\n                      <code>http://example.com/deutsch</code> includes provisions that equate\n                      <quote>ss</quote> and the (German) character <quote>√ü</quote>\n                      (<quote>sharp-s</quote>). Otherwise, the returned value depends on the\n                   semantics of that collation.).</emph></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:compare('Strassen', 'Stra√üe')</code> returns <code>1</code>. <emph>(Assuming the default collation includes provisions that treat\n                   differences between <quote>ss</quote> and the (German) character <quote>√ü</quote>\n                      (<quote>sharp-s</quote>) with less strength than the differences between the\n                   base characters, such as the final <quote>n</quote>. ).</emph></p></div>\n", 
      "summary" : "<p>  Returns -1, 0, or 1, depending on whether  $comparand1  collates\n             before, equal to, or after  $comparand2  according to the rules of a selected\n             collation.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "comparand1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "comparand2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "compare", 
      "qname" : "fn:compare", 
      "signature" : "($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns -1, 0, or 1, depending on whether <code>$comparand1</code> collates\n             before, equal to, or after <code>$comparand2</code> according to the rules of a selected\n             collation.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"compare\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"comparand1\" type=\"xs:string?\"/><arg name=\"comparand2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"compare\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"comparand1\" type=\"xs:string?\"/><arg name=\"comparand2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns -1, 0, or 1, depending on whether the value of the <code>$comparand1</code> is\n             respectively less than, equal to, or greater than the value of <code>$comparand2</code>,\n             according to the rules of the collation that is used. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If either <code>$comparand1</code> or <code>$comparand2</code> is the empty sequence,\n             the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function, called with the first signature, defines the semantics of the \"eq\", \"ne\",\n             \"gt\", \"lt\", \"le\" and \"ge\" operators on <code>xs:string</code> values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:compare('abc', 'abc')</code> returns <code>0</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:compare('Strasse', 'Stra√üe')</code> returns <code>0</code>. <emph>(Assuming the default collation includes provisions that equate\n                      <quote>ss</quote> and the (German) character <quote>√ü</quote>\n                      (<quote>sharp-s</quote>). Otherwise, the returned value depends on the\n                   semantics of the default collation.).</emph></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:compare('Strasse', 'Stra√üe',\n                   'http://example.com/deutsch')</code> returns <code>0</code>. <emph>(Assuming the collation identified by the URI\n                      <code>http://example.com/deutsch</code> includes provisions that equate\n                      <quote>ss</quote> and the (German) character <quote>√ü</quote>\n                      (<quote>sharp-s</quote>). Otherwise, the returned value depends on the\n                   semantics of that collation.).</emph></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:compare('Strassen', 'Stra√üe')</code> returns <code>1</code>. <emph>(Assuming the default collation includes provisions that treat\n                   differences between <quote>ss</quote> and the (German) character <quote>√ü</quote>\n                      (<quote>sharp-s</quote>) with less strength than the differences between the\n                   base characters, such as the final <quote>n</quote>. ).</emph></p></div>\n", 
      "summary" : "<p>  Returns -1, 0, or 1, depending on whether  $comparand1  collates\n             before, equal to, or after  $comparand2  according to the rules of a selected\n             collation.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "comparand1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "comparand2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "collation", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "concat", 
      "qname" : "fn:concat", 
      "signature" : "($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the concatenation of the string values of the arguments.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">\n          The two-argument form of this function defines the semantics of the \"||\" operator.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"concat\" return-type=\"xs:string\" isOp=\"yes\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:anyAtomicType?\"/><arg name=\"arg2\" type=\"xs:anyAtomicType?\"/><arg name=\"...\" type=\"xs:anyAtomicType?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function accepts two or more <code>xs:anyAtomicType</code> arguments and casts each\n             one to <code>xs:string</code>. The function returns the <code>xs:string</code> that is\n             the concatenation of the values of its arguments after conversion. If any argument is\n             the empty sequence, that argument is treated as the zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E19\">The <code>fn:concat</code> function is specified to allow two or\n             more arguments, which are concatenated together. This is the only function specified in\n             this document that allows a variable number of arguments. This capability is retained\n             for compatibility with <bibref ref=\"xpath\"/>. </p></div>\n", 
      "summary" : "<p>  Returns the concatenation of the string values of the arguments.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "contains", 
      "qname" : "fn:contains", 
      "signature" : "($arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the string <code>$arg1</code> contains <code>$arg2</code> as a\n             substring, taking collations into account.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"contains\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"contains\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> or <code>$arg2</code> is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg2</code> is the zero-length string, then the function returns\n                <code>true</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> is the zero-length string, the function returns\n                <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an <code>xs:boolean</code> indicating whether or not the value of\n                <code>$arg1</code> contains (at the beginning, at the end, or anywhere within) at\n             least one sequence of collation units that provides a <term>minimal match</term> to the\n             collation units in the value of <code>$arg2</code>, according to the collation that is\n             used.</p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p><term>Minimal match</term> is defined in <bibref ref=\"Unicode-Collations\"/>. </p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"CH\" code=\"0004\"/> if the\n             specified collation does not support collation units.</p></div>\n", 
      "summary" : "<p>  Returns true if the string  $arg1  contains  $arg2  as a\n             substring, taking collations into account.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "contains", 
      "qname" : "fn:contains", 
      "signature" : "($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the string <code>$arg1</code> contains <code>$arg2</code> as a\n             substring, taking collations into account.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"contains\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"contains\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> or <code>$arg2</code> is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg2</code> is the zero-length string, then the function returns\n                <code>true</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> is the zero-length string, the function returns\n                <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an <code>xs:boolean</code> indicating whether or not the value of\n                <code>$arg1</code> contains (at the beginning, at the end, or anywhere within) at\n             least one sequence of collation units that provides a <term>minimal match</term> to the\n             collation units in the value of <code>$arg2</code>, according to the collation that is\n             used.</p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p><term>Minimal match</term> is defined in <bibref ref=\"Unicode-Collations\"/>. </p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"CH\" code=\"0004\"/> if the\n             specified collation does not support collation units.</p></div>\n", 
      "summary" : "<p>  Returns true if the string  $arg1  contains  $arg2  as a\n             substring, taking collations into account.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "collation", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "count", 
      "qname" : "fn:count", 
      "signature" : "($arg as item()*) as xs:integer external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the number of items in a sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"count\" return-type=\"xs:integer\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the number of items in the value of <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns 0 if <code>$arg</code> is the empty sequence.</p></div>\n", 
      "summary" : "<p>  Returns the number of items in a sequence.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "current-date", 
      "qname" : "fn:current-date", 
      "signature" : "() as xs:date external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the current date.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"current-date\" return-type=\"xs:date\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns <code>xs:date(fn:current-dateTime())</code>. This is an <code>xs:date</code>\n             (with timezone) that is current at some time during the evaluation of a query or\n             transformation in which <code>fn:current-date</code> is executed.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\"/>. The precise instant during the query or\n             transformation represented by the value of <code>fn:current-date</code> is <termref def=\"implementation-dependent\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The returned date will always have an associated timezone, which will always be the same\n             as the implicit timezone in the dynamic context</p></div>\n", 
      "summary" : "<p>  Returns the current date.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:date", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "current-dateTime", 
      "qname" : "fn:current-dateTime", 
      "signature" : "() as xs:dateTimeStamp external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the current date and time (with timezone).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"current-dateTime\" return-type=\"xs:dateTimeStamp\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the current dateTime (with timezone) from the dynamic context. (See <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.) This is an\n                <code>xs:dateTime</code> that is current at some time during the evaluation of a\n             query or transformation in which <code>fn:current-dateTime</code> is executed.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\"/>. The precise instant during the query or\n             transformation represented by the value of <code>fn:current-dateTime()</code> is\n                <termref def=\"implementation-dependent\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A\">If the implementation supports data types from XSD 1.1 then the\n             returned value will be an instance of <code>xs:dateTimeStamp</code>. Otherwise, the only\n             guarantees are that it will be an instance of <code>xs:dateTime</code> and will have a\n             timezone component.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The returned <code>xs:dateTime</code> will always have an associated timezone, which\n             will always be the same as the implicit timezone in the dynamic context</p></div>\n", 
      "summary" : "<p>  Returns the current date and time (with timezone).</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:dateTimeStamp", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "current-time", 
      "qname" : "fn:current-time", 
      "signature" : "() as xs:time external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the current time.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"current-time\" return-type=\"xs:time\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns <code>xs:time(fn:current-dateTime())</code>. This is an <code>xs:time</code>\n             (with timezone) that is current at some time during the evaluation of a query or\n             transformation in which <code>fn:current-time</code> is executed.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\"/>. The precise instant during the query or\n             transformation represented by the value of <code>fn:current-time()</code> is <termref def=\"implementation-dependent\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The returned time will always have an associated timezone, which will always be the same\n             as the implicit timezone in the dynamic context</p></div>\n", 
      "summary" : "<p>  Returns the current time.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:time", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "data", 
      "qname" : "fn:data", 
      "signature" : "() as xs:anyAtomicType* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the result of atomizing a sequence, that is, replacing all nodes in the\n             sequence by their typed values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"data\" return-type=\"xs:anyAtomicType*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"data\" return-type=\"xs:anyAtomicType*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"F\">If the argument is omitted, it defaults to the context item\n                (<code>.</code>). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> The result of <code>fn:data</code> is the sequence of atomic values produced by\n             applying the following rules to each item in <code>$arg</code>:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If the item is an atomic value, it is appended to the result sequence.</p></item><item><p> If the item is a node, the typed value of the node is appended to the result\n                   sequence. The typed value is a sequence of zero or more atomic values:\n                   specifically, the result of the <code>dm:typed-value</code> accessor as defined in\n                      <bibref ref=\"xpath-datamodel-30\"/> (See <xspecref spec=\"DM30\" ref=\"dm-typed-value\"/>).</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">type</phrase> error is raised <errorref class=\"TY\" code=\"0012\" type=\"type\"/> if an item in the\n             sequence <code>$arg</code> is a node that does not have a typed value. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">A <phrase diff=\"add\" at=\"L\">type</phrase> error is raised <errorref class=\"TY\" code=\"0013\" type=\"dynamic\"/>\n             if an item in the sequence <code>$arg</code> is a function item. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"I\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised\n             if <code>$arg</code> is omitted\n             and the context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p></div>\n", 
      "summary" : "<p>  Returns the result of atomizing a sequence, that is, replacing all nodes in the\n             sequence by their typed values.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:anyAtomicType*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "data", 
      "qname" : "fn:data", 
      "signature" : "($arg as item()*) as xs:anyAtomicType* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the result of atomizing a sequence, that is, replacing all nodes in the\n             sequence by their typed values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"data\" return-type=\"xs:anyAtomicType*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"data\" return-type=\"xs:anyAtomicType*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"F\">If the argument is omitted, it defaults to the context item\n                (<code>.</code>). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> The result of <code>fn:data</code> is the sequence of atomic values produced by\n             applying the following rules to each item in <code>$arg</code>:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If the item is an atomic value, it is appended to the result sequence.</p></item><item><p> If the item is a node, the typed value of the node is appended to the result\n                   sequence. The typed value is a sequence of zero or more atomic values:\n                   specifically, the result of the <code>dm:typed-value</code> accessor as defined in\n                      <bibref ref=\"xpath-datamodel-30\"/> (See <xspecref spec=\"DM30\" ref=\"dm-typed-value\"/>).</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">type</phrase> error is raised <errorref class=\"TY\" code=\"0012\" type=\"type\"/> if an item in the\n             sequence <code>$arg</code> is a node that does not have a typed value. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">A <phrase diff=\"add\" at=\"L\">type</phrase> error is raised <errorref class=\"TY\" code=\"0013\" type=\"dynamic\"/>\n             if an item in the sequence <code>$arg</code> is a function item. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"I\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised\n             if <code>$arg</code> is omitted\n             and the context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p></div>\n", 
      "summary" : "<p>  Returns the result of atomizing a sequence, that is, replacing all nodes in the\n             sequence by their typed values.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyAtomicType*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "dateTime", 
      "qname" : "fn:dateTime", 
      "signature" : "($arg1 as xs:date?, $arg2 as xs:time?) as xs:dateTime? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns an <code>xs:dateTime</code> value created by combining an\n                <code>xs:date</code> and an <code>xs:time</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"dateTime\" return-type=\"xs:dateTime?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:date?\"/><arg name=\"arg2\" type=\"xs:time?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If either <code>$arg1</code> or <code>$arg2</code> is the empty sequence the function\n             returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:dateTime</code> whose date component is\n             equal to <code>$arg1</code> and whose time component is equal to <code>$arg2</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The timezone of the result is computed as follows:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If neither argument has a timezone, the result has no timezone.</p></item><item><p>If exactly one of the arguments has a timezone, or if both arguments have the same\n                   timezone, the result has this timezone.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RG\" code=\"0008\"/> if the two arguments both have\n             timezones and the timezones are different. </p></div>\n", 
      "summary" : "<p>  Returns an  xs:dateTime  value created by combining an\n                 xs:date  and an  xs:time .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:date", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:time", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:dateTime?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "day-from-date", 
      "qname" : "fn:day-from-date", 
      "signature" : "($arg as xs:date?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the day component of an <code>xs:date</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"day-from-date\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:date?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:integer</code> between 1 and 31, both\n             inclusive, representing the day component in the localized value of\n             <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:day-from-date(xs:date(\"1999-05-31-05:00\"))</code> returns <code>31</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:day-from-date(xs:date(\"2000-01-01+05:00\"))</code> returns <code>1</code>.</p></div>\n", 
      "summary" : "<p>  Returns the day component of an  xs:date .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:date", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "days-from-duration", 
      "qname" : "fn:days-from-duration", 
      "signature" : "($arg as xs:duration?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the number of days in a duration.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"days-from-duration\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:duration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:integer</code> representing the days\n             component in the value of <code>$arg</code>. The result is obtained by casting\n                <code>$arg</code> to an <code>xs:dayTimeDuration</code> (see <specref ref=\"casting-to-durations\"/>) and then computing the days component as described in\n                <specref ref=\"canonical-dayTimeDuration\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is a negative duration then the result will be negative..</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is an <code>xs:yearMonthDuration</code> the function returns 0.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:days-from-duration(xs:dayTimeDuration(\"P3DT10H\"))</code> returns <code>3</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:days-from-duration(xs:dayTimeDuration(\"P3DT55H\"))</code> returns <code>5</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:days-from-duration(xs:yearMonthDuration(\"P3Y5M\"))</code> returns <code>0</code>.</p></div>\n", 
      "summary" : "<p>  Returns the number of days in a duration.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:duration", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "deep-equal", 
      "qname" : "fn:deep-equal", 
      "signature" : "($parameter1 as item()*, $parameter2 as item()*) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> This function assesses whether two sequences are deep-equal to each other. To\n             be deep-equal, they must contain items that are pairwise deep-equal; and for two items\n             to be deep-equal, they must either be atomic values that compare equal, or nodes of the\n             same kind, with the same name, whose children are deep-equal.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"deep-equal\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"parameter1\" type=\"item()*\"/><arg name=\"parameter2\" type=\"item()*\"/></proto></example><example role=\"signature\"><proto name=\"deep-equal\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"parameter1\" type=\"item()*\"/><arg name=\"parameter2\" type=\"item()*\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$collation</code> argument identifies a collation which is used at all levels\n             of recursion when strings are compared (but not when names are compared), according to\n             the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the two sequences are both empty, the function returns <code>true</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the two sequences are of different lengths, the function returns\n             <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the two sequences are of the same length, the function returns <code>true</code> if\n             and only if every item in the sequence <code>$parameter1</code> is deep-equal to the\n             item at the same position in the sequence <code>$parameter2</code>. The rules for\n             deciding whether two items are deep-equal follow.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Call the two items <code>$i1</code> and <code>$i2</code> respectively.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$i1</code> and <code>$i2</code> are both atomic values, they are deep-equal if\n             and only if <code>($i1 eq $i2)</code> is <code>true</code>, or if both values are\n                <code>NaN</code>. If the <code>eq</code> operator is not defined for <code>$i1</code>\n             and <code>$i2</code>, the function returns <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If one of the pair <code>$i1</code> or <code>$i2</code> is an atomic value and the\n             other is not,\n             <!--<phrase diff=\"add\" at=\"MAP\">or if one is a node and the other is not, </phrase>-->\n             the function returns <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$i1</code> and <code>$i2</code> are both nodes, they are compared as described\n             below:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If the two nodes are of different kinds, the result is <code>false</code>.</p></item><item><p>If the two nodes are both document nodes then they are deep-equal if and only if\n                   the sequence <code>$i1/(*|text())</code> is deep-equal to the sequence\n                      <code>$i2/(*|text())</code>.</p></item><item><p> If the two nodes are both element nodes then they are deep-equal if and only if\n                   all of the following conditions are satisfied:</p><olist><item><p>The two nodes have the same name, that is <code>(node-name($i1) eq\n                            node-name($i2))</code>.</p></item><item><!-- bug 17252 --><p diff=\"chg\" at=\"L\">Either both nodes are both annotated as having simple content or both nodes are\n                         annotated as having complex content. For this purpose \"simple content\" means either a simple\n                      type or a complex type with simple content; \"complex content\" means a complex type whose variety\n                      is mixed, element-only, or empty.</p><note diff=\"add\" at=\"L\"><p>It is a consequence of this rule that validating a document\n                      <var>D</var> against a schema will usually (but not necessarily) result in a document that is not deep-equal\n                         to <var>D</var>. The exception is when the schema allows all elements to have mixed content.</p></note></item><item><p>The two nodes have the same number of attributes, and for every attribute\n                            <code>$a1</code> in <code>$i1/@*</code> there exists an attribute\n                            <code>$a2</code> in <code>$i2/@*</code> such that <code>$a1</code> and\n                            <code>$a2</code> are deep-equal.</p></item><item><p> One of the following conditions holds:</p><ulist><item><p>Both element nodes are annotated as having simple content\n                               <phrase diff=\"add\" at=\"L\">(as defined in 3(b) above)</phrase>, and\n                               the typed value of <code>$i1</code> is deep-equal to the typed value\n                               of <code>$i2</code>.</p></item><item><p>Both element nodes have a type annotation that is <phrase diff=\"chg\" at=\"L\">a complex type with\n                               variety element-only, and the sequence <code>$i1/*</code> is\n                               deep-equal to the sequence <code>$i2/*</code>.</phrase></p></item><item><p>Both element nodes have a type annotation that is <phrase diff=\"chg\" at=\"L\">a complex type with\n                               variety mixed</phrase>, and the sequence <code>$i1/(*|text())</code> is\n                               deep-equal to the sequence <code>$i2/(*|text())</code>.</p></item><item><p>Both element nodes have a type annotation that is <phrase diff=\"chg\" at=\"L\">a complex type with\n                               variety empty</phrase>.</p></item></ulist></item></olist></item><item><p>If the two nodes are both attribute nodes then they are deep-equal if and only if\n                   both the following conditions are satisfied:</p><olist><item><p>The two nodes have the same name, that is <code>(node-name($i1) eq\n                            node-name($i2))</code>.</p></item><item><p>The typed value of <code>$i1</code> is deep-equal to the typed value of\n                            <code>$i2</code>.</p></item></olist></item><item><p> If the two nodes are both processing instruction nodes<phrase diff=\"del\" at=\"A-E42\"> or namespace bindings</phrase>, then they are deep-equal if and\n                   only if both the following conditions are satisfied:</p><olist><item><p>The two nodes have the same name, that is <code>(node-name($i1) eq\n                            node-name($i2))</code>.</p></item><item><p>The string value of <code>$i1</code> is equal to the string value of\n                            <code>$i2</code>.</p></item></olist></item><item><p diff=\"add\" at=\"A-E42\"> If the two nodes are both namespace nodes, then they are deep-equal if and only\n                   if both the following conditions are satisfied:</p><olist><item><p diff=\"add\" at=\"A-E42\">The two nodes either have the same name or are both nameless, that is\n                            <code>fn:deep-equal(node-name($i1), node-name($i2))</code>.</p></item><item><p diff=\"add\" at=\"A-E42\">The string value of <code>$i1</code> is equal to the string value of\n                            <code>$i2</code> when compared using the Unicode codepoint collation.</p></item></olist></item><item><p>If the two nodes are both text nodes or comment nodes, then they are deep-equal if\n                   and only if their string-values are equal.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">A <phrase diff=\"add\" at=\"L\">type</phrase> error is raised <errorref class=\"TY\" code=\"0015\" type=\"type\"/>\n             if either input sequence contains a function item.\n             <!--<phrase diff=\"add\" at=\"MAP\">that is not a map</phrase>,-->\n          </p></div>\n", 
      "summary" : "<p>   This function assesses whether two sequences are deep-equal to each other.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "parameter1", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "parameter2", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "deep-equal", 
      "qname" : "fn:deep-equal", 
      "signature" : "($parameter1 as item()*, $parameter2 as item()*, $collation as xs:string) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> This function assesses whether two sequences are deep-equal to each other. To\n             be deep-equal, they must contain items that are pairwise deep-equal; and for two items\n             to be deep-equal, they must either be atomic values that compare equal, or nodes of the\n             same kind, with the same name, whose children are deep-equal.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"deep-equal\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"parameter1\" type=\"item()*\"/><arg name=\"parameter2\" type=\"item()*\"/></proto></example><example role=\"signature\"><proto name=\"deep-equal\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"parameter1\" type=\"item()*\"/><arg name=\"parameter2\" type=\"item()*\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$collation</code> argument identifies a collation which is used at all levels\n             of recursion when strings are compared (but not when names are compared), according to\n             the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the two sequences are both empty, the function returns <code>true</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the two sequences are of different lengths, the function returns\n             <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the two sequences are of the same length, the function returns <code>true</code> if\n             and only if every item in the sequence <code>$parameter1</code> is deep-equal to the\n             item at the same position in the sequence <code>$parameter2</code>. The rules for\n             deciding whether two items are deep-equal follow.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Call the two items <code>$i1</code> and <code>$i2</code> respectively.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$i1</code> and <code>$i2</code> are both atomic values, they are deep-equal if\n             and only if <code>($i1 eq $i2)</code> is <code>true</code>, or if both values are\n                <code>NaN</code>. If the <code>eq</code> operator is not defined for <code>$i1</code>\n             and <code>$i2</code>, the function returns <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If one of the pair <code>$i1</code> or <code>$i2</code> is an atomic value and the\n             other is not,\n             <!--<phrase diff=\"add\" at=\"MAP\">or if one is a node and the other is not, </phrase>-->\n             the function returns <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$i1</code> and <code>$i2</code> are both nodes, they are compared as described\n             below:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If the two nodes are of different kinds, the result is <code>false</code>.</p></item><item><p>If the two nodes are both document nodes then they are deep-equal if and only if\n                   the sequence <code>$i1/(*|text())</code> is deep-equal to the sequence\n                      <code>$i2/(*|text())</code>.</p></item><item><p> If the two nodes are both element nodes then they are deep-equal if and only if\n                   all of the following conditions are satisfied:</p><olist><item><p>The two nodes have the same name, that is <code>(node-name($i1) eq\n                            node-name($i2))</code>.</p></item><item><!-- bug 17252 --><p diff=\"chg\" at=\"L\">Either both nodes are both annotated as having simple content or both nodes are\n                         annotated as having complex content. For this purpose \"simple content\" means either a simple\n                      type or a complex type with simple content; \"complex content\" means a complex type whose variety\n                      is mixed, element-only, or empty.</p><note diff=\"add\" at=\"L\"><p>It is a consequence of this rule that validating a document\n                      <var>D</var> against a schema will usually (but not necessarily) result in a document that is not deep-equal\n                         to <var>D</var>. The exception is when the schema allows all elements to have mixed content.</p></note></item><item><p>The two nodes have the same number of attributes, and for every attribute\n                            <code>$a1</code> in <code>$i1/@*</code> there exists an attribute\n                            <code>$a2</code> in <code>$i2/@*</code> such that <code>$a1</code> and\n                            <code>$a2</code> are deep-equal.</p></item><item><p> One of the following conditions holds:</p><ulist><item><p>Both element nodes are annotated as having simple content\n                               <phrase diff=\"add\" at=\"L\">(as defined in 3(b) above)</phrase>, and\n                               the typed value of <code>$i1</code> is deep-equal to the typed value\n                               of <code>$i2</code>.</p></item><item><p>Both element nodes have a type annotation that is <phrase diff=\"chg\" at=\"L\">a complex type with\n                               variety element-only, and the sequence <code>$i1/*</code> is\n                               deep-equal to the sequence <code>$i2/*</code>.</phrase></p></item><item><p>Both element nodes have a type annotation that is <phrase diff=\"chg\" at=\"L\">a complex type with\n                               variety mixed</phrase>, and the sequence <code>$i1/(*|text())</code> is\n                               deep-equal to the sequence <code>$i2/(*|text())</code>.</p></item><item><p>Both element nodes have a type annotation that is <phrase diff=\"chg\" at=\"L\">a complex type with\n                               variety empty</phrase>.</p></item></ulist></item></olist></item><item><p>If the two nodes are both attribute nodes then they are deep-equal if and only if\n                   both the following conditions are satisfied:</p><olist><item><p>The two nodes have the same name, that is <code>(node-name($i1) eq\n                            node-name($i2))</code>.</p></item><item><p>The typed value of <code>$i1</code> is deep-equal to the typed value of\n                            <code>$i2</code>.</p></item></olist></item><item><p> If the two nodes are both processing instruction nodes<phrase diff=\"del\" at=\"A-E42\"> or namespace bindings</phrase>, then they are deep-equal if and\n                   only if both the following conditions are satisfied:</p><olist><item><p>The two nodes have the same name, that is <code>(node-name($i1) eq\n                            node-name($i2))</code>.</p></item><item><p>The string value of <code>$i1</code> is equal to the string value of\n                            <code>$i2</code>.</p></item></olist></item><item><p diff=\"add\" at=\"A-E42\"> If the two nodes are both namespace nodes, then they are deep-equal if and only\n                   if both the following conditions are satisfied:</p><olist><item><p diff=\"add\" at=\"A-E42\">The two nodes either have the same name or are both nameless, that is\n                            <code>fn:deep-equal(node-name($i1), node-name($i2))</code>.</p></item><item><p diff=\"add\" at=\"A-E42\">The string value of <code>$i1</code> is equal to the string value of\n                            <code>$i2</code> when compared using the Unicode codepoint collation.</p></item></olist></item><item><p>If the two nodes are both text nodes or comment nodes, then they are deep-equal if\n                   and only if their string-values are equal.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">A <phrase diff=\"add\" at=\"L\">type</phrase> error is raised <errorref class=\"TY\" code=\"0015\" type=\"type\"/>\n             if either input sequence contains a function item.\n             <!--<phrase diff=\"add\" at=\"MAP\">that is not a map</phrase>,-->\n          </p></div>\n", 
      "summary" : "<p>   This function assesses whether two sequences are deep-equal to each other.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "parameter1", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "parameter2", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "collation", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "default-collation", 
      "qname" : "fn:default-collation", 
      "signature" : "() as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of the default collation property from the static context.\n          </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"default-collation\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of the default collation property from the static context. Components\n             of the static context are discussed in <xspecref spec=\"XP30\" ref=\"id-xp-static-context-components\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The default collation property can never be absent. If it is not explicitly defined, a\n             system defined default can be invoked. If this is not provided, the Unicode codepoint\n             collation (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>) is\n             used. </p></div>\n", 
      "summary" : "<p>  Returns the value of the default collation property from the static context.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "distinct-values", 
      "qname" : "fn:distinct-values", 
      "signature" : "($arg as xs:anyAtomicType*) as xs:anyAtomicType* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the values that appear in a sequence, with duplicates eliminated.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"distinct-values\" return-type=\"xs:anyAtomicType*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/></proto></example><example role=\"signature\"><proto name=\"distinct-values\" return-type=\"xs:anyAtomicType*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the sequence that results from removing from <code>$arg</code> all\n             but one of a set of values that are equal to one another. Values are compared using the\n                <code>eq</code> operator, subject to the caveats defined below.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Values of type <code>xs:untypedAtomic</code> are compared as if they were of type\n                <code>xs:string</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Values that cannot be compared, because the <code>eq</code> operator is not defined for\n             their types, are considered to be distinct.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>. This collation is used when string comparison is\n             required.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For <code>xs:float</code> and <code>xs:double</code> values, positive zero is equal to\n             negative zero and, although <code>NaN</code> does not equal itself, if <code>$arg</code>\n             contains multiple <code>NaN</code> values a single <code>NaN</code> is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>xs:dateTime</code>, <code>xs:date</code> or <code>xs:time</code> values do not\n             have a timezone, they are considered to have the implicit timezone provided by the\n             dynamic context for the purpose of comparison. Note that <code>xs:dateTime</code>,\n                <code>xs:date</code> or <code>xs:time</code> values can compare equal even if their\n             timezones are different.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The order in which the sequence of values is returned is <termref def=\"implementation-dependent\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Which value of a set of values that compare equal is returned is <termref def=\"implementation-dependent\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">The static type of the result is a sequence of prime types as defined\n             in [Formal Semantics].</p><change xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E44\">\n             <p>If the input sequence contains values of different numeric types that differ from\n                each other by small amounts, then the eq operator is not transitive, because of\n                rounding effects occurring during type promotion. In the situation where the input\n                contains three values <code>A</code>, <code>B</code>, and <code>C</code> such that\n                   <code>A eq B</code>, <code>B eq C</code>, but <code>A ne C</code>, then the number\n                of items in the result of the function (as well as the choice of which items are\n                returned) is <termref def=\"implementation-dependent\"/>, subject only to the\n                constraints that (a) no two items in the result sequence compare equal to each other,\n                and (b) every input item that does not appear in the result sequence compares equal\n                to some item that does appear in the result sequence.</p>\n             <p>For example, this arises when computing:</p>\n             <eg xml:space=\"preserve\">    distinct-values(\n             (xs:float('1.0'),\n             xs:decimal('1.0000000000100000000001',\n             xs:double( '1.00000000001'))</eg>\n             <p>because the values of type <code>xs:float</code> and <code>xs:double</code> both\n                compare equal to the value of type <code>xs:decimal</code> but not equal to each\n                other. </p>\n          </change><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p></div>\n", 
      "summary" : "<p>  Returns the values that appear in a sequence, with duplicates eliminated.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyAtomicType*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "distinct-values", 
      "qname" : "fn:distinct-values", 
      "signature" : "($arg as xs:anyAtomicType*, $collation as xs:string) as xs:anyAtomicType* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the values that appear in a sequence, with duplicates eliminated.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"distinct-values\" return-type=\"xs:anyAtomicType*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/></proto></example><example role=\"signature\"><proto name=\"distinct-values\" return-type=\"xs:anyAtomicType*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the sequence that results from removing from <code>$arg</code> all\n             but one of a set of values that are equal to one another. Values are compared using the\n                <code>eq</code> operator, subject to the caveats defined below.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Values of type <code>xs:untypedAtomic</code> are compared as if they were of type\n                <code>xs:string</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Values that cannot be compared, because the <code>eq</code> operator is not defined for\n             their types, are considered to be distinct.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>. This collation is used when string comparison is\n             required.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For <code>xs:float</code> and <code>xs:double</code> values, positive zero is equal to\n             negative zero and, although <code>NaN</code> does not equal itself, if <code>$arg</code>\n             contains multiple <code>NaN</code> values a single <code>NaN</code> is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>xs:dateTime</code>, <code>xs:date</code> or <code>xs:time</code> values do not\n             have a timezone, they are considered to have the implicit timezone provided by the\n             dynamic context for the purpose of comparison. Note that <code>xs:dateTime</code>,\n                <code>xs:date</code> or <code>xs:time</code> values can compare equal even if their\n             timezones are different.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The order in which the sequence of values is returned is <termref def=\"implementation-dependent\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Which value of a set of values that compare equal is returned is <termref def=\"implementation-dependent\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">The static type of the result is a sequence of prime types as defined\n             in [Formal Semantics].</p><change xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E44\">\n             <p>If the input sequence contains values of different numeric types that differ from\n                each other by small amounts, then the eq operator is not transitive, because of\n                rounding effects occurring during type promotion. In the situation where the input\n                contains three values <code>A</code>, <code>B</code>, and <code>C</code> such that\n                   <code>A eq B</code>, <code>B eq C</code>, but <code>A ne C</code>, then the number\n                of items in the result of the function (as well as the choice of which items are\n                returned) is <termref def=\"implementation-dependent\"/>, subject only to the\n                constraints that (a) no two items in the result sequence compare equal to each other,\n                and (b) every input item that does not appear in the result sequence compares equal\n                to some item that does appear in the result sequence.</p>\n             <p>For example, this arises when computing:</p>\n             <eg xml:space=\"preserve\">    distinct-values(\n             (xs:float('1.0'),\n             xs:decimal('1.0000000000100000000001',\n             xs:double( '1.00000000001'))</eg>\n             <p>because the values of type <code>xs:float</code> and <code>xs:double</code> both\n                compare equal to the value of type <code>xs:decimal</code> but not equal to each\n                other. </p>\n          </change><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p></div>\n", 
      "summary" : "<p>  Returns the values that appear in a sequence, with duplicates eliminated.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "collation", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyAtomicType*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "doc-available", 
      "qname" : "fn:doc-available", 
      "signature" : "($uri as xs:string?) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E26\">The function returns true if and only if the function\n             call <code>fn:doc($uri)</code> would return a document node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"doc-available\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"uri\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tavailable documents, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E26\">If <code>$uri</code> is an empty sequence, this function returns\n                <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E26\">If a call on <code>fn:doc($uri)</code> would return a document\n             node, this function returns <code>true</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E26\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0005\"/> if\n                <code>$uri</code> is not a valid URI according to the rules applied by the\n             implementation of <code>fn:doc</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E26\">Otherwise, this function returns <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If this function returns <code>true</code>, then calling <code>fn:doc($uri)</code>\n             within the same <termref def=\"execution-scope\"/> must return a document node. However,\n             if nondeterministic processing has been selected for the <code>fn:doc</code> function,\n             this guarantee is lost.</p></div>\n", 
      "summary" : "<p>  The function returns true if and only if the function\n             call  fn:doc($uri)  would return a document node.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "uri", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "doc", 
      "qname" : "fn:doc", 
      "signature" : "($uri as xs:string?) as document()? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E26\">Retrieves a document using a URI supplied as an\n                <code>xs:string</code>, and returns the corresponding document node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"doc\" return-type=\"document-node()?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"uri\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tavailable documents, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$uri</code> is the empty sequence, the result is an empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E26\">If <code>$uri</code> is a relative URI reference, it is resolved\n             relative to the value of the <phrase diff=\"chg\" at=\"L\">Static Base URI property from the static context</phrase>. The resulting\n             absolute URI is promoted to an <code>xs:string</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E26\">If the <term>Available documents</term> described in <xspecref spec=\"XP30\" ref=\"eval_context\"/> provides a mapping from this string to a document\n             node, the function returns that document node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E26\">The URI may include a fragment identifier.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">By default, this function is <termref def=\"deterministic\">deterministic</termref>. Two calls on this function\n             return the same document node if the same URI Reference (after resolution to an absolute\n             URI Reference) is supplied to both calls. Thus, the following expression (if it does not\n             raise an error) will always be true:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">doc(\"foo.xml\") is doc(\"foo.xml\")</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">However, for performance reasons, implementations may provide a user option to evaluate\n             the function without a guarantee of determinism. The manner in which any such option is\n             provided is implementation-defined. If the user has not selected such an option, a call\n             of the function must either return a deterministic result or must raise a <phrase diff=\"add\" at=\"L\">dynamic</phrase> error\n                <errorref class=\"DC\" code=\"0003\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p>If <code>$uri</code> is read from a source document, it is generally appropriate to\n                resolve it relative to the base URI property of the relevant node in the source\n                document. This can be achieved by calling the <code>fn:resolve-uri</code> function,\n                and passing the resulting absolute URI as an argument to the <code>fn:doc</code>\n                function.</p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If two calls to this function supply different absolute URI References as arguments, the\n             same document node may be returned if the implementation can determine that the two\n             arguments refer to the same resource.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> By defining the semantics of this function in terms of a string-to-document-node\n             mapping in the dynamic context, the specification is acknowledging that the results of\n             this function are outside the purview of the language specification itself, and depend\n             entirely on the run-time environment in which the expression is evaluated. This run-time\n             environment includes not only an unpredictable collection of resources (\"the web\"), but\n             configurable machinery for locating resources and turning their contents into document\n             nodes within the XPath data model. Both the set of resources that are reachable, and the\n             mechanisms by which those resources are parsed and validated, are <termref def=\"implementation-dependent\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> One possible processing model for this function is as follows. The resource identified\n             by the URI Reference is retrieved. If the resource cannot be retrieved, a <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is\n             raised <errorref class=\"DC\" code=\"0002\"/>. The data resulting from the retrieval action\n             is then parsed as an XML document and a tree is constructed in accordance with the\n                <bibref ref=\"xpath-datamodel-30\"/>. If the top-level media type is known and is\n             \"text\", the content is parsed in the same way as if the media type were text/xml;\n             otherwise, it is parsed in the same way as if the media type were application/xml. If\n             the contents cannot be parsed successfully, a <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/>. Otherwise, the result of the function is the document node at the root\n             of the resulting tree. This tree is then optionally validated against a schema.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Various aspects of this processing are <termref def=\"implementation-defined\"/>.\n             Implementations may provide external configuration options that allow any aspect of the\n             processing to be controlled by the user. In particular:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>The set of URI schemes that the implementation recognizes is\n                   implementation-defined. Implementations may allow the mapping of URIs to resources\n                   to be configured by the user, using mechanisms such as catalogs or user-written\n                   URI handlers.</p></item><item><p>The handling of non-XML media types is implementation-defined. Implementations may\n                   allow instances of the data model to be constructed from non-XML resources, under\n                   user control.</p></item><item><p>It is <termref def=\"implementation-defined\"/> whether DTD validation and/or schema\n                   validation is applied to the source document.</p></item><item><p>Implementations may provide user-defined error handling options that allow\n                   processing to continue following an error in retrieving a resource, or in parsing\n                   and validating its content. When errors have been handled in this way, the\n                   function may return either an empty sequence, or a fallback document provided by\n                   the error handler.</p></item><item><p>Implementations may provide user options that relax the requirement for the\n                   function to return deterministic results.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E26\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"DC\" code=\"0005\"/> if <code>$uri</code> is not a valid URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/> if the\n                <term>available documents</term> provides no mapping for the absolutized URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/> if the resource cannot be\n             retrieved or cannot be parsed successfully as XML.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0003\"/> if the implementation is not able\n             to guarantee that the result of the function will be deterministic, and the user has not\n             indicated that an unstable result is acceptable.</p></div>\n", 
      "summary" : "<p>  Retrieves a document using a URI supplied as an\n                 xs:string , and returns the corresponding document node.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "uri", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "document()?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "document-uri", 
      "qname" : "fn:document-uri", 
      "signature" : "() as xs:anyURI? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the URI of a resource where a document can be found, if available.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"document-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"document-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"F\">If the argument is omitted, it defaults to the context item\n                (<code>.</code>). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is not a document node, the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the value of the <code>document-uri</code> accessor\n             applied to <code>$arg</code>, as defined in <bibref ref=\"xpath-datamodel-30\"/> (See\n                <xspecref spec=\"DM30\" ref=\"DocumentNodeAccessors\"/>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the URI of a resource where a document can be found, if available.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:anyURI?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "document-uri", 
      "qname" : "fn:document-uri", 
      "signature" : "($arg as node()?) as xs:anyURI? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the URI of a resource where a document can be found, if available.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"document-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"document-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"F\">If the argument is omitted, it defaults to the context item\n                (<code>.</code>). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is not a document node, the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the value of the <code>document-uri</code> accessor\n             applied to <code>$arg</code>, as defined in <bibref ref=\"xpath-datamodel-30\"/> (See\n                <xspecref spec=\"DM30\" ref=\"DocumentNodeAccessors\"/>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the URI of a resource where a document can be found, if available.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "node()", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyURI?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "element-with-id", 
      "qname" : "fn:element-with-id", 
      "signature" : "($arg as xs:string*) as element(*)* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E31\"> Returns the sequence of element nodes that have an\n                <code>ID</code> value matching the value of one or more of the <code>IDREF</code>\n             values supplied in <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"element-with-id\" return-type=\"element()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/></proto></example><example role=\"signature\"><proto name=\"element-with-id\" return-type=\"element()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/><arg name=\"node\" type=\"node()\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><change xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E31\">\n             <note><p>The effect of this function is identical to <function>fn:id</function> in respect\n                   of elements that have an attribute with the <code>is-id</code> property. However,\n                   it behaves differently in respect of element nodes with the <code>is-id</code>\n                   property. Whereas the <code>fn:id</code>, for legacy reasons, returns the element\n                   that has the <code>is-id</code> property, this parent returns the element\n                   identified by the ID, which is the parent of the element having the\n                      <code>is-id</code> property.</p></note>\n             <p>The function returns a sequence, in document order with duplicates eliminated,\n                containing every element node <code>E</code> that satisfies all the following\n                conditions:</p>\n             <olist><item><p>\n                      <code>E</code> is in the target document. The target document is the document\n                      containing <code>$node</code>, or the document containing the context item\n                         (<code>.</code>) if the second argument is omitted. The behavior of the\n                      function if <code>$node</code> is omitted is exactly the same as if the context\n                      item had been passed as <code>$node</code>.</p></item><item><p><code>E</code> has an <code>ID</code> value equal to one of the candidate\n                         <code>IDREF</code> values, where:</p><ulist><item><p> An element has an <code>ID</code> value equal to <code>V</code> if\n                            either or both of the following conditions are true:</p><ulist><item><p>The element has an child element node whose <code>is-id</code>\n                                  property (See <xspecref spec=\"DM30\" ref=\"dm-is-id\"/>.) is true and\n                                  whose typed value is equal to <code>V</code> under the rules of the\n                                     <code>eq</code> operator using the Unicode code point collation\n                                     (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p></item><item><p>The element has an attribute node whose <code>is-id</code> property\n                                  (See <xspecref spec=\"DM30\" ref=\"dm-is-id\"/>.) is true and whose\n                                  typed value is equal to <code>V</code> under the rules of the\n                                     <code>eq</code> operator using the Unicode code point collation\n                                     (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p></item></ulist></item><item><p>Each <code>xs:string</code> in <code>$arg</code> is parsed as if it were\n                            of type <code>IDREFS</code>, that is, each <code>xs:string</code> in\n                               <code>$arg</code> is treated as a whitespace-separated sequence of\n                            tokens, each acting as an <code>IDREF</code>. These tokens are then\n                            included in the list of candidate <code>IDREF</code>s. If any of the\n                            tokens is not a lexically valid <code>IDREF</code> (that is, if it is not\n                            lexically an <code>xs:NCName</code>), it is ignored. Formally, the\n                            candidate <code>IDREF</code> values are the strings in the sequence given\n                            by the expression:</p><eg xml:space=\"preserve\">for $s in $arg return\n    fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF]</eg></item></ulist></item><item><p> If several elements have the same <code>ID</code> value, then <code>E</code>\n                      is the one that is first in document order.</p></item></olist>\n          </change><change xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E31\">\n             <p>A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0001\" type=\"dynamic\"/> if\n                   <code>$node</code>, or the context item if the second argument is omitted, is a\n                   node in a tree whose root is not a document node.</p>\n             <p>The following errors may be raised when <code>$node</code> is omitted:</p>\n             <ul><li><p>If the context\n                   item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                   <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                   node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul>\n          </change></div>\n", 
      "summary" : "<p>   Returns the sequence of element nodes that have an\n                 ID  value matching the value of one or more of the  IDREF \n             values supplied in  $arg .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "element(*)*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "element-with-id", 
      "qname" : "fn:element-with-id", 
      "signature" : "($arg as xs:string*, $node as node()) as element(*)* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E31\"> Returns the sequence of element nodes that have an\n                <code>ID</code> value matching the value of one or more of the <code>IDREF</code>\n             values supplied in <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"element-with-id\" return-type=\"element()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/></proto></example><example role=\"signature\"><proto name=\"element-with-id\" return-type=\"element()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/><arg name=\"node\" type=\"node()\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><change xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E31\">\n             <note><p>The effect of this function is identical to <function>fn:id</function> in respect\n                   of elements that have an attribute with the <code>is-id</code> property. However,\n                   it behaves differently in respect of element nodes with the <code>is-id</code>\n                   property. Whereas the <code>fn:id</code>, for legacy reasons, returns the element\n                   that has the <code>is-id</code> property, this parent returns the element\n                   identified by the ID, which is the parent of the element having the\n                      <code>is-id</code> property.</p></note>\n             <p>The function returns a sequence, in document order with duplicates eliminated,\n                containing every element node <code>E</code> that satisfies all the following\n                conditions:</p>\n             <olist><item><p>\n                      <code>E</code> is in the target document. The target document is the document\n                      containing <code>$node</code>, or the document containing the context item\n                         (<code>.</code>) if the second argument is omitted. The behavior of the\n                      function if <code>$node</code> is omitted is exactly the same as if the context\n                      item had been passed as <code>$node</code>.</p></item><item><p><code>E</code> has an <code>ID</code> value equal to one of the candidate\n                         <code>IDREF</code> values, where:</p><ulist><item><p> An element has an <code>ID</code> value equal to <code>V</code> if\n                            either or both of the following conditions are true:</p><ulist><item><p>The element has an child element node whose <code>is-id</code>\n                                  property (See <xspecref spec=\"DM30\" ref=\"dm-is-id\"/>.) is true and\n                                  whose typed value is equal to <code>V</code> under the rules of the\n                                     <code>eq</code> operator using the Unicode code point collation\n                                     (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p></item><item><p>The element has an attribute node whose <code>is-id</code> property\n                                  (See <xspecref spec=\"DM30\" ref=\"dm-is-id\"/>.) is true and whose\n                                  typed value is equal to <code>V</code> under the rules of the\n                                     <code>eq</code> operator using the Unicode code point collation\n                                     (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p></item></ulist></item><item><p>Each <code>xs:string</code> in <code>$arg</code> is parsed as if it were\n                            of type <code>IDREFS</code>, that is, each <code>xs:string</code> in\n                               <code>$arg</code> is treated as a whitespace-separated sequence of\n                            tokens, each acting as an <code>IDREF</code>. These tokens are then\n                            included in the list of candidate <code>IDREF</code>s. If any of the\n                            tokens is not a lexically valid <code>IDREF</code> (that is, if it is not\n                            lexically an <code>xs:NCName</code>), it is ignored. Formally, the\n                            candidate <code>IDREF</code> values are the strings in the sequence given\n                            by the expression:</p><eg xml:space=\"preserve\">for $s in $arg return\n    fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF]</eg></item></ulist></item><item><p> If several elements have the same <code>ID</code> value, then <code>E</code>\n                      is the one that is first in document order.</p></item></olist>\n          </change><change xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"A-E31\">\n             <p>A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0001\" type=\"dynamic\"/> if\n                   <code>$node</code>, or the context item if the second argument is omitted, is a\n                   node in a tree whose root is not a document node.</p>\n             <p>The following errors may be raised when <code>$node</code> is omitted:</p>\n             <ul><li><p>If the context\n                   item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                   <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                   node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul>\n          </change></div>\n", 
      "summary" : "<p>   Returns the sequence of element nodes that have an\n                 ID  value matching the value of one or more of the  IDREF \n             values supplied in  $arg .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "node", 
        "type" : "node()", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "element(*)*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "empty", 
      "qname" : "fn:empty", 
      "signature" : "($arg as item()*) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the argument is the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"empty\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is the empty sequence, the function returns\n                <code>true</code>; otherwise, the function returns <code>false</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:empty((1,2,3)[10])</code> returns <code>true()</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:empty(fn:remove((\"hello\", \"world\"), 1))</code> returns <code>false()</code>.</p></div>\n", 
      "summary" : "<p>  Returns true if the argument is the empty sequence.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "encode-for-uri", 
      "qname" : "fn:encode-for-uri", 
      "signature" : "($uri-part as xs:string?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Encodes reserved characters in a string that is intended to be used in the path\n             segment of a URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"encode-for-uri\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"uri-part\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$uri-part</code> is the empty sequence, the function returns the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function applies the URI escaping rules defined in section 2 of <bibref ref=\"rfc3986\"/> to the <code>xs:string</code> supplied as <code>$uri-part</code>. The\n             effect of the function is to escape reserved characters. Each such character in the\n             string is replaced with its percent-encoded form as described in <bibref ref=\"rfc3986\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Since <bibref ref=\"rfc3986\"/> recommends that, for consistency, URI producers and\n             normalizers should use uppercase hexadecimal digits for all percent-encodings, this\n             function must always generate hexadecimal values using the upper-case letters A-F.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">All characters are escaped except those identified as \"unreserved\" by <bibref ref=\"rfc3986\"/>, that is the upper- and lower-case letters A-Z, the digits 0-9,\n             HYPHEN-MINUS (\"-\"), LOW LINE (\"_\"), FULL STOP \".\", and TILDE \"~\".</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function escapes URI delimiters and therefore cannot be used indiscriminately to\n             encode \"invalid\" characters in a path segment.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is invertible but not idempotent. This is because a string containing a\n             percent character will be modified by applying the function: for example\n                <code>100%</code> becomes <code>100%25</code>, while <code>100%25</code> becomes\n                <code>100%2525</code>.</p></div>\n", 
      "summary" : "<p>  Encodes reserved characters in a string that is intended to be used in the path\n             segment of a URI.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "uri-part", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "ends-with", 
      "qname" : "fn:ends-with", 
      "signature" : "($arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the string <code>$arg1</code> contains <code>$arg2</code> as a\n             trailing substring, taking collations into account.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"ends-with\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"ends-with\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> or <code>$arg2</code> is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg2</code> is the zero-length string, then the function returns\n                <code>true</code>. If the value of <code>$arg1</code> is the zero-length string and\n             the value of <code>$arg2</code> is not the zero-length string, then the function returns\n                <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an <code>xs:boolean</code> indicating whether or not the value of\n                <code>$arg1</code> starts with a sequence of collation units that provides a\n                <term>match</term> to the collation units of <code>$arg2</code> according to the\n             collation that is used.</p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p>\n                <term>Match</term> is defined in <bibref ref=\"Unicode-Collations\"/>. </p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"CH\" code=\"0004\"/> if the\n             specified collation does not support collation units.</p></div>\n", 
      "summary" : "<p>  Returns true if the string  $arg1  contains  $arg2  as a\n             trailing substring, taking collations into account.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "ends-with", 
      "qname" : "fn:ends-with", 
      "signature" : "($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the string <code>$arg1</code> contains <code>$arg2</code> as a\n             trailing substring, taking collations into account.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"ends-with\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"ends-with\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> or <code>$arg2</code> is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg2</code> is the zero-length string, then the function returns\n                <code>true</code>. If the value of <code>$arg1</code> is the zero-length string and\n             the value of <code>$arg2</code> is not the zero-length string, then the function returns\n                <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an <code>xs:boolean</code> indicating whether or not the value of\n                <code>$arg1</code> starts with a sequence of collation units that provides a\n                <term>match</term> to the collation units of <code>$arg2</code> according to the\n             collation that is used.</p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p>\n                <term>Match</term> is defined in <bibref ref=\"Unicode-Collations\"/>. </p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"CH\" code=\"0004\"/> if the\n             specified collation does not support collation units.</p></div>\n", 
      "summary" : "<p>  Returns true if the string  $arg1  contains  $arg2  as a\n             trailing substring, taking collations into account.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "collation", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "environment-variable", 
      "qname" : "fn:environment-variable", 
      "signature" : "($arg as xs:string) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of a system environment variable, if it exists.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"environment-variable\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"name\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tenvironment variables.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The set of available <xtermref spec=\"XP30\" ref=\"dt-environment-variables\">environment variables</xtermref>\n             is a set of (name, value) pairs forming part\n             of the dynamic context, in which the name is unique within the set of pairs. The name\n             and value are arbitrary strings.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the <code>$name</code> argument matches the name of one of these pairs, the function\n             returns the corresponding value.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If there is no environment variable with a matching name, the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used for matching names is <termref def=\"implementation-defined\"/>, but\n             must be the same as the collation used to ensure that the names of all environment\n             variables are unique.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"I\">The function is <termref def=\"dt-deterministic\">deterministic</termref>,\n             which means that if it is called several times\n          within the same <termref def=\"dt-execution-scope\">execution scope</termref>, with the same arguments,\n             it must return the same result.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">On many platforms, the term \"environment variable\" has a natural meaning in terms of\n             facilities provided by the operating system. This interpretation of the concept does not\n             exclude other interpretations, such as a mapping to a set of configuration parameters in\n             a database system.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Environment variable names are usually case sensitive. Names are usually of the form\n                <code>(letter|_) (letter|_|digit)*</code>, but this varies by platform.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">On some platforms, there may sometimes be multiple environment variables with the same name;\n             in this case, it is implementation-dependent as to which is returned; see for example\n                <bibref ref=\"POSIX.1-2008\"/> (Chapter 8, Environment Variables).\n             Implementations <rfc2119>may</rfc2119> use prefixes or other naming conventions\n             to disambiguate the names.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The requirement to ensure that the function is deterministic means in practice that\n          the implementation must make a snapshot of the environment variables at some time\n          during execution, and return values obtained from this snapshot, rather than using\n          live values that are subject to change at any time.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Operating system environment variables may be associated with a particular process,\n          while queries and stylesheets may execute across multiple processes (or multiple machines).\n          In such circumstances implementations <rfc2119>may</rfc2119> choose to provide access\n          to the environment variables associated with the process in which the query or stylesheet\n          processing was initiated.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Security advice: Queries from untrusted sources should not be permitted unrestricted\n             access to environment variables. For example, the name of the account under which the\n             query is running may be useful information to a would-be intruder. An implementation may\n             therefore choose to restrict access to the environment, or may provide a facility to\n             make <code>fn:environment-variable</code> always return the empty sequence.</p></div>\n", 
      "summary" : "<p>  Returns the value of a system environment variable, if it exists.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "environment-variable", 
      "qname" : "fn:environment-variable", 
      "signature" : "($name as xs:string) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of a system environment variable, if it exists.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"environment-variable\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"name\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tenvironment variables.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The set of available <xtermref spec=\"XP30\" ref=\"dt-environment-variables\">environment variables</xtermref>\n             is a set of (name, value) pairs forming part\n             of the dynamic context, in which the name is unique within the set of pairs. The name\n             and value are arbitrary strings.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the <code>$name</code> argument matches the name of one of these pairs, the function\n             returns the corresponding value.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If there is no environment variable with a matching name, the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used for matching names is <termref def=\"implementation-defined\"/>, but\n             must be the same as the collation used to ensure that the names of all environment\n             variables are unique.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"I\">The function is <termref def=\"dt-deterministic\">deterministic</termref>,\n             which means that if it is called several times\n          within the same <termref def=\"dt-execution-scope\">execution scope</termref>, with the same arguments,\n             it must return the same result.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">On many platforms, the term \"environment variable\" has a natural meaning in terms of\n             facilities provided by the operating system. This interpretation of the concept does not\n             exclude other interpretations, such as a mapping to a set of configuration parameters in\n             a database system.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Environment variable names are usually case sensitive. Names are usually of the form\n                <code>(letter|_) (letter|_|digit)*</code>, but this varies by platform.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">On some platforms, there may sometimes be multiple environment variables with the same name;\n             in this case, it is implementation-dependent as to which is returned; see for example\n                <bibref ref=\"POSIX.1-2008\"/> (Chapter 8, Environment Variables).\n             Implementations <rfc2119>may</rfc2119> use prefixes or other naming conventions\n             to disambiguate the names.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The requirement to ensure that the function is deterministic means in practice that\n          the implementation must make a snapshot of the environment variables at some time\n          during execution, and return values obtained from this snapshot, rather than using\n          live values that are subject to change at any time.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Operating system environment variables may be associated with a particular process,\n          while queries and stylesheets may execute across multiple processes (or multiple machines).\n          In such circumstances implementations <rfc2119>may</rfc2119> choose to provide access\n          to the environment variables associated with the process in which the query or stylesheet\n          processing was initiated.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Security advice: Queries from untrusted sources should not be permitted unrestricted\n             access to environment variables. For example, the name of the account under which the\n             query is running may be useful information to a would-be intruder. An implementation may\n             therefore choose to restrict access to the environment, or may provide a facility to\n             make <code>fn:environment-variable</code> always return the empty sequence.</p></div>\n", 
      "summary" : "<p>  Returns the value of a system environment variable, if it exists.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "name", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "error", 
      "qname" : "fn:error", 
      "signature" : "() as none external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Calling the <code>fn:error</code> function raises an application-defined\n             error.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName\"/></proto></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName?\"/><arg name=\"description\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName?\"/><arg name=\"description\" type=\"xs:string\"/><arg name=\"error-object\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-nondeterministic\">nondeterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function never returns a value. Instead it always raises an error. The effect of\n             the error is identical to the effect of dynamic errors raised implicitly, for example\n             when an incorrect argument is supplied to a function.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The parameters to the <code>fn:error</code> function supply information that is\n             associated with the error condition and that is made available to a caller that asks for\n             information about the error. The error may be caught either by the host language (using\n             a try/catch construct in XSLT or XQuery, for example), or by the calling application or\n             external processing environment. The way in which error information is returned to the\n             external processing environment is <termref def=\"implementation-dependent\"/></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>fn:error</code> is called with no arguments, then its behavior is the same as\n             the function call: </p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) </eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$code</code> is the empty sequence then the effective value is the\n                <code>xs:QName</code> constructed by:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">There are three pieces of information that may be associated with an error:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>The <code>$code</code> is an error code that distinguishes this error from others.\n                   It is an <code>xs:QName</code>; the namespace URI conventionally identifies the\n                   component, subsystem, or authority responsible for defining the meaning of the\n                   error code, while the local part identifies the specific error condition. The\n                   namespace URI <code>http://www.w3.org/2005/xqt-errors</code> is used for errors\n                   defined in this specification; other namespace URIs may be used for errors defined\n                   by the application.</p><p>If the external processing environment expects the error code to be returned as a\n                   URI or a string rather than as an <code>xs:QName</code>, then an error code with\n                   namespace URI <code>NS</code> and local part <code>LP</code> will be returned in\n                   the form <code>NS#LP</code>. The namespace URI part of the error code should\n                   therefore not include a fragment identifier.</p></item><item><p>The <code>$description</code> is a natural-language description of the error\n                   condition.</p></item><item><p>The <code>$error-object</code> is an arbitrary value used to convey additional\n                   information about the error, and may be used in any way the application\n                   chooses.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function always raises a <phrase diff=\"add\" at=\"L\">dynamic</phrase> error. By default, it raises <errorref class=\"ER\" code=\"0000\"/></p></div>\n", 
      "summary" : "<p>  Calling the  fn:error  function raises an application-defined\n             error.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "none", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "error", 
      "qname" : "fn:error", 
      "signature" : "($code as xs:QName) as none external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Calling the <code>fn:error</code> function raises an application-defined\n             error.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName\"/></proto></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName?\"/><arg name=\"description\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName?\"/><arg name=\"description\" type=\"xs:string\"/><arg name=\"error-object\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-nondeterministic\">nondeterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function never returns a value. Instead it always raises an error. The effect of\n             the error is identical to the effect of dynamic errors raised implicitly, for example\n             when an incorrect argument is supplied to a function.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The parameters to the <code>fn:error</code> function supply information that is\n             associated with the error condition and that is made available to a caller that asks for\n             information about the error. The error may be caught either by the host language (using\n             a try/catch construct in XSLT or XQuery, for example), or by the calling application or\n             external processing environment. The way in which error information is returned to the\n             external processing environment is <termref def=\"implementation-dependent\"/></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>fn:error</code> is called with no arguments, then its behavior is the same as\n             the function call: </p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) </eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$code</code> is the empty sequence then the effective value is the\n                <code>xs:QName</code> constructed by:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">There are three pieces of information that may be associated with an error:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>The <code>$code</code> is an error code that distinguishes this error from others.\n                   It is an <code>xs:QName</code>; the namespace URI conventionally identifies the\n                   component, subsystem, or authority responsible for defining the meaning of the\n                   error code, while the local part identifies the specific error condition. The\n                   namespace URI <code>http://www.w3.org/2005/xqt-errors</code> is used for errors\n                   defined in this specification; other namespace URIs may be used for errors defined\n                   by the application.</p><p>If the external processing environment expects the error code to be returned as a\n                   URI or a string rather than as an <code>xs:QName</code>, then an error code with\n                   namespace URI <code>NS</code> and local part <code>LP</code> will be returned in\n                   the form <code>NS#LP</code>. The namespace URI part of the error code should\n                   therefore not include a fragment identifier.</p></item><item><p>The <code>$description</code> is a natural-language description of the error\n                   condition.</p></item><item><p>The <code>$error-object</code> is an arbitrary value used to convey additional\n                   information about the error, and may be used in any way the application\n                   chooses.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function always raises a <phrase diff=\"add\" at=\"L\">dynamic</phrase> error. By default, it raises <errorref class=\"ER\" code=\"0000\"/></p></div>\n", 
      "summary" : "<p>  Calling the  fn:error  function raises an application-defined\n             error.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "code", 
        "type" : "xs:QName", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "none", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "error", 
      "qname" : "fn:error", 
      "signature" : "($code as xs:QName?, $description as xs:string) as none external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Calling the <code>fn:error</code> function raises an application-defined\n             error.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName\"/></proto></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName?\"/><arg name=\"description\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName?\"/><arg name=\"description\" type=\"xs:string\"/><arg name=\"error-object\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-nondeterministic\">nondeterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function never returns a value. Instead it always raises an error. The effect of\n             the error is identical to the effect of dynamic errors raised implicitly, for example\n             when an incorrect argument is supplied to a function.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The parameters to the <code>fn:error</code> function supply information that is\n             associated with the error condition and that is made available to a caller that asks for\n             information about the error. The error may be caught either by the host language (using\n             a try/catch construct in XSLT or XQuery, for example), or by the calling application or\n             external processing environment. The way in which error information is returned to the\n             external processing environment is <termref def=\"implementation-dependent\"/></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>fn:error</code> is called with no arguments, then its behavior is the same as\n             the function call: </p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) </eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$code</code> is the empty sequence then the effective value is the\n                <code>xs:QName</code> constructed by:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">There are three pieces of information that may be associated with an error:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>The <code>$code</code> is an error code that distinguishes this error from others.\n                   It is an <code>xs:QName</code>; the namespace URI conventionally identifies the\n                   component, subsystem, or authority responsible for defining the meaning of the\n                   error code, while the local part identifies the specific error condition. The\n                   namespace URI <code>http://www.w3.org/2005/xqt-errors</code> is used for errors\n                   defined in this specification; other namespace URIs may be used for errors defined\n                   by the application.</p><p>If the external processing environment expects the error code to be returned as a\n                   URI or a string rather than as an <code>xs:QName</code>, then an error code with\n                   namespace URI <code>NS</code> and local part <code>LP</code> will be returned in\n                   the form <code>NS#LP</code>. The namespace URI part of the error code should\n                   therefore not include a fragment identifier.</p></item><item><p>The <code>$description</code> is a natural-language description of the error\n                   condition.</p></item><item><p>The <code>$error-object</code> is an arbitrary value used to convey additional\n                   information about the error, and may be used in any way the application\n                   chooses.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function always raises a <phrase diff=\"add\" at=\"L\">dynamic</phrase> error. By default, it raises <errorref class=\"ER\" code=\"0000\"/></p></div>\n", 
      "summary" : "<p>  Calling the  fn:error  function raises an application-defined\n             error.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "code", 
        "type" : "xs:QName", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "description", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "none", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "error", 
      "qname" : "fn:error", 
      "signature" : "($code as xs:QName?, $description as xs:string, $error-object as item()*) as none external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Calling the <code>fn:error</code> function raises an application-defined\n             error.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName\"/></proto></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName?\"/><arg name=\"description\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"error\" return-type=\"none\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"code\" type=\"xs:QName?\"/><arg name=\"description\" type=\"xs:string\"/><arg name=\"error-object\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-nondeterministic\">nondeterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function never returns a value. Instead it always raises an error. The effect of\n             the error is identical to the effect of dynamic errors raised implicitly, for example\n             when an incorrect argument is supplied to a function.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The parameters to the <code>fn:error</code> function supply information that is\n             associated with the error condition and that is made available to a caller that asks for\n             information about the error. The error may be caught either by the host language (using\n             a try/catch construct in XSLT or XQuery, for example), or by the calling application or\n             external processing environment. The way in which error information is returned to the\n             external processing environment is <termref def=\"implementation-dependent\"/></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>fn:error</code> is called with no arguments, then its behavior is the same as\n             the function call: </p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) </eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$code</code> is the empty sequence then the effective value is the\n                <code>xs:QName</code> constructed by:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">There are three pieces of information that may be associated with an error:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>The <code>$code</code> is an error code that distinguishes this error from others.\n                   It is an <code>xs:QName</code>; the namespace URI conventionally identifies the\n                   component, subsystem, or authority responsible for defining the meaning of the\n                   error code, while the local part identifies the specific error condition. The\n                   namespace URI <code>http://www.w3.org/2005/xqt-errors</code> is used for errors\n                   defined in this specification; other namespace URIs may be used for errors defined\n                   by the application.</p><p>If the external processing environment expects the error code to be returned as a\n                   URI or a string rather than as an <code>xs:QName</code>, then an error code with\n                   namespace URI <code>NS</code> and local part <code>LP</code> will be returned in\n                   the form <code>NS#LP</code>. The namespace URI part of the error code should\n                   therefore not include a fragment identifier.</p></item><item><p>The <code>$description</code> is a natural-language description of the error\n                   condition.</p></item><item><p>The <code>$error-object</code> is an arbitrary value used to convey additional\n                   information about the error, and may be used in any way the application\n                   chooses.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function always raises a <phrase diff=\"add\" at=\"L\">dynamic</phrase> error. By default, it raises <errorref class=\"ER\" code=\"0000\"/></p></div>\n", 
      "summary" : "<p>  Calling the  fn:error  function raises an application-defined\n             error.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "code", 
        "type" : "xs:QName", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "description", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "error-object", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "none", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "escape-html-uri", 
      "qname" : "fn:escape-html-uri", 
      "signature" : "($uri as xs:string?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Escapes a URI in the same way that HTML user agents handle attribute values\n             expected to contain URIs.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"escape-html-uri\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"uri\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$uri</code> is the empty sequence, the function returns the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function escapes all <termref def=\"character\">characters</termref> except\n             printable characters of the US-ASCII coded character set, specifically the <termref def=\"codepoint\">codepoints</termref> between 32 and 126 (decimal) inclusive. Each\n             character in <code>$uri</code> to be escaped is replaced by an escape sequence, which is\n             formed by encoding the character as a sequence of octets in UTF-8, and then representing\n             each of these octets in the form %HH, where HH is the hexadecimal representation of the\n             octet. This function must always generate hexadecimal values using the upper-case\n             letters A-F.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The behavior of this function corresponds to the recommended handling of non-ASCII\n             characters in URI attribute values as described in <bibref ref=\"HTML40\"/> Appendix\n             B.2.1.</p></div>\n", 
      "summary" : "<p>  Escapes a URI in the same way that HTML user agents handle attribute values\n             expected to contain URIs.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "uri", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "exactly-one", 
      "qname" : "fn:exactly-one", 
      "signature" : "($arg as item()*) as item() external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns <code>$arg</code> if it contains exactly one item. Otherwise, raises an\n             error. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"exactly-one\" return-type=\"item()\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Except in error cases, the function returns <code>$arg</code> unchanged.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RG\" code=\"0005\"/> if <code>$arg</code> is an empty\n             sequence or a sequence containing more than one item.</p></div>\n", 
      "summary" : "<p>  Returns  $arg  if it contains exactly one item.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "exists", 
      "qname" : "fn:exists", 
      "signature" : "($arg as item()*) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the argument is a non-empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"exists\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is a non-empty sequence, the function returns\n                <code>true</code>; otherwise, the function returns <code>false</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:exists(fn:remove((\"hello\"), 1))</code> returns <code>false()</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:exists(fn:remove((\"hello\", \"world\"), 1))</code> returns <code>true()</code>.</p></div>\n", 
      "summary" : "<p>  Returns true if the argument is a non-empty sequence.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "false", 
      "qname" : "fn:false", 
      "signature" : "() as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the <code>xs:boolean</code> value <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"false\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result is equivalent to <code>xs:boolean(\"0\")</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:false()</code> returns <code>xs:boolean(0)</code>.</p></div>\n", 
      "summary" : "<p>  Returns the  xs:boolean  value  false .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "filter", 
      "qname" : "fn:filter", 
      "signature" : "($seq as item()*, $f as function (item()) as xs:boolean) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns those items from the sequence <var>$seq</var> for which the supplied\n             function <var>$f</var> returns true.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"filter\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"seq\" type=\"item()*\"/><arg name=\"f\" type=\"function(item()) as xs:boolean\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of the function is equivalent to the following implementation in XQuery:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n declare function fn:filter(\n         $seq as item()*,\n         $f as function(item()) as xs:boolean)\n         as item()* {\n   if (fn:empty($seq))\n   then ()\n   else ( fn:head($seq)[$f(.) eq fn:true()],\n          fn:filter(fn:tail($seq), $f)\n        )\n };</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">or its equivalent in XSLT:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n &lt;xsl:function name=\"fn:filter\" as=\"item()*\"&gt;\n   &lt;xsl:param name=\"seq\" as=\"item()*\"/&gt;\n   &lt;xsl:param name=\"f\" as=\"function(item()) as xs:boolean\"/&gt;\n   &lt;xsl:if test=\"fn:exists($seq)\"&gt;\n     &lt;xsl:sequence select=\"fn:head($seq)[$f(.) eq fn:true()], fn:filter(fn:tail($seq), $f)\"/&gt;\n   &lt;/xsl:if&gt;\n &lt;/xsl:function&gt;\n          </eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">As a consequence of the function signature and the function calling\n             rules, a type error occurs if the supplied function <var>$f</var> returns anything other\n             than a single <code>xs:boolean</code> item; there is no conversion to an effective\n             boolean value.</p></div>\n", 
      "summary" : "<p>  Returns those items from the sequence  $seq  for which the supplied\n             function  $f  returns true.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "seq", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "f", 
        "type" : "function (item()) as xs:boolean", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "floor", 
      "qname" : "fn:floor", 
      "signature" : "($arg as numeric?) as numeric? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Rounds <code>$arg</code> downwards to a whole number.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"floor\" return-type=\"numeric?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"numeric?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">General rules: see <specref ref=\"numeric-value-functions\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the largest (closest to positive infinity) number with no\n             fractional part that is not greater than the value of <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the type of <code>$arg</code> is one of the four numeric types <code>xs:float</code>,\n                <code>xs:double</code>, <code>xs:decimal</code> or <code>xs:integer</code> the type\n             of the result is the same as the type of <code>$arg</code>. If the type of\n                <code>$arg</code> is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For <code>xs:float</code> and <code>xs:double</code> arguments, if the argument is\n             positive zero, then positive zero is returned. If the argument is negative zero, then\n             negative zero is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:floor(10.5)</code> returns <code>10</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:floor(-10.5)</code> returns <code>-11</code>.</p></div>\n", 
      "summary" : "<p>  Rounds  $arg  downwards to a whole number.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "numeric", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "numeric?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "fold-left", 
      "qname" : "fn:fold-left", 
      "signature" : "($seq as item()*, $zero as item()*, $f as function (item()*, item()) as item()*) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Processes the supplied sequence from left to right, applying the supplied\n             function repeatedly to each item in turn, together with an accumulated result value.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"fold-left\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"seq\" type=\"item()*\"/><arg name=\"zero\" type=\"item()*\"/><arg name=\"f\" type=\"function(item()*, item()) as item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of the function is equivalent to the following implementation in XQuery:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n declare function fn:fold-left(\n         $seq as item()*\n         $zero as item()*,\n         $f as function(item()*, item()) as item()*)\n         as item()* {\n   if (fn:empty($seq))\n   then $zero\n   else fn:fold-left(fn:tail($seq), $f($zero, fn:head($seq)), $f)\n };</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">or its equivalent in XSLT:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n &lt;xsl:function name=\"fn:fold-left\" as=\"item()*\"&gt;\n   &lt;xsl:param name=\"seq\" as=\"item()*\"/&gt;\n   &lt;xsl:param name=\"zero\" as=\"item()*\"/&gt;\n   &lt;xsl:param name=\"f\" as=\"function(item()*, item()) as item()*\"/&gt;\n   &lt;xsl:choose&gt;\n     &lt;xsl:when test=\"fn:empty($seq)\"&gt;\n       &lt;xsl:sequence select=\"$zero\"/&gt;\n     &lt;/xsl:when&gt;\n     &lt;xsl:otherwise&gt;\n       &lt;xsl:sequence select=\"fn:fold-left(fn:tail($seq), $f($zero, fn:head($seq)), $f)\"/&gt;\n     &lt;/xsl:otherwise&gt;\n   &lt;/xsl:choose&gt;\n &lt;/xsl:function&gt;\n          </eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">As a consequence of the function signature and the function calling\n             rules, a type error occurs if the supplied function <var>$f</var> cannot be applied to\n             two arguments, where the first argument is either the value of <var>$zero</var> or the\n             result of a previous application of <var>$f</var>, and the second is <var>$seq</var> or\n             any trailing subsequence of <var>$seq</var>.</p></div>\n", 
      "summary" : "<p>  Processes the supplied sequence from left to right, applying the supplied\n             function repeatedly to each item in turn, together with an accumulated result value.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "seq", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "zero", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "f", 
        "type" : "function (item()*, item()) as item()*", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "fold-right", 
      "qname" : "fn:fold-right", 
      "signature" : "($seq as item()*, $zero as item()*, $f as function (item()*, item()) as item()*) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Processes the supplied sequence from right to left, applying the supplied\n             function repeatedly to each item in turn, together with an accumulated result value.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"fold-right\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"seq\" type=\"item()*\"/><arg name=\"zero\" type=\"item()*\"/><arg name=\"f\" type=\"function(item()*, item()) as item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of the function is equivalent to the following implementation in XQuery:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n declare function fn:fold-right(\n         $seq as item()*,\n         $zero as item()*,\n         $f as function(item(), item()*) as item()*)\n         as item()* {\n   if (fn:empty($seq))\n   then $zero\n   else $f(fn:head($seq), fn:fold-right(fn:tail($seq), $zero, $f))\n };</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">or its equivalent in XSLT:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n &lt;xsl:function name=\"fn:fold-right\" as=\"item()*\"&gt;\n   &lt;xsl:param name=\"seq\" as=\"item()*\"/&gt;\n   &lt;xsl:param name=\"zero\" as=\"item()*\"/&gt;\n   &lt;xsl:param name=\"f\" as=\"function(item(), item()*) as item()*\"/&gt;\n   &lt;xsl:choose&gt;\n     &lt;xsl:when test=\"fn:empty($seq)\"&gt;\n       &lt;xsl:sequence select=\"$zero\"/&gt;\n     &lt;/xsl:when&gt;\n     &lt;xsl:otherwise&gt;\n       &lt;xsl:sequence select=\"$f(fn:head($seq), fn:fold-right(fn:tail($seq), $zero, $f))\"/&gt;\n     &lt;/xsl:otherwise&gt;\n   &lt;/xsl:choose&gt;\n &lt;/xsl:function&gt;\n          </eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">As a consequence of the function signature and the function calling\n             rules, a type error occurs if the supplied function <var>$f</var> cannot be applied to\n             two arguments, where the first argument is any item in the sequence <var>$seq</var>, and\n             the second is either the value of <var>$zero</var> or the result of a previous\n             application of <var>$f</var>.</p></div>\n", 
      "summary" : "<p>  Processes the supplied sequence from right to left, applying the supplied\n             function repeatedly to each item in turn, together with an accumulated result value.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "seq", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "zero", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "f", 
        "type" : "function (item()*, item()) as item()*", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "for-each-pair", 
      "qname" : "fn:for-each-pair", 
      "signature" : "($seq1 as item()*, $seq2 as item()*, $f as function (item(), item()) as item()*) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Applies the function item <var>$f</var> to successive pairs of items taken one\n             from <var>$seq1</var> and one from <var>$seq2</var>, returning the concatenation of the\n             resulting sequences in order.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"for-each-pair\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"seq1\" type=\"item()*\"/><arg name=\"seq2\" type=\"item()*\"/><arg name=\"f\" type=\"function(item(), item()) as item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of the function is equivalent to the following implementation in XQuery:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n declare function fn:for-each-pair($seq1, $seq2, $f)\n {\n    if(fn:exists($seq1) and fn:exists($seq2))\n    then (\n      $f(fn:head($seq1), fn:head($seq2)),\n      fn:for-each-pair(fn:tail($seq1), fn:tail($seq2), $f)\n    )\n    else ()\n };</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">or its equivalent in XSLT:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n &lt;xsl:function name=\"fn:for-each-pair\"&gt;\n   &lt;xsl:param name=\"seq1/&gt;\n   &lt;xsl:param name=\"seq2/&gt;\n   &lt;xsl:param name=\"f\"/&gt;\n   &lt;xsl:if test=\"fn:exists($seq1) and fn:exists($seq2)\"&gt;\n     &lt;xsl:sequence select=\"$f(fn:head($seq1), fn:head($seq2))\"/&gt;\n     &lt;xsl:sequence select=\"fn:for-each-pair(fn:tail($seq1), fn:tail($seq2), $f)\"/&gt;\n   &lt;/xsl:if&gt;\n &lt;/xsl:function&gt;\n          </eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:for-each-pair((\"a\", \"b\", \"c\"), (\"x\", \"y\", \"z\"), concat#2)</code> returns <code>(\"ax\", \"by\", \"cz\")</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:for-each-pair(1 to 5, 1 to 5, function($a, $b){10*$a + $b}</code> returns <code>(11, 22, 33, 44, 55)</code>.</p></div>\n", 
      "summary" : "<p>  Applies the function item  $f  to successive pairs of items taken one\n             from  $seq1  and one from  $seq2 , returning the concatenation of the\n             resulting sequences in order.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "seq1", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "seq2", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "f", 
        "type" : "function (item(), item()) as item()*", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "for-each", 
      "qname" : "fn:for-each", 
      "signature" : "($seq as item()*, $f as function (item()) as item()*) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Applies the function item <var>$f</var> to every item from the sequence\n                <var>$seq</var> in turn, returning the concatenation of the resulting sequences in\n             order.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"for-each\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"seq\" type=\"item()*\"/><arg name=\"f\" type=\"function(item()) as item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of the function is equivalent to the following implementation in XQuery:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n declare function fn:for-each($seq, $f) {\n   if (fn:empty($seq))\n   then ()\n   else ($f(fn:head($seq)), fn:for-each(fn:tail($seq), $f))\n };</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">or its equivalent in XSLT:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n &lt;xsl:function name=\"fn:for-each\"&gt;\n   &lt;xsl:param name=\"seq\"/&gt;\n   &lt;xsl:param name=\"f\"/&gt;\n   &lt;xsl:if test=\"fn:exists($seq)\"&gt;\n     &lt;xsl:sequence select=\"$f(fn:head($seq)), fn:for-each(fn:tail($seq), $f)\"/&gt;\n   &lt;/xsl:if&gt;\n &lt;/xsl:function&gt;\n          </eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function call <code>fn:for-each($SEQ, $F)</code> is equivalent to the expression\n                <code>for $i in $SEQ return $F($i)</code><phrase diff=\"add\" at=\"G\">, assuming that\n                ordering mode is <code>ordered</code>.</phrase></p></div>\n", 
      "summary" : "<p>  Applies the function item  $f  to every item from the sequence\n                 $seq  in turn, returning the concatenation of the resulting sequences in\n             order.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "seq", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "f", 
        "type" : "function (item()) as item()*", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "format-date", 
      "qname" : "fn:format-date", 
      "signature" : "($value as xs:date?, $picture as xs:string) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string containing an <code>xs:date</code> value formatted for display.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"format-date\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:date?\"/><arg name=\"picture\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"format-date\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:date?\"/><arg name=\"picture\" type=\"xs:string\"/><arg name=\"language\" type=\"xs:string?\"/><arg name=\"calendar\" type=\"xs:string?\"/><arg name=\"place\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The five-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone, and namespaces.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">See <specref ref=\"rules-for-datetime-formatting\"/>.</p></div>\n", 
      "summary" : "<p>  Returns a string containing an  xs:date  value formatted for display.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "value", 
        "type" : "xs:date", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "picture", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 5, 
      "name" : "format-date", 
      "qname" : "fn:format-date", 
      "signature" : "($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string containing an <code>xs:date</code> value formatted for display.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"format-date\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:date?\"/><arg name=\"picture\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"format-date\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:date?\"/><arg name=\"picture\" type=\"xs:string\"/><arg name=\"language\" type=\"xs:string?\"/><arg name=\"calendar\" type=\"xs:string?\"/><arg name=\"place\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The five-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone, and namespaces.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">See <specref ref=\"rules-for-datetime-formatting\"/>.</p></div>\n", 
      "summary" : "<p>  Returns a string containing an  xs:date  value formatted for display.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "value", 
        "type" : "xs:date", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "picture", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "language", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "calendar", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "place", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "format-dateTime", 
      "qname" : "fn:format-dateTime", 
      "signature" : "($value as xs:dateTime?, $picture as xs:string) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string containing an <code>xs:dateTime</code> value formatted for display.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"format-dateTime\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:dateTime?\"/><arg name=\"picture\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"format-dateTime\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:dateTime?\"/><arg name=\"picture\" type=\"xs:string\"/><arg name=\"language\" type=\"xs:string?\"/><arg name=\"calendar\" type=\"xs:string?\"/><arg name=\"place\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The five-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone, and namespaces.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">See <specref ref=\"rules-for-datetime-formatting\"/>.</p></div>\n", 
      "summary" : "<p>  Returns a string containing an  xs:dateTime  value formatted for display.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "value", 
        "type" : "xs:dateTime", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "picture", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 5, 
      "name" : "format-dateTime", 
      "qname" : "fn:format-dateTime", 
      "signature" : "($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string containing an <code>xs:dateTime</code> value formatted for display.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"format-dateTime\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:dateTime?\"/><arg name=\"picture\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"format-dateTime\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:dateTime?\"/><arg name=\"picture\" type=\"xs:string\"/><arg name=\"language\" type=\"xs:string?\"/><arg name=\"calendar\" type=\"xs:string?\"/><arg name=\"place\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The five-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone, and namespaces.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">See <specref ref=\"rules-for-datetime-formatting\"/>.</p></div>\n", 
      "summary" : "<p>  Returns a string containing an  xs:dateTime  value formatted for display.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "value", 
        "type" : "xs:dateTime", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "picture", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "language", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "calendar", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "place", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "format-integer", 
      "qname" : "fn:format-integer", 
      "signature" : "($value as xs:integer?, $picture as xs:string) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Formats an integer according to a given picture string, using the conventions\n             of a given natural language if specified.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"format-integer\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:integer?\"/><arg name=\"picture\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"format-integer\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:integer?\"/><arg name=\"picture\" type=\"xs:string\"/><arg name=\"lang\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tdefault language.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$value</code> is an empty sequence, the function returns a zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In all other cases, the <code>$picture</code> argument describes the format in which\n                <code>$value</code> is output.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The rules that follow describe how non-negative numbers are output. If the value of\n                <code>$value</code> is negative, the rules below are applied to the absolute value of\n                <code>$value</code>, and a minus sign is prepended to the result.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"L\">The value of <code>$picture</code> consists of a primary format token,\n             optionally followed\n             by a format modifier. The primary format token is always present and <rfc2119>must not</rfc2119>\n             be zero-length. If the string contains one or more semicolons then everything that\n             precedes the last semicolon is taken as the primary format token and everything\n             that follows is taken as the format modifier; if the string contains no\n             semicolon then the entire picture is taken as the primary format token, and the\n             format modifier is taken to be absent (which is equivalent to supplying a\n             zero-length string).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The primary format token is classified as one of the following:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>A <var>decimal-digit-pattern</var> made up of <var>optional-digit-signs</var>,\n                      <var>mandatory-digit-signs</var>, and <var>grouping-separator-signs</var>.</p><ulist><item><p>The <var>optional-digit-sign</var> is the character \"#\".</p></item><item><p>A <var>mandatory-digit-sign</var> is a <termref def=\"character\">character</termref> in Unicode category Nd. All\n                            <var>mandatory-digit-signs</var> within the format token <rfc2119>must</rfc2119> be from the\n                         same digit family, where a digit family is a sequence of ten consecutive\n                         characters in Unicode category Nd, having digit values 0 through 9. Within\n                         the format token, these digits are interchangeable: a three-digit number may\n                         thus be indicated equivalently by <code>000</code>, <code>001</code>, or\n                            <code>999</code>.</p></item><item><p>a <var>grouping-separator-sign</var> is a non-alphanumeric character, that\n                         is a <termref def=\"character\">character</termref> whose Unicode category is\n                         other than Nd, Nl, No, Lu, Ll, Lt, Lm or Lo.</p></item></ulist><p diff=\"chg\" at=\"L\">If the primary format token contains at least one Unicode digit\n                   then it is taken as a decimal digit pattern, and in this case it <rfc2119>must</rfc2119>\n                   match the regular expression <code>^((\\p{Nd}|#|[^\\p{N}\\p{L}])+?)$</code>. If it contains\n                   a digit but does not match this pattern, a <phrase diff=\"add\" at=\"L\">dynamic</phrase> error\n                   is raised <errorref class=\"DF\" code=\"1310\"/>.</p><note><p diff=\"add\" at=\"L\">If a semicolon is to be used as a grouping separator, then the primary\n                format token as a whole must be followed by another semicolon, to ensure that\n                the grouping separator is not mistaken as a separator between the primary format\n                token and the format modifier.</p></note><p>There <rfc2119>must</rfc2119> be at least one <var>mandatory-digit-sign</var>. There may be zero or\n                   more <var>optional-digit-signs</var>, and (if present) these <rfc2119>must</rfc2119> precede all\n                      <var>mandatory-digit-signs</var>. There may be zero or more\n                      <var>grouping-separator-signs</var>. A <var>grouping-separator-sign</var> <rfc2119>must\n                   not</rfc2119> appear at the start or end of the <var>decimal-digit-pattern</var>, nor\n                   adjacent to another <var>grouping-separator-sign</var>.</p><p>The corresponding output format is a decimal number, using this digit family, with\n                   at least as many digits as there are <var>mandatory-digit-signs</var> in the\n                   format token. Thus, a format token <code>1</code> generates the sequence <code>0 1\n                      2 ... 10 11 12 ...</code>, and a format token <code>01</code> (or equivalently,\n                      <code>00</code> or <code>99</code>) generates the sequence <code>00 01 02 ...\n                      09 10 11 12 ... 99 100 101</code>. A format token of <code>&amp;#x661;</code>\n                   (Arabic-Indic digit one) generates the sequence <code>Ÿ°</code> then <code>Ÿ¢</code>\n                   then <code>Ÿ£</code> ...</p><p>The <var>grouping-separator-signs</var> are handled as follows. The position of\n                   grouping separators within the format token, counting backwards from the last\n                   digit, indicates the position of grouping separators to appear within the\n                   formatted number, and the character used as the <var>grouping-separator-sign</var>\n                   within the format token indicates the character to be used as the corresponding\n                   grouping separator in the formatted number. If <var>grouping-separator-signs</var>\n                   appear at regular intervals within the format token, that is if the same grouping\n                   separator appears at positions forming a sequence <var>N</var>, 2<var>N</var>,\n                      3<var>N</var>, ... for some integer value <var>N</var> (including the case\n                   where there is only one number in the list), then the sequence is extrapolated to\n                   the left, so grouping separators will be used in the formatted number at every\n                   multiple of <var>N</var>. For example, if the format token is <code>0'000</code>\n                   then the number one million will be formatted as <code>1'000'000</code>, while the\n                   number fifteen will be formatted as <code>0'015</code>.</p><p>The only purpose of <var>optional-digit-signs</var> is to mark the position of\n                      <var>grouping-separator-signs</var>. For example, if the format token is\n                      <code>#'##0</code> then the number one million will be formatted as\n                      <code>1'000'000</code>, while the number fifteen will be formatted as\n                      <code>15</code>. A grouping separator is included in the formatted number only\n                   if there is a digit to its left, which will only be the case if either (a) the\n                   number is large enough to require that digit, or (b) the number of\n                      <var>mandatory-digit-signs</var> in the format token requires insignificant\n                   leading zeros to be present.</p><note><p>Numbers will never be truncated. Given the <var>decimal-digit-pattern</var>\n                      <code>01</code>, the number three hundred will be output as <code>300</code>,\n                      despite the absence of any <var>optional-digit-sign</var>.</p></note></item><item><p>The format token <code>A</code>, which generates the sequence <code>A B C ... Z AA AB\n                      AC...</code>.</p></item><item><p>The format token <code>a</code>, which generates the sequence <code>a b c ... z aa ab\n                      ac...</code>.</p></item><item><p>The format token <code>i</code>, which generates the sequence <code>i ii iii iv v vi vii\n                      viii ix x ...</code>.</p></item><item><p>The format token <code>I</code>, which generates the sequence <code>I II III IV V VI VII\n                      VIII IX X ...</code>.</p></item><item><p>The format token <code>w</code>, which generates numbers written as lower-case words, for\n                   example in English, <code>one two three four ...</code>\n                </p></item><item><p>The format token <code>W</code>, which generates numbers written as upper-case words, for\n                   example in English, <code>ONE TWO THREE FOUR ...</code>\n                </p></item><item><p>The format token <code>Ww</code>, which generates numbers written as title-case words, for\n                   example in English, <code>One Two Three Four ...</code>\n                </p></item><item><p>Any other format token, which indicates a numbering sequence in which that token\n                   represents the number 1 (one) (but see the note below).\n                   <!-- Where possible (given the constraint that format tokens\n \t\t\t\t\t\tmust be alphanumeric, and that they must be distinct) the format token\n \t\t\t\t\t\tused to represent a numbering sequence should be the same as the representation\n \t\t\t\t\t\tof the number 1 (one) in that sequence.-->\n                   It is <termref def=\"implementation-defined\">implementation-defined</termref> which\n                   numbering sequences, additional to those listed above, are supported. If an\n                   implementation does not support a numbering sequence represented by the given\n                   token, it <rfc2119>must</rfc2119> use a format token of <code>1</code>.</p><note><p>In some traditional numbering sequences additional signs are added to denote\n                      that the letters should be interpreted as numbers; these are not included in\n                      the format token. An example (see also the example below) is classical Greek\n                      where a <emph>dexia keraia</emph> (x0374, Õ¥) and sometimes an <emph>aristeri keraia</emph>\n                      (x0375, Õµ) is added.</p></note></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For all format tokens other than the first kind above (one that consists of decimal\n             digits), there <rfc2119>may</rfc2119> be <termref def=\"implementation-defined\">implementation-defined</termref> lower and upper bounds on the range of numbers that\n             can be formatted using this format token; indeed, for some numbering sequences there may\n             be intrinsic limits. For example, the format token <code>&amp;#x2460;</code> (circled\n             digit one, ‚ë†) has a range <phrase diff=\"chg\" at=\"M\">imposed by the Unicode character repertoire ‚Äî 1 to 20 in\n             Unicode versions prior to 4.0, increased in subsequent versions</phrase>. For\n             the numbering sequences described above any upper bound imposed by the implementation\n                <rfc2119>must not</rfc2119> be less than 1000 (one thousand) and any lower bound must\n             not be greater than 1. Numbers that fall outside this range <rfc2119>must</rfc2119> be\n             formatted using the format token <code>1</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The above expansions of numbering sequences for format tokens such as <code>a</code> and\n                <code>i</code> are indicative but not prescriptive. There are various conventions in\n             use for how alphabetic sequences continue when the alphabet is exhausted, and differing\n             conventions for how roman numerals are written (for example, <code>IV</code> versus\n                <code>IIII</code> as the representation of the number 4). Sometimes alphabetic\n             sequences are used that omit letters such as <code>i</code> and <code>o</code>. This\n             specification does not prescribe the detail of any sequence other than those sequences\n             consisting entirely of decimal digits.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Many numbering sequences are language-sensitive. This applies especially to the sequence\n             selected by the tokens <code>w</code>, <code>W</code> and <code>Ww</code>. It also\n             applies to other sequences, for example different languages using the Cyrillic alphabet\n             use different sequences of characters, each starting with the letter #x410 (Cyrillic\n             capital letter A). In such cases, the <code>$lang</code> argument specifies which\n             language's conventions are to be used. <phrase diff=\"chg\" at=\"L\">If the argument\n             is specified, the value <rfc2119>should</rfc2119> be either an empty sequence\n             or a value that would be valid for the <code>xml:lang</code> attribute (see <bibref ref=\"REC-xml\"/>).\n             Note that this permits the identification of sublanguages based on country codes (from ISO 3166-1)\n             as well as identification of dialects and regions within a country.</phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The set of languages\n             for which numbering is supported is <termref def=\"implementation-defined\"/>.\n             If the <code>$lang</code> argument is absent,\n             or is set to an empty sequence, or is invalid, or is not a language supported by the\n             implementation, then the number is formatted using <phrase diff=\"chg\" at=\"K\">the\n             default language from the dynamic context</phrase>.\n             </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The format modifier <phrase diff=\"chg\" at=\"L\"><rfc2119>must</rfc2119>\n             be a string that matches the regular expression <code diff=\"chg\" at=\"M\">^([co](\\(.+\\))?)?[at]?$</code>. </phrase>\n             That is, if it is present it must consist of one <phrase diff=\"add\" at=\"G\">or more</phrase> of\n             the following, in <phrase diff=\"del\" at=\"K\">any</phrase> order:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p diff=\"chg\" at=\"G\">either <code>c</code> or <code>o</code>, optionally followed by\n                   a sequence of characters enclosed between parentheses, to indicate cardinal or\n                   ordinal numbering respectively, the default being cardinal numbering</p></item><item><p diff=\"chg\" at=\"G\">either <code>a</code> or <code>t</code>, to indicate alphabetic\n                   or traditional numbering respectively, the default being <termref def=\"implementation-defined\">implementation-defined</termref>.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the <code>o</code> modifier is present, this indicates a request to output ordinal\n             numbers rather than cardinal numbers. For example, in English, when used with the format\n             token <code>1</code>, this outputs the sequence <code>1st 2nd 3rd 4th ...</code>, and\n             when used with the format token <code>w</code> outputs the sequence <code>first second\n             third fourth ...</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">The string of characters between the parentheses, if present, is used to\n          select between other possible variations of cardinal or ordinal numbering sequences.\n          The interpretation of this string is <termref def=\"implemementation-defined\">implementation-defined</termref>. No error occurs\n          if the implementation does not define any interpretation for the defined string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For example, in some languages, ordinal numbers vary depending on the grammatical context:\n             they may have different genders and may decline with the noun that they qualify.\n             In such cases the string appearing in parentheses after the letter <code>o</code> may be\n             used to indicate the variation of the ordinal number required. The way in which the\n             variation is indicated will depend on the conventions of the language. For inflected\n             languages that vary the ending of the word, the <rfc2119>recommended</rfc2119> approach is to indicate the\n             required ending, preceded by a hyphen: for example in German, appropriate values are\n                <code>o(-e)</code>, <code>o(-er)</code>, <code>o(-es)</code>, <code>o(-en)</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">It is <termref def=\"implementation-defined\">implementation-defined</termref> what\n             combinations of values of the format token, the language, and the cardinal/ordinal\n             modifier are supported. If ordinal numbering is not supported for the combination of the\n             format token, the language, and the string appearing in parentheses, the request is\n             ignored and cardinal numbers are generated instead.</p><example xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><head>Ordinal Numbering in Italian</head><p>The specification <code>\"1;o(-¬∫)\"</code> with <code>$lang</code> equal to\n                   <code>it</code>, if supported, should produce the sequence:</p><eg xml:space=\"preserve\">1¬∫ 2¬∫ 3¬∫ 4¬∫ ...</eg><p>The specification <code>\"Ww;o\"</code> with <code>$lang</code> equal to\n                   <code>it</code>, if supported, should produce the sequence:</p><eg xml:space=\"preserve\">Primo Secondo Terzo Quarto Quinto ...</eg></example><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <phrase diff=\"chg\" at=\"G\">use of the <code>a</code> or <code>t</code>\n                modifier</phrase> disambiguates between numbering sequences that use letters. In many\n             languages there are two commonly used numbering sequences that use letters. One\n             numbering sequence assigns numeric values to letters in alphabetic sequence, and the\n             other assigns numeric values to each letter in some other manner traditional in that\n             language. In English, these would correspond to the numbering sequences specified by the\n             format tokens <code>a</code> and <code>i</code>. In some languages, the first member of\n             each sequence is the same, and so the format token alone would be ambiguous. <phrase diff=\"chg\" at=\"G\">In the absence of the <code>a</code> or <code>t</code> modifier,\n                the default is <termref def=\"implementation-defined\">implementation-defined</termref></phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DF\" code=\"1310\"/> if the format token is invalid,\n             that is, if it violates any mandatory rules (indicated by an emphasized <rfc2119>must</rfc2119>\n             or <rfc2119>required</rfc2119> keyword in the above rules). For example, the error is raised if\n             the primary format token contains a digit but does not match the required regular expression.</p></div>\n", 
      "summary" : "<p>  Formats an integer according to a given picture string, using the conventions\n             of a given natural language if specified.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "value", 
        "type" : "xs:integer", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "picture", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "format-integer", 
      "qname" : "fn:format-integer", 
      "signature" : "($value as xs:integer?, $picture as xs:string, $language as xs:string) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Formats an integer according to a given picture string, using the conventions\n             of a given natural language if specified.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"format-integer\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:integer?\"/><arg name=\"picture\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"format-integer\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:integer?\"/><arg name=\"picture\" type=\"xs:string\"/><arg name=\"lang\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tdefault language.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$value</code> is an empty sequence, the function returns a zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In all other cases, the <code>$picture</code> argument describes the format in which\n                <code>$value</code> is output.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The rules that follow describe how non-negative numbers are output. If the value of\n                <code>$value</code> is negative, the rules below are applied to the absolute value of\n                <code>$value</code>, and a minus sign is prepended to the result.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"L\">The value of <code>$picture</code> consists of a primary format token,\n             optionally followed\n             by a format modifier. The primary format token is always present and <rfc2119>must not</rfc2119>\n             be zero-length. If the string contains one or more semicolons then everything that\n             precedes the last semicolon is taken as the primary format token and everything\n             that follows is taken as the format modifier; if the string contains no\n             semicolon then the entire picture is taken as the primary format token, and the\n             format modifier is taken to be absent (which is equivalent to supplying a\n             zero-length string).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The primary format token is classified as one of the following:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>A <var>decimal-digit-pattern</var> made up of <var>optional-digit-signs</var>,\n                      <var>mandatory-digit-signs</var>, and <var>grouping-separator-signs</var>.</p><ulist><item><p>The <var>optional-digit-sign</var> is the character \"#\".</p></item><item><p>A <var>mandatory-digit-sign</var> is a <termref def=\"character\">character</termref> in Unicode category Nd. All\n                            <var>mandatory-digit-signs</var> within the format token <rfc2119>must</rfc2119> be from the\n                         same digit family, where a digit family is a sequence of ten consecutive\n                         characters in Unicode category Nd, having digit values 0 through 9. Within\n                         the format token, these digits are interchangeable: a three-digit number may\n                         thus be indicated equivalently by <code>000</code>, <code>001</code>, or\n                            <code>999</code>.</p></item><item><p>a <var>grouping-separator-sign</var> is a non-alphanumeric character, that\n                         is a <termref def=\"character\">character</termref> whose Unicode category is\n                         other than Nd, Nl, No, Lu, Ll, Lt, Lm or Lo.</p></item></ulist><p diff=\"chg\" at=\"L\">If the primary format token contains at least one Unicode digit\n                   then it is taken as a decimal digit pattern, and in this case it <rfc2119>must</rfc2119>\n                   match the regular expression <code>^((\\p{Nd}|#|[^\\p{N}\\p{L}])+?)$</code>. If it contains\n                   a digit but does not match this pattern, a <phrase diff=\"add\" at=\"L\">dynamic</phrase> error\n                   is raised <errorref class=\"DF\" code=\"1310\"/>.</p><note><p diff=\"add\" at=\"L\">If a semicolon is to be used as a grouping separator, then the primary\n                format token as a whole must be followed by another semicolon, to ensure that\n                the grouping separator is not mistaken as a separator between the primary format\n                token and the format modifier.</p></note><p>There <rfc2119>must</rfc2119> be at least one <var>mandatory-digit-sign</var>. There may be zero or\n                   more <var>optional-digit-signs</var>, and (if present) these <rfc2119>must</rfc2119> precede all\n                      <var>mandatory-digit-signs</var>. There may be zero or more\n                      <var>grouping-separator-signs</var>. A <var>grouping-separator-sign</var> <rfc2119>must\n                   not</rfc2119> appear at the start or end of the <var>decimal-digit-pattern</var>, nor\n                   adjacent to another <var>grouping-separator-sign</var>.</p><p>The corresponding output format is a decimal number, using this digit family, with\n                   at least as many digits as there are <var>mandatory-digit-signs</var> in the\n                   format token. Thus, a format token <code>1</code> generates the sequence <code>0 1\n                      2 ... 10 11 12 ...</code>, and a format token <code>01</code> (or equivalently,\n                      <code>00</code> or <code>99</code>) generates the sequence <code>00 01 02 ...\n                      09 10 11 12 ... 99 100 101</code>. A format token of <code>&amp;#x661;</code>\n                   (Arabic-Indic digit one) generates the sequence <code>Ÿ°</code> then <code>Ÿ¢</code>\n                   then <code>Ÿ£</code> ...</p><p>The <var>grouping-separator-signs</var> are handled as follows. The position of\n                   grouping separators within the format token, counting backwards from the last\n                   digit, indicates the position of grouping separators to appear within the\n                   formatted number, and the character used as the <var>grouping-separator-sign</var>\n                   within the format token indicates the character to be used as the corresponding\n                   grouping separator in the formatted number. If <var>grouping-separator-signs</var>\n                   appear at regular intervals within the format token, that is if the same grouping\n                   separator appears at positions forming a sequence <var>N</var>, 2<var>N</var>,\n                      3<var>N</var>, ... for some integer value <var>N</var> (including the case\n                   where there is only one number in the list), then the sequence is extrapolated to\n                   the left, so grouping separators will be used in the formatted number at every\n                   multiple of <var>N</var>. For example, if the format token is <code>0'000</code>\n                   then the number one million will be formatted as <code>1'000'000</code>, while the\n                   number fifteen will be formatted as <code>0'015</code>.</p><p>The only purpose of <var>optional-digit-signs</var> is to mark the position of\n                      <var>grouping-separator-signs</var>. For example, if the format token is\n                      <code>#'##0</code> then the number one million will be formatted as\n                      <code>1'000'000</code>, while the number fifteen will be formatted as\n                      <code>15</code>. A grouping separator is included in the formatted number only\n                   if there is a digit to its left, which will only be the case if either (a) the\n                   number is large enough to require that digit, or (b) the number of\n                      <var>mandatory-digit-signs</var> in the format token requires insignificant\n                   leading zeros to be present.</p><note><p>Numbers will never be truncated. Given the <var>decimal-digit-pattern</var>\n                      <code>01</code>, the number three hundred will be output as <code>300</code>,\n                      despite the absence of any <var>optional-digit-sign</var>.</p></note></item><item><p>The format token <code>A</code>, which generates the sequence <code>A B C ... Z AA AB\n                      AC...</code>.</p></item><item><p>The format token <code>a</code>, which generates the sequence <code>a b c ... z aa ab\n                      ac...</code>.</p></item><item><p>The format token <code>i</code>, which generates the sequence <code>i ii iii iv v vi vii\n                      viii ix x ...</code>.</p></item><item><p>The format token <code>I</code>, which generates the sequence <code>I II III IV V VI VII\n                      VIII IX X ...</code>.</p></item><item><p>The format token <code>w</code>, which generates numbers written as lower-case words, for\n                   example in English, <code>one two three four ...</code>\n                </p></item><item><p>The format token <code>W</code>, which generates numbers written as upper-case words, for\n                   example in English, <code>ONE TWO THREE FOUR ...</code>\n                </p></item><item><p>The format token <code>Ww</code>, which generates numbers written as title-case words, for\n                   example in English, <code>One Two Three Four ...</code>\n                </p></item><item><p>Any other format token, which indicates a numbering sequence in which that token\n                   represents the number 1 (one) (but see the note below).\n                   <!-- Where possible (given the constraint that format tokens\n \t\t\t\t\t\tmust be alphanumeric, and that they must be distinct) the format token\n \t\t\t\t\t\tused to represent a numbering sequence should be the same as the representation\n \t\t\t\t\t\tof the number 1 (one) in that sequence.-->\n                   It is <termref def=\"implementation-defined\">implementation-defined</termref> which\n                   numbering sequences, additional to those listed above, are supported. If an\n                   implementation does not support a numbering sequence represented by the given\n                   token, it <rfc2119>must</rfc2119> use a format token of <code>1</code>.</p><note><p>In some traditional numbering sequences additional signs are added to denote\n                      that the letters should be interpreted as numbers; these are not included in\n                      the format token. An example (see also the example below) is classical Greek\n                      where a <emph>dexia keraia</emph> (x0374, Õ¥) and sometimes an <emph>aristeri keraia</emph>\n                      (x0375, Õµ) is added.</p></note></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For all format tokens other than the first kind above (one that consists of decimal\n             digits), there <rfc2119>may</rfc2119> be <termref def=\"implementation-defined\">implementation-defined</termref> lower and upper bounds on the range of numbers that\n             can be formatted using this format token; indeed, for some numbering sequences there may\n             be intrinsic limits. For example, the format token <code>&amp;#x2460;</code> (circled\n             digit one, ‚ë†) has a range <phrase diff=\"chg\" at=\"M\">imposed by the Unicode character repertoire ‚Äî 1 to 20 in\n             Unicode versions prior to 4.0, increased in subsequent versions</phrase>. For\n             the numbering sequences described above any upper bound imposed by the implementation\n                <rfc2119>must not</rfc2119> be less than 1000 (one thousand) and any lower bound must\n             not be greater than 1. Numbers that fall outside this range <rfc2119>must</rfc2119> be\n             formatted using the format token <code>1</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The above expansions of numbering sequences for format tokens such as <code>a</code> and\n                <code>i</code> are indicative but not prescriptive. There are various conventions in\n             use for how alphabetic sequences continue when the alphabet is exhausted, and differing\n             conventions for how roman numerals are written (for example, <code>IV</code> versus\n                <code>IIII</code> as the representation of the number 4). Sometimes alphabetic\n             sequences are used that omit letters such as <code>i</code> and <code>o</code>. This\n             specification does not prescribe the detail of any sequence other than those sequences\n             consisting entirely of decimal digits.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Many numbering sequences are language-sensitive. This applies especially to the sequence\n             selected by the tokens <code>w</code>, <code>W</code> and <code>Ww</code>. It also\n             applies to other sequences, for example different languages using the Cyrillic alphabet\n             use different sequences of characters, each starting with the letter #x410 (Cyrillic\n             capital letter A). In such cases, the <code>$lang</code> argument specifies which\n             language's conventions are to be used. <phrase diff=\"chg\" at=\"L\">If the argument\n             is specified, the value <rfc2119>should</rfc2119> be either an empty sequence\n             or a value that would be valid for the <code>xml:lang</code> attribute (see <bibref ref=\"REC-xml\"/>).\n             Note that this permits the identification of sublanguages based on country codes (from ISO 3166-1)\n             as well as identification of dialects and regions within a country.</phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The set of languages\n             for which numbering is supported is <termref def=\"implementation-defined\"/>.\n             If the <code>$lang</code> argument is absent,\n             or is set to an empty sequence, or is invalid, or is not a language supported by the\n             implementation, then the number is formatted using <phrase diff=\"chg\" at=\"K\">the\n             default language from the dynamic context</phrase>.\n             </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The format modifier <phrase diff=\"chg\" at=\"L\"><rfc2119>must</rfc2119>\n             be a string that matches the regular expression <code diff=\"chg\" at=\"M\">^([co](\\(.+\\))?)?[at]?$</code>. </phrase>\n             That is, if it is present it must consist of one <phrase diff=\"add\" at=\"G\">or more</phrase> of\n             the following, in <phrase diff=\"del\" at=\"K\">any</phrase> order:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p diff=\"chg\" at=\"G\">either <code>c</code> or <code>o</code>, optionally followed by\n                   a sequence of characters enclosed between parentheses, to indicate cardinal or\n                   ordinal numbering respectively, the default being cardinal numbering</p></item><item><p diff=\"chg\" at=\"G\">either <code>a</code> or <code>t</code>, to indicate alphabetic\n                   or traditional numbering respectively, the default being <termref def=\"implementation-defined\">implementation-defined</termref>.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the <code>o</code> modifier is present, this indicates a request to output ordinal\n             numbers rather than cardinal numbers. For example, in English, when used with the format\n             token <code>1</code>, this outputs the sequence <code>1st 2nd 3rd 4th ...</code>, and\n             when used with the format token <code>w</code> outputs the sequence <code>first second\n             third fourth ...</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">The string of characters between the parentheses, if present, is used to\n          select between other possible variations of cardinal or ordinal numbering sequences.\n          The interpretation of this string is <termref def=\"implemementation-defined\">implementation-defined</termref>. No error occurs\n          if the implementation does not define any interpretation for the defined string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For example, in some languages, ordinal numbers vary depending on the grammatical context:\n             they may have different genders and may decline with the noun that they qualify.\n             In such cases the string appearing in parentheses after the letter <code>o</code> may be\n             used to indicate the variation of the ordinal number required. The way in which the\n             variation is indicated will depend on the conventions of the language. For inflected\n             languages that vary the ending of the word, the <rfc2119>recommended</rfc2119> approach is to indicate the\n             required ending, preceded by a hyphen: for example in German, appropriate values are\n                <code>o(-e)</code>, <code>o(-er)</code>, <code>o(-es)</code>, <code>o(-en)</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">It is <termref def=\"implementation-defined\">implementation-defined</termref> what\n             combinations of values of the format token, the language, and the cardinal/ordinal\n             modifier are supported. If ordinal numbering is not supported for the combination of the\n             format token, the language, and the string appearing in parentheses, the request is\n             ignored and cardinal numbers are generated instead.</p><example xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><head>Ordinal Numbering in Italian</head><p>The specification <code>\"1;o(-¬∫)\"</code> with <code>$lang</code> equal to\n                   <code>it</code>, if supported, should produce the sequence:</p><eg xml:space=\"preserve\">1¬∫ 2¬∫ 3¬∫ 4¬∫ ...</eg><p>The specification <code>\"Ww;o\"</code> with <code>$lang</code> equal to\n                   <code>it</code>, if supported, should produce the sequence:</p><eg xml:space=\"preserve\">Primo Secondo Terzo Quarto Quinto ...</eg></example><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <phrase diff=\"chg\" at=\"G\">use of the <code>a</code> or <code>t</code>\n                modifier</phrase> disambiguates between numbering sequences that use letters. In many\n             languages there are two commonly used numbering sequences that use letters. One\n             numbering sequence assigns numeric values to letters in alphabetic sequence, and the\n             other assigns numeric values to each letter in some other manner traditional in that\n             language. In English, these would correspond to the numbering sequences specified by the\n             format tokens <code>a</code> and <code>i</code>. In some languages, the first member of\n             each sequence is the same, and so the format token alone would be ambiguous. <phrase diff=\"chg\" at=\"G\">In the absence of the <code>a</code> or <code>t</code> modifier,\n                the default is <termref def=\"implementation-defined\">implementation-defined</termref></phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DF\" code=\"1310\"/> if the format token is invalid,\n             that is, if it violates any mandatory rules (indicated by an emphasized <rfc2119>must</rfc2119>\n             or <rfc2119>required</rfc2119> keyword in the above rules). For example, the error is raised if\n             the primary format token contains a digit but does not match the required regular expression.</p></div>\n", 
      "summary" : "<p>  Formats an integer according to a given picture string, using the conventions\n             of a given natural language if specified.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "value", 
        "type" : "xs:integer", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "picture", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "language", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "format-number", 
      "qname" : "fn:format-number", 
      "signature" : "($value as numeric?, $picture as xs:string) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string containing a number formatted according to a given picture\n             string, taking account of decimal formats specified in the static context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"format-number\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"numeric?\"/><arg name=\"picture\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"format-number\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"numeric?\"/><arg name=\"picture\" type=\"xs:string\"/><arg name=\"decimal-format-name\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tdecimal formats, and namespaces.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"K\">The effect of the two-argument form of the function is equivalent to calling\n          the three-argument form with an empty sequence as the value of the third argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function formats <code>$value</code> as a string using the <termref def=\"dt-picture-string\">picture string</termref> specified by the\n                <code>$picture</code> argument and the decimal-format named by the\n                <code>$decimal-format-name</code> argument, or the default decimal-format, if there\n             is no <code>$decimal-format-name</code> argument. The syntax of the picture string is\n             described in <specref ref=\"syntax-of-picture-string\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$value</code> argument may be of any numeric data type\n             (<code>xs:double</code>, <code>xs:float</code>, <code>xs:decimal</code>, or their\n             subtypes including <code>xs:integer</code>). Note that if an <code>xs:decimal</code> is\n             supplied, it is not automatically promoted to an <code>xs:double</code>, as such\n             promotion can involve a loss of precision.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the supplied value of the <code>$value</code> argument is an empty sequence, the\n             function behaves as if the supplied value were the <code>xs:double</code> value\n                <code>NaN</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The value of <code>$decimal-format-name</code>,\n             <phrase diff=\"add\" at=\"K\">if present and non-empty, </phrase>\n             <rfc2119>must</rfc2119> <phrase diff=\"chg\" at=\"L\">be a string which after removal of leading and trailing whitespace is in the form of an\n             an <code>EQName</code> as defined in the XPath 3.0 grammar, that is one of the following</phrase>:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>A lexical QName, which is expanded using the\n                <phrase diff=\"chg\" at=\"J\">statically known namespaces</phrase>.\n                The default namespace is not used (no prefix means no namespace).</p></item><item><p diff=\"add\" at=\"L\">A <code>URIQualifiedName</code> using the syntax <code>Q{uri}local</code>,\n             where the URI can be zero-length to indicate a name in no namespace.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"K\">The decimal format that is used is the decimal format\n          in the static context whose name matches <code>$decimal-format-name</code> if supplied,\n          or the default decimal format in the static context otherwise.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The evaluation of the <function>format-number</function> function takes place in two\n             phases, an analysis phase described in <specref ref=\"analysing-picture-string\"/> and a\n             formatting phase described in <specref ref=\"formatting-the-number\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The analysis phase takes as its inputs the <termref def=\"dt-picture-string\">picture\n                string</termref> and the variables derived from the relevant decimal format in the\n             static context, and produces as its output a number of variables with defined values.\n             The formatting phase takes as its inputs the number to be formatted and the variables\n             produced by the analysis phase, and produces as its output a string containing a\n             formatted representation of the number.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the function is the formatted string representation of the supplied\n             number.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DF\" code=\"1280\"/> if the name specified as the\n                <code>$decimal-format-name</code> argument is\n             <phrase diff=\"chg\" at=\"L\">neither a valid lexical QName nor a valid <code>URIQualifiedName</code></phrase>, or if it\n             uses a prefix <phrase diff=\"add\" at=\"J\">that is not found in the statically known namespaces</phrase>, or if the static\n             context does not contain a declaration of a decimal-format with a matching expanded\n             QName. If the processor is able to detect the error statically (for example, when the\n             argument is supplied as a string literal), then the processor <rfc2119>may</rfc2119>\n             optionally signal this as a static error.</p></div>\n", 
      "summary" : "<p>  Returns a string containing a number formatted according to a given picture\n             string, taking account of decimal formats specified in the static context.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "value", 
        "type" : "numeric", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "picture", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "format-number", 
      "qname" : "fn:format-number", 
      "signature" : "($value as numeric?, $picture as xs:string, $decimal-format-name as xs:string) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string containing a number formatted according to a given picture\n             string, taking account of decimal formats specified in the static context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"format-number\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"numeric?\"/><arg name=\"picture\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"format-number\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"numeric?\"/><arg name=\"picture\" type=\"xs:string\"/><arg name=\"decimal-format-name\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tdecimal formats, and namespaces.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"K\">The effect of the two-argument form of the function is equivalent to calling\n          the three-argument form with an empty sequence as the value of the third argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function formats <code>$value</code> as a string using the <termref def=\"dt-picture-string\">picture string</termref> specified by the\n                <code>$picture</code> argument and the decimal-format named by the\n                <code>$decimal-format-name</code> argument, or the default decimal-format, if there\n             is no <code>$decimal-format-name</code> argument. The syntax of the picture string is\n             described in <specref ref=\"syntax-of-picture-string\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$value</code> argument may be of any numeric data type\n             (<code>xs:double</code>, <code>xs:float</code>, <code>xs:decimal</code>, or their\n             subtypes including <code>xs:integer</code>). Note that if an <code>xs:decimal</code> is\n             supplied, it is not automatically promoted to an <code>xs:double</code>, as such\n             promotion can involve a loss of precision.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the supplied value of the <code>$value</code> argument is an empty sequence, the\n             function behaves as if the supplied value were the <code>xs:double</code> value\n                <code>NaN</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The value of <code>$decimal-format-name</code>,\n             <phrase diff=\"add\" at=\"K\">if present and non-empty, </phrase>\n             <rfc2119>must</rfc2119> <phrase diff=\"chg\" at=\"L\">be a string which after removal of leading and trailing whitespace is in the form of an\n             an <code>EQName</code> as defined in the XPath 3.0 grammar, that is one of the following</phrase>:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>A lexical QName, which is expanded using the\n                <phrase diff=\"chg\" at=\"J\">statically known namespaces</phrase>.\n                The default namespace is not used (no prefix means no namespace).</p></item><item><p diff=\"add\" at=\"L\">A <code>URIQualifiedName</code> using the syntax <code>Q{uri}local</code>,\n             where the URI can be zero-length to indicate a name in no namespace.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"K\">The decimal format that is used is the decimal format\n          in the static context whose name matches <code>$decimal-format-name</code> if supplied,\n          or the default decimal format in the static context otherwise.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The evaluation of the <function>format-number</function> function takes place in two\n             phases, an analysis phase described in <specref ref=\"analysing-picture-string\"/> and a\n             formatting phase described in <specref ref=\"formatting-the-number\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The analysis phase takes as its inputs the <termref def=\"dt-picture-string\">picture\n                string</termref> and the variables derived from the relevant decimal format in the\n             static context, and produces as its output a number of variables with defined values.\n             The formatting phase takes as its inputs the number to be formatted and the variables\n             produced by the analysis phase, and produces as its output a string containing a\n             formatted representation of the number.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the function is the formatted string representation of the supplied\n             number.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DF\" code=\"1280\"/> if the name specified as the\n                <code>$decimal-format-name</code> argument is\n             <phrase diff=\"chg\" at=\"L\">neither a valid lexical QName nor a valid <code>URIQualifiedName</code></phrase>, or if it\n             uses a prefix <phrase diff=\"add\" at=\"J\">that is not found in the statically known namespaces</phrase>, or if the static\n             context does not contain a declaration of a decimal-format with a matching expanded\n             QName. If the processor is able to detect the error statically (for example, when the\n             argument is supplied as a string literal), then the processor <rfc2119>may</rfc2119>\n             optionally signal this as a static error.</p></div>\n", 
      "summary" : "<p>  Returns a string containing a number formatted according to a given picture\n             string, taking account of decimal formats specified in the static context.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "value", 
        "type" : "numeric", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "picture", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "decimal-format-name", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "format-time", 
      "qname" : "fn:format-time", 
      "signature" : "($value as xs:time?, $picture as xs:string) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string containing an <code>xs:time</code> value formatted for display.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"format-time\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:time?\"/><arg name=\"picture\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"format-time\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:time?\"/><arg name=\"picture\" type=\"xs:string\"/><arg name=\"language\" type=\"xs:string?\"/><arg name=\"calendar\" type=\"xs:string?\"/><arg name=\"place\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The five-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone, and namespaces.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">See <specref ref=\"rules-for-datetime-formatting\"/>.</p></div>\n", 
      "summary" : "<p>  Returns a string containing an  xs:time  value formatted for display.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "value", 
        "type" : "xs:time", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "picture", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 5, 
      "name" : "format-time", 
      "qname" : "fn:format-time", 
      "signature" : "($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string containing an <code>xs:time</code> value formatted for display.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"format-time\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:time?\"/><arg name=\"picture\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"format-time\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"xs:time?\"/><arg name=\"picture\" type=\"xs:string\"/><arg name=\"language\" type=\"xs:string?\"/><arg name=\"calendar\" type=\"xs:string?\"/><arg name=\"place\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The five-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone, and namespaces.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">See <specref ref=\"rules-for-datetime-formatting\"/>.</p></div>\n", 
      "summary" : "<p>  Returns a string containing an  xs:time  value formatted for display.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "value", 
        "type" : "xs:time", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "picture", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "language", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "calendar", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "place", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "function-arity", 
      "qname" : "fn:function-arity", 
      "signature" : "($func as function (*)) as xs:integer external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the arity of the function identified by a function item.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"function-arity\" return-type=\"xs:integer\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"func\" type=\"function(*)\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>fn:function-arity</code> function returns the arity (number of arguments) of\n             the function identified by <code>$func</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:function-arity(fn:substring#2)</code> returns <code>2</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:function-arity(function($node){name($node)})</code> returns <code>1</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>let $initial := fn:substring(?, 1, 1) return fn:function-arity($initial)</code> returns <code>1</code>.</p></div>\n", 
      "summary" : "<p>  Returns the arity of the function identified by a function item.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "func", 
        "type" : "function (*)", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "generate-id", 
      "qname" : "fn:generate-id", 
      "signature" : "() as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function returns a string that uniquely identifies a given node. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"generate-id\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"generate-id\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context item (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is the empty sequence, the result is the zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In other cases, the function returns a string that uniquely identifies a given node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The returned identifier <rfc2119>must</rfc2119> consist of ASCII alphanumeric characters\n             and <rfc2119>must</rfc2119> start with an alphabetic character. Thus, the string is\n             syntactically an XML name.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">An implementation is free to generate an identifier in any convenient way provided that\n             it always generates the same identifier for the same node and that different identifiers\n             are always generated from different nodes. An implementation is under no obligation to\n             generate the same identifiers each time a document is transformed or queried.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  This function returns a string that uniquely identifies a given node.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "generate-id", 
      "qname" : "fn:generate-id", 
      "signature" : "($arg as node()?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function returns a string that uniquely identifies a given node. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"generate-id\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"generate-id\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context item (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is the empty sequence, the result is the zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In other cases, the function returns a string that uniquely identifies a given node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The returned identifier <rfc2119>must</rfc2119> consist of ASCII alphanumeric characters\n             and <rfc2119>must</rfc2119> start with an alphabetic character. Thus, the string is\n             syntactically an XML name.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">An implementation is free to generate an identifier in any convenient way provided that\n             it always generates the same identifier for the same node and that different identifiers\n             are always generated from different nodes. An implementation is under no obligation to\n             generate the same identifiers each time a document is transformed or queried.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  This function returns a string that uniquely identifies a given node.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "node()", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "has-children", 
      "qname" : "fn:has-children", 
      "signature" : "() as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the supplied node has one or more child nodes (of any kind).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"has-children\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"has-children\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"node\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context item (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><phrase diff=\"add\" at=\"L\">Provided that the supplied argument <code>$node</code> matches the expected\n          type <code>node()?</code>, </phrase>the result of the function call <code>fn:has-children($node)</code> is defined to be\n             the same as the result of the expression\n             <code>fn:exists($node/child::node())</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$node</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns true if the supplied node has one or more child nodes (of any kind).</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "has-children", 
      "qname" : "fn:has-children", 
      "signature" : "($node as node()?) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the supplied node has one or more child nodes (of any kind).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"has-children\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"has-children\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"node\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context item (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><phrase diff=\"add\" at=\"L\">Provided that the supplied argument <code>$node</code> matches the expected\n          type <code>node()?</code>, </phrase>the result of the function call <code>fn:has-children($node)</code> is defined to be\n             the same as the result of the expression\n             <code>fn:exists($node/child::node())</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$node</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns true if the supplied node has one or more child nodes (of any kind).</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "node", 
        "type" : "node()", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "head", 
      "qname" : "fn:head", 
      "signature" : "($arg as item()*) as item()? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the first item in a sequence. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"head\" return-type=\"item()?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the value of the expression <code>$arg[1]</code></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the empty sequence is returned. Otherwise\n             the first item in the sequence is returned.</p></div>\n", 
      "summary" : "<p>  Returns the first item in a sequence.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "hours-from-duration", 
      "qname" : "fn:hours-from-duration", 
      "signature" : "($arg as xs:duration?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the number of hours in a duration.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"hours-from-duration\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:duration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:integer</code> representing the hours\n             component in the value of <code>$arg</code>. The result is obtained by casting\n                <code>$arg</code> to an <code>xs:dayTimeDuration</code> (see <specref ref=\"casting-to-durations\"/>) and then computing the hours component as described in\n                <specref ref=\"canonical-dayTimeDuration\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is a negative duration then the result will be negative..</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is an <code>xs:yearMonthDuration</code> the function returns 0.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:hours-from-duration(xs:dayTimeDuration(\"P3DT10H\"))</code> returns <code>10</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:hours-from-duration(xs:dayTimeDuration(\"P3DT12H32M12S\"))</code> returns <code>12</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:hours-from-duration(xs:dayTimeDuration(\"PT123H\"))</code> returns <code>3</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:hours-from-duration(xs:dayTimeDuration(\"-P3DT10H\"))</code> returns <code>-10</code>.</p></div>\n", 
      "summary" : "<p>  Returns the number of hours in a duration.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:duration", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "hours-from-time", 
      "qname" : "fn:hours-from-time", 
      "signature" : "($arg as xs:time?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the hours component of an <code>xs:time</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"hours-from-time\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:time?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:integer</code> between 0 and 23, both\n             inclusive, representing the value of the hours component in the local value of\n                <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Assume that the dynamic context provides an implicit timezone value of\n                   <code>-05:00</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:hours-from-time(xs:time(\"11:23:00\"))</code> returns <code>11</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:hours-from-time(xs:time(\"21:23:00\"))</code> returns <code>21</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:hours-from-time(xs:time(\"01:23:00+05:00\"))</code> returns <code>1</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:hours-from-time(fn:adjust-time-to-timezone(xs:time(\"01:23:00+05:00\"),\n                   xs:dayTimeDuration(\"PT0S\")))</code> returns <code>20</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:hours-from-time(xs:time(\"24:00:00\"))</code> returns <code>0</code>.</p></div>\n", 
      "summary" : "<p>  Returns the hours component of an  xs:time .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:time", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "id", 
      "qname" : "fn:id", 
      "signature" : "($arg as xs:string*) as element(*)* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the sequence of element nodes that have an <code>ID</code> value\n             matching the value of one or more of the <code>IDREF</code> values supplied in\n                <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"id\" return-type=\"element()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/></proto></example><example role=\"signature\"><proto name=\"id\" return-type=\"element()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/><arg name=\"node\" type=\"node()\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence, in document order with duplicates eliminated,\n             containing every element node <code>E</code> that satisfies all the following\n             conditions:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>\n                   <code>E</code> is in the target document. The target document is the document\n                   containing <code>$node</code>, or the document containing the context item\n                      (<code>.</code>) if the second argument is omitted. The behavior of the\n                   function if <code>$node</code> is omitted is exactly the same as if the context\n                   item had been passed as <code>$node</code>.</p></item><item><p><code>E</code> has an <code>ID</code> value equal to one of the candidate\n                      <code>IDREF</code> values, where:</p><ulist><item><p> An element has an <code>ID</code> value equal to <code>V</code> if either\n                         or both of the following conditions are true:</p><ulist><item><p>The <code>is-id</code> property (See <xspecref spec=\"DM30\" ref=\"dm-is-id\"/>.) of the element node is true, and the typed value\n                               of the element node is equal to <code>V</code> under the rules of the\n                                  <code>eq</code> operator using the Unicode codepoint collation\n                                  (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p></item><item><p>The element has an attribute node whose <code>is-id</code> property\n                               (See <xspecref spec=\"DM30\" ref=\"dm-is-id\"/>.) is true and whose typed\n                               value is equal to <code>V</code> under the rules of the\n                                  <code>eq</code> operator using the Unicode code point collation\n                                  (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p></item></ulist></item><item><p> Each <code>xs:string</code> in <code>$arg</code> is parsed as if it were of\n                         type <code>IDREFS</code>, that is, each <code>xs:string</code> in\n                            <code>$arg</code> is treated as a whitespace-separated sequence of\n                         tokens, each acting as an <code>IDREF</code>. These tokens are then included\n                         in the list of candidate <code>IDREF</code>s. If any of the tokens is not a\n                         lexically valid <code>IDREF</code> (that is, if it is not lexically an\n                            <code>xs:NCName</code>), it is ignored. Formally, the candidate\n                            <code>IDREF</code> values are the strings in the sequence given by the\n                         expression:</p><eg xml:space=\"preserve\">for $s in $arg return\n     fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF]</eg></item></ulist></item><item><p>If several elements have the same <code>ID</code> value, then <code>E</code> is\n                   the one that is first in document order.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0001\" type=\"dynamic\"/> if\n                <code>$node</code>, or the context item if the second argument is absent, is a node\n                in a tree whose root is not a document node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$node</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the sequence of element nodes that have an  ID  value\n             matching the value of one or more of the  IDREF  values supplied in\n                 $arg .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "element(*)*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "id", 
      "qname" : "fn:id", 
      "signature" : "($arg as xs:string*, $node as node()) as element(*)* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the sequence of element nodes that have an <code>ID</code> value\n             matching the value of one or more of the <code>IDREF</code> values supplied in\n                <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"id\" return-type=\"element()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/></proto></example><example role=\"signature\"><proto name=\"id\" return-type=\"element()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/><arg name=\"node\" type=\"node()\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence, in document order with duplicates eliminated,\n             containing every element node <code>E</code> that satisfies all the following\n             conditions:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>\n                   <code>E</code> is in the target document. The target document is the document\n                   containing <code>$node</code>, or the document containing the context item\n                      (<code>.</code>) if the second argument is omitted. The behavior of the\n                   function if <code>$node</code> is omitted is exactly the same as if the context\n                   item had been passed as <code>$node</code>.</p></item><item><p><code>E</code> has an <code>ID</code> value equal to one of the candidate\n                      <code>IDREF</code> values, where:</p><ulist><item><p> An element has an <code>ID</code> value equal to <code>V</code> if either\n                         or both of the following conditions are true:</p><ulist><item><p>The <code>is-id</code> property (See <xspecref spec=\"DM30\" ref=\"dm-is-id\"/>.) of the element node is true, and the typed value\n                               of the element node is equal to <code>V</code> under the rules of the\n                                  <code>eq</code> operator using the Unicode codepoint collation\n                                  (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p></item><item><p>The element has an attribute node whose <code>is-id</code> property\n                               (See <xspecref spec=\"DM30\" ref=\"dm-is-id\"/>.) is true and whose typed\n                               value is equal to <code>V</code> under the rules of the\n                                  <code>eq</code> operator using the Unicode code point collation\n                                  (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p></item></ulist></item><item><p> Each <code>xs:string</code> in <code>$arg</code> is parsed as if it were of\n                         type <code>IDREFS</code>, that is, each <code>xs:string</code> in\n                            <code>$arg</code> is treated as a whitespace-separated sequence of\n                         tokens, each acting as an <code>IDREF</code>. These tokens are then included\n                         in the list of candidate <code>IDREF</code>s. If any of the tokens is not a\n                         lexically valid <code>IDREF</code> (that is, if it is not lexically an\n                            <code>xs:NCName</code>), it is ignored. Formally, the candidate\n                            <code>IDREF</code> values are the strings in the sequence given by the\n                         expression:</p><eg xml:space=\"preserve\">for $s in $arg return\n     fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF]</eg></item></ulist></item><item><p>If several elements have the same <code>ID</code> value, then <code>E</code> is\n                   the one that is first in document order.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0001\" type=\"dynamic\"/> if\n                <code>$node</code>, or the context item if the second argument is absent, is a node\n                in a tree whose root is not a document node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$node</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the sequence of element nodes that have an  ID  value\n             matching the value of one or more of the  IDREF  values supplied in\n                 $arg .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "node", 
        "type" : "node()", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "element(*)*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "idref", 
      "qname" : "fn:idref", 
      "signature" : "($arg as xs:string*) as node()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the sequence of element or attribute nodes with an <code>IDREF</code>\n             value matching the value of one or more of the <code>ID</code> values supplied in\n                <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"idref\" return-type=\"node()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/></proto></example><example role=\"signature\"><proto name=\"idref\" return-type=\"node()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/><arg name=\"node\" type=\"node()\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> The function returns a sequence, in document order with duplicates eliminated,\n             containing every element or attribute node <code>$N</code> that satisfies all the\n             following conditions:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p><code>$N</code> is in the target document. The target document is the document\n                   containing <code>$node</code> or the document containing the context item\n                      (<code>.</code>) if the second argument is omitted. The behavior of the\n                   function if <code>$node</code> is omitted is exactly the same as if the context\n                   item had been passed as <code>$node</code>.</p></item><item><p><code>$N</code> has an <code>IDREF</code> value equal to one of the candidate\n                      <code>ID</code> values, where:</p><ulist><item><p>A node <code>$N</code> has an <code>IDREF</code> value equal to\n                            <code>V</code> if both of the following conditions are true:</p><ulist><item><p>The <code>is-idrefs</code> property (see <xspecref spec=\"DM30\" ref=\"dm-is-idrefs\"/>) of <code>$N</code> is <code>true</code>.</p></item><item><p>The sequence <!--Text replaced by erratum E29 change 1\"--><eg diff=\"chg\" at=\"A-E29\" xml:space=\"preserve\">fn:tokenize(fn:normalize-space(fn:string($N)), ' ')</eg>\n                               <!--End of text replaced by erratum E29--> contains a string that is\n                               equal to <code>V</code> under the rules of the <code>eq</code>\n                               operator using the Unicode code point collation\n                                  (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p></item></ulist></item><item><p>Each <code>xs:string</code> in <code>$arg</code> is parsed as if it were of\n                         lexically of type <code>xs:ID</code>. These <code>xs:string</code>s are then\n                         included in the list of candidate <code>xs:ID</code>s. If any of the strings\n                         in <code>$arg</code> is not a lexically valid <code>xs:ID</code> (that is,\n                         if it is not lexically an <code>xs:NCName</code>), it is ignored. More\n                         formally, the candidate <code>ID</code> values are the strings in the\n                         sequence:</p><eg xml:space=\"preserve\">$arg[. castable as xs:NCName]</eg></item></ulist></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0001\" type=\"dynamic\"/> if\n                <code>$node</code>, or the context item if the second argument is omitted, is a node\n                in a tree whose root is not a document node. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$node</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the sequence of element or attribute nodes with an  IDREF \n             value matching the value of one or more of the  ID  values supplied in\n                 $arg .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "node()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "idref", 
      "qname" : "fn:idref", 
      "signature" : "($arg as xs:string*, $node as node()) as node()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the sequence of element or attribute nodes with an <code>IDREF</code>\n             value matching the value of one or more of the <code>ID</code> values supplied in\n                <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"idref\" return-type=\"node()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/></proto></example><example role=\"signature\"><proto name=\"idref\" return-type=\"node()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string*\"/><arg name=\"node\" type=\"node()\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> The function returns a sequence, in document order with duplicates eliminated,\n             containing every element or attribute node <code>$N</code> that satisfies all the\n             following conditions:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p><code>$N</code> is in the target document. The target document is the document\n                   containing <code>$node</code> or the document containing the context item\n                      (<code>.</code>) if the second argument is omitted. The behavior of the\n                   function if <code>$node</code> is omitted is exactly the same as if the context\n                   item had been passed as <code>$node</code>.</p></item><item><p><code>$N</code> has an <code>IDREF</code> value equal to one of the candidate\n                      <code>ID</code> values, where:</p><ulist><item><p>A node <code>$N</code> has an <code>IDREF</code> value equal to\n                            <code>V</code> if both of the following conditions are true:</p><ulist><item><p>The <code>is-idrefs</code> property (see <xspecref spec=\"DM30\" ref=\"dm-is-idrefs\"/>) of <code>$N</code> is <code>true</code>.</p></item><item><p>The sequence <!--Text replaced by erratum E29 change 1\"--><eg diff=\"chg\" at=\"A-E29\" xml:space=\"preserve\">fn:tokenize(fn:normalize-space(fn:string($N)), ' ')</eg>\n                               <!--End of text replaced by erratum E29--> contains a string that is\n                               equal to <code>V</code> under the rules of the <code>eq</code>\n                               operator using the Unicode code point collation\n                                  (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p></item></ulist></item><item><p>Each <code>xs:string</code> in <code>$arg</code> is parsed as if it were of\n                         lexically of type <code>xs:ID</code>. These <code>xs:string</code>s are then\n                         included in the list of candidate <code>xs:ID</code>s. If any of the strings\n                         in <code>$arg</code> is not a lexically valid <code>xs:ID</code> (that is,\n                         if it is not lexically an <code>xs:NCName</code>), it is ignored. More\n                         formally, the candidate <code>ID</code> values are the strings in the\n                         sequence:</p><eg xml:space=\"preserve\">$arg[. castable as xs:NCName]</eg></item></ulist></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0001\" type=\"dynamic\"/> if\n                <code>$node</code>, or the context item if the second argument is omitted, is a node\n                in a tree whose root is not a document node. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$node</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the sequence of element or attribute nodes with an  IDREF \n             value matching the value of one or more of the  ID  values supplied in\n                 $arg .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "node", 
        "type" : "node()", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "node()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "implicit-timezone", 
      "qname" : "fn:implicit-timezone", 
      "signature" : "() as xs:dayTimeDuration external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of the implicit timezone property from the dynamic context.\n          </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"implicit-timezone\" return-type=\"xs:dayTimeDuration\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\timplicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of the implicit timezone property from the dynamic context. Components\n             of the dynamic context are discussed in <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.</p></div>\n", 
      "summary" : "<p>  Returns the value of the implicit timezone property from the dynamic context.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:dayTimeDuration", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "in-scope-prefixes", 
      "qname" : "fn:in-scope-prefixes", 
      "signature" : "($element as element(*)) as xs:string* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the prefixes of the in-scope namespaces for an element node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"in-scope-prefixes\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"element\" type=\"element()\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence of strings representing the prefixes of the in-scope\n             namespaces for <code>$element</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For namespace bindings that have a prefix, the function returns the prefix as an\n                <code>xs:NCName</code>. For the default namespace, which has no prefix, it returns\n             the zero-length string. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result sequence contains no duplicates.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The ordering of the result sequence is <termref def=\"implementation-dependent\">implementation-dependent</termref>.</p></div>\n", 
      "summary" : "<p>  Returns the prefixes of the in-scope namespaces for an element node.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "element", 
        "type" : "element(*)", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "index-of", 
      "qname" : "fn:index-of", 
      "signature" : "($seq as xs:anyAtomicType*, $search as xs:anyAtomicType) as xs:integer* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a sequence of positive integers giving the positions within the\n             sequence <code>$seq</code> of items that are equal to <code>$search</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"index-of\" return-type=\"xs:integer*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"seq\" type=\"xs:anyAtomicType*\"/><arg name=\"search\" type=\"xs:anyAtomicType\"/></proto></example><example role=\"signature\"><proto name=\"index-of\" return-type=\"xs:integer*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"seq\" type=\"xs:anyAtomicType*\"/><arg name=\"search\" type=\"xs:anyAtomicType\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence of positive integers giving the positions within the\n             sequence <code>$seq</code> of items that are equal to <code>$search</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>. This collation is used when string comparison is\n             required.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The items in the sequence <code>$seq</code> are compared with <code>$search</code> under\n             the rules for the <code>eq</code> operator. Values of type <code>xs:untypedAtomic</code>\n             are compared as if they were of type <code>xs:string</code>. Values that cannot be\n             compared, because the <code>eq</code> operator is not defined for their types, are\n             considered to be distinct. If an item compares equal, then the position of that item in\n             the sequence <code>$seq</code> is included in the result.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The first item in a sequence is at position 1, not position 0.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result sequence is in ascending numeric order.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$seq</code> is the empty sequence, or if no item in\n                <code>$seq</code> matches <code>$search</code>, then the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"D\">No error occurs if non-comparable values are encountered. So when\n             comparing two atomic values, the effective boolean value of <code>fn:index-of($a,\n                $b)</code> is true if <code>$a</code> and <code>$b</code> are equal, false if they\n             are not equal or not comparable.</p></div>\n", 
      "summary" : "<p>  Returns a sequence of positive integers giving the positions within the\n             sequence  $seq  of items that are equal to  $search .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "seq", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "search", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "index-of", 
      "qname" : "fn:index-of", 
      "signature" : "($seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string) as xs:integer* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a sequence of positive integers giving the positions within the\n             sequence <code>$seq</code> of items that are equal to <code>$search</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"index-of\" return-type=\"xs:integer*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"seq\" type=\"xs:anyAtomicType*\"/><arg name=\"search\" type=\"xs:anyAtomicType\"/></proto></example><example role=\"signature\"><proto name=\"index-of\" return-type=\"xs:integer*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"seq\" type=\"xs:anyAtomicType*\"/><arg name=\"search\" type=\"xs:anyAtomicType\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence of positive integers giving the positions within the\n             sequence <code>$seq</code> of items that are equal to <code>$search</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>. This collation is used when string comparison is\n             required.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The items in the sequence <code>$seq</code> are compared with <code>$search</code> under\n             the rules for the <code>eq</code> operator. Values of type <code>xs:untypedAtomic</code>\n             are compared as if they were of type <code>xs:string</code>. Values that cannot be\n             compared, because the <code>eq</code> operator is not defined for their types, are\n             considered to be distinct. If an item compares equal, then the position of that item in\n             the sequence <code>$seq</code> is included in the result.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The first item in a sequence is at position 1, not position 0.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result sequence is in ascending numeric order.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$seq</code> is the empty sequence, or if no item in\n                <code>$seq</code> matches <code>$search</code>, then the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"D\">No error occurs if non-comparable values are encountered. So when\n             comparing two atomic values, the effective boolean value of <code>fn:index-of($a,\n                $b)</code> is true if <code>$a</code> and <code>$b</code> are equal, false if they\n             are not equal or not comparable.</p></div>\n", 
      "summary" : "<p>  Returns a sequence of positive integers giving the positions within the\n             sequence  $seq  of items that are equal to  $search .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "seq", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "search", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "collation", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "innermost", 
      "qname" : "fn:innermost", 
      "signature" : "($nodes as node()*) as node()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns every node within the input sequence that is not an ancestor of another member\n             of the input sequence; the nodes are returned in document order with duplicates\n             eliminated.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"innermost\" return-type=\"node()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"nodes\" type=\"node()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of the function call <code>fn:innermost($nodes)</code> is defined to be\n             equivalent to the result of the expression <code>$nodes except\n                $nodes/ancestor::node()</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">That is, the function takes as input a sequence of nodes, and returns every node within\n             the sequence that is not an ancestor of another node within the sequence; the nodes are\n             returned in document order with duplicates eliminated.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the source document contains nested sections represented by <code>div</code>\n                elements, the expression <code>innermost(//div)</code> returns those <code>div</code>\n                elements that do not contain further <code>div</code> elements.</p></div>\n", 
      "summary" : "<p>  Returns every node within the input sequence that is not an ancestor of another member\n             of the input sequence; the nodes are returned in document order with duplicates\n             eliminated.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "nodes", 
        "type" : "node()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "node()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "insert-before", 
      "qname" : "fn:insert-before", 
      "signature" : "($target as item()*, $position as xs:integer, $inserts as item()*) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a sequence constructed by inserting an item or a sequence of items at a\n             given position within an existing sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"insert-before\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"target\" type=\"item()*\"/><arg name=\"position\" type=\"xs:integer\"/><arg name=\"inserts\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The value returned by the function consists of all items of <code>$target</code> whose\n             index is less than <code>$position</code>, followed by all items of\n                <code>$inserts</code>, followed by the remaining elements of <code>$target</code>, in\n             that order. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$target</code> is the empty sequence, <code>$inserts</code> is returned. If\n                <code>$inserts</code> is the empty sequence, <code>$target</code> is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$position</code> is less than one (1), the first position, the effective value\n             of <code>$position</code> is one (1). If <code>$position</code> is greater than the\n             number of items in <code>$target</code>, then the effective value of\n                <code>$position</code> is equal to the number of items in <code>$target</code> plus\n             1. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The value of <code>$target</code> is not affected by the sequence construction.</p></div>\n", 
      "summary" : "<p>  Returns a sequence constructed by inserting an item or a sequence of items at a\n             given position within an existing sequence.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "target", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "position", 
        "type" : "xs:integer", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "inserts", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "iri-to-uri", 
      "qname" : "fn:iri-to-uri", 
      "signature" : "($iri as xs:string?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Converts a string containing an IRI into a URI according to the rules of\n                <bibref ref=\"rfc3987\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"iri-to-uri\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"iri\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$iri</code> is the empty sequence, the function returns the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function converts the value of <code>$iri</code> into a URI according to\n             the rules given in Section 3.1 of <bibref ref=\"rfc3987\"/> by percent-encoding characters\n             that are allowed in an IRI but not in a URI. If <code>$iri</code> contains a character\n             that is invalid in an IRI, such as the space character (see note below), the invalid\n             character is replaced by its percent-encoded form as described in <bibref ref=\"rfc3986\"/> before the conversion is performed.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Since <bibref ref=\"rfc3986\"/> recommends that, for consistency, URI producers and\n             normalizers should use uppercase hexadecimal digits for all percent-encodings, this\n             function must always generate hexadecimal values using the upper-case letters A-F.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function is idempotent but not invertible. Both the inputs <code>My Documents</code>\n             and <code>My%20Documents</code> will be converted to the output\n                <code>My%20Documents</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function does not check whether <code>$iri</code> is a valid IRI. It treats it as\n             an <termref def=\"string\">string</termref> and operates on the <termref def=\"character\">characters</termref> in the string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> The following printable ASCII characters are invalid in an IRI: \"&lt;\", \"&gt;\", <quote>\n                \" </quote> (double quote), space, \"{\", \"}\", \"|\", \"\\\", \"^\", and \"`\". Since these\n             characters should not appear in an IRI, if they do appear in <code>$iri</code> they will\n             be percent-encoded. In addition, characters outside the range x20-<phrase diff=\"chg\" at=\"A-E8\">x7E</phrase> will be percent-encoded because they are invalid in a URI. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> Since this function does not escape the PERCENT SIGN \"%\" and this character is not\n             allowed in data within a URI, users wishing to convert character strings (such as file\n             names) that include \"%\" to a URI should manually escape \"%\" by replacing it with \"%25\".\n          </p></div>\n", 
      "summary" : "<p>  Converts a string containing an IRI into a URI according to the rules of\n                  .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "iri", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "lang", 
      "qname" : "fn:lang", 
      "signature" : "($testlang as xs:string?) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function tests whether the language of <code>$node</code>, or the context\n             item if the second argument is omitted, as specified by <code>xml:lang</code> attributes\n             is the same as, or is a sublanguage of, the language specified by\n             <code>$testlang</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"lang\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"testlang\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"lang\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"testlang\" type=\"xs:string?\"/><arg name=\"node\" type=\"node()\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The behavior of the function if the second argument is omitted is exactly the same as if\n             the context item (<code>.</code>) had been passed as the second argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The language of the argument <code>$node</code>, or the context item if the second\n             argument is omitted, is determined by the value of the <code>xml:lang</code> attribute\n             on the node, or, if the node has no such attribute, by the value of the\n                <code>xml:lang</code> attribute on the nearest ancestor of the node that has an\n                <code>xml:lang</code> attribute. If there is no such ancestor, then the function\n             returns <code>false</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$testlang</code> is the empty sequence it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The relevant <code>xml:lang</code> attribute is determined by the value of the XPath\n             expression:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">(ancestor-or-self::*/@xml:lang)[last()]</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If this expression returns an empty sequence, the function returns <code>false</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns <code>true</code> if and only if, based on a caseless\n             default match as specified in section 3.13 of <bibref ref=\"Unicode\"/>, either:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p diff=\"chg\" at=\"A-E16\">\n                   <code>$testlang</code> is equal to the string-value of the relevant\n                      <code>xml:lang</code> attribute, or</p></item><item><p diff=\"chg\" at=\"A-E16\">\n                   <code>$testlang</code> is equal to some substring of the string-value of the\n                   relevant <code>xml:lang</code> attribute that starts at the start of the\n                   string-value and ends immediately before a hyphen, \"-\" (the character \"-\" is\n                   HYPHEN-MINUS, #x002D).</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  This function tests whether the language of  $node , or the context\n             item if the second argument is omitted, as specified by  xml:lang  attributes\n             is the same as, or is a sublanguage of, the language specified by\n              $testlang .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "testlang", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "lang", 
      "qname" : "fn:lang", 
      "signature" : "($testlang as xs:string?, $node as node()) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function tests whether the language of <code>$node</code>, or the context\n             item if the second argument is omitted, as specified by <code>xml:lang</code> attributes\n             is the same as, or is a sublanguage of, the language specified by\n             <code>$testlang</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"lang\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"testlang\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"lang\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"testlang\" type=\"xs:string?\"/><arg name=\"node\" type=\"node()\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The behavior of the function if the second argument is omitted is exactly the same as if\n             the context item (<code>.</code>) had been passed as the second argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The language of the argument <code>$node</code>, or the context item if the second\n             argument is omitted, is determined by the value of the <code>xml:lang</code> attribute\n             on the node, or, if the node has no such attribute, by the value of the\n                <code>xml:lang</code> attribute on the nearest ancestor of the node that has an\n                <code>xml:lang</code> attribute. If there is no such ancestor, then the function\n             returns <code>false</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$testlang</code> is the empty sequence it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The relevant <code>xml:lang</code> attribute is determined by the value of the XPath\n             expression:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">(ancestor-or-self::*/@xml:lang)[last()]</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If this expression returns an empty sequence, the function returns <code>false</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns <code>true</code> if and only if, based on a caseless\n             default match as specified in section 3.13 of <bibref ref=\"Unicode\"/>, either:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p diff=\"chg\" at=\"A-E16\">\n                   <code>$testlang</code> is equal to the string-value of the relevant\n                      <code>xml:lang</code> attribute, or</p></item><item><p diff=\"chg\" at=\"A-E16\">\n                   <code>$testlang</code> is equal to some substring of the string-value of the\n                   relevant <code>xml:lang</code> attribute that starts at the start of the\n                   string-value and ends immediately before a hyphen, \"-\" (the character \"-\" is\n                   HYPHEN-MINUS, #x002D).</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  This function tests whether the language of  $node , or the context\n             item if the second argument is omitted, as specified by  xml:lang  attributes\n             is the same as, or is a sublanguage of, the language specified by\n              $testlang .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "testlang", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "node", 
        "type" : "node()", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "last", 
      "qname" : "fn:last", 
      "signature" : "() as xs:integer external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the context size from the dynamic context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"last\" return-type=\"xs:integer\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the context size from the dynamic context. (See <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.)</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"type\"/> if the\n             context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p></div>\n", 
      "summary" : "<p>  Returns the context size from the dynamic context.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:integer", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "local-name-from-QName", 
      "qname" : "fn:local-name-from-QName", 
      "signature" : "($arg as xs:QName?) as xs:NCName? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the local part of the supplied QName.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"local-name-from-QName\" return-type=\"xs:NCName?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:QName?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:NCName</code> representing the local part of\n                <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:local-name-from-QName(fn:QName(\"http://www.example.com/example\",\n                   \"person\"))</code> returns <code>\"person\"</code>.</p></div>\n", 
      "summary" : "<p>  Returns the local part of the supplied QName.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:QName", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:NCName?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "local-name", 
      "qname" : "fn:local-name", 
      "signature" : "() as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the local part of the name of <code>$arg</code> as an\n                <code>xs:string</code> that is either the zero-length string, or has the lexical form\n             of an <code>xs:NCName</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"local-name\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"local-name\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context item (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is supplied and is the empty sequence, the function returns the\n             zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the node identified by <code>$arg</code> has no name (that is, if it is a document\n             node, a comment, a text node, or a namespace node having no name), the function returns\n             the zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the local part of the expanded-QName of the node\n             identified by <code>$arg</code>, as determined by the <code>dm:node-name</code> accessor\n             defined in <xspecref spec=\"DM30\" ref=\"dm-node-name\"/>). This will be an\n                <code>xs:string</code> whose lexical form is an <code>xs:NCName</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the local part of the name of  $arg  as an\n                 xs:string  that is either the zero-length string, or has the lexical form\n             of an  xs:NCName .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "local-name", 
      "qname" : "fn:local-name", 
      "signature" : "($arg as node()?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the local part of the name of <code>$arg</code> as an\n                <code>xs:string</code> that is either the zero-length string, or has the lexical form\n             of an <code>xs:NCName</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"local-name\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"local-name\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context item (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is supplied and is the empty sequence, the function returns the\n             zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the node identified by <code>$arg</code> has no name (that is, if it is a document\n             node, a comment, a text node, or a namespace node having no name), the function returns\n             the zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the local part of the expanded-QName of the node\n             identified by <code>$arg</code>, as determined by the <code>dm:node-name</code> accessor\n             defined in <xspecref spec=\"DM30\" ref=\"dm-node-name\"/>). This will be an\n                <code>xs:string</code> whose lexical form is an <code>xs:NCName</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the local part of the name of  $arg  as an\n                 xs:string  that is either the zero-length string, or has the lexical form\n             of an  xs:NCName .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "node()", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "lower-case", 
      "qname" : "fn:lower-case", 
      "signature" : "($arg as xs:string?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Converts a string to lower case.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"lower-case\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is the empty sequence, the zero-length string is\n             returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the value of <code>$arg</code> after translating every\n                <termref def=\"character\">character</termref> to its lower-case correspondent as\n             defined in the appropriate case mappings section in the Unicode standard <bibref ref=\"Unicode\"/>. For versions of Unicode beginning with the 2.1.8 update, only\n             locale-insensitive case mappings should be applied. Beginning with version 3.2.0 (and\n             likely future versions) of Unicode, precise mappings are described in default case\n             operations, which are full case mappings in the absence of tailoring for particular\n             languages and environments. Every upper-case character that does not have a lower-case\n             correspondent, as well as every lower-case character, is included in the returned value\n             in its original form. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Case mappings may change the length of a string. In general, the\n                <code>fn:upper-case</code> and <code>fn:lower-case</code> functions are not inverses\n             of each other: <code>fn:lower-case(fn:upper-case($arg))</code> is not guaranteed to\n             return <code>$arg</code>, nor is <code>fn:upper-case(fn:lower-case($arg))</code>. The\n             Latin small letter dotless i (as used in Turkish) is perhaps the most prominent\n             lower-case letter which will not round-trip. The Latin capital letter i with dot above\n             is the most prominent upper-case letter which will not round trip; there are others,\n             such as Latin capital letter Sharp S (#1E9E) which is introduced in Unicode 5.1.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> These functions may not always be linguistically appropriate (e.g. Turkish i without\n             dot) or appropriate for the application (e.g. titlecase). In cases such as Turkish, a\n             simple translation should be used first.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> Because the function is not sensitive to locale, results will not always match user\n             expectations. In Quebec, for example, the standard uppercase equivalent of \"√®\" is \"√à\",\n             while in metropolitan France it is more commonly \"E\"; only one of these is supported by\n             the functions as defined.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> Many characters of class Ll lack uppercase equivalents in the Unicode case mapping\n             tables; many characters of class Lu lack lowercase equivalents.</p></div>\n", 
      "summary" : "<p>  Converts a string to lower case.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "matches", 
      "qname" : "fn:matches", 
      "signature" : "($input as xs:string?, $pattern as xs:string) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the supplied string matches a given regular expression.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"matches\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"matches\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/><arg name=\"flags\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of calling the first version of this function (omitting the argument\n                <code>$flags</code>) is the same as the effect of calling the second version with the\n                <code>$flags</code> argument set to a zero-length string. Flags are defined in\n                <specref ref=\"flags\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$input</code> is the empty sequence, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns <code>true</code> if <code>$input</code> or some substring of\n                <code>$input</code> matches the regular expression supplied as <code>$pattern</code>.\n             Otherwise, the function returns <code>false</code>. The matching rules are influenced by\n             the value of <code>$flags</code> if present. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0002\"/> if the value of\n                <code>$pattern</code> is invalid according to the rules described in <specref ref=\"regex-syntax\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0001\"/> if the value of\n                <code>$flags</code> is invalid according to the rules described in <specref ref=\"flags\"/>. </p></div>\n", 
      "summary" : "<p>  Returns true if the supplied string matches a given regular expression.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "input", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "pattern", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "matches", 
      "qname" : "fn:matches", 
      "signature" : "($input as xs:string?, $pattern as xs:string, $flags as xs:string) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the supplied string matches a given regular expression.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"matches\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"matches\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/><arg name=\"flags\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of calling the first version of this function (omitting the argument\n                <code>$flags</code>) is the same as the effect of calling the second version with the\n                <code>$flags</code> argument set to a zero-length string. Flags are defined in\n                <specref ref=\"flags\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$input</code> is the empty sequence, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns <code>true</code> if <code>$input</code> or some substring of\n                <code>$input</code> matches the regular expression supplied as <code>$pattern</code>.\n             Otherwise, the function returns <code>false</code>. The matching rules are influenced by\n             the value of <code>$flags</code> if present. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0002\"/> if the value of\n                <code>$pattern</code> is invalid according to the rules described in <specref ref=\"regex-syntax\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0001\"/> if the value of\n                <code>$flags</code> is invalid according to the rules described in <specref ref=\"flags\"/>. </p></div>\n", 
      "summary" : "<p>  Returns true if the supplied string matches a given regular expression.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "input", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "pattern", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "flags", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "max", 
      "qname" : "fn:max", 
      "signature" : "($arg as xs:anyAtomicType*) as xs:anyAtomicType? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a value that is equal to the highest value appearing in the input\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"max\" return-type=\"xs:anyAtomicType?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/></proto></example><example role=\"signature\"><proto name=\"max\" return-type=\"xs:anyAtomicType?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following rules are applied to the input sequence <code>$arg</code>:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>Values of type <code>xs:untypedAtomic</code> in <code>$arg</code> are cast to\n                      <code>xs:double</code>.</p></item><item><!--Text replaced by erratum E27 change 1\"--><p diff=\"chg\" at=\"A-E27\">Numeric and <code>xs:anyURI</code> values are converted to\n                   the least common type reachable by a combination of type promotion and subtype\n                   substitution. See <xspecref spec=\"XP30\" ref=\"promotion\"/> and <xspecref spec=\"XP30\" ref=\"mapping\"/>.</p><!--End of text replaced by erratum E27--></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The items in the resulting sequence may be reordered in an arbitrary order. The\n             resulting sequence is referred to below as the converted sequence. The function returns\n             an item from the converted sequence rather than the input sequence. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence is empty, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">All items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence must be\n                derived</phrase> from a single base type for which the <code>le</code> operator is\n             defined. In addition, the values in the sequence must have a total order. If date/time\n             values do not have a timezone, they are considered to have the implicit timezone\n             provided by the dynamic context for the purpose of comparison. Duration values must\n             either all be <code>xs:yearMonthDuration</code> values or must all be\n                <code>xs:dayTimeDuration</code> values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence contains the value <code>NaN</code>, the value\n                <code>NaN</code> is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence</phrase> are of\n             type <code>xs:string</code> or types derived by restriction from <code>xs:string</code>,\n             then the determination of the item with the smallest value is made according to the\n             collation that is used. If the type of the items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence</phrase> is not <code>xs:string</code> and\n                <code>$collation</code> is specified, the collation is ignored.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the result of the expression:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n    if (every $v in $c satisfies $c[1] ge $v)\n    then $c[1]\n    else fn:max(fn:subsequence($c, 2))</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">evaluated with <code>$collation</code> as the default collation if specified, and with\n                <code>$c</code> as the converted sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A type error is raised <errorref class=\"RG\" code=\"0006\"/> if the input sequence contains\n             items of incompatible types, as described above.</p></div>\n", 
      "summary" : "<p>  Returns a value that is equal to the highest value appearing in the input\n             sequence.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyAtomicType?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "max", 
      "qname" : "fn:max", 
      "signature" : "($arg as xs:anyAtomicType*, $collation as xs:string) as xs:anyAtomicType? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a value that is equal to the highest value appearing in the input\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"max\" return-type=\"xs:anyAtomicType?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/></proto></example><example role=\"signature\"><proto name=\"max\" return-type=\"xs:anyAtomicType?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following rules are applied to the input sequence <code>$arg</code>:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>Values of type <code>xs:untypedAtomic</code> in <code>$arg</code> are cast to\n                      <code>xs:double</code>.</p></item><item><!--Text replaced by erratum E27 change 1\"--><p diff=\"chg\" at=\"A-E27\">Numeric and <code>xs:anyURI</code> values are converted to\n                   the least common type reachable by a combination of type promotion and subtype\n                   substitution. See <xspecref spec=\"XP30\" ref=\"promotion\"/> and <xspecref spec=\"XP30\" ref=\"mapping\"/>.</p><!--End of text replaced by erratum E27--></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The items in the resulting sequence may be reordered in an arbitrary order. The\n             resulting sequence is referred to below as the converted sequence. The function returns\n             an item from the converted sequence rather than the input sequence. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence is empty, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">All items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence must be\n                derived</phrase> from a single base type for which the <code>le</code> operator is\n             defined. In addition, the values in the sequence must have a total order. If date/time\n             values do not have a timezone, they are considered to have the implicit timezone\n             provided by the dynamic context for the purpose of comparison. Duration values must\n             either all be <code>xs:yearMonthDuration</code> values or must all be\n                <code>xs:dayTimeDuration</code> values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence contains the value <code>NaN</code>, the value\n                <code>NaN</code> is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence</phrase> are of\n             type <code>xs:string</code> or types derived by restriction from <code>xs:string</code>,\n             then the determination of the item with the smallest value is made according to the\n             collation that is used. If the type of the items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence</phrase> is not <code>xs:string</code> and\n                <code>$collation</code> is specified, the collation is ignored.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the result of the expression:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n    if (every $v in $c satisfies $c[1] ge $v)\n    then $c[1]\n    else fn:max(fn:subsequence($c, 2))</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">evaluated with <code>$collation</code> as the default collation if specified, and with\n                <code>$c</code> as the converted sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A type error is raised <errorref class=\"RG\" code=\"0006\"/> if the input sequence contains\n             items of incompatible types, as described above.</p></div>\n", 
      "summary" : "<p>  Returns a value that is equal to the highest value appearing in the input\n             sequence.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "collation", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyAtomicType?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "min", 
      "qname" : "fn:min", 
      "signature" : "($arg as xs:anyAtomicType*) as xs:anyAtomicType? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a value that is equal to the lowest value appearing in the input\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"min\" return-type=\"xs:anyAtomicType?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/></proto></example><example role=\"signature\"><proto name=\"min\" return-type=\"xs:anyAtomicType?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following rules are applied to the input sequence:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>Values of type <code>xs:untypedAtomic</code> in <code>$arg</code> are cast to\n                      <code>xs:double</code>.</p></item><item><!--Text replaced by erratum E27 change 2\"--><p diff=\"chg\" at=\"A-E27\">Numeric and <code>xs:anyURI</code> values are converted to\n                   the least common type reachable by a combination of type promotion and subtype\n                   substitution. See <xspecref spec=\"XP30\" ref=\"promotion\"/> and <xspecref spec=\"XP30\" ref=\"mapping\"/>.</p><!--End of text replaced by erratum E27--></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The items in the resulting sequence may be reordered in an arbitrary order. The\n             resulting sequence is referred to below as the converted sequence. The function returns\n             an item from the converted sequence rather than the input sequence. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence is empty, the empty sequence is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">All items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence must be\n                derived</phrase> from a single base type for which the <code>le</code> operator is\n             defined. In addition, the values in the sequence must have a total order. If date/time\n             values do not have a timezone, they are considered to have the implicit timezone\n             provided by the dynamic context for the purpose of comparison. Duration values must\n             either all be <code>xs:yearMonthDuration</code> values or must all be\n                <code>xs:dayTimeDuration</code> values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence contains the value <code>NaN</code>, the value\n                <code>NaN</code> is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence</phrase> are of\n             type <code>xs:string</code> or types derived by restriction from <code>xs:string</code>,\n             then the determination of the item with the smallest value is made according to the\n             collation that is used. If the type of the items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence</phrase> is not <code>xs:string</code> and\n                <code>$collation</code> is specified, the collation is ignored.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the result of the expression:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n    if (every $v in $c satisfies $c[1] le $v)\n    then $c[1]\n    else fn:min(fn:subsequence($c, 2))</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">evaluated with <code>$collation</code> as the default collation if specified, and with\n                <code>$c</code> as the converted sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A type error is raised <errorref class=\"RG\" code=\"0006\"/> if the input sequence contains\n             items of incompatible types, as described above.</p></div>\n", 
      "summary" : "<p>  Returns a value that is equal to the lowest value appearing in the input\n             sequence.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyAtomicType?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "min", 
      "qname" : "fn:min", 
      "signature" : "($arg as xs:anyAtomicType*, $collation as xs:string) as xs:anyAtomicType? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a value that is equal to the lowest value appearing in the input\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"min\" return-type=\"xs:anyAtomicType?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/></proto></example><example role=\"signature\"><proto name=\"min\" return-type=\"xs:anyAtomicType?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following rules are applied to the input sequence:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>Values of type <code>xs:untypedAtomic</code> in <code>$arg</code> are cast to\n                      <code>xs:double</code>.</p></item><item><!--Text replaced by erratum E27 change 2\"--><p diff=\"chg\" at=\"A-E27\">Numeric and <code>xs:anyURI</code> values are converted to\n                   the least common type reachable by a combination of type promotion and subtype\n                   substitution. See <xspecref spec=\"XP30\" ref=\"promotion\"/> and <xspecref spec=\"XP30\" ref=\"mapping\"/>.</p><!--End of text replaced by erratum E27--></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The items in the resulting sequence may be reordered in an arbitrary order. The\n             resulting sequence is referred to below as the converted sequence. The function returns\n             an item from the converted sequence rather than the input sequence. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence is empty, the empty sequence is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">All items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence must be\n                derived</phrase> from a single base type for which the <code>le</code> operator is\n             defined. In addition, the values in the sequence must have a total order. If date/time\n             values do not have a timezone, they are considered to have the implicit timezone\n             provided by the dynamic context for the purpose of comparison. Duration values must\n             either all be <code>xs:yearMonthDuration</code> values or must all be\n                <code>xs:dayTimeDuration</code> values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence contains the value <code>NaN</code>, the value\n                <code>NaN</code> is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence</phrase> are of\n             type <code>xs:string</code> or types derived by restriction from <code>xs:string</code>,\n             then the determination of the item with the smallest value is made according to the\n             collation that is used. If the type of the items in the <phrase diff=\"chg\" at=\"A-E47\">converted sequence</phrase> is not <code>xs:string</code> and\n                <code>$collation</code> is specified, the collation is ignored.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the result of the expression:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n    if (every $v in $c satisfies $c[1] le $v)\n    then $c[1]\n    else fn:min(fn:subsequence($c, 2))</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">evaluated with <code>$collation</code> as the default collation if specified, and with\n                <code>$c</code> as the converted sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A type error is raised <errorref class=\"RG\" code=\"0006\"/> if the input sequence contains\n             items of incompatible types, as described above.</p></div>\n", 
      "summary" : "<p>  Returns a value that is equal to the lowest value appearing in the input\n             sequence.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "collation", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyAtomicType?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "minutes-from-dateTime", 
      "qname" : "fn:minutes-from-dateTime", 
      "signature" : "($arg as xs:dateTime?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the minute component of an <code>xs:dateTime</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"minutes-from-dateTime\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:dateTime?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:integer</code> value between 0 and 59, both\n             inclusive, representing the minute component in the local value of\n             <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:minutes-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))</code> returns <code>20</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:minutes-from-dateTime(xs:dateTime(\"1999-05-31T13:30:00+05:30\"))</code> returns <code>30</code>.</p></div>\n", 
      "summary" : "<p>  Returns the minute component of an  xs:dateTime .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:dateTime", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "minutes-from-duration", 
      "qname" : "fn:minutes-from-duration", 
      "signature" : "($arg as xs:duration?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the number of minutes in a duration.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"minutes-from-duration\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:duration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:integer</code> representing the minutes\n             component in the value of <code>$arg</code>. The result is obtained by casting\n                <code>$arg</code> to an <code>xs:dayTimeDuration</code> (see <specref ref=\"casting-to-durations\"/>) and then computing the minutes component as described\n             in <specref ref=\"canonical-dayTimeDuration\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is a negative duration then the result will be negative..</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is an <code>xs:yearMonthDuration</code> the function returns 0.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:minutes-from-duration(xs:dayTimeDuration(\"P3DT10H\"))</code> returns <code>0</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:minutes-from-duration(xs:dayTimeDuration(\"-P5DT12H30M\"))</code> returns <code>-30</code>.</p></div>\n", 
      "summary" : "<p>  Returns the number of minutes in a duration.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:duration", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "minutes-from-time", 
      "qname" : "fn:minutes-from-time", 
      "signature" : "($arg as xs:time?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the minutes component of an <code>xs:time</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"minutes-from-time\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:time?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:integer</code> value between 0 and 59, both\n             inclusive, representing the value of the minutes component in the local value of\n                <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:minutes-from-time(xs:time(\"13:00:00Z\"))</code> returns <code>0</code>.</p></div>\n", 
      "summary" : "<p>  Returns the minutes component of an  xs:time .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:time", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "month-from-date", 
      "qname" : "fn:month-from-date", 
      "signature" : "($arg as xs:date?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the month component of an <code>xs:date</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"month-from-date\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:date?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:integer</code> between 1 and 12, both\n             inclusive, representing the month component in the local value of <code>$arg</code>.\n          </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:month-from-date(xs:date(\"1999-05-31-05:00\"))</code> returns <code>5</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:month-from-date(xs:date(\"2000-01-01+05:00\"))</code> returns <code>1</code>.</p></div>\n", 
      "summary" : "<p>  Returns the month component of an  xs:date .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:date", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "months-from-duration", 
      "qname" : "fn:months-from-duration", 
      "signature" : "($arg as xs:duration?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the number of months in a duration.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"months-from-duration\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:duration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:integer</code> representing the months\n             component in the value of <code>$arg</code>. The result is obtained by casting\n                <code>$arg</code> to an <code>xs:yearMonthDuration</code> (see <specref ref=\"casting-to-durations\"/>) and then computing the months component as described in\n                <specref ref=\"canonical-yearMonthDuration\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is a negative duration then the result will be negative..</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is an <code>xs:dayTimeDuration</code> the function returns 0.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:months-from-duration(xs:yearMonthDuration(\"P20Y15M\"))</code> returns <code>3</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:months-from-duration(xs:yearMonthDuration(\"-P20Y18M\"))</code> returns <code>-6</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:months-from-duration(xs:dayTimeDuration(\"-P2DT15H0M0S\"))</code> returns <code>0</code>.</p></div>\n", 
      "summary" : "<p>  Returns the number of months in a duration.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:duration", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "name", 
      "qname" : "fn:name", 
      "signature" : "() as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the name of a node, as an <code>xs:string</code> that is either the\n             zero-length string, or has the lexical form of an <code>xs:QName</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"name\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"name\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context item (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is supplied and is the empty sequence, the function returns the\n             zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the node identified by <code>$arg</code> has no name (that is, if it is a document\n             node, a comment, a text node, or a namespace node having no name), the function returns\n             the zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the value of the expression\n                <code>fn:string(fn:node-name($arg))</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the name of a node, as an  xs:string  that is either the\n             zero-length string, or has the lexical form of an  xs:QName .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "name", 
      "qname" : "fn:name", 
      "signature" : "($arg as node()?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the name of a node, as an <code>xs:string</code> that is either the\n             zero-length string, or has the lexical form of an <code>xs:QName</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"name\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"name\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context item (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is supplied and is the empty sequence, the function returns the\n             zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the node identified by <code>$arg</code> has no name (that is, if it is a document\n             node, a comment, a text node, or a namespace node having no name), the function returns\n             the zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the value of the expression\n                <code>fn:string(fn:node-name($arg))</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the name of a node, as an  xs:string  that is either the\n             zero-length string, or has the lexical form of an  xs:QName .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "node()", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "namespace-uri-for-prefix", 
      "qname" : "fn:namespace-uri-for-prefix", 
      "signature" : "($prefix as xs:string?, $element as element(*)) as xs:anyURI? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the namespace URI of one of the in-scope namespaces for\n                <code>$element</code>, identified by its namespace prefix.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"namespace-uri-for-prefix\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"prefix\" type=\"xs:string?\"/><arg name=\"element\" type=\"element()\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$element</code> has an in-scope namespace whose namespace prefix is equal to\n                <code>$prefix</code>, the function returns the namespace URI of that namespace.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$element</code> has no in-scope namespace whose namespace prefix is equal to\n             <code>$prefix</code>, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"I\">If <code>$prefix</code> is the zero-length string or the empty\n             sequence, then if <code>$element</code> has a default namespace (that is, a namespace\n             node with no name), the function returns the namespace URI of the default namespace. If\n                <code>$element</code> has no default namespace, the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Prefixes are equal only if their Unicode codepoints match exactly.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">let <code>$e</code> := <eg xml:space=\"preserve\">\n &lt;z:a xmlns=\"http://example.org/one\" xmlns:z=\"http://example.org/two\"&gt;\n   &lt;b xmlns=\"\"/&gt;\n &lt;/z:a&gt;</eg></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:namespace-uri-for-prefix(\"z\", $e)</code> returns <code>\"http://example.org/two\"</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:namespace-uri-for-prefix(\"\", $e)</code> returns <code>\"http://example.org/one\"</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:namespace-uri-for-prefix((), $e)</code> returns <code>\"http://example.org/one\"</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:namespace-uri-for-prefix(\"xml\", $e)</code> returns <code>\"http://www.w3.org/XML/1998/namespace\"</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:namespace-uri-for-prefix(\"xml\", $e)</code> returns <code>\"http://www.w3.org/XML/1998/namespace\"</code>.</p></div>\n", 
      "summary" : "<p>  Returns the namespace URI of one of the in-scope namespaces for\n                 $element , identified by its namespace prefix.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "prefix", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "element", 
        "type" : "element(*)", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyURI?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "namespace-uri-from-QName", 
      "qname" : "fn:namespace-uri-from-QName", 
      "signature" : "($arg as xs:QName?) as xs:anyURI? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the namespace URI part of the supplied QName.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"namespace-uri-from-QName\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:QName?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:anyURI</code> representing the namespace URI\n             part of <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is in no namespace, the function returns the zero-length\n                <code>xs:anyURI</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:namespace-uri-from-QName(fn:QName(\"http://www.example.com/example\",\n                   \"person\"))</code> returns <code>xs:anyURI(\"http://www.example.com/example\")</code>.</p></div>\n", 
      "summary" : "<p>  Returns the namespace URI part of the supplied QName.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:QName", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyURI?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "namespace-uri", 
      "qname" : "fn:namespace-uri", 
      "signature" : "() as xs:anyURI external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E15\">Returns the namespace URI part of the name of\n                <code>$arg</code>, as an <code>xs:anyURI</code> value.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"namespace-uri\" return-type=\"xs:anyURI\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"namespace-uri\" return-type=\"xs:anyURI\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context node (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the node identified by <code>$arg</code> is neither an element nor an attribute node,\n             or if it is an element or attribute node whose expanded-QName (as determined by the\n                <code>dm:node-name</code> accessor in the <xspecref spec=\"DM30\" ref=\"dm-node-name\"/>)\n             is in no namespace, then the function returns the zero-length <code>xs:anyURI</code>\n             value.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the result will be the namespace URI part of the expanded-QName of the node\n             identified by <code>$arg</code>, as determined by the <code>dm:node-name</code> accessor\n             defined in <xspecref spec=\"DM30\" ref=\"dm-node-name\"/>), returned as an\n                <code>xs:anyURI</code> value.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the namespace URI part of the name of\n                 $arg , as an  xs:anyURI  value.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:anyURI", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "namespace-uri", 
      "qname" : "fn:namespace-uri", 
      "signature" : "($arg as node()?) as xs:anyURI external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E15\">Returns the namespace URI part of the name of\n                <code>$arg</code>, as an <code>xs:anyURI</code> value.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"namespace-uri\" return-type=\"xs:anyURI\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"namespace-uri\" return-type=\"xs:anyURI\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context node (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the node identified by <code>$arg</code> is neither an element nor an attribute node,\n             or if it is an element or attribute node whose expanded-QName (as determined by the\n                <code>dm:node-name</code> accessor in the <xspecref spec=\"DM30\" ref=\"dm-node-name\"/>)\n             is in no namespace, then the function returns the zero-length <code>xs:anyURI</code>\n             value.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the result will be the namespace URI part of the expanded-QName of the node\n             identified by <code>$arg</code>, as determined by the <code>dm:node-name</code> accessor\n             defined in <xspecref spec=\"DM30\" ref=\"dm-node-name\"/>), returned as an\n                <code>xs:anyURI</code> value.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the namespace URI part of the name of\n                 $arg , as an  xs:anyURI  value.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "node()", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyURI", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "nilled", 
      "qname" : "fn:nilled", 
      "signature" : "() as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true for an element that is <term>nilled</term>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"nilled\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"nilled\" return-type=\"xs:boolean?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context item (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise the function returns the result of the <code>dm:nilled</code> accessor as\n             defined in <bibref ref=\"xpath-datamodel-30\"/> (see <xspecref spec=\"DM30\" ref=\"dm-nilled\"/>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"I\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns true for an element that is  nilled .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "nilled", 
      "qname" : "fn:nilled", 
      "signature" : "($arg as node()?) as xs:boolean? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true for an element that is <term>nilled</term>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"nilled\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"nilled\" return-type=\"xs:boolean?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the argument is omitted, it defaults to the context item (<code>.</code>). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise the function returns the result of the <code>dm:nilled</code> accessor as\n             defined in <bibref ref=\"xpath-datamodel-30\"/> (see <xspecref spec=\"DM30\" ref=\"dm-nilled\"/>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"I\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns true for an element that is  nilled .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "node()", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "node-name", 
      "qname" : "fn:node-name", 
      "signature" : "() as xs:QName? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the name of a node, as an <code>xs:QName</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"node-name\" return-type=\"xs:QName?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"node-name\" return-type=\"xs:QName?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"F\">If the argument is omitted, it defaults to the context item\n                (<code>.</code>). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the empty sequence is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the result of the <code>dm:node-name</code> accessor as\n             defined in <bibref ref=\"xpath-datamodel-30\"/> (see <xspecref spec=\"DM30\" ref=\"dm-node-name\"/>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"I\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the name of a node, as an  xs:QName .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:QName?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "node-name", 
      "qname" : "fn:node-name", 
      "signature" : "($arg as node()?) as xs:QName? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the name of a node, as an <code>xs:QName</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"node-name\" return-type=\"xs:QName?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"node-name\" return-type=\"xs:QName?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"F\">If the argument is omitted, it defaults to the context item\n                (<code>.</code>). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the empty sequence is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the result of the <code>dm:node-name</code> accessor as\n             defined in <bibref ref=\"xpath-datamodel-30\"/> (see <xspecref spec=\"DM30\" ref=\"dm-node-name\"/>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"I\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the name of a node, as an  xs:QName .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "node()", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:QName?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "normalize-space", 
      "qname" : "fn:normalize-space", 
      "signature" : "() as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of <code>$arg</code> with leading and trailing whitespace\n             removed, and sequences of internal whitespace reduced to a single space character.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"normalize-space\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"normalize-space\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is the empty sequence, the function returns the\n             zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a string constructed by stripping leading and trailing whitespace\n             from the value of <code>$arg</code>, and replacing sequences of one or more adjacent\n             whitespace characters with a single space, <code>#x20</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The whitespace characters are defined in the metasymbol S (Production 3) of <bibref ref=\"REC-xml\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E14\">If no argument is supplied, then <code>$arg</code> defaults to the\n             string value (calculated using <code>fn:string</code>) of the context item\n                (<code>.</code>). </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If no argument is supplied and the context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref> then a <phrase diff=\"add\" at=\"dynamic\">dynamic</phrase> error is raised: <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/>.</p></div>\n", 
      "summary" : "<p>  Returns the value of  $arg  with leading and trailing whitespace\n             removed, and sequences of internal whitespace reduced to a single space character.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "normalize-space", 
      "qname" : "fn:normalize-space", 
      "signature" : "($arg as xs:string?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of <code>$arg</code> with leading and trailing whitespace\n             removed, and sequences of internal whitespace reduced to a single space character.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"normalize-space\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"normalize-space\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is the empty sequence, the function returns the\n             zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a string constructed by stripping leading and trailing whitespace\n             from the value of <code>$arg</code>, and replacing sequences of one or more adjacent\n             whitespace characters with a single space, <code>#x20</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The whitespace characters are defined in the metasymbol S (Production 3) of <bibref ref=\"REC-xml\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E14\">If no argument is supplied, then <code>$arg</code> defaults to the\n             string value (calculated using <code>fn:string</code>) of the context item\n                (<code>.</code>). </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If no argument is supplied and the context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref> then a <phrase diff=\"add\" at=\"dynamic\">dynamic</phrase> error is raised: <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/>.</p></div>\n", 
      "summary" : "<p>  Returns the value of  $arg  with leading and trailing whitespace\n             removed, and sequences of internal whitespace reduced to a single space character.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "normalize-unicode", 
      "qname" : "fn:normalize-unicode", 
      "signature" : "($arg as xs:string?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of <code>$arg</code> after applying Unicode\n             normalization.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"normalize-unicode\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"normalize-unicode\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/><arg name=\"normalizationForm\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is the empty sequence, the function returns the\n             zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the single-argument version of the function is used, the result is the same as\n             calling the two-argument version with <code>$normalizationForm</code> set to the string\n             \"NFC\".</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the value of <code>$arg</code> normalized according to\n             the rules of the normalization form identified by the value of\n                <code>$normalizationForm</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effective value of <code>$normalizationForm</code> is the value of the expression\n                <code>fn:upper-case(fn:normalize-space($normalizationForm))</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"D\">See <bibref ref=\"charmod-normalization\"/> for a description of the\n             normalization forms.</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If the effective value of <code>$normalizationForm</code> is <quote>NFC</quote>,\n                   then the function returns the value of <code>$arg</code> converted to Unicode\n                   Normalization Form C (NFC).</p></item><item><p>If the effective value of <code>$normalizationForm</code> is <quote>NFD</quote>,\n                   then the function returns the value of <code>$arg</code> converted to Unicode\n                   Normalization Form D (NFD).</p></item><item><p>If the effective value of <code>$normalizationForm</code> is <quote>NFKC</quote>,\n                   then the function returns the value of <code>$arg</code> in Unicode Normalization\n                   Form KC (NFKC).</p></item><item><p>If the effective value of <code>$normalizationForm</code> is <quote>NFKD</quote>,\n                   then the function returns the value of <code>$arg</code> converted to Unicode\n                   Normalization Form KD (NFKD).</p></item><item><p>If the effective value of <code>$normalizationForm</code> is\n                      <quote>FULLY-NORMALIZED</quote>, then the function returns the value of\n                      <code>$arg</code> converted to fully normalized form. </p></item><item><p>If the effective value of <code>$normalizationForm</code> is the zero-length\n                   string, no normalization is performed and <code>$arg</code> is returned.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"D\">Normalization forms NFC, NFD, NFKC, and NFKD, and the algorithms to be\n             used for converting a string to each of these forms, are defined in <bibref ref=\"Unicode-Normalization\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"D\">The motivation for normalization form FULLY-NORMALIZED is explained in\n                <bibref ref=\"charmod-normalization\"/>. However, as that specification did not\n             progress beyond working draft status, the normative specification is as follows:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"D\"><item><p>A string is <term>fully-normalized</term> if (a) it is in normalization form NFC\n                   as defined in <bibref ref=\"Unicode-Normalization\"/>, and (b) it does not start\n                   with a composing character.</p></item><item><p>A composing character is a character that is one or both of the following:</p><ulist><item><p>the second character in the canonical decomposition mapping of some\n                         character that is not listed in the Composition Exclusion Table defined in\n                            <bibref ref=\"Unicode-Normalization\"/>;</p></item><item><p>of non-zero canonical combining class (as defined in <bibref ref=\"Unicode\"/>).</p></item></ulist></item><item><p>A string is converted to FULLY-NORMALIZED form as follows:</p><ulist><item><p>if the first character in the string is a composing character, prepend a\n                         single space (x20);</p></item><item><p>convert the resulting string to normalization form NFC.</p></item></ulist></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" At=\"L\">Conforming implementations <rfc2119>must</rfc2119> support normalization form \"NFC\" and\n                <rfc2119>may</rfc2119> support normalization forms \"NFD\", \"NFKC\", \"NFKD\", and\n             \"FULLY-NORMALIZED\". They <rfc2119>may</rfc2119> also support other normalization forms\n             with <termref def=\"implementation-defined\">implementation-defined</termref> semantics. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">It is <termref def=\"dt-implementation-defined\">implementation-defined</termref> which version of\n             Unicode (and therefore, of the normalization algorithms and their underlying\n             data) is supported by the implementation. See <bibref ref=\"Unicode-Normalization\"/> for details of the\n             stability policy regarding changes to the normalization rules in future\n             versions of Unicode. If the input string contains codepoints that are\n             unassigned in the relevant version of Unicode, or for which no normalization\n             rules are defined, the <code>fn:normalize-unicode</code> function leaves such codepoints\n             unchanged. If the implementation supports the requested normalization form then\n             it <rfc2119>must</rfc2119> be able to handle every input string without raising an error.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"CH\" code=\"0003\"/> if the effective value of the\n                <code>$normalizationForm</code> argument is not one of the values supported by the\n             implementation.</p></div>\n", 
      "summary" : "<p>  Returns the value of  $arg  after applying Unicode\n             normalization.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "normalize-unicode", 
      "qname" : "fn:normalize-unicode", 
      "signature" : "($arg as xs:string?, $normalizationForm as xs:string) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of <code>$arg</code> after applying Unicode\n             normalization.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"normalize-unicode\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"normalize-unicode\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/><arg name=\"normalizationForm\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is the empty sequence, the function returns the\n             zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the single-argument version of the function is used, the result is the same as\n             calling the two-argument version with <code>$normalizationForm</code> set to the string\n             \"NFC\".</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the value of <code>$arg</code> normalized according to\n             the rules of the normalization form identified by the value of\n                <code>$normalizationForm</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effective value of <code>$normalizationForm</code> is the value of the expression\n                <code>fn:upper-case(fn:normalize-space($normalizationForm))</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"D\">See <bibref ref=\"charmod-normalization\"/> for a description of the\n             normalization forms.</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If the effective value of <code>$normalizationForm</code> is <quote>NFC</quote>,\n                   then the function returns the value of <code>$arg</code> converted to Unicode\n                   Normalization Form C (NFC).</p></item><item><p>If the effective value of <code>$normalizationForm</code> is <quote>NFD</quote>,\n                   then the function returns the value of <code>$arg</code> converted to Unicode\n                   Normalization Form D (NFD).</p></item><item><p>If the effective value of <code>$normalizationForm</code> is <quote>NFKC</quote>,\n                   then the function returns the value of <code>$arg</code> in Unicode Normalization\n                   Form KC (NFKC).</p></item><item><p>If the effective value of <code>$normalizationForm</code> is <quote>NFKD</quote>,\n                   then the function returns the value of <code>$arg</code> converted to Unicode\n                   Normalization Form KD (NFKD).</p></item><item><p>If the effective value of <code>$normalizationForm</code> is\n                      <quote>FULLY-NORMALIZED</quote>, then the function returns the value of\n                      <code>$arg</code> converted to fully normalized form. </p></item><item><p>If the effective value of <code>$normalizationForm</code> is the zero-length\n                   string, no normalization is performed and <code>$arg</code> is returned.</p></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"D\">Normalization forms NFC, NFD, NFKC, and NFKD, and the algorithms to be\n             used for converting a string to each of these forms, are defined in <bibref ref=\"Unicode-Normalization\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"D\">The motivation for normalization form FULLY-NORMALIZED is explained in\n                <bibref ref=\"charmod-normalization\"/>. However, as that specification did not\n             progress beyond working draft status, the normative specification is as follows:</p><ulist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"D\"><item><p>A string is <term>fully-normalized</term> if (a) it is in normalization form NFC\n                   as defined in <bibref ref=\"Unicode-Normalization\"/>, and (b) it does not start\n                   with a composing character.</p></item><item><p>A composing character is a character that is one or both of the following:</p><ulist><item><p>the second character in the canonical decomposition mapping of some\n                         character that is not listed in the Composition Exclusion Table defined in\n                            <bibref ref=\"Unicode-Normalization\"/>;</p></item><item><p>of non-zero canonical combining class (as defined in <bibref ref=\"Unicode\"/>).</p></item></ulist></item><item><p>A string is converted to FULLY-NORMALIZED form as follows:</p><ulist><item><p>if the first character in the string is a composing character, prepend a\n                         single space (x20);</p></item><item><p>convert the resulting string to normalization form NFC.</p></item></ulist></item></ulist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" At=\"L\">Conforming implementations <rfc2119>must</rfc2119> support normalization form \"NFC\" and\n                <rfc2119>may</rfc2119> support normalization forms \"NFD\", \"NFKC\", \"NFKD\", and\n             \"FULLY-NORMALIZED\". They <rfc2119>may</rfc2119> also support other normalization forms\n             with <termref def=\"implementation-defined\">implementation-defined</termref> semantics. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">It is <termref def=\"dt-implementation-defined\">implementation-defined</termref> which version of\n             Unicode (and therefore, of the normalization algorithms and their underlying\n             data) is supported by the implementation. See <bibref ref=\"Unicode-Normalization\"/> for details of the\n             stability policy regarding changes to the normalization rules in future\n             versions of Unicode. If the input string contains codepoints that are\n             unassigned in the relevant version of Unicode, or for which no normalization\n             rules are defined, the <code>fn:normalize-unicode</code> function leaves such codepoints\n             unchanged. If the implementation supports the requested normalization form then\n             it <rfc2119>must</rfc2119> be able to handle every input string without raising an error.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"CH\" code=\"0003\"/> if the effective value of the\n                <code>$normalizationForm</code> argument is not one of the values supported by the\n             implementation.</p></div>\n", 
      "summary" : "<p>  Returns the value of  $arg  after applying Unicode\n             normalization.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "normalizationForm", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "not", 
      "qname" : "fn:not", 
      "signature" : "($arg as item()*) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns <code>true</code> if the effective boolean value of <code>$arg</code>\n             is <code>false</code>, or <code>false</code> if it is <code>true</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"not\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The value of <code>$arg</code> is first reduced to an effective boolean value by\n             applying the <code>fn:boolean()</code> function. The function returns <code>true</code>\n             if the effective boolean value is <code>false</code>, or <code>false</code> if the\n             effective boolean value is <code>true</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:not(fn:true())</code> returns <code>false()</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:not(\"false\")</code> returns <code>false()</code>.</p></div>\n", 
      "summary" : "<p>  Returns  true  if the effective boolean value of  $arg \n             is  false , or  false  if it is  true .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "number", 
      "qname" : "fn:number", 
      "signature" : "() as xs:double external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value indicated by <code>$arg</code> or, if <code>$arg</code> is\n             not specified, the context item after atomization, converted to an\n                <code>xs:double</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"number\" return-type=\"xs:double\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"number\" return-type=\"xs:double\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Calling the zero-argument version of the function is defined to give the same result as\n             calling the single-argument version with the context item (<code>.</code>). That is,\n                <code>fn:number()</code> is equivalent to <code>fn:number(.)</code>, as\n          defined by the rules that follow.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence or if <code>$arg</code> <phrase diff=\"del\" at=\"L\">or the context item</phrase>\n             cannot be converted to an <code>xs:double</code>, the <code>xs:double</code> value\n                <code>NaN</code> is returned. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, <code>$arg</code> <phrase diff=\"del\" at=\"L\">, or the context item after atomization,</phrase> is converted to an\n                <code>xs:double</code> following the rules of <specref ref=\"casting-to-double\"/>. If\n             the conversion to <code>xs:double</code> fails, the <code>xs:double</code> value\n                <code>NaN</code> is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/> if\n                <code>$arg</code> is omitted and the context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">As a consequence of the rules given above, a type error occurs if the context\n          item cannot be atomized, or if the result of atomizing the context item is a sequence containing\n          more than one atomic value.</p></div>\n", 
      "summary" : "<p>  Returns the value indicated by  $arg  or, if  $arg  is\n             not specified, the context item after atomization, converted to an\n                 xs:double .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:double", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "number", 
      "qname" : "fn:number", 
      "signature" : "($arg as xs:anyAtomicType?) as xs:double external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value indicated by <code>$arg</code> or, if <code>$arg</code> is\n             not specified, the context item after atomization, converted to an\n                <code>xs:double</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"number\" return-type=\"xs:double\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"number\" return-type=\"xs:double\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Calling the zero-argument version of the function is defined to give the same result as\n             calling the single-argument version with the context item (<code>.</code>). That is,\n                <code>fn:number()</code> is equivalent to <code>fn:number(.)</code>, as\n          defined by the rules that follow.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence or if <code>$arg</code> <phrase diff=\"del\" at=\"L\">or the context item</phrase>\n             cannot be converted to an <code>xs:double</code>, the <code>xs:double</code> value\n                <code>NaN</code> is returned. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, <code>$arg</code> <phrase diff=\"del\" at=\"L\">, or the context item after atomization,</phrase> is converted to an\n                <code>xs:double</code> following the rules of <specref ref=\"casting-to-double\"/>. If\n             the conversion to <code>xs:double</code> fails, the <code>xs:double</code> value\n                <code>NaN</code> is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/> if\n                <code>$arg</code> is omitted and the context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">As a consequence of the rules given above, a type error occurs if the context\n          item cannot be atomized, or if the result of atomizing the context item is a sequence containing\n          more than one atomic value.</p></div>\n", 
      "summary" : "<p>  Returns the value indicated by  $arg  or, if  $arg  is\n             not specified, the context item after atomization, converted to an\n                 xs:double .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:double", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "one-or-more", 
      "qname" : "fn:one-or-more", 
      "signature" : "($arg as item()*) as item()+ external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns <code>$arg</code> if it contains one or more items. Otherwise, raises\n             an error. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"one-or-more\" return-type=\"item()+\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Except in error cases, the function returns <code>$arg</code> unchanged.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RG\" code=\"0004\"/> if <code>$arg</code> is an empty\n             sequence.</p></div>\n", 
      "summary" : "<p>  Returns  $arg  if it contains one or more items.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()+", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "outermost", 
      "qname" : "fn:outermost", 
      "signature" : "($nodes as node()*) as node()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns every node within the input sequence that has no ancestor that is itself a\n             member of the input sequence; the nodes are returned in document order with duplicates\n             eliminated.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"outermost\" return-type=\"node()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"nodes\" type=\"node()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of the function call <code>fn:outermost($nodes)</code> is defined to be\n             equivalent to the result of the expression <code diff=\"chg\" at=\"L\">$nodes[not(ancestor::node() intersect\n                $nodes)]/.</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">That is, the function takes as input a sequence of nodes, and returns every node within\n             the sequence that <phrase diff=\"chg\" at=\"J\">does not have another node within the sequence as an ancestor</phrase>; the nodes are\n             returned in document order with duplicates eliminated.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The formulation <code>$nodes except $nodes/descendant::node()</code> might appear to be\n             simpler, but does not correctly account for attribute nodes, as these are not\n             descendants of their parent element.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The motivation for the function was based on XSLT streaming use cases. There are cases\n             where the <bibref ref=\"xslt-30\"/> streaming rules allow the construct\n                <code>outermost(//section)</code> but do not allow <code>//section</code>; the\n             function can therefore be useful in cases where it is known that sections will not be\n             nested, as well as cases where the application actually wishes to process all sections\n             except those that are nested within another.</p></div>\n", 
      "summary" : "<p>  Returns every node within the input sequence that has no ancestor that is itself a\n             member of the input sequence; the nodes are returned in document order with duplicates\n             eliminated.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "nodes", 
        "type" : "node()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "node()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "parse-xml-fragment", 
      "qname" : "fn:parse-xml-fragment", 
      "signature" : "($arg as xs:string?) as document(element(*,xs:untyped)) external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function takes as input an XML external entity represented as a string,\n             and returns the document node at the root of an XDM tree representing the parsed\n             document fragment.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"parse-xml-fragment\" return-type=\"document-node()?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-nondeterministic\">nondeterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The input must be a namespace-well-formed external general parsed entity. More specifically,\n             it must be a string conforming to the production rule <xnt xmlns:xlink=\"http://www.w3.org/1999/xlink\" spec=\"xml\" ref=\"NT-extParsedEnt\" xlink:type=\"simple\">extParsedEnt</xnt> in <bibref ref=\"REC-xml\"/>, it must contain no entity references other\n             than references to predefined entities,\n             and it must satisfy all the rules\n             of <bibref ref=\"REC-xml-names\"/> for namespace-well-formed documents with the exception\n             that the rule requiring it to be a well-formed document is replaced by the rule requiring\n             it to be a well-formed external general parsed entity.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The string is parsed to form a sequence of nodes which\n             become children of the new document node, in the same way as the content of any element\n             is converted into a sequence of children for the resulting element node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Schema validation is <emph>not</emph> invoked, which means that the nodes in the\n             returned document will all be untyped.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The precise process used to construct the XDM instance is <termref def=\"implementation-defined\"/>. In\n             particular, it is implementation-defined whether an XML 1.0 or XML 1.1 parser is\n             used.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"L\">The Static Base URI from the static context of the <code>fn:parse-xml-fragment</code> function call\n             is used as the base URI of the document node\n             that is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The document URI of the returned node is <termref def=\"absent\">absent</termref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function is <emph>not</emph>\n             <termref def=\"deterministic\">deterministic</termref>: that is, if the function is called\n             twice with the same arguments, it is <termref def=\"implementation-dependent\">implementation-dependent</termref> whether the same node is returned on both\n                occasions.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0006\"/> if the content of\n                <code>$arg</code> is not a well-formed external general parsed entity,\n             if it contains entity references other than references to predefined entities, or if a document that\n             incorporates this well-formed parsed entity would not be namespace-well-formed.</p></div>\n", 
      "summary" : "<p>  This function takes as input an XML external entity represented as a string,\n             and returns the document node at the root of an XDM tree representing the parsed\n             document fragment.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "document(element(*,xs:untyped))", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "parse-xml", 
      "qname" : "fn:parse-xml", 
      "signature" : "($arg as xs:string?) as document(element(*,xs:untyped)) external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function takes as input an XML document represented as a string, and\n             returns the document node at the root of an XDM tree representing the parsed\n             document.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"parse-xml\" return-type=\"document-node(element(*))?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-nondeterministic\">nondeterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"G\">If <code>$arg</code> is the empty sequence, the function returns the\n             empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The precise process used to construct the XDM instance is <termref def=\"implementation-defined\"/>. In\n             particular, it is implementation-defined whether DTD and/or schema validation is invoked, and it is\n             implementation-defined whether an XML 1.0 or XML 1.1 parser is used.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The Static Base URI property from the static context of the\n             <code>fn:parse-xml</code> function call is used both as the base URI used by the XML parser to resolve\n             relative entity references within the document, and as the base URI of the document node\n             that is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The document URI of the returned node is <termref def=\"absent\">absent</termref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function is <emph>not</emph>\n             <termref def=\"deterministic\">deterministic</termref>: that is, if the function is called\n             twice with the same arguments, it is <termref def=\"implementation-dependent\">implementation-dependent</termref> whether the same node is returned on both\n             occasions.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0006\"/> if the content of\n                <code>$arg</code> is not a well-formed and namespace-well-formed XML document.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"G\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0006\"/> if DTD-based\n             validation is carried out and the content of <code>$arg</code> is not valid against its\n             DTD.</p></div>\n", 
      "summary" : "<p>  This function takes as input an XML document represented as a string, and\n             returns the document node at the root of an XDM tree representing the parsed\n             document.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "document(element(*,xs:untyped))", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "parse-xml", 
      "qname" : "fn:parse-xml", 
      "signature" : "($arg as xs:string?, $baseURI as xs:string) as document(element(*,xs:untyped)) external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function takes as input an XML document represented as a string, and\n             returns the document node at the root of an XDM tree representing the parsed\n             document.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"parse-xml\" return-type=\"document-node(element(*))?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-nondeterministic\">nondeterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"G\">If <code>$arg</code> is the empty sequence, the function returns the\n             empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The precise process used to construct the XDM instance is <termref def=\"implementation-defined\"/>. In\n             particular, it is implementation-defined whether DTD and/or schema validation is invoked, and it is\n             implementation-defined whether an XML 1.0 or XML 1.1 parser is used.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The Static Base URI property from the static context of the\n             <code>fn:parse-xml</code> function call is used both as the base URI used by the XML parser to resolve\n             relative entity references within the document, and as the base URI of the document node\n             that is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The document URI of the returned node is <termref def=\"absent\">absent</termref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function is <emph>not</emph>\n             <termref def=\"deterministic\">deterministic</termref>: that is, if the function is called\n             twice with the same arguments, it is <termref def=\"implementation-dependent\">implementation-dependent</termref> whether the same node is returned on both\n             occasions.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0006\"/> if the content of\n                <code>$arg</code> is not a well-formed and namespace-well-formed XML document.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"G\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0006\"/> if DTD-based\n             validation is carried out and the content of <code>$arg</code> is not valid against its\n             DTD.</p></div>\n", 
      "summary" : "<p>  This function takes as input an XML document represented as a string, and\n             returns the document node at the root of an XDM tree representing the parsed\n             document.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "baseURI", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "document(element(*,xs:untyped))", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "position", 
      "qname" : "fn:position", 
      "signature" : "() as xs:integer external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the context position from the dynamic context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"position\" return-type=\"xs:integer\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the context position from the dynamic context. (See <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.)</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"type\"/> if the\n             context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p></div>\n", 
      "summary" : "<p>  Returns the context position from the dynamic context.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:integer", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "prefix-from-QName", 
      "qname" : "fn:prefix-from-QName", 
      "signature" : "($arg as xs:QName?) as xs:NCName? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the prefix component of the supplied QName.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"prefix-from-QName\" return-type=\"xs:NCName?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:QName?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> has no prefix component the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:NCName</code> representing the prefix\n             component of <code>$arg</code>.</p></div>\n", 
      "summary" : "<p>  Returns the prefix component of the supplied QName.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:QName", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:NCName?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "remove", 
      "qname" : "fn:remove", 
      "signature" : "($target as item()*, $position as xs:integer) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a new sequence containing all the items of <code>$target</code> except\n             the item at position <code>$position</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"remove\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"target\" type=\"item()*\"/><arg name=\"position\" type=\"xs:integer\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence consisting of all items of <code>$target</code> whose\n             index is less than <code>$position</code>, followed by all items of <code>$target</code>\n             whose index is greater than <code>$position</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$position</code> is less than 1 or greater than the number of items in\n                <code>$target</code>, <code>$target</code> is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$target</code> is the empty sequence, the empty sequence is returned.</p></div>\n", 
      "summary" : "<p>  Returns a new sequence containing all the items of  $target  except\n             the item at position  $position .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "target", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "position", 
        "type" : "xs:integer", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "replace", 
      "qname" : "fn:replace", 
      "signature" : "($input as xs:string?, $pattern as xs:string, $replacement as xs:string) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string produced from the input string by replacing any substrings\n             that match a given regular expression with a supplied replacement string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"replace\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/><arg name=\"replacement\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"replace\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/><arg name=\"replacement\" type=\"xs:string\"/><arg name=\"flags\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of calling the first version of this function (omitting the argument\n                <code>$flags</code>) is the same as the effect of calling the second version with the\n                <code>$flags</code> argument set to a zero-length string. Flags are defined in\n                <specref ref=\"flags\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$flags</code> argument is interpreted in the same manner as for the\n                <code>fn:matches</code> function. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$input</code> is the empty sequence, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the <code>xs:string</code> that is obtained by replacing each\n             non-overlapping substring of <code>$input</code> that matches the given\n                <code>$pattern</code> with an occurrence of the <code>$replacement</code> string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If two overlapping substrings of <code>$input</code> both match the\n                <code>$pattern</code>, then only the first one (that is, the one whose first <termref def=\"character\">character</termref> comes first in the <code>$input</code> string) is\n             replaced.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">If the <code>q</code> flag is present, the replacement string is used\n                <emph>as is</emph>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><phrase diff=\"add\" at=\"B\">Otherwise,</phrase> within the <code>$replacement</code>\n             string, a variable <code>$N</code> may be used to refer to the substring captured by the\n             Nth parenthesized sub-expression in the regular expression. For each match of the\n             pattern, these variables are assigned the value of the content matched by the relevant\n             sub-expression, and the modified replacement string is then substituted for the <termref def=\"character\">characters</termref> in <code>$input</code> that matched the pattern.\n                <code>$0</code> refers to the substring captured by the regular expression as a\n             whole.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">More specifically, the rules are as follows, where <code>S</code> is the number of\n             parenthesized sub-expressions in the regular expression, and <code>N</code> is the\n             decimal number formed by taking all the digits that consecutively follow the\n                <code>$</code> character:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If <code>N</code>=<code>0</code>, then the variable is replaced by the substring\n                   matched by the regular expression as a whole.</p></item><item><p>If <code>1</code>&lt;=<code>N</code>&lt;=<code>S</code>, then the variable is\n                   replaced by the substring captured by the Nth parenthesized sub-expression. If the\n                      <code>Nth</code> parenthesized sub-expression was not matched, then the\n                   variable is replaced by the zero-length string.</p></item><item><p>If <code>S</code>&lt;<code>N</code>&lt;=<code>9</code>, then the variable is\n                   replaced by the zero-length string.</p></item><item><p>Otherwise (if <code>N</code>&gt;<code>S</code> and\n                      <code>N</code>&gt;<code>9</code>), the last digit of <code>N</code> is taken to\n                   be a literal character to be included \"as is\" in the replacement string, and the\n                   rules are reapplied using the number <code>N</code> formed by stripping off this\n                   last digit.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For example, if the replacement string is <quote>\n                <code>$23</code>\n             </quote> and there are 5 substrings, the result contains the value of the substring that\n             matches the second sub-expression, followed by the digit <quote>\n                <code>3</code>\n             </quote>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"B\">Unless the <code>q</code> flag is used, a literal <code>$</code>\n             character within the replacement string must be written as <code>\\$</code>, and a\n             literal <code>\\</code> character must be written as <code>\\\\</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If two alternatives within the pattern both match at the same position in the\n                <code>$input</code>, then the match that is chosen is the one matched by the first\n             alternative. For example:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:replace(\"abcd\", \"(ab)|(a)\", \"[1=$1][2=$2]\") returns \"[1=ab][2=]cd\"</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0002\"/> if the value of\n                <code>$pattern</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0001\"/> if the value of\n                <code>$flags</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0003\"/> if the pattern matches a\n             zero-length string, that is, if the expression <code>fn:matches(\"\", $pattern,\n                $flags)</code> returns <code>true</code>. It is not an error, however, if a captured\n             substring is zero-length.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0004\"/> if the value of\n                <code>$replacement</code> contains a \"<code>$</code>\" character that is not\n             immediately followed by a digit <code>0-9</code> and not immediately preceded by a\n             \"\\\".</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0004\"/> if the value of\n                <code>$replacement</code> contains a \"<code>\\</code>\" character that is not part of a\n                \"<code>\\\\</code>\" pair, unless it is immediately followed by a \"<code>$</code>\"\n             character.</p></div>\n", 
      "summary" : "<p>  Returns a string produced from the input string by replacing any substrings\n             that match a given regular expression with a supplied replacement string.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "input", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "pattern", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "replacement", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 4, 
      "name" : "replace", 
      "qname" : "fn:replace", 
      "signature" : "($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string produced from the input string by replacing any substrings\n             that match a given regular expression with a supplied replacement string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"replace\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/><arg name=\"replacement\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"replace\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/><arg name=\"replacement\" type=\"xs:string\"/><arg name=\"flags\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of calling the first version of this function (omitting the argument\n                <code>$flags</code>) is the same as the effect of calling the second version with the\n                <code>$flags</code> argument set to a zero-length string. Flags are defined in\n                <specref ref=\"flags\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$flags</code> argument is interpreted in the same manner as for the\n                <code>fn:matches</code> function. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$input</code> is the empty sequence, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the <code>xs:string</code> that is obtained by replacing each\n             non-overlapping substring of <code>$input</code> that matches the given\n                <code>$pattern</code> with an occurrence of the <code>$replacement</code> string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If two overlapping substrings of <code>$input</code> both match the\n                <code>$pattern</code>, then only the first one (that is, the one whose first <termref def=\"character\">character</termref> comes first in the <code>$input</code> string) is\n             replaced.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">If the <code>q</code> flag is present, the replacement string is used\n                <emph>as is</emph>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><phrase diff=\"add\" at=\"B\">Otherwise,</phrase> within the <code>$replacement</code>\n             string, a variable <code>$N</code> may be used to refer to the substring captured by the\n             Nth parenthesized sub-expression in the regular expression. For each match of the\n             pattern, these variables are assigned the value of the content matched by the relevant\n             sub-expression, and the modified replacement string is then substituted for the <termref def=\"character\">characters</termref> in <code>$input</code> that matched the pattern.\n                <code>$0</code> refers to the substring captured by the regular expression as a\n             whole.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">More specifically, the rules are as follows, where <code>S</code> is the number of\n             parenthesized sub-expressions in the regular expression, and <code>N</code> is the\n             decimal number formed by taking all the digits that consecutively follow the\n                <code>$</code> character:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If <code>N</code>=<code>0</code>, then the variable is replaced by the substring\n                   matched by the regular expression as a whole.</p></item><item><p>If <code>1</code>&lt;=<code>N</code>&lt;=<code>S</code>, then the variable is\n                   replaced by the substring captured by the Nth parenthesized sub-expression. If the\n                      <code>Nth</code> parenthesized sub-expression was not matched, then the\n                   variable is replaced by the zero-length string.</p></item><item><p>If <code>S</code>&lt;<code>N</code>&lt;=<code>9</code>, then the variable is\n                   replaced by the zero-length string.</p></item><item><p>Otherwise (if <code>N</code>&gt;<code>S</code> and\n                      <code>N</code>&gt;<code>9</code>), the last digit of <code>N</code> is taken to\n                   be a literal character to be included \"as is\" in the replacement string, and the\n                   rules are reapplied using the number <code>N</code> formed by stripping off this\n                   last digit.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For example, if the replacement string is <quote>\n                <code>$23</code>\n             </quote> and there are 5 substrings, the result contains the value of the substring that\n             matches the second sub-expression, followed by the digit <quote>\n                <code>3</code>\n             </quote>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"B\">Unless the <code>q</code> flag is used, a literal <code>$</code>\n             character within the replacement string must be written as <code>\\$</code>, and a\n             literal <code>\\</code> character must be written as <code>\\\\</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If two alternatives within the pattern both match at the same position in the\n                <code>$input</code>, then the match that is chosen is the one matched by the first\n             alternative. For example:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:replace(\"abcd\", \"(ab)|(a)\", \"[1=$1][2=$2]\") returns \"[1=ab][2=]cd\"</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0002\"/> if the value of\n                <code>$pattern</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0001\"/> if the value of\n                <code>$flags</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0003\"/> if the pattern matches a\n             zero-length string, that is, if the expression <code>fn:matches(\"\", $pattern,\n                $flags)</code> returns <code>true</code>. It is not an error, however, if a captured\n             substring is zero-length.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0004\"/> if the value of\n                <code>$replacement</code> contains a \"<code>$</code>\" character that is not\n             immediately followed by a digit <code>0-9</code> and not immediately preceded by a\n             \"\\\".</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0004\"/> if the value of\n                <code>$replacement</code> contains a \"<code>\\</code>\" character that is not part of a\n                \"<code>\\\\</code>\" pair, unless it is immediately followed by a \"<code>$</code>\"\n             character.</p></div>\n", 
      "summary" : "<p>  Returns a string produced from the input string by replacing any substrings\n             that match a given regular expression with a supplied replacement string.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "input", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "pattern", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "replacement", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "flags", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "resolve-QName", 
      "qname" : "fn:resolve-QName", 
      "signature" : "($qname as xs:string?, $element as element(*)) as xs:QName? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns an <code>xs:QName</code> value (that is, an expanded-QName) by taking\n             an <code>xs:string</code> that has the lexical form of an <code>xs:QName</code> (a\n             string in the form \"prefix:local-name\" or \"local-name\") and resolving it using the\n             in-scope namespaces for a given element.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"resolve-QName\" return-type=\"xs:QName?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"qname\" type=\"xs:string?\"/><arg name=\"element\" type=\"element()\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$qname</code> is the empty sequence, returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">More specifically, the function searches the namespace bindings of <code>$element</code>\n             for a binding whose name matches the prefix of <code>$qname</code>, or the zero-length\n             string if it has no prefix, and constructs an expanded-QName whose local name is taken\n             from the supplied <code>$qname</code>, and whose namespace URI is taken from the string\n             value of the namespace binding.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the <code>$qname</code> has no prefix, and there is no namespace binding for\n                <code>$element</code> corresponding to the default (unnamed) namespace, then the\n             resulting expanded-QName has no namespace part.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The prefix (or absence of a prefix) in the supplied <code>$qname</code> argument is\n             retained in the returned expanded-QName, as discussed in <xspecref spec=\"DM30\" ref=\"terminology\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"CA\" code=\"0002\"/> if <code>$qname</code> does not\n             have the correct lexical form for an instance of <code>xs:QName</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"NS\" code=\"0004\"/> if <code>$qname</code> has a\n             prefix and there is no namespace binding for <code>$element</code> that matches this\n             prefix.</p></div>\n", 
      "summary" : "<p>  Returns an  xs:QName  value (that is, an expanded-QName) by taking\n             an  xs:string  that has the lexical form of an  xs:QName  (a\n             string in the form \"prefix:local-name\" or \"local-name\") and resolving it using the\n             in-scope namespaces for a given element.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "qname", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "element", 
        "type" : "element(*)", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:QName?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "resolve-uri", 
      "qname" : "fn:resolve-uri", 
      "signature" : "($relative as xs:string?) as xs:anyURI? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Resolves a relative IRI reference against an absolute IRI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"resolve-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"relative\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"resolve-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"relative\" type=\"xs:string?\"/><arg name=\"base\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the second argument is absent, the effect is the same as calling the two-argument\n             function with the value of <code>fn:static-base-uri()</code> as the second argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function is defined to operate on IRI references as defined in <bibref ref=\"rfc3987\"/>, and the implementation <rfc2119>must</rfc2119> permit all arguments that are valid\n             according to that specification. In addition, the implementation <rfc2119>may</rfc2119>\n             accept some or all strings that conform to the rules for (absolute or relative) Legacy\n             Extended IRI references as defined in <bibref ref=\"LEIRI\"/>. For the purposes of this\n             section, the terms IRI and IRI reference include these extensions, insofar as the\n             implementation chooses to support them.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$relative</code> is the empty sequence, the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$relative</code> is an absolute IRI (as defined above), then it is returned\n             unchanged.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function resolves the relative IRI reference <code>$relative</code>\n             against the base IRI <code>$base</code> using the algorithm defined in <bibref ref=\"rfc3986\"/>, adapted by treating any <termref def=\"character\">character</termref>\n             that would not be valid in an RFC3986 URI or relative reference in the same way that\n             RFC3986 treats unreserved characters. No percent-encoding takes place.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The first form of this function resolves <code>$relative</code> against the value of the\n             base-uri property from the static context. A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"NS\" code=\"0005\"/> if the base-uri property is not initialized in the static context. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RG\" code=\"0002\"/> if <code>$relative</code> is not a\n             valid IRI according to the rules of RFC3987, extended with an implementation-defined\n             subset of the extensions permitted in LEIRI, or if it is not a suitable relative\n             reference to use as input to the RFC3986 resolution algorithm extended to handle\n             additional unreserved characters. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RG\" code=\"0002\"/> if <code>$base</code> is not a\n             valid IRI according to the rules of RFC3987, extended with an implementation-defined\n             subset of the extensions permitted in LEIRI, or if it is not a suitable IRI to use as\n             input to the chosen resolution algorithm (for example, if it is a relative IRI\n             reference, if it is a non-hierarchic URI, or if it contains a fragment identifier). </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RG\" code=\"0009\"/> if the chosen resolution algorithm\n             fails for any other reason. </p></div>\n", 
      "summary" : "<p>  Resolves a relative IRI reference against an absolute IRI.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "relative", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyURI?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "resolve-uri", 
      "qname" : "fn:resolve-uri", 
      "signature" : "($relative as xs:string?, $base as xs:string) as xs:anyURI? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Resolves a relative IRI reference against an absolute IRI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"resolve-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"relative\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"resolve-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"relative\" type=\"xs:string?\"/><arg name=\"base\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the second argument is absent, the effect is the same as calling the two-argument\n             function with the value of <code>fn:static-base-uri()</code> as the second argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function is defined to operate on IRI references as defined in <bibref ref=\"rfc3987\"/>, and the implementation <rfc2119>must</rfc2119> permit all arguments that are valid\n             according to that specification. In addition, the implementation <rfc2119>may</rfc2119>\n             accept some or all strings that conform to the rules for (absolute or relative) Legacy\n             Extended IRI references as defined in <bibref ref=\"LEIRI\"/>. For the purposes of this\n             section, the terms IRI and IRI reference include these extensions, insofar as the\n             implementation chooses to support them.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$relative</code> is the empty sequence, the function returns the empty\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$relative</code> is an absolute IRI (as defined above), then it is returned\n             unchanged.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function resolves the relative IRI reference <code>$relative</code>\n             against the base IRI <code>$base</code> using the algorithm defined in <bibref ref=\"rfc3986\"/>, adapted by treating any <termref def=\"character\">character</termref>\n             that would not be valid in an RFC3986 URI or relative reference in the same way that\n             RFC3986 treats unreserved characters. No percent-encoding takes place.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The first form of this function resolves <code>$relative</code> against the value of the\n             base-uri property from the static context. A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"NS\" code=\"0005\"/> if the base-uri property is not initialized in the static context. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RG\" code=\"0002\"/> if <code>$relative</code> is not a\n             valid IRI according to the rules of RFC3987, extended with an implementation-defined\n             subset of the extensions permitted in LEIRI, or if it is not a suitable relative\n             reference to use as input to the RFC3986 resolution algorithm extended to handle\n             additional unreserved characters. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RG\" code=\"0002\"/> if <code>$base</code> is not a\n             valid IRI according to the rules of RFC3987, extended with an implementation-defined\n             subset of the extensions permitted in LEIRI, or if it is not a suitable IRI to use as\n             input to the chosen resolution algorithm (for example, if it is a relative IRI\n             reference, if it is a non-hierarchic URI, or if it contains a fragment identifier). </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RG\" code=\"0009\"/> if the chosen resolution algorithm\n             fails for any other reason. </p></div>\n", 
      "summary" : "<p>  Resolves a relative IRI reference against an absolute IRI.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "relative", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "base", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyURI?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "reverse", 
      "qname" : "fn:reverse", 
      "signature" : "($arg as item()*) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Reverses the order of items in a sequence. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"reverse\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence containing the items in <code>$arg</code> in reverse\n             order.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the empty sequence is returned. </p></div>\n", 
      "summary" : "<p>  Reverses the order of items in a sequence.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "root", 
      "qname" : "fn:root", 
      "signature" : "() as node() external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the root of the tree to which <code>$arg</code> belongs. This will\n             usually, but not necessarily, be a document node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"root\" return-type=\"node()\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"root\" return-type=\"node()?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the function is called without an argument, the context item (<code>.</code>) is used\n             as the default argument. The behavior of the function if the argument is omitted is\n             exactly the same as if the context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the value of the expression\n                <code>($arg/ancestor-or-self::node())[1]</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the root of the tree to which  $arg  belongs.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "node()", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "root", 
      "qname" : "fn:root", 
      "signature" : "($arg as node()?) as node()? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the root of the tree to which <code>$arg</code> belongs. This will\n             usually, but not necessarily, be a document node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"root\" return-type=\"node()\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"root\" return-type=\"node()?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"node()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the function is called without an argument, the context item (<code>.</code>) is used\n             as the default argument. The behavior of the function if the argument is omitted is\n             exactly the same as if the context item had been passed as the argument.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the value of the expression\n                <code>($arg/ancestor-or-self::node())[1]</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The following errors may be raised when <code>$arg</code> is omitted:</p><ul xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><li><p>If the context\n                item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, <phrase diff=\"add\" at=\"M\">dynamic error</phrase>\n                <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/></p></li><li><p>If the context item is not a\n                node, <phrase diff=\"add\" at=\"M\">type error</phrase> <xerrorref spec=\"XP\" class=\"TY\" code=\"0004\" type=\"type\"/>.</p></li></ul></div>\n", 
      "summary" : "<p>  Returns the root of the tree to which  $arg  belongs.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "node()", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "node()?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "round-half-to-even", 
      "qname" : "fn:round-half-to-even", 
      "signature" : "($arg as numeric?) as numeric? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Rounds a value to a specified number of decimal places, rounding to make the\n             last digit even if two such values are equally near.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"round-half-to-even\" return-type=\"numeric?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"numeric?\"/></proto></example><example role=\"signature\"><proto name=\"round-half-to-even\" return-type=\"numeric?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"numeric?\"/><arg name=\"precision\" type=\"xs:integer\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">General rules: see <specref ref=\"numeric-value-functions\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the nearest (that is, numerically closest) value to\n                <code>$arg</code> that is a multiple of ten to the power of minus\n                <code>$precision</code>. If two such values are equally near (e.g. if the fractional\n             part in <code>$arg</code> is exactly .500...), the function returns the one whose least\n             significant digit is even.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the type of <code>$arg</code> is one of the four numeric types <code>xs:float</code>,\n                <code>xs:double</code>, <code>xs:decimal</code> or <code>xs:integer</code> the type\n             of the result is the same as the type of <code>$arg</code>. If the type of\n                <code>$arg</code> is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> The first signature of this function produces the same result as the second signature\n             with <code>$precision=0</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For arguments of type <code>xs:float</code> and <code>xs:double</code>:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If the argument is <code>NaN</code>, positive or negative zero, or positive or\n                   negative infinity, then the result is the same as the argument.</p></item><item><p>In all other cases, the argument is cast to <code>xs:decimal</code>\n                   <phrase diff=\"add\" at=\"A\">using an implementation of xs:decimal that imposes no\n                      limits on the number of digits that can be represented.</phrase> The function\n                   is applied to this <code>xs:decimal</code> value, and the resulting\n                      <code>xs:decimal</code> is cast back to <code>xs:float</code> or\n                      <code>xs:double</code> as appropriate to form the function result. If the\n                   resulting <code>xs:decimal</code> value is zero, then positive or negative zero is\n                   returned according to the sign of the original argument.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A\">This function is typically used in financial applications where the\n             argument is of type <code>xs:decimal</code>. For arguments of type <code>xs:float</code>\n             and <code>xs:double</code> the results may be counter-intuitive. For example, consider\n                <code>round-half-to-even(xs:float(150.015), 2)</code>. The result is not 150.02 as\n             might be expected, but 150.01. This is because the conversion of the\n                <code>xs:float</code> value represented by the literal 150.015 to an\n                <code>xs:decimal</code> produces the <code>xs:decimal</code> value 150.014999389...,\n             which is closer to 150.01 than to 150.02.</p></div>\n", 
      "summary" : "<p>  Rounds a value to a specified number of decimal places, rounding to make the\n             last digit even if two such values are equally near.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "numeric", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "numeric?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "round-half-to-even", 
      "qname" : "fn:round-half-to-even", 
      "signature" : "($arg as numeric?, $precision as xs:integer) as numeric? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Rounds a value to a specified number of decimal places, rounding to make the\n             last digit even if two such values are equally near.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"round-half-to-even\" return-type=\"numeric?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"numeric?\"/></proto></example><example role=\"signature\"><proto name=\"round-half-to-even\" return-type=\"numeric?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"numeric?\"/><arg name=\"precision\" type=\"xs:integer\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">General rules: see <specref ref=\"numeric-value-functions\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the nearest (that is, numerically closest) value to\n                <code>$arg</code> that is a multiple of ten to the power of minus\n                <code>$precision</code>. If two such values are equally near (e.g. if the fractional\n             part in <code>$arg</code> is exactly .500...), the function returns the one whose least\n             significant digit is even.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the type of <code>$arg</code> is one of the four numeric types <code>xs:float</code>,\n                <code>xs:double</code>, <code>xs:decimal</code> or <code>xs:integer</code> the type\n             of the result is the same as the type of <code>$arg</code>. If the type of\n                <code>$arg</code> is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> The first signature of this function produces the same result as the second signature\n             with <code>$precision=0</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">For arguments of type <code>xs:float</code> and <code>xs:double</code>:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If the argument is <code>NaN</code>, positive or negative zero, or positive or\n                   negative infinity, then the result is the same as the argument.</p></item><item><p>In all other cases, the argument is cast to <code>xs:decimal</code>\n                   <phrase diff=\"add\" at=\"A\">using an implementation of xs:decimal that imposes no\n                      limits on the number of digits that can be represented.</phrase> The function\n                   is applied to this <code>xs:decimal</code> value, and the resulting\n                      <code>xs:decimal</code> is cast back to <code>xs:float</code> or\n                      <code>xs:double</code> as appropriate to form the function result. If the\n                   resulting <code>xs:decimal</code> value is zero, then positive or negative zero is\n                   returned according to the sign of the original argument.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A\">This function is typically used in financial applications where the\n             argument is of type <code>xs:decimal</code>. For arguments of type <code>xs:float</code>\n             and <code>xs:double</code> the results may be counter-intuitive. For example, consider\n                <code>round-half-to-even(xs:float(150.015), 2)</code>. The result is not 150.02 as\n             might be expected, but 150.01. This is because the conversion of the\n                <code>xs:float</code> value represented by the literal 150.015 to an\n                <code>xs:decimal</code> produces the <code>xs:decimal</code> value 150.014999389...,\n             which is closer to 150.01 than to 150.02.</p></div>\n", 
      "summary" : "<p>  Rounds a value to a specified number of decimal places, rounding to make the\n             last digit even if two such values are equally near.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "numeric", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "precision", 
        "type" : "xs:integer", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "numeric?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "round", 
      "qname" : "fn:round", 
      "signature" : "($arg as numeric?) as numeric? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Rounds a value to a specified number of decimal places, rounding upwards if two\n             such values are equally near.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"round\" return-type=\"numeric?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"numeric?\"/></proto></example><example role=\"signature\"><proto name=\"round\" return-type=\"numeric?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"numeric?\"/><arg name=\"precision\" type=\"xs:integer\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">General rules: see <specref ref=\"numeric-value-functions\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the nearest (that is, numerically closest) value to\n                <code>$arg</code> that is a multiple of ten to the power of minus\n                <code>$precision</code>. If two such values are equally near (for example, if the\n             fractional part in <code>$arg</code> is exactly .5), the function returns the one that\n             is closest to positive infinity.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the type of <code>$arg</code> is one of the four numeric types <code>xs:float</code>,\n                <code>xs:double</code>, <code>xs:decimal</code> or <code>xs:integer</code> the type\n             of the result is the same as the type of <code>$arg</code>. If the type of\n                <code>$arg</code> is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The single-argument version of this function produces the same result as the\n             two-argument version with <code>$precision=0</code> (that is, it rounds to a whole\n             number).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">When <code>$arg</code> is of type <code>xs:float</code> and <code>xs:double</code>:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If <code>$arg</code> is NaN, positive or negative zero, or positive or negative\n                   infinity, then the result is the same as the argument.</p></item><item><p>For other values, the argument is cast to <code>xs:decimal</code> using an\n                   implementation of <code>xs:decimal</code> that imposes no limits on the number of\n                   digits that can be represented. The function is applied to this\n                      <code>xs:decimal</code> value, and the resulting <code>xs:decimal</code> is\n                   cast back to <code>xs:float</code> or <code>xs:double</code> as appropriate to\n                   form the function result. If the resulting <code>xs:decimal</code> value is zero,\n                   then positive or negative zero is returned according to the sign of\n                      <code>$arg</code>.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is typically used with a non-zero <code>$precision</code> in financial\n             applications where the argument is of type <code>xs:decimal</code>. For arguments of\n             type <code>xs:float</code> and <code>xs:double</code> the results may be\n             counter-intuitive. For example, consider <code>round(35.425e0, 2)</code>. The result is\n             not 35.43, as might be expected, but 35.42. This is because the <code>xs:double</code> written as 35.425e0\n             has an exact value equal to 35.42499999999..., which is closer\n             to 35.42 than to 35.43.</p></div>\n", 
      "summary" : "<p>  Rounds a value to a specified number of decimal places, rounding upwards if two\n             such values are equally near.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "numeric", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "numeric?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "round", 
      "qname" : "fn:round", 
      "signature" : "($arg as numeric?, $precision as xs:integer) as numeric? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Rounds a value to a specified number of decimal places, rounding upwards if two\n             such values are equally near.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"round\" return-type=\"numeric?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"numeric?\"/></proto></example><example role=\"signature\"><proto name=\"round\" return-type=\"numeric?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"numeric?\"/><arg name=\"precision\" type=\"xs:integer\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">General rules: see <specref ref=\"numeric-value-functions\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the nearest (that is, numerically closest) value to\n                <code>$arg</code> that is a multiple of ten to the power of minus\n                <code>$precision</code>. If two such values are equally near (for example, if the\n             fractional part in <code>$arg</code> is exactly .5), the function returns the one that\n             is closest to positive infinity.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the type of <code>$arg</code> is one of the four numeric types <code>xs:float</code>,\n                <code>xs:double</code>, <code>xs:decimal</code> or <code>xs:integer</code> the type\n             of the result is the same as the type of <code>$arg</code>. If the type of\n                <code>$arg</code> is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The single-argument version of this function produces the same result as the\n             two-argument version with <code>$precision=0</code> (that is, it rounds to a whole\n             number).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">When <code>$arg</code> is of type <code>xs:float</code> and <code>xs:double</code>:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If <code>$arg</code> is NaN, positive or negative zero, or positive or negative\n                   infinity, then the result is the same as the argument.</p></item><item><p>For other values, the argument is cast to <code>xs:decimal</code> using an\n                   implementation of <code>xs:decimal</code> that imposes no limits on the number of\n                   digits that can be represented. The function is applied to this\n                      <code>xs:decimal</code> value, and the resulting <code>xs:decimal</code> is\n                   cast back to <code>xs:float</code> or <code>xs:double</code> as appropriate to\n                   form the function result. If the resulting <code>xs:decimal</code> value is zero,\n                   then positive or negative zero is returned according to the sign of\n                      <code>$arg</code>.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is typically used with a non-zero <code>$precision</code> in financial\n             applications where the argument is of type <code>xs:decimal</code>. For arguments of\n             type <code>xs:float</code> and <code>xs:double</code> the results may be\n             counter-intuitive. For example, consider <code>round(35.425e0, 2)</code>. The result is\n             not 35.43, as might be expected, but 35.42. This is because the <code>xs:double</code> written as 35.425e0\n             has an exact value equal to 35.42499999999..., which is closer\n             to 35.42 than to 35.43.</p></div>\n", 
      "summary" : "<p>  Rounds a value to a specified number of decimal places, rounding upwards if two\n             such values are equally near.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "numeric", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "precision", 
        "type" : "xs:integer", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "numeric?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "seconds-from-dateTime", 
      "qname" : "fn:seconds-from-dateTime", 
      "signature" : "($arg as xs:dateTime?) as xs:decimal? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the seconds component of an <code>xs:dateTime</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"seconds-from-dateTime\" return-type=\"xs:decimal?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:dateTime?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:decimal</code> value greater than or equal\n             to zero and less than 60, representing the seconds and fractional seconds in the local\n             value of <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:seconds-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))</code> returns <code>0</code>.</p></div>\n", 
      "summary" : "<p>  Returns the seconds component of an  xs:dateTime .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:dateTime", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:decimal?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "seconds-from-duration", 
      "qname" : "fn:seconds-from-duration", 
      "signature" : "($arg as xs:duration?) as xs:decimal? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the number of seconds in a duration.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"seconds-from-duration\" return-type=\"xs:decimal?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:duration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:decimal</code> representing the seconds\n             component in the value of <code>$arg</code>. The result is obtained by casting\n                <code>$arg</code> to an <code>xs:dayTimeDuration</code> (see <specref ref=\"casting-to-durations\"/>) and then computing the seconds component as described\n             in <specref ref=\"canonical-dayTimeDuration\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is a negative duration then the result will be negative..</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is an <code>xs:yearMonthDuration</code> the function returns 0.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:seconds-from-duration(xs:dayTimeDuration(\"P3DT10H12.5S\"))</code> returns <code>12.5</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:seconds-from-duration(xs:dayTimeDuration(\"-PT256S\"))</code> returns <code>-16.0</code>.</p></div>\n", 
      "summary" : "<p>  Returns the number of seconds in a duration.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:duration", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:decimal?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "seconds-from-time", 
      "qname" : "fn:seconds-from-time", 
      "signature" : "($arg as xs:time?) as xs:decimal? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the seconds component of an <code>xs:time</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"seconds-from-time\" return-type=\"xs:decimal?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:time?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:decimal</code> value greater than or equal\n             to zero and less than 60, representing the seconds and fractional seconds in the local\n             value of <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:seconds-from-time(xs:time(\"13:20:10.5\"))</code> returns <code>10.5</code>.</p></div>\n", 
      "summary" : "<p>  Returns the seconds component of an  xs:time .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:time", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:decimal?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "serialize", 
      "qname" : "fn:serialize", 
      "signature" : "($arg as item()*) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function serializes the supplied <phrase diff=\"chg\" at=\"G\">input\n                sequence</phrase>\n             <code>$arg</code> as described in <bibref ref=\"xslt-xquery-serialization-30\"/>,\n             returning the serialized <phrase diff=\"chg\" at=\"G\">representation of the\n                sequence</phrase> as a string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"serialize\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example><example role=\"signature\"><proto name=\"serialize\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/><arg name=\"params\" type=\"element(output:serialization-parameters)?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The value of <code>$arg</code> acts as the input sequence to the serialization process,\n             which starts with sequence normalization.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">The single-argument version of this function has the same effect as\n             the two-argument version called with <code>$params</code> set to an empty sequence. This\n             in turn is the same as the effect of passing an\n                <code>output:serialization-parameters</code> element with no child elements.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">The <code>$params</code> argument is used to identify a set of\n             serialization parameters. These are supplied in the form of an\n                <code>output:serialization-parameters</code> element, having the format described in\n                <xspecref spec=\"SER30\" ref=\"serparams-in-xdm-instance\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The final stage of serialization, that is, encoding, is skipped. If the serializer does\n             not allow this phase to be skipped, then the sequence of octets returned by the\n             serializer is decoded into a string by reversing the character encoding performed in the\n             final stage.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">If the host language makes serialization an optional feature and\n          the implementation does not support serialization, then a dynamic error\n             <errorref class=\"DC\" code=\"0010\"/> is raised.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The serialization process will raise an error if <code>$arg</code> is an attribute or\n             namespace node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If any serialization error occurs, including the detection of an invalid value for a\n             serialization parameter, this results in the <code>fn:serialize</code> call failing with\n             a dynamic error.</p></div>\n", 
      "summary" : "<p>  This function serializes the supplied  input\n                sequence \n              $arg  as described in   ,\n             returning the serialized  representation of the\n                sequence  as a string.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "serialize", 
      "qname" : "fn:serialize", 
      "signature" : "($arg as item()*, $params as element(output:serialization-parameters)?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function serializes the supplied <phrase diff=\"chg\" at=\"G\">input\n                sequence</phrase>\n             <code>$arg</code> as described in <bibref ref=\"xslt-xquery-serialization-30\"/>,\n             returning the serialized <phrase diff=\"chg\" at=\"G\">representation of the\n                sequence</phrase> as a string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"serialize\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example><example role=\"signature\"><proto name=\"serialize\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/><arg name=\"params\" type=\"element(output:serialization-parameters)?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The value of <code>$arg</code> acts as the input sequence to the serialization process,\n             which starts with sequence normalization.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">The single-argument version of this function has the same effect as\n             the two-argument version called with <code>$params</code> set to an empty sequence. This\n             in turn is the same as the effect of passing an\n                <code>output:serialization-parameters</code> element with no child elements.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">The <code>$params</code> argument is used to identify a set of\n             serialization parameters. These are supplied in the form of an\n                <code>output:serialization-parameters</code> element, having the format described in\n                <xspecref spec=\"SER30\" ref=\"serparams-in-xdm-instance\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The final stage of serialization, that is, encoding, is skipped. If the serializer does\n             not allow this phase to be skipped, then the sequence of octets returned by the\n             serializer is decoded into a string by reversing the character encoding performed in the\n             final stage.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">If the host language makes serialization an optional feature and\n          the implementation does not support serialization, then a dynamic error\n             <errorref class=\"DC\" code=\"0010\"/> is raised.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The serialization process will raise an error if <code>$arg</code> is an attribute or\n             namespace node.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If any serialization error occurs, including the detection of an invalid value for a\n             serialization parameter, this results in the <code>fn:serialize</code> call failing with\n             a dynamic error.</p></div>\n", 
      "summary" : "<p>  This function serializes the supplied  input\n                sequence \n              $arg  as described in   ,\n             returning the serialized  representation of the\n                sequence  as a string.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "params", 
        "type" : "element(output:serialization-parameters)", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "starts-with", 
      "qname" : "fn:starts-with", 
      "signature" : "($arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the string <code>$arg1</code> contains <code>$arg2</code> as a\n             leading substring, taking collations into account.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"starts-with\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"starts-with\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> or <code>$arg2</code> is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg2</code> is the zero-length string, then the function returns\n                <code>true</code>. If the value of <code>$arg1</code> is the zero-length string and\n             the value of <code>$arg2</code> is not the zero-length string, then the function returns\n                <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an <code>xs:boolean</code> indicating whether or not the value of\n                <code>$arg1</code> starts with a sequence of collation units that provides a\n                <term>match</term> to the collation units of <code>$arg2</code> according to the\n             collation that is used.</p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p><term>Match</term> is defined in <bibref ref=\"Unicode-Collations\"/>.</p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"CH\" code=\"0004\"/> if the\n             specified collation does not support collation units.</p></div>\n", 
      "summary" : "<p>  Returns true if the string  $arg1  contains  $arg2  as a\n             leading substring, taking collations into account.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "starts-with", 
      "qname" : "fn:starts-with", 
      "signature" : "($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns true if the string <code>$arg1</code> contains <code>$arg2</code> as a\n             leading substring, taking collations into account.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"starts-with\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"starts-with\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> or <code>$arg2</code> is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg2</code> is the zero-length string, then the function returns\n                <code>true</code>. If the value of <code>$arg1</code> is the zero-length string and\n             the value of <code>$arg2</code> is not the zero-length string, then the function returns\n                <code>false</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an <code>xs:boolean</code> indicating whether or not the value of\n                <code>$arg1</code> starts with a sequence of collation units that provides a\n                <term>match</term> to the collation units of <code>$arg2</code> according to the\n             collation that is used.</p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p><term>Match</term> is defined in <bibref ref=\"Unicode-Collations\"/>.</p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"CH\" code=\"0004\"/> if the\n             specified collation does not support collation units.</p></div>\n", 
      "summary" : "<p>  Returns true if the string  $arg1  contains  $arg2  as a\n             leading substring, taking collations into account.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "collation", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "static-base-uri", 
      "qname" : "fn:static-base-uri", 
      "signature" : "() as xs:anyURI? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function returns the value of the Static Base URI property from the static context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"static-base-uri\" return-type=\"xs:anyURI?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the value of the Static Base URI property from the static context. If the\n             property is absent, the empty sequence is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Components of the static context are discussed in <xspecref spec=\"XP30\" ref=\"static_context\"/> .</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">XQuery 3.0 and XSLT 3.0 give an implementation freedom to use different base URIs during the\n          static analysis phase and the dynamic evaluation phase, that is, for compile-time and run-time resources respectively.\n          In this situation, the <code>fn:static-base-uri</code> function should return a URI suitable for locating resources needed\n          during dynamic evaluation.</p></div>\n", 
      "summary" : "<p>  This function returns the value of the Static Base URI property from the static context.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:anyURI?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "string-join", 
      "qname" : "fn:string-join", 
      "signature" : "($arg1 as xs:string*) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string created by concatenating the items in a sequence, with a\n             defined separator between adjacent items.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"string-join\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string*\"/></proto></example><example role=\"signature\"><proto name=\"string-join\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string*\"/><arg name=\"arg2\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">The effect of calling the single-argument version of this function is\n             the same as calling the two-argument version with <code>$arg2</code> set to a\n             zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an <code>xs:string</code> created by concatenating the items in the\n             sequence <code>$arg1</code>, in order, using the value of <code>$arg2</code> as a\n             separator between adjacent items. If the value of <code>$arg2</code> is the zero-length\n             string, then the members of <code>$arg1</code> are concatenated without a separator.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> is the empty sequence, the function returns the\n             zero-length string.</p></div>\n", 
      "summary" : "<p>  Returns a string created by concatenating the items in a sequence, with a\n             defined separator between adjacent items.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "string-join", 
      "qname" : "fn:string-join", 
      "signature" : "($arg1 as xs:string*, $arg2 as xs:string) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a string created by concatenating the items in a sequence, with a\n             defined separator between adjacent items.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"string-join\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string*\"/></proto></example><example role=\"signature\"><proto name=\"string-join\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string*\"/><arg name=\"arg2\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"B\">The effect of calling the single-argument version of this function is\n             the same as calling the two-argument version with <code>$arg2</code> set to a\n             zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an <code>xs:string</code> created by concatenating the items in the\n             sequence <code>$arg1</code>, in order, using the value of <code>$arg2</code> as a\n             separator between adjacent items. If the value of <code>$arg2</code> is the zero-length\n             string, then the members of <code>$arg1</code> are concatenated without a separator.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> is the empty sequence, the function returns the\n             zero-length string.</p></div>\n", 
      "summary" : "<p>  Returns a string created by concatenating the items in a sequence, with a\n             defined separator between adjacent items.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "string-length", 
      "qname" : "fn:string-length", 
      "signature" : "() as xs:integer external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the number of <termref def=\"character\">characters</termref> in a\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"string-length\" return-type=\"xs:integer\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"string-length\" return-type=\"xs:integer\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an <code>xs:integer</code> equal to the length in <termref def=\"character\">characters</termref> of the value of <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Calling the zero-argument version of the function is equivalent to calling\n                <code>fn:string-length(fn:string(.))</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is the empty sequence, the function returns the\n                <code>xs:integer</code> value zero (0).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is not specified and the context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, a <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised: <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/>.</p></div>\n", 
      "summary" : "<p>  Returns the number of  characters  in a\n             string.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:integer", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "string-length", 
      "qname" : "fn:string-length", 
      "signature" : "($arg as xs:string?) as xs:integer external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the number of <termref def=\"character\">characters</termref> in a\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"string-length\" return-type=\"xs:integer\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"string-length\" return-type=\"xs:integer\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns an <code>xs:integer</code> equal to the length in <termref def=\"character\">characters</termref> of the value of <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Calling the zero-argument version of the function is equivalent to calling\n                <code>fn:string-length(fn:string(.))</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is the empty sequence, the function returns the\n                <code>xs:integer</code> value zero (0).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is not specified and the context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>, a <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised: <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"dynamic\"/>.</p></div>\n", 
      "summary" : "<p>  Returns the number of  characters  in a\n             string.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "string-to-codepoints", 
      "qname" : "fn:string-to-codepoints", 
      "signature" : "($arg as xs:string?) as xs:integer* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the sequence of <termref def=\"codepoint\">codepoints</termref> that\n             constitute an <code>xs:string</code> value. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"string-to-codepoints\" return-type=\"xs:integer*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence of integers, each integer being the Unicode <termref def=\"codepoint\">codepoints</termref> of the corresponding <termref def=\"character\">character</termref> in <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is a zero-length string or the empty sequence, the function returns\n             the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:string-to-codepoints(\"Th√©r√®se\")</code> returns <code>(84, 104, 233, 114, 232, 115, 101)</code>.</p></div>\n", 
      "summary" : "<p>  Returns the sequence of  codepoints  that\n             constitute an  xs:string  value.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "string-to-codepoints", 
      "qname" : "fn:string-to-codepoints", 
      "signature" : "($arg as xs:string?) as xs:integer* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the sequence of <termref def=\"codepoint\">codepoints</termref> that\n             constitute an <code>xs:string</code> value. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"string-to-codepoints\" return-type=\"xs:integer*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence of integers, each integer being the Unicode <termref def=\"codepoint\">codepoints</termref> of the corresponding <termref def=\"character\">character</termref> in <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is a zero-length string or the empty sequence, the function returns\n             the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:string-to-codepoints(\"Th√©r√®se\")</code> returns <code>(84, 104, 233, 114, 232, 115, 101)</code>.</p></div>\n", 
      "summary" : "<p>  Returns the sequence of  codepoints  that\n             constitute an  xs:string  value.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "string", 
      "qname" : "fn:string", 
      "signature" : "() as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of <code>$arg</code> represented as an\n             <code>xs:string</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"string\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"string\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In the zero-argument version of the function, <code>$arg</code> defaults to the context\n             item. That is, calling <code>fn:string()</code> is equivalent to calling\n                <code>fn:string(.)</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is a node, the function returns the string-value of the node, as\n             obtained using the <code>dm:string-value</code> accessor defined in <bibref ref=\"xpath-datamodel-30\"/> (see <xspecref spec=\"DM30\" ref=\"dm-string-value\"/>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is an atomic value, the function returns the result of the\n             expression <code>$arg cast as xs:string</code> (see <specref ref=\"casting\"/>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"type\"/> by the\n             zero-argument version of the function if the context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">type</phrase> error is raised <errorref class=\"TY\" code=\"0014\" type=\"type\"/> if\n                <code>$arg</code> is a function item. </p></div>\n", 
      "summary" : "<p>  Returns the value of  $arg  represented as an\n              xs:string .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "string", 
      "qname" : "fn:string", 
      "signature" : "($arg as item()?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of <code>$arg</code> represented as an\n             <code>xs:string</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"string\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"string\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-dependent\">focus-dependent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The one-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In the zero-argument version of the function, <code>$arg</code> defaults to the context\n             item. That is, calling <code>fn:string()</code> is equivalent to calling\n                <code>fn:string(.)</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is a node, the function returns the string-value of the node, as\n             obtained using the <code>dm:string-value</code> accessor defined in <bibref ref=\"xpath-datamodel-30\"/> (see <xspecref spec=\"DM30\" ref=\"dm-string-value\"/>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is an atomic value, the function returns the result of the\n             expression <code>$arg cast as xs:string</code> (see <specref ref=\"casting\"/>).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"M\">dynamic</phrase> error is raised <xerrorref spec=\"XP\" class=\"DY\" code=\"0002\" type=\"type\"/> by the\n             zero-argument version of the function if the context item is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">type</phrase> error is raised <errorref class=\"TY\" code=\"0014\" type=\"type\"/> if\n                <code>$arg</code> is a function item. </p></div>\n", 
      "summary" : "<p>  Returns the value of  $arg  represented as an\n              xs:string .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "subsequence", 
      "qname" : "fn:subsequence", 
      "signature" : "($sourceSeq as item()*, $startingLoc as xs:double) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the contiguous sequence of items in the value of\n                <code>$sourceSeq</code> beginning at the position indicated by the value of\n                <code>$startingLoc</code> and continuing for the number of items indicated by the\n             value of <code>$length</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"subsequence\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"sourceSeq\" type=\"item()*\"/><arg name=\"startingLoc\" type=\"xs:double\"/></proto></example><example role=\"signature\"><proto name=\"subsequence\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"sourceSeq\" type=\"item()*\"/><arg name=\"startingLoc\" type=\"xs:double\"/><arg name=\"length\" type=\"xs:double\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In the two-argument case, returns:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E2\" xml:space=\"preserve\">$sourceSeq[fn:round($startingLoc) le position()]</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In the three-argument case, returns:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E2\" xml:space=\"preserve\">$sourceSeq[fn:round($startingLoc) le position()\n          and position() lt fn:round($startingLoc) + fn:round($length)]</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The first item of a sequence is located at position 1, not position 0.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$sourceSeq</code> is the empty sequence, the empty sequence is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$startingLoc</code> is zero or negative, the subsequence includes items from\n             the beginning of the <code>$sourceSeq</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$length</code> is not specified, the subsequence includes items to the end of\n                <code>$sourceSeq</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$length</code> is greater than the number of items in the value of\n                <code>$sourceSeq</code> following <code>$startingLoc</code>, the subsequence includes\n             items to the end of <code>$sourceSeq</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"F\">As an exception to the previous two notes, if\n                <code>$startingLoc</code> is <code>-INF</code> and <code>$length</code> is\n                <code>+INF</code>, then <code>fn:round($startingLoc) + fn:round($length)</code> is\n                <code>NaN</code>; since <code>position() lt NaN</code> is always false, the result is\n             an empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The reason the function accepts arguments of type <code>xs:double</code> is that many\n             computations on untyped data return an <code>xs:double</code> result; and the reason for\n             the rounding rules is to compensate for any imprecision in these floating-point\n             computations.</p></div>\n", 
      "summary" : "<p>  Returns the contiguous sequence of items in the value of\n                 $sourceSeq  beginning at the position indicated by the value of\n                 $startingLoc  and continuing for the number of items indicated by the\n             value of  $length .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "sourceSeq", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "startingLoc", 
        "type" : "xs:double", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "subsequence", 
      "qname" : "fn:subsequence", 
      "signature" : "($sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the contiguous sequence of items in the value of\n                <code>$sourceSeq</code> beginning at the position indicated by the value of\n                <code>$startingLoc</code> and continuing for the number of items indicated by the\n             value of <code>$length</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"subsequence\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"sourceSeq\" type=\"item()*\"/><arg name=\"startingLoc\" type=\"xs:double\"/></proto></example><example role=\"signature\"><proto name=\"subsequence\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"sourceSeq\" type=\"item()*\"/><arg name=\"startingLoc\" type=\"xs:double\"/><arg name=\"length\" type=\"xs:double\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In the two-argument case, returns:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E2\" xml:space=\"preserve\">$sourceSeq[fn:round($startingLoc) le position()]</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In the three-argument case, returns:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"A-E2\" xml:space=\"preserve\">$sourceSeq[fn:round($startingLoc) le position()\n          and position() lt fn:round($startingLoc) + fn:round($length)]</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The first item of a sequence is located at position 1, not position 0.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$sourceSeq</code> is the empty sequence, the empty sequence is returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$startingLoc</code> is zero or negative, the subsequence includes items from\n             the beginning of the <code>$sourceSeq</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$length</code> is not specified, the subsequence includes items to the end of\n                <code>$sourceSeq</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If <code>$length</code> is greater than the number of items in the value of\n                <code>$sourceSeq</code> following <code>$startingLoc</code>, the subsequence includes\n             items to the end of <code>$sourceSeq</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"F\">As an exception to the previous two notes, if\n                <code>$startingLoc</code> is <code>-INF</code> and <code>$length</code> is\n                <code>+INF</code>, then <code>fn:round($startingLoc) + fn:round($length)</code> is\n                <code>NaN</code>; since <code>position() lt NaN</code> is always false, the result is\n             an empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The reason the function accepts arguments of type <code>xs:double</code> is that many\n             computations on untyped data return an <code>xs:double</code> result; and the reason for\n             the rounding rules is to compensate for any imprecision in these floating-point\n             computations.</p></div>\n", 
      "summary" : "<p>  Returns the contiguous sequence of items in the value of\n                 $sourceSeq  beginning at the position indicated by the value of\n                 $startingLoc  and continuing for the number of items indicated by the\n             value of  $length .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "sourceSeq", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "startingLoc", 
        "type" : "xs:double", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "length", 
        "type" : "xs:double", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "substring-after", 
      "qname" : "fn:substring-after", 
      "signature" : "($arg1 as xs:string?, $arg2 as xs:string?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the part of <code>$arg1</code> that follows the first occurrence of\n                <code>$arg2</code>, taking collations into account.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"substring-after\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"substring-after\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> or <code>$arg2</code> is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg2</code> is the zero-length string, then the function returns\n             the value of <code>$arg1</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> does not contain a string that is equal to the value\n             of <code>$arg2</code>, then the function returns the zero-length string. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the substring of the value of <code>$arg1</code> that follows in\n             the value of <code>$arg1</code> the first occurrence of a sequence of collation units\n             that provides a <term>minimal match</term> to the collation units of <code>$arg2</code>\n             according to the collation that is used. </p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p><term>Minimal match</term> is defined in <bibref ref=\"Unicode-Collations\"/>. </p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"CH\" code=\"0004\"/> if the\n             specified collation does not support collation units.</p></div>\n", 
      "summary" : "<p>  Returns the part of  $arg1  that follows the first occurrence of\n                 $arg2 , taking collations into account.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "substring-after", 
      "qname" : "fn:substring-after", 
      "signature" : "($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the part of <code>$arg1</code> that follows the first occurrence of\n                <code>$arg2</code>, taking collations into account.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"substring-after\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"substring-after\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> or <code>$arg2</code> is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg2</code> is the zero-length string, then the function returns\n             the value of <code>$arg1</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> does not contain a string that is equal to the value\n             of <code>$arg2</code>, then the function returns the zero-length string. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the substring of the value of <code>$arg1</code> that follows in\n             the value of <code>$arg1</code> the first occurrence of a sequence of collation units\n             that provides a <term>minimal match</term> to the collation units of <code>$arg2</code>\n             according to the collation that is used. </p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p><term>Minimal match</term> is defined in <bibref ref=\"Unicode-Collations\"/>. </p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"CH\" code=\"0004\"/> if the\n             specified collation does not support collation units.</p></div>\n", 
      "summary" : "<p>  Returns the part of  $arg1  that follows the first occurrence of\n                 $arg2 , taking collations into account.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "collation", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "substring-before", 
      "qname" : "fn:substring-before", 
      "signature" : "($arg1 as xs:string?, $arg2 as xs:string?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the part of <code>$arg1</code> that precedes the first occurrence of\n                <code>$arg2</code>, taking collations into account.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"substring-before\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"substring-before\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If the value of <code>$arg1</code> or <code>$arg2</code> is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg2</code> is the zero-length string, then the function returns\n             the zero-length string. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> does not contain a string that is equal to the value\n             of <code>$arg2</code>, then the function returns the zero-length string. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the substring of the value of <code>$arg1</code> that precedes in\n             the value of <code>$arg1</code> the first occurrence of a sequence of collation units\n             that provides a <term>minimal match</term> to the collation units of <code>$arg2</code>\n             according to the collation that is used.</p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p><term>Minimal match</term> is defined in <bibref ref=\"Unicode-Collations\"/>. </p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"CH\" code=\"0004\"/> if the\n             specified collation does not support collation units.</p></div>\n", 
      "summary" : "<p>  Returns the part of  $arg1  that precedes the first occurrence of\n                 $arg2 , taking collations into account.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "substring-before", 
      "qname" : "fn:substring-before", 
      "signature" : "($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the part of <code>$arg1</code> that precedes the first occurrence of\n                <code>$arg2</code>, taking collations into account.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"substring-before\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"substring-before\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg1\" type=\"xs:string?\"/><arg name=\"arg2\" type=\"xs:string?\"/><arg name=\"collation\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The three-argument form of this function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tcollations, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If the value of <code>$arg1</code> or <code>$arg2</code> is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg2</code> is the zero-length string, then the function returns\n             the zero-length string. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg1</code> does not contain a string that is equal to the value\n             of <code>$arg2</code>, then the function returns the zero-length string. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The collation used by this function is determined according to the rules in <specref ref=\"choosing-a-collation\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the substring of the value of <code>$arg1</code> that precedes in\n             the value of <code>$arg1</code> the first occurrence of a sequence of collation units\n             that provides a <term>minimal match</term> to the collation units of <code>$arg2</code>\n             according to the collation that is used.</p><note xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><p><term>Minimal match</term> is defined in <bibref ref=\"Unicode-Collations\"/>. </p></note><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class=\"CH\" code=\"0004\"/> if the\n             specified collation does not support collation units.</p></div>\n", 
      "summary" : "<p>  Returns the part of  $arg1  that precedes the first occurrence of\n                 $arg2 , taking collations into account.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg1", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "arg2", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "collation", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "substring", 
      "qname" : "fn:substring", 
      "signature" : "($sourceString as xs:string?, $start as xs:double) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the portion of the value of <code>$sourceString</code> beginning at the\n             position indicated by the value of <code>$start</code> and continuing for the number of\n                <termref def=\"character\">characters</termref> indicated by the value of\n                <code>$length</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"substring\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"sourceString\" type=\"xs:string?\"/><arg name=\"start\" type=\"xs:double\"/></proto></example><example role=\"signature\"><proto name=\"substring\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"sourceString\" type=\"xs:string?\"/><arg name=\"start\" type=\"xs:double\"/><arg name=\"length\" type=\"xs:double\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$sourceString</code> is the empty sequence, the function returns\n             the zero-length string. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns a string comprising those <termref def=\"character\">characters</termref> of <code>$sourceString</code> whose index position (counting\n             from one) is greater than or equal to the value of <code>$start</code> (rounded to an\n             integer), and (if <code>$length</code> is specified) less than the sum of\n                <code>$start</code> and <code>$length</code> (both rounded to integers).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The characters returned do not extend beyond <code>$sourceString</code>. If\n                <code>$start</code> is zero or negative, only those characters in positions greater\n             than zero are returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">More specifically, the three argument version of the function returns the characters in\n                <code>$sourceString</code> whose position <code>$p</code> satisfies:</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">\n             <code>fn:round($start) &lt;= $p &lt; fn:round($start) + fn:round($length)</code>\n          </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two argument version of the function assumes that <code>$length</code> is infinite\n             and thus returns the <termref def=\"character\">characters</termref> in\n                <code>$sourceString</code> whose position <code>$p</code> satisfies:</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">\n             <code>fn:round($start) &lt;= $p</code>\n          </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In the above computations, the rules for <code>op:numeric-less-than</code> and\n                <code>op:numeric-greater-than</code> apply.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The first character of a string is located at position 1, not position 0.</p></div>\n", 
      "summary" : "<p>  Returns the portion of the value of  $sourceString  beginning at the\n             position indicated by the value of  $start  and continuing for the number of\n                 characters  indicated by the value of\n                 $length .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "sourceString", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "start", 
        "type" : "xs:double", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "substring", 
      "qname" : "fn:substring", 
      "signature" : "($sourceString as xs:string?, $start as xs:double, $length as xs:double) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the portion of the value of <code>$sourceString</code> beginning at the\n             position indicated by the value of <code>$start</code> and continuing for the number of\n                <termref def=\"character\">characters</termref> indicated by the value of\n                <code>$length</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"substring\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"sourceString\" type=\"xs:string?\"/><arg name=\"start\" type=\"xs:double\"/></proto></example><example role=\"signature\"><proto name=\"substring\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"sourceString\" type=\"xs:string?\"/><arg name=\"start\" type=\"xs:double\"/><arg name=\"length\" type=\"xs:double\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$sourceString</code> is the empty sequence, the function returns\n             the zero-length string. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns a string comprising those <termref def=\"character\">characters</termref> of <code>$sourceString</code> whose index position (counting\n             from one) is greater than or equal to the value of <code>$start</code> (rounded to an\n             integer), and (if <code>$length</code> is specified) less than the sum of\n                <code>$start</code> and <code>$length</code> (both rounded to integers).</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The characters returned do not extend beyond <code>$sourceString</code>. If\n                <code>$start</code> is zero or negative, only those characters in positions greater\n             than zero are returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">More specifically, the three argument version of the function returns the characters in\n                <code>$sourceString</code> whose position <code>$p</code> satisfies:</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">\n             <code>fn:round($start) &lt;= $p &lt; fn:round($start) + fn:round($length)</code>\n          </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The two argument version of the function assumes that <code>$length</code> is infinite\n             and thus returns the <termref def=\"character\">characters</termref> in\n                <code>$sourceString</code> whose position <code>$p</code> satisfies:</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">\n             <code>fn:round($start) &lt;= $p</code>\n          </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In the above computations, the rules for <code>op:numeric-less-than</code> and\n                <code>op:numeric-greater-than</code> apply.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The first character of a string is located at position 1, not position 0.</p></div>\n", 
      "summary" : "<p>  Returns the portion of the value of  $sourceString  beginning at the\n             position indicated by the value of  $start  and continuing for the number of\n                 characters  indicated by the value of\n                 $length .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "sourceString", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "start", 
        "type" : "xs:double", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "length", 
        "type" : "xs:double", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "sum", 
      "qname" : "fn:sum", 
      "signature" : "($arg as xs:anyAtomicType*) as xs:anyAtomicType external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a value obtained by adding together the values in\n             <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"sum\" return-type=\"xs:anyAtomicType\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/></proto></example><example role=\"signature\"><proto name=\"sum\" return-type=\"xs:anyAtomicType?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/><arg name=\"zero\" type=\"xs:anyAtomicType?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Any values of type <code>xs:untypedAtomic</code> in <code>$arg</code> are cast to\n                <code>xs:double</code>. The items in the resulting sequence may be reordered in an\n             arbitrary order. The resulting sequence is referred to below as the converted\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence is empty, then the single-argument form of the function\n             returns the <code>xs:integer</code> value <code>0</code>; the two-argument form returns\n             the value of the argument <code>$zero</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence contains the value <code>NaN</code>, <code>NaN</code> is\n             returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">All items in <code>$arg</code> must be numeric or derived from a single base type. In\n             addition, the type must support addition. Duration values must either all be\n                <code>xs:yearMonthDuration</code> values or must all be\n                <code>xs:dayTimeDuration</code> values. For numeric values, the numeric promotion\n             rules defined in <specref ref=\"op.numeric\"/> are used to promote all values to a single\n             common type. The sum of a sequence of integers will therefore be an integer, while the\n             sum of a numeric sequence that includes at least one <code>xs:double</code> will be an\n                <code>xs:double</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the function, using the second signature, is the result of the\n             expression:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n if (fn:count($c) eq 0) then\n     $zero\n else if (fn:count($c) eq 1) then\n     $c[1]\n else\n     $c[1] + fn:sum(subsequence($c, 2))</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">where <code>$c</code> is the converted sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the function, using the first signature, is the result of the expression:\n                <code>fn:sum($arg, 0)</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A type error is raised <errorref class=\"RG\" code=\"0006\"/> if the input sequence contains\n             items of incompatible types, as described above.</p></div>\n", 
      "summary" : "<p>  Returns a value obtained by adding together the values in\n              $arg .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyAtomicType", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "sum", 
      "qname" : "fn:sum", 
      "signature" : "($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) as xs:anyAtomicType? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a value obtained by adding together the values in\n             <code>$arg</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"sum\" return-type=\"xs:anyAtomicType\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/></proto></example><example role=\"signature\"><proto name=\"sum\" return-type=\"xs:anyAtomicType?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:anyAtomicType*\"/><arg name=\"zero\" type=\"xs:anyAtomicType?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Any values of type <code>xs:untypedAtomic</code> in <code>$arg</code> are cast to\n                <code>xs:double</code>. The items in the resulting sequence may be reordered in an\n             arbitrary order. The resulting sequence is referred to below as the converted\n             sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence is empty, then the single-argument form of the function\n             returns the <code>xs:integer</code> value <code>0</code>; the two-argument form returns\n             the value of the argument <code>$zero</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the converted sequence contains the value <code>NaN</code>, <code>NaN</code> is\n             returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">All items in <code>$arg</code> must be numeric or derived from a single base type. In\n             addition, the type must support addition. Duration values must either all be\n                <code>xs:yearMonthDuration</code> values or must all be\n                <code>xs:dayTimeDuration</code> values. For numeric values, the numeric promotion\n             rules defined in <specref ref=\"op.numeric\"/> are used to promote all values to a single\n             common type. The sum of a sequence of integers will therefore be an integer, while the\n             sum of a numeric sequence that includes at least one <code>xs:double</code> will be an\n                <code>xs:double</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the function, using the second signature, is the result of the\n             expression:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\">\n if (fn:count($c) eq 0) then\n     $zero\n else if (fn:count($c) eq 1) then\n     $c[1]\n else\n     $c[1] + fn:sum(subsequence($c, 2))</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">where <code>$c</code> is the converted sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the function, using the first signature, is the result of the expression:\n                <code>fn:sum($arg, 0)</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A type error is raised <errorref class=\"RG\" code=\"0006\"/> if the input sequence contains\n             items of incompatible types, as described above.</p></div>\n", 
      "summary" : "<p>  Returns a value obtained by adding together the values in\n              $arg .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "zero", 
        "type" : "xs:anyAtomicType", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyAtomicType?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "tail", 
      "qname" : "fn:tail", 
      "signature" : "($arg as item()*) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns all but the first item in a sequence. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"tail\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the value of the expression <code>subsequence($arg, 2)</code></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, or a sequence containing a single item, then\n             the empty sequence is returned. </p></div>\n", 
      "summary" : "<p>  Returns all but the first item in a sequence.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "timezone-from-date", 
      "qname" : "fn:timezone-from-date", 
      "signature" : "($arg as xs:date?) as xs:dayTimeDuration? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the timezone component of an <code>xs:date</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"timezone-from-date\" return-type=\"xs:dayTimeDuration?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:date?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the timezone component of <code>$arg</code>, if any. If\n                <code>$arg</code> has a timezone component, then the result is an\n                <code>xs:dayTimeDuration</code> that indicates deviation from UTC; its value may\n             range from +14:00 to -14:00 hours, both inclusive. If <code>$arg</code> has no timezone\n             component, the result is the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:timezone-from-date(xs:date(\"1999-05-31-05:00\"))</code> returns <code>xs:dayTimeDuration(\"-PT5H\")</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:timezone-from-date(xs:date(\"2000-06-12Z\"))</code> returns <code>xs:dayTimeDuration(\"PT0S\")</code>.</p></div>\n", 
      "summary" : "<p>  Returns the timezone component of an  xs:date .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:date", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:dayTimeDuration?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "timezone-from-dateTime", 
      "qname" : "fn:timezone-from-dateTime", 
      "signature" : "($arg as xs:dateTime?) as xs:dayTimeDuration? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the timezone component of an <code>xs:dateTime</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"timezone-from-dateTime\" return-type=\"xs:dayTimeDuration?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:dateTime?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the timezone component of <code>$arg</code>, if any. If\n                <code>$arg</code> has a timezone component, then the result is an\n                <code>xs:dayTimeDuration</code> that indicates deviation from UTC; its value may\n             range from +14:00 to -14:00 hours, both inclusive. If <code>$arg</code> has no timezone\n             component, the result is the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:timezone-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))</code> returns <code>xs:dayTimeDuration(\"-PT5H\")</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:timezone-from-dateTime(xs:dateTime(\"2000-06-12T13:20:00Z\"))</code> returns <code>xs:dayTimeDuration(\"PT0S\")</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:timezone-from-dateTime(xs:dateTime(\"2004-08-27T00:00:00\"))</code> returns <code>()</code>.</p></div>\n", 
      "summary" : "<p>  Returns the timezone component of an  xs:dateTime .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:dateTime", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:dayTimeDuration?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "timezone-from-time", 
      "qname" : "fn:timezone-from-time", 
      "signature" : "($arg as xs:time?) as xs:dayTimeDuration? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the timezone component of an <code>xs:time</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"timezone-from-time\" return-type=\"xs:dayTimeDuration?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:time?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the timezone component of <code>$arg</code>, if any. If\n                <code>$arg</code> has a timezone component, then the result is an\n                <code>xs:dayTimeDuration</code> that indicates deviation from UTC; its value may\n             range from +14:00 to -14:00 hours, both inclusive. If <code>$arg</code> has no timezone\n             component, the result is the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:timezone-from-time(xs:time(\"13:20:00-05:00\"))</code> returns <code>xs:dayTimeDuration(\"-PT5H\")</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:timezone-from-time(xs:time(\"13:20:00\"))</code> returns <code>()</code>.</p></div>\n", 
      "summary" : "<p>  Returns the timezone component of an  xs:time .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:time", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:dayTimeDuration?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "tokenize", 
      "qname" : "fn:tokenize", 
      "signature" : "($input as xs:string?, $pattern as xs:string) as xs:string* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a sequence of strings constructed by splitting the input wherever a\n             separator is found; the separator is any substring that matches a given regular\n             expression.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"tokenize\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"tokenize\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/><arg name=\"flags\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of calling the first version of this function (omitting the argument\n                <code>$flags</code>) is the same as the effect of calling the second version with the\n                <code>$flags</code> argument set to a zero-length string. Flags are defined in\n                <specref ref=\"flags\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$flags</code> argument is interpreted in the same way as for the\n                <code>fn:matches</code> function.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$input</code> is the empty sequence, or if <code>$input</code> is the\n             zero-length string, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence of strings formed by breaking the <code>$input</code>\n             string into a sequence of strings, treating any substring that matches\n                <code>$pattern</code> as a separator. The separators themselves are not returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If a separator occurs at the start of the <code>$input</code> string, the result\n             sequence will start with a zero-length string. Zero-length strings will also occur in\n             the result sequence if a separator occurs at the end of the <code>$input</code> string,\n             or if two adjacent substrings match the supplied <code>$pattern</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If two alternatives within the supplied <code>$pattern</code> both match at the same\n             position in the <code>$input</code> string, then the match that is chosen is the first.\n             For example:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:tokenize(\"abracadabra\", \"(ab)|(a)\") returns (\"\", \"r\", \"c\", \"d\", \"r\", \"\")</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0002\"/> if the value of\n                <code>$pattern</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0001\"/> if the value of\n                <code>$flags</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0003\"/> if the supplied\n                <code>$pattern</code> matches a zero-length string, that is, if <code>fn:matches(\"\",\n                $pattern, $flags)</code> returns <code>true</code>. </p></div>\n", 
      "summary" : "<p>  Returns a sequence of strings constructed by splitting the input wherever a\n             separator is found; the separator is any substring that matches a given regular\n             expression.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "input", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "pattern", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "tokenize", 
      "qname" : "fn:tokenize", 
      "signature" : "($input as xs:string?, $pattern as xs:string, $flags as xs:string) as xs:string* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a sequence of strings constructed by splitting the input wherever a\n             separator is found; the separator is any substring that matches a given regular\n             expression.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"tokenize\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/></proto></example><example role=\"signature\"><proto name=\"tokenize\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"input\" type=\"xs:string?\"/><arg name=\"pattern\" type=\"xs:string\"/><arg name=\"flags\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The effect of calling the first version of this function (omitting the argument\n                <code>$flags</code>) is the same as the effect of calling the second version with the\n                <code>$flags</code> argument set to a zero-length string. Flags are defined in\n                <specref ref=\"flags\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$flags</code> argument is interpreted in the same way as for the\n                <code>fn:matches</code> function.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$input</code> is the empty sequence, or if <code>$input</code> is the\n             zero-length string, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns a sequence of strings formed by breaking the <code>$input</code>\n             string into a sequence of strings, treating any substring that matches\n                <code>$pattern</code> as a separator. The separators themselves are not returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If a separator occurs at the start of the <code>$input</code> string, the result\n             sequence will start with a zero-length string. Zero-length strings will also occur in\n             the result sequence if a separator occurs at the end of the <code>$input</code> string,\n             or if two adjacent substrings match the supplied <code>$pattern</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> If two alternatives within the supplied <code>$pattern</code> both match at the same\n             position in the <code>$input</code> string, then the match that is chosen is the first.\n             For example:</p><eg xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" xml:space=\"preserve\"> fn:tokenize(\"abracadabra\", \"(ab)|(a)\") returns (\"\", \"r\", \"c\", \"d\", \"r\", \"\")</eg><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0002\"/> if the value of\n                <code>$pattern</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0001\"/> if the value of\n                <code>$flags</code> is invalid according to the rules described in section <specref ref=\"regex-syntax\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RX\" code=\"0003\"/> if the supplied\n                <code>$pattern</code> matches a zero-length string, that is, if <code>fn:matches(\"\",\n                $pattern, $flags)</code> returns <code>true</code>. </p></div>\n", 
      "summary" : "<p>  Returns a sequence of strings constructed by splitting the input wherever a\n             separator is found; the separator is any substring that matches a given regular\n             expression.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "input", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "pattern", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "flags", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "trace", 
      "qname" : "fn:trace", 
      "signature" : "($value as item()*, $label as xs:string) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Provides an execution trace intended to be used in debugging queries.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"trace\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"value\" type=\"item()*\"/><arg name=\"label\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the value of <code>$value</code>, unchanged.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In addition, the values of <code>$value</code>, converted to an <code>xs:string</code>,\n             and <code>$label</code>\n             <rfc2119>may</rfc2119> be directed to a trace data set. The destination of the trace\n             output is <termref def=\"implementation-defined\"/>. The format of the trace output is\n                <termref def=\"implementation-dependent\"/>. The ordering of output from calls of the\n                <code>fn:trace</code> function is <termref def=\"implementation-dependent\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Consider a situation in which a user wants to investigate the actual value passed to\n                a function. Assume that in a particular execution, <code>$v</code> is an\n                   <code>xs:decimal</code> with value <code>124.84</code>. Writing <code>fn:trace($v,\n                   'the value of $v is:')</code> will put the strings <code>\"124.84\"</code> and\n                   <code>\"the value of $v is:\"</code> in the trace data set in implementation\n                dependent order.</p></div>\n", 
      "summary" : "<p>  Provides an execution trace intended to be used in debugging queries.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "value", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      }, {
        "name" : "label", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 3, 
      "name" : "translate", 
      "qname" : "fn:translate", 
      "signature" : "($arg as xs:string?, $mapString as xs:string, $transString as xs:string) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the value of <code>$arg</code> modified by replacing or removing\n             individual characters. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"translate\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/><arg name=\"mapString\" type=\"xs:string\"/><arg name=\"transString\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is the empty sequence, the function returns the\n             zero-length string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns a result string constructed by processing each <termref def=\"character\">character</termref> in the value of <code>$arg</code>, in order,\n             according to the following rules:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>If the character does not appear in the value of <code>$mapString</code> then it\n                   is added to the result string unchanged.</p></item><item><p>If the character first appears in the value of <code>$mapString</code> at some\n                   position <emph>M</emph>, where the value of <code>$transString</code> is\n                      <emph>M</emph> or more characters in length, then the character at position\n                      <emph>M</emph> in <code>$transString</code> is added to the result string.</p></item><item><p>If the character first appears in the value of <code>$mapString</code> at some\n                   position <emph>M</emph>, where the value of <code>$transString</code> is less than\n                      <emph>M</emph> characters in length, then the character is omitted from the\n                   result string.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$mapString</code> is the zero-length string then the function returns\n                <code>$arg</code> unchanged.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If a character occurs more than once in <code>$mapString</code>, then the first\n             occurrence determines the action taken.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$transString</code> is longer than <code>$mapString</code>, the excess\n             characters are ignored.</p></div>\n", 
      "summary" : "<p>  Returns the value of  $arg  modified by replacing or removing\n             individual characters.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "mapString", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      }, {
        "name" : "transString", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "true", 
      "qname" : "fn:true", 
      "signature" : "() as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the <code>xs:boolean</code> value <code>true</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"true\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result is equivalent to <code>xs:boolean(\"1\")</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:true()</code> returns <code>xs:boolean(1)</code>.</p></div>\n", 
      "summary" : "<p>  Returns the  xs:boolean  value  true .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "unordered", 
      "qname" : "fn:unordered", 
      "signature" : "($sourceSeq as item()*) as item()* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the items of <code>$sourceSeq</code> in an <termref def=\"implementation-dependent\"/> order.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unordered\" return-type=\"item()*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"sourceSeq\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The function returns the items of <code>$sourceSeq</code> in an <termref def=\"implementation-dependent\"/> order.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Query optimizers may be able to do a better job if the order of the output sequence is\n             not specified. For example, when retrieving prices from a purchase order, if an index\n             exists on prices, it may be more efficient to return the prices in index order rather\n             than in document order.</p></div>\n", 
      "summary" : "<p>  Returns the items of  $sourceSeq  in an    order.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "sourceSeq", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "unparsed-text-available", 
      "qname" : "fn:unparsed-text-available", 
      "signature" : "($href as xs:string?) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Because errors in evaluating the <function>fn:unparsed-text</function> function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unparsed-text-available\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"unparsed-text-available\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/><arg name=\"encoding\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <function>fn:unparsed-text-available</function> function determines whether a call\n             on the <function>fn:unparsed-text</function> function with identical arguments would\n             return a string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the first argument is an empty sequence, the function returns false. <phrase diff=\"del\" at=\"L\">If the second\n             argument is an empty sequence, the function behaves as if the second argument were\n             omitted.</phrase></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In other cases, the function returns true if a call on\n                <function>fn:unparsed-text</function> with the same arguments would succeed, and\n             false if a call on <function>fn:unparsed-text</function> with the same arguments would\n             fail with a non-recoverable dynamic error.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The functions <function>fn:unparsed-text</function> and\n                <function>fn:unparsed-text-available</function> have the same requirement for\n                <termref def=\"deterministic\">determinism</termref> as the functions\n                <code>fn:doc</code> and <code>fn:doc-available</code>. This means that unless the\n             user has explicitly stated a requirement for a reduced level of determinism, either of\n             these functions if called twice with the same arguments during the course of a\n             transformation <rfc2119>must</rfc2119> return the same results each time; moreover, the\n             results of a call on <function>fn:unparsed-text-available</function>\n             <rfc2119>must</rfc2119> be consistent with the results of a subsequent call on\n                <function>unparsed-text</function> with the same arguments.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This requires that the <function>unparsed-text-available</function> function should\n             actually attempt to read the resource identified by the URI, and check that it is\n             correctly encoded and contains no characters that are invalid in XML. Implementations\n             may avoid the cost of repeating these checks for example by caching the validated\n             contents of the resource, to anticipate a subsequent call on the\n                <function>unparsed-text</function>\n             <phrase diff=\"add\" at=\"A\">or <function>unparsed-text-lines</function>\n             </phrase> function. Alternatively, implementations may be able to rewrite an expression\n             such as <code>if (unparsed-text-available(A)) then unparsed-text(A) else ...</code> to\n             generate a single call internally.</p></div>\n", 
      "summary" : "<p>  Because errors in evaluating the  fn:unparsed-text  function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "unparsed-text-available", 
      "qname" : "fn:unparsed-text-available", 
      "signature" : "($href as xs:string?) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Because errors in evaluating the <function>fn:unparsed-text</function> function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unparsed-text-available\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"unparsed-text-available\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/><arg name=\"encoding\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <function>fn:unparsed-text-available</function> function determines whether a call\n             on the <function>fn:unparsed-text</function> function with identical arguments would\n             return a string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the first argument is an empty sequence, the function returns false. <phrase diff=\"del\" at=\"L\">If the second\n             argument is an empty sequence, the function behaves as if the second argument were\n             omitted.</phrase></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In other cases, the function returns true if a call on\n                <function>fn:unparsed-text</function> with the same arguments would succeed, and\n             false if a call on <function>fn:unparsed-text</function> with the same arguments would\n             fail with a non-recoverable dynamic error.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The functions <function>fn:unparsed-text</function> and\n                <function>fn:unparsed-text-available</function> have the same requirement for\n                <termref def=\"deterministic\">determinism</termref> as the functions\n                <code>fn:doc</code> and <code>fn:doc-available</code>. This means that unless the\n             user has explicitly stated a requirement for a reduced level of determinism, either of\n             these functions if called twice with the same arguments during the course of a\n             transformation <rfc2119>must</rfc2119> return the same results each time; moreover, the\n             results of a call on <function>fn:unparsed-text-available</function>\n             <rfc2119>must</rfc2119> be consistent with the results of a subsequent call on\n                <function>unparsed-text</function> with the same arguments.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This requires that the <function>unparsed-text-available</function> function should\n             actually attempt to read the resource identified by the URI, and check that it is\n             correctly encoded and contains no characters that are invalid in XML. Implementations\n             may avoid the cost of repeating these checks for example by caching the validated\n             contents of the resource, to anticipate a subsequent call on the\n                <function>unparsed-text</function>\n             <phrase diff=\"add\" at=\"A\">or <function>unparsed-text-lines</function>\n             </phrase> function. Alternatively, implementations may be able to rewrite an expression\n             such as <code>if (unparsed-text-available(A)) then unparsed-text(A) else ...</code> to\n             generate a single call internally.</p></div>\n", 
      "summary" : "<p>  Because errors in evaluating the  fn:unparsed-text  function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "unparsed-text-available", 
      "qname" : "fn:unparsed-text-available", 
      "signature" : "($href as xs:string?, $encoding as xs:string) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Because errors in evaluating the <function>fn:unparsed-text</function> function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unparsed-text-available\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"unparsed-text-available\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/><arg name=\"encoding\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <function>fn:unparsed-text-available</function> function determines whether a call\n             on the <function>fn:unparsed-text</function> function with identical arguments would\n             return a string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the first argument is an empty sequence, the function returns false. <phrase diff=\"del\" at=\"L\">If the second\n             argument is an empty sequence, the function behaves as if the second argument were\n             omitted.</phrase></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In other cases, the function returns true if a call on\n                <function>fn:unparsed-text</function> with the same arguments would succeed, and\n             false if a call on <function>fn:unparsed-text</function> with the same arguments would\n             fail with a non-recoverable dynamic error.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The functions <function>fn:unparsed-text</function> and\n                <function>fn:unparsed-text-available</function> have the same requirement for\n                <termref def=\"deterministic\">determinism</termref> as the functions\n                <code>fn:doc</code> and <code>fn:doc-available</code>. This means that unless the\n             user has explicitly stated a requirement for a reduced level of determinism, either of\n             these functions if called twice with the same arguments during the course of a\n             transformation <rfc2119>must</rfc2119> return the same results each time; moreover, the\n             results of a call on <function>fn:unparsed-text-available</function>\n             <rfc2119>must</rfc2119> be consistent with the results of a subsequent call on\n                <function>unparsed-text</function> with the same arguments.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This requires that the <function>unparsed-text-available</function> function should\n             actually attempt to read the resource identified by the URI, and check that it is\n             correctly encoded and contains no characters that are invalid in XML. Implementations\n             may avoid the cost of repeating these checks for example by caching the validated\n             contents of the resource, to anticipate a subsequent call on the\n                <function>unparsed-text</function>\n             <phrase diff=\"add\" at=\"A\">or <function>unparsed-text-lines</function>\n             </phrase> function. Alternatively, implementations may be able to rewrite an expression\n             such as <code>if (unparsed-text-available(A)) then unparsed-text(A) else ...</code> to\n             generate a single call internally.</p></div>\n", 
      "summary" : "<p>  Because errors in evaluating the  fn:unparsed-text  function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "encoding", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "unparsed-text-available", 
      "qname" : "fn:unparsed-text-available", 
      "signature" : "($href as xs:string?, $encoding as xs:string) as xs:boolean external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Because errors in evaluating the <function>fn:unparsed-text</function> function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unparsed-text-available\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"unparsed-text-available\" return-type=\"xs:boolean\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/><arg name=\"encoding\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <function>fn:unparsed-text-available</function> function determines whether a call\n             on the <function>fn:unparsed-text</function> function with identical arguments would\n             return a string.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the first argument is an empty sequence, the function returns false. <phrase diff=\"del\" at=\"L\">If the second\n             argument is an empty sequence, the function behaves as if the second argument were\n             omitted.</phrase></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In other cases, the function returns true if a call on\n                <function>fn:unparsed-text</function> with the same arguments would succeed, and\n             false if a call on <function>fn:unparsed-text</function> with the same arguments would\n             fail with a non-recoverable dynamic error.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The functions <function>fn:unparsed-text</function> and\n                <function>fn:unparsed-text-available</function> have the same requirement for\n                <termref def=\"deterministic\">determinism</termref> as the functions\n                <code>fn:doc</code> and <code>fn:doc-available</code>. This means that unless the\n             user has explicitly stated a requirement for a reduced level of determinism, either of\n             these functions if called twice with the same arguments during the course of a\n             transformation <rfc2119>must</rfc2119> return the same results each time; moreover, the\n             results of a call on <function>fn:unparsed-text-available</function>\n             <rfc2119>must</rfc2119> be consistent with the results of a subsequent call on\n                <function>unparsed-text</function> with the same arguments.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This requires that the <function>unparsed-text-available</function> function should\n             actually attempt to read the resource identified by the URI, and check that it is\n             correctly encoded and contains no characters that are invalid in XML. Implementations\n             may avoid the cost of repeating these checks for example by caching the validated\n             contents of the resource, to anticipate a subsequent call on the\n                <function>unparsed-text</function>\n             <phrase diff=\"add\" at=\"A\">or <function>unparsed-text-lines</function>\n             </phrase> function. Alternatively, implementations may be able to rewrite an expression\n             such as <code>if (unparsed-text-available(A)) then unparsed-text(A) else ...</code> to\n             generate a single call internally.</p></div>\n", 
      "summary" : "<p>  Because errors in evaluating the  fn:unparsed-text  function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "encoding", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:boolean", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "unparsed-text-lines", 
      "qname" : "fn:unparsed-text-lines", 
      "signature" : "($href as xs:string?) as xs:string* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>fn:unparsed-text-lines</code> function reads an external resource (for\n             example, a file) and returns its contents as a sequence of strings, one for each line of\n             text in the  <phrase diff=\"chg\" at=\"L\">string representation</phrase> of the resource.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unparsed-text-lines\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"unparsed-text-lines\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/><arg name=\"encoding\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>unparsed-text-lines</code> function reads an external resource (for example, a\n             file) and returns its <phrase diff=\"chg\" at=\"L\">string representation</phrase> as a sequence of strings, separated at newline\n             boundaries. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the single-argument function is the same as the result of the expression\n                <code>fn:tokenize(fn:unparsed-text($href), '\\r\\n|\\r|\\n')[not(position()=last() and\n                .='')]</code>. The result of the two-argument function is the same as the result of\n             the expression <code>fn:tokenize(fn:unparsed-text($href, $encoding),\n                '\\r\\n|\\r|\\n'))[not(position()=last() and .='')]</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result is a thus a sequence of strings containing the text of the resource retrieved\n             using the URI, each string representing one line of text. Lines are separated by one of\n             the sequences x0A, x0D, or x0Dx0A. The characters representing the newline are not\n             included in the returned strings. If there are two adjacent newline sequences, a\n             zero-length string will be returned to represent the empty line; but if the external\n             resource ends with a newline sequence, no zero-length string will be returned as the\n             last item in the result.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Error conditions are the same as for the <code>fn:unparsed-text</code> function.</p></div>\n", 
      "summary" : "<p>  The  fn:unparsed-text-lines  function reads an external resource (for\n             example, a file) and returns its contents as a sequence of strings, one for each line of\n             text in the   string representation  of the resource.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "unparsed-text-lines", 
      "qname" : "fn:unparsed-text-lines", 
      "signature" : "($href as xs:string?, $encoding as xs:string) as xs:string* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>fn:unparsed-text-lines</code> function reads an external resource (for\n             example, a file) and returns its contents as a sequence of strings, one for each line of\n             text in the  <phrase diff=\"chg\" at=\"L\">string representation</phrase> of the resource.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unparsed-text-lines\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"unparsed-text-lines\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/><arg name=\"encoding\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>unparsed-text-lines</code> function reads an external resource (for example, a\n             file) and returns its <phrase diff=\"chg\" at=\"L\">string representation</phrase> as a sequence of strings, separated at newline\n             boundaries. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the single-argument function is the same as the result of the expression\n                <code>fn:tokenize(fn:unparsed-text($href), '\\r\\n|\\r|\\n')[not(position()=last() and\n                .='')]</code>. The result of the two-argument function is the same as the result of\n             the expression <code>fn:tokenize(fn:unparsed-text($href, $encoding),\n                '\\r\\n|\\r|\\n'))[not(position()=last() and .='')]</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result is a thus a sequence of strings containing the text of the resource retrieved\n             using the URI, each string representing one line of text. Lines are separated by one of\n             the sequences x0A, x0D, or x0Dx0A. The characters representing the newline are not\n             included in the returned strings. If there are two adjacent newline sequences, a\n             zero-length string will be returned to represent the empty line; but if the external\n             resource ends with a newline sequence, no zero-length string will be returned as the\n             last item in the result.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Error conditions are the same as for the <code>fn:unparsed-text</code> function.</p></div>\n", 
      "summary" : "<p>  The  fn:unparsed-text-lines  function reads an external resource (for\n             example, a file) and returns its contents as a sequence of strings, one for each line of\n             text in the   string representation  of the resource.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "encoding", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "unparsed-text-lines", 
      "qname" : "fn:unparsed-text-lines", 
      "signature" : "($href as xs:string?, $encoding as xs:string) as xs:string* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>fn:unparsed-text-lines</code> function reads an external resource (for\n             example, a file) and returns its contents as a sequence of strings, one for each line of\n             text in the  <phrase diff=\"chg\" at=\"L\">string representation</phrase> of the resource.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unparsed-text-lines\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"unparsed-text-lines\" return-type=\"xs:string*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/><arg name=\"encoding\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>unparsed-text-lines</code> function reads an external resource (for example, a\n             file) and returns its <phrase diff=\"chg\" at=\"L\">string representation</phrase> as a sequence of strings, separated at newline\n             boundaries. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the single-argument function is the same as the result of the expression\n                <code>fn:tokenize(fn:unparsed-text($href), '\\r\\n|\\r|\\n')[not(position()=last() and\n                .='')]</code>. The result of the two-argument function is the same as the result of\n             the expression <code>fn:tokenize(fn:unparsed-text($href, $encoding),\n                '\\r\\n|\\r|\\n'))[not(position()=last() and .='')]</code>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result is a thus a sequence of strings containing the text of the resource retrieved\n             using the URI, each string representing one line of text. Lines are separated by one of\n             the sequences x0A, x0D, or x0Dx0A. The characters representing the newline are not\n             included in the returned strings. If there are two adjacent newline sequences, a\n             zero-length string will be returned to represent the empty line; but if the external\n             resource ends with a newline sequence, no zero-length string will be returned as the\n             last item in the result.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Error conditions are the same as for the <code>fn:unparsed-text</code> function.</p></div>\n", 
      "summary" : "<p>  The  fn:unparsed-text-lines  function reads an external resource (for\n             example, a file) and returns its contents as a sequence of strings, one for each line of\n             text in the   string representation  of the resource.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "encoding", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "unparsed-text", 
      "qname" : "fn:unparsed-text", 
      "signature" : "($href as xs:string?) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>fn:unparsed-text</code> function reads an external resource (for example, a\n             file) and returns <phrase diff=\"chg\" at=\"L\">a string representation of the resource</phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unparsed-text\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"unparsed-text\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/><arg name=\"encoding\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$href</code> argument <rfc2119>must</rfc2119> be a string in the form of a URI\n             reference, which <rfc2119>must</rfc2119> contain no fragment identifier, and\n                <rfc2119>must</rfc2119> identify a resource\n             <phrase diff=\"chg\" at=\"L\">for which a string representation is available</phrase>. If the URI is a\n             relative URI reference, then it is resolved relative to the\n             <phrase diff=\"chg\" at=\"L\">Static Base URI property from the static context</phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">The mapping of URIs to the string representation of a resource is the mapping defined\n             in the <xtermref spec=\"XP30\" ref=\"dt-available-text-resources\">available text resources</xtermref>\n          component of the dynamic context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of the <code>$href</code> argument is an empty sequence, the function\n             returns an empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$encoding</code> argument, if present, is the name of an encoding. The values\n             for this attribute follow the same rules as for the <code>encoding</code> attribute in\n             an XML declaration. The only values which every <termref def=\"implementation\">implementation</termref> is <rfc2119>required</rfc2119> to recognize are\n                <code>utf-8</code> and <code>utf-16</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The encoding of the external resource is determined as follows:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>external encoding information is used if available, otherwise</p></item><item><p>if the media type of the resource is <code>text/xml</code> or\n                      <code>application/xml</code> (see <bibref ref=\"rfc2376\"/>), or if it matches\n                   the conventions <code>text/*+xml</code> or <code>application/*+xml</code> (see\n                      <bibref ref=\"rfc3023\"/> and/or its successors), then the encoding is recognized\n                   as specified in <bibref ref=\"REC-xml\"/>, otherwise</p></item><item><p>the value of the <code>$encoding</code> argument is used if present, otherwise</p></item><item><p>the processor <rfc2119>may</rfc2119> use <termref def=\"implementation-defined\">implementation-defined</termref> heuristics to determine the likely encoding,\n                   otherwise</p></item><item><p>UTF-8 is assumed.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the function is a string containing the\n             <phrase diff=\"chg\" at=\"L\">string representation</phrase> of the resource retrieved\n             using the URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1170\"/> if <code>$href</code>\n             contains a fragment identifier, or if it cannot be used to retrieve the\n             <phrase diff=\"chg\" at=\"L\">string representation</phrase> of a resource.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1190\"/> <phrase diff=\"add\" at=\"L\">if the value\n             of the <code>$encoding</code> argument is not a valid encoding name, </phrase>if the <termref def=\"dt-processor\">processor</termref> does not support the specified encoding,\n             if the <phrase diff=\"chg\" at=\"L\">string representation</phrase> of the retrieved\n             resource contains octets that cannot be decoded into Unicode <termref def=\"character\">characters</termref> using the specified encoding, or if the resulting characters\n             are not permitted XML characters.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1200\"/> if\n                <code>$encoding</code> is absent and the <termref def=\"dt-processor\">processor</termref> cannot infer the encoding using external information and the\n             encoding is not UTF-8.</p></div>\n", 
      "summary" : "<p>  The  fn:unparsed-text  function reads an external resource (for example, a\n             file) and returns  a string representation of the resource .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "unparsed-text", 
      "qname" : "fn:unparsed-text", 
      "signature" : "($href as xs:string?) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>fn:unparsed-text</code> function reads an external resource (for example, a\n             file) and returns <phrase diff=\"chg\" at=\"L\">a string representation of the resource</phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unparsed-text\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"unparsed-text\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/><arg name=\"encoding\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$href</code> argument <rfc2119>must</rfc2119> be a string in the form of a URI\n             reference, which <rfc2119>must</rfc2119> contain no fragment identifier, and\n                <rfc2119>must</rfc2119> identify a resource\n             <phrase diff=\"chg\" at=\"L\">for which a string representation is available</phrase>. If the URI is a\n             relative URI reference, then it is resolved relative to the\n             <phrase diff=\"chg\" at=\"L\">Static Base URI property from the static context</phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">The mapping of URIs to the string representation of a resource is the mapping defined\n             in the <xtermref spec=\"XP30\" ref=\"dt-available-text-resources\">available text resources</xtermref>\n          component of the dynamic context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of the <code>$href</code> argument is an empty sequence, the function\n             returns an empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$encoding</code> argument, if present, is the name of an encoding. The values\n             for this attribute follow the same rules as for the <code>encoding</code> attribute in\n             an XML declaration. The only values which every <termref def=\"implementation\">implementation</termref> is <rfc2119>required</rfc2119> to recognize are\n                <code>utf-8</code> and <code>utf-16</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The encoding of the external resource is determined as follows:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>external encoding information is used if available, otherwise</p></item><item><p>if the media type of the resource is <code>text/xml</code> or\n                      <code>application/xml</code> (see <bibref ref=\"rfc2376\"/>), or if it matches\n                   the conventions <code>text/*+xml</code> or <code>application/*+xml</code> (see\n                      <bibref ref=\"rfc3023\"/> and/or its successors), then the encoding is recognized\n                   as specified in <bibref ref=\"REC-xml\"/>, otherwise</p></item><item><p>the value of the <code>$encoding</code> argument is used if present, otherwise</p></item><item><p>the processor <rfc2119>may</rfc2119> use <termref def=\"implementation-defined\">implementation-defined</termref> heuristics to determine the likely encoding,\n                   otherwise</p></item><item><p>UTF-8 is assumed.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the function is a string containing the\n             <phrase diff=\"chg\" at=\"L\">string representation</phrase> of the resource retrieved\n             using the URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1170\"/> if <code>$href</code>\n             contains a fragment identifier, or if it cannot be used to retrieve the\n             <phrase diff=\"chg\" at=\"L\">string representation</phrase> of a resource.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1190\"/> <phrase diff=\"add\" at=\"L\">if the value\n             of the <code>$encoding</code> argument is not a valid encoding name, </phrase>if the <termref def=\"dt-processor\">processor</termref> does not support the specified encoding,\n             if the <phrase diff=\"chg\" at=\"L\">string representation</phrase> of the retrieved\n             resource contains octets that cannot be decoded into Unicode <termref def=\"character\">characters</termref> using the specified encoding, or if the resulting characters\n             are not permitted XML characters.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1200\"/> if\n                <code>$encoding</code> is absent and the <termref def=\"dt-processor\">processor</termref> cannot infer the encoding using external information and the\n             encoding is not UTF-8.</p></div>\n", 
      "summary" : "<p>  The  fn:unparsed-text  function reads an external resource (for example, a\n             file) and returns  a string representation of the resource .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "unparsed-text", 
      "qname" : "fn:unparsed-text", 
      "signature" : "($href as xs:string?, $encoding as xs:string) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>fn:unparsed-text</code> function reads an external resource (for example, a\n             file) and returns <phrase diff=\"chg\" at=\"L\">a string representation of the resource</phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unparsed-text\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"unparsed-text\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/><arg name=\"encoding\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$href</code> argument <rfc2119>must</rfc2119> be a string in the form of a URI\n             reference, which <rfc2119>must</rfc2119> contain no fragment identifier, and\n                <rfc2119>must</rfc2119> identify a resource\n             <phrase diff=\"chg\" at=\"L\">for which a string representation is available</phrase>. If the URI is a\n             relative URI reference, then it is resolved relative to the\n             <phrase diff=\"chg\" at=\"L\">Static Base URI property from the static context</phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">The mapping of URIs to the string representation of a resource is the mapping defined\n             in the <xtermref spec=\"XP30\" ref=\"dt-available-text-resources\">available text resources</xtermref>\n          component of the dynamic context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of the <code>$href</code> argument is an empty sequence, the function\n             returns an empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$encoding</code> argument, if present, is the name of an encoding. The values\n             for this attribute follow the same rules as for the <code>encoding</code> attribute in\n             an XML declaration. The only values which every <termref def=\"implementation\">implementation</termref> is <rfc2119>required</rfc2119> to recognize are\n                <code>utf-8</code> and <code>utf-16</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The encoding of the external resource is determined as follows:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>external encoding information is used if available, otherwise</p></item><item><p>if the media type of the resource is <code>text/xml</code> or\n                      <code>application/xml</code> (see <bibref ref=\"rfc2376\"/>), or if it matches\n                   the conventions <code>text/*+xml</code> or <code>application/*+xml</code> (see\n                      <bibref ref=\"rfc3023\"/> and/or its successors), then the encoding is recognized\n                   as specified in <bibref ref=\"REC-xml\"/>, otherwise</p></item><item><p>the value of the <code>$encoding</code> argument is used if present, otherwise</p></item><item><p>the processor <rfc2119>may</rfc2119> use <termref def=\"implementation-defined\">implementation-defined</termref> heuristics to determine the likely encoding,\n                   otherwise</p></item><item><p>UTF-8 is assumed.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the function is a string containing the\n             <phrase diff=\"chg\" at=\"L\">string representation</phrase> of the resource retrieved\n             using the URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1170\"/> if <code>$href</code>\n             contains a fragment identifier, or if it cannot be used to retrieve the\n             <phrase diff=\"chg\" at=\"L\">string representation</phrase> of a resource.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1190\"/> <phrase diff=\"add\" at=\"L\">if the value\n             of the <code>$encoding</code> argument is not a valid encoding name, </phrase>if the <termref def=\"dt-processor\">processor</termref> does not support the specified encoding,\n             if the <phrase diff=\"chg\" at=\"L\">string representation</phrase> of the retrieved\n             resource contains octets that cannot be decoded into Unicode <termref def=\"character\">characters</termref> using the specified encoding, or if the resulting characters\n             are not permitted XML characters.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1200\"/> if\n                <code>$encoding</code> is absent and the <termref def=\"dt-processor\">processor</termref> cannot infer the encoding using external information and the\n             encoding is not UTF-8.</p></div>\n", 
      "summary" : "<p>  The  fn:unparsed-text  function reads an external resource (for example, a\n             file) and returns  a string representation of the resource .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "encoding", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 2, 
      "name" : "unparsed-text", 
      "qname" : "fn:unparsed-text", 
      "signature" : "($href as xs:string?, $encoding as xs:string) as xs:string? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>fn:unparsed-text</code> function reads an external resource (for example, a\n             file) and returns <phrase diff=\"chg\" at=\"L\">a string representation of the resource</phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"unparsed-text\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/></proto></example><example role=\"signature\"><proto name=\"unparsed-text\" return-type=\"xs:string?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"href\" type=\"xs:string?\"/><arg name=\"encoding\" type=\"xs:string\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tstatic base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$href</code> argument <rfc2119>must</rfc2119> be a string in the form of a URI\n             reference, which <rfc2119>must</rfc2119> contain no fragment identifier, and\n                <rfc2119>must</rfc2119> identify a resource\n             <phrase diff=\"chg\" at=\"L\">for which a string representation is available</phrase>. If the URI is a\n             relative URI reference, then it is resolved relative to the\n             <phrase diff=\"chg\" at=\"L\">Static Base URI property from the static context</phrase>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"add\" at=\"L\">The mapping of URIs to the string representation of a resource is the mapping defined\n             in the <xtermref spec=\"XP30\" ref=\"dt-available-text-resources\">available text resources</xtermref>\n          component of the dynamic context.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of the <code>$href</code> argument is an empty sequence, the function\n             returns an empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The <code>$encoding</code> argument, if present, is the name of an encoding. The values\n             for this attribute follow the same rules as for the <code>encoding</code> attribute in\n             an XML declaration. The only values which every <termref def=\"implementation\">implementation</termref> is <rfc2119>required</rfc2119> to recognize are\n                <code>utf-8</code> and <code>utf-16</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The encoding of the external resource is determined as follows:</p><olist xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><item><p>external encoding information is used if available, otherwise</p></item><item><p>if the media type of the resource is <code>text/xml</code> or\n                      <code>application/xml</code> (see <bibref ref=\"rfc2376\"/>), or if it matches\n                   the conventions <code>text/*+xml</code> or <code>application/*+xml</code> (see\n                      <bibref ref=\"rfc3023\"/> and/or its successors), then the encoding is recognized\n                   as specified in <bibref ref=\"REC-xml\"/>, otherwise</p></item><item><p>the value of the <code>$encoding</code> argument is used if present, otherwise</p></item><item><p>the processor <rfc2119>may</rfc2119> use <termref def=\"implementation-defined\">implementation-defined</termref> heuristics to determine the likely encoding,\n                   otherwise</p></item><item><p>UTF-8 is assumed.</p></item></olist><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The result of the function is a string containing the\n             <phrase diff=\"chg\" at=\"L\">string representation</phrase> of the resource retrieved\n             using the URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1170\"/> if <code>$href</code>\n             contains a fragment identifier, or if it cannot be used to retrieve the\n             <phrase diff=\"chg\" at=\"L\">string representation</phrase> of a resource.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1190\"/> <phrase diff=\"add\" at=\"L\">if the value\n             of the <code>$encoding</code> argument is not a valid encoding name, </phrase>if the <termref def=\"dt-processor\">processor</termref> does not support the specified encoding,\n             if the <phrase diff=\"chg\" at=\"L\">string representation</phrase> of the retrieved\n             resource contains octets that cannot be decoded into Unicode <termref def=\"character\">characters</termref> using the specified encoding, or if the resulting characters\n             are not permitted XML characters.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"UT\" code=\"1200\"/> if\n                <code>$encoding</code> is absent and the <termref def=\"dt-processor\">processor</termref> cannot infer the encoding using external information and the\n             encoding is not UTF-8.</p></div>\n", 
      "summary" : "<p>  The  fn:unparsed-text  function reads an external resource (for example, a\n             file) and returns  a string representation of the resource .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "href", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      }, {
        "name" : "encoding", 
        "type" : "xs:string", 
        "occurrence" : null, 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "upper-case", 
      "qname" : "fn:upper-case", 
      "signature" : "($arg as xs:string?) as xs:string external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Converts a string to upper case.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"upper-case\" return-type=\"xs:string\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is the empty sequence, the zero-length string is\n             returned.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns the value of <code>$arg</code> after translating every\n                <termref def=\"character\">character</termref> to its upper-case correspondent as\n             defined in the appropriate case mappings section in the Unicode standard <bibref ref=\"Unicode\"/>. For versions of Unicode beginning with the 2.1.8 update, only\n             locale-insensitive case mappings should be applied. Beginning with version 3.2.0 (and\n             likely future versions) of Unicode, precise mappings are described in default case\n             operations, which are full case mappings in the absence of tailoring for particular\n             languages and environments. Every lower-case character that does not have an upper-case\n             correspondent, as well as every upper-case character, is included in the returned value\n             in its original form. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Case mappings may change the length of a string. In general, the\n                <code>fn:upper-case</code> and <code>fn:lower-case</code> functions are not inverses\n             of each other: <code>fn:lower-case(fn:upper-case($arg))</code> is not guaranteed to\n             return <code>$arg</code>, nor is <code>fn:upper-case(fn:lower-case($arg))</code>. The\n             Latin small letter dotless i (as used in Turkish) is perhaps the most prominent\n             lower-case letter which will not round-trip. The Latin capital letter i with dot above\n             is the most prominent upper-case letter which will not round trip; there are others,\n             such as Latin capital letter Sharp S (#1E9E) which is introduced in Unicode 5.1.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> These functions may not always be linguistically appropriate (e.g. Turkish i without\n             dot) or appropriate for the application (e.g. titlecase). In cases such as Turkish, a\n             simple translation should be used first.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> Because the function is not sensitive to locale, results will not always match user\n             expectations. In Quebec, for example, the standard uppercase equivalent of \"√®\" is \"√à\",\n             while in metropolitan France it is more commonly \"E\"; only one of these is supported by\n             the functions as defined.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"> Many characters of class Ll lack uppercase equivalents in the Unicode case mapping\n             tables; many characters of class Lu lack lowercase equivalents.</p></div>\n", 
      "summary" : "<p>  Converts a string to upper case.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "uri-collection", 
      "qname" : "fn:uri-collection", 
      "signature" : "() as xs:anyURI* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a sequence of <code>xs:anyURI</code> values representing the URIs in a resource collection.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"uri-collection\" return-type=\"xs:anyURI*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"uri-collection\" return-type=\"xs:anyURI*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tavailable resource collections, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of the function returns the URIs in the <term>Default resource collection</term>\n             described in <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is a relative <code>xs:anyURI</code>, it is resolved\n             against the value of the base-URI property from the static context. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The single-argument form of the function returns the sequence of URIs corresponding to the\n             supplied URI in the <term>Available resource collections</term> described in\n             <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/> if no URI is supplied (that is, if the\n             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the\n             value of the default resource collection is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"J\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/>\n             if <term>available resource collections</term> provides no mapping for the absolutized URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0004\"/> if <code>$arg</code> is not a\n             valid <code>xs:anyURI</code>.</p></div>\n", 
      "summary" : "<p>  Returns a sequence of  xs:anyURI  values representing the URIs in a resource collection.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:anyURI*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 0, 
      "name" : "uri-collection", 
      "qname" : "fn:uri-collection", 
      "signature" : "() as xs:anyURI* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a sequence of <code>xs:anyURI</code> values representing the URIs in a resource collection.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"uri-collection\" return-type=\"xs:anyURI*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"uri-collection\" return-type=\"xs:anyURI*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tavailable resource collections, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of the function returns the URIs in the <term>Default resource collection</term>\n             described in <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is a relative <code>xs:anyURI</code>, it is resolved\n             against the value of the base-URI property from the static context. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The single-argument form of the function returns the sequence of URIs corresponding to the\n             supplied URI in the <term>Available resource collections</term> described in\n             <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/> if no URI is supplied (that is, if the\n             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the\n             value of the default resource collection is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"J\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/>\n             if <term>available resource collections</term> provides no mapping for the absolutized URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0004\"/> if <code>$arg</code> is not a\n             valid <code>xs:anyURI</code>.</p></div>\n", 
      "summary" : "<p>  Returns a sequence of  xs:anyURI  values representing the URIs in a resource collection.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [  ], 
      "returns" : {
        "type" : "xs:anyURI*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "uri-collection", 
      "qname" : "fn:uri-collection", 
      "signature" : "($arg as xs:string?) as xs:anyURI* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a sequence of <code>xs:anyURI</code> values representing the URIs in a resource collection.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"uri-collection\" return-type=\"xs:anyURI*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"uri-collection\" return-type=\"xs:anyURI*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tavailable resource collections, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of the function returns the URIs in the <term>Default resource collection</term>\n             described in <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is a relative <code>xs:anyURI</code>, it is resolved\n             against the value of the base-URI property from the static context. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The single-argument form of the function returns the sequence of URIs corresponding to the\n             supplied URI in the <term>Available resource collections</term> described in\n             <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/> if no URI is supplied (that is, if the\n             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the\n             value of the default resource collection is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"J\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/>\n             if <term>available resource collections</term> provides no mapping for the absolutized URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0004\"/> if <code>$arg</code> is not a\n             valid <code>xs:anyURI</code>.</p></div>\n", 
      "summary" : "<p>  Returns a sequence of  xs:anyURI  values representing the URIs in a resource collection.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyURI*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "uri-collection", 
      "qname" : "fn:uri-collection", 
      "signature" : "($arg as xs:string?) as xs:anyURI* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns a sequence of <code>xs:anyURI</code> values representing the URIs in a resource collection.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"uri-collection\" return-type=\"xs:anyURI*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"/></example><example role=\"signature\"><proto name=\"uri-collection\" return-type=\"xs:anyURI*\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:string?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-dependent\">context-dependent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>.  It depends on\n \t\tavailable resource collections, and static base uri.\n \t</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The zero-argument form of the function returns the URIs in the <term>Default resource collection</term>\n             described in <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If the value of <code>$arg</code> is a relative <code>xs:anyURI</code>, it is resolved\n             against the value of the base-URI property from the static context. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The single-argument form of the function returns the sequence of URIs corresponding to the\n             supplied URI in the <term>Available resource collections</term> described in\n             <xspecref spec=\"XP30\" ref=\"id-xp-evaluation-context-components\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/> if no URI is supplied (that is, if the\n             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the\n             value of the default resource collection is <xtermref ref=\"dt-absent\" spec=\"DM30\">absent</xtermref>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"J\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0002\"/>\n             if <term>available resource collections</term> provides no mapping for the absolutized URI.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"DC\" code=\"0004\"/> if <code>$arg</code> is not a\n             valid <code>xs:anyURI</code>.</p></div>\n", 
      "summary" : "<p>  Returns a sequence of  xs:anyURI  values representing the URIs in a resource collection.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:anyURI*", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "year-from-date", 
      "qname" : "fn:year-from-date", 
      "signature" : "($arg as xs:date?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the year component of an <code>xs:date</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"year-from-date\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:date?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:integer</code> representing the year in the\n             local value of <code>$arg</code>. The value may be negative. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:year-from-date(xs:date(\"1999-05-31\"))</code> returns <code>1999</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:year-from-date(xs:date(\"2000-01-01+05:00\"))</code> returns <code>2000</code>.</p></div>\n", 
      "summary" : "<p>  Returns the year component of an  xs:date .</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:date", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "years-from-duration", 
      "qname" : "fn:years-from-duration", 
      "signature" : "($arg as xs:duration?) as xs:integer? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the number of years in a duration.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"years-from-duration\" return-type=\"xs:integer?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:duration?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Otherwise, the function returns an <code>xs:integer</code> representing the years\n             component in the value of <code>$arg</code>. The result is obtained by casting\n                <code>$arg</code> to an <code>xs:yearMonthDuration</code> (see <specref ref=\"casting-to-durations\"/>) and then computing the years component as described in\n                <specref ref=\"canonical-yearMonthDuration\"/>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is a negative duration then the result will be negative..</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is an <code>xs:dayTimeDuration</code> the function returns 0.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:years-from-duration(xs:yearMonthDuration(\"P20Y15M\"))</code> returns <code>21</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:years-from-duration(xs:yearMonthDuration(\"-P15M\"))</code> returns <code>-1</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The expression <code>fn:years-from-duration(xs:dayTimeDuration(\"-P2DT15H\"))</code> returns <code>0</code>.</p></div>\n", 
      "summary" : "<p>  Returns the number of years in a duration.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "xs:duration", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:integer?", 
        "description" : ""
      }, 
      "errors" : [  ]
    }, {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "zero-or-one", 
      "qname" : "fn:zero-or-one", 
      "signature" : "($arg as item()*) as item()? external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns <code>$arg</code> if it contains zero or one items. Otherwise, raises\n             an error.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"zero-or-one\" return-type=\"item()?\" isOp=\"no\" prefix=\"fn\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"item()*\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Except in error cases, the function returns <code>$arg</code> unchanged.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"del\" at=\"F\">For detailed type semantics, see [Formal Semantics].</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">A <phrase diff=\"add\" at=\"L\">dynamic</phrase> error is raised <errorref class=\"RG\" code=\"0003\"/> if <code>$arg</code> contains more\n             than one item.</p></div>\n", 
      "summary" : "<p>  Returns  $arg  if it contains zero or one items.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "arg", 
        "type" : "item()", 
        "occurrence" : "*", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "item()?", 
        "description" : ""
      }, 
      "errors" : [  ]
    } ], 
    "variables" : [  ]
  },
  "http://basex.org/modules/util" :{
    "ns" : "http://basex.org/modules/util", 
    "description" : " This XQuery Module contains various utility and helper functions. \n", 
    "sees" : [  ], 
    "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">BaseX</xqdoc:author>" ], 
    "version" : null, 
    "encoding" : "utf-8", 
    "namespaces" : [  ], 
    "functions" : [ {
      "isDocumented" : true, 
      "arity" : 1, 
      "name" : "chars", 
      "qname" : "util:chars", 
      "signature" : "($string as xs:string?) as xs:string* external", 
      "description" : " <div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">Returns the arc cosine of the argument, the result being in the range zero to\n                +<var>œÄ</var> radians.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\"><example role=\"signature\"><proto name=\"acos\" return-type=\"xs:double?\" isOp=\"no\" prefix=\"math\" returnEmptyOk=\"no\" returnSeq=\"no\" returnVaries=\"no\" isSchema=\"no\" isDatatype=\"no\" isSpecial=\"no\"><arg name=\"arg\" type=\"xs:double?\"/></proto></example></p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">This function is <termref def=\"dt-deterministic\">deterministic</termref>, <termref def=\"dt-context-independent\">context-independent</termref>,  and <termref def=\"dt-focus-independent\">focus-independent</termref>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is the empty sequence, the function returns the empty sequence.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\" diff=\"chg\" at=\"G\">Otherwise the result is the arc cosine of <code>$</code><var>Œ∏</var>,\n             treated as an angle in radians, as defined in the <bibref ref=\"ieee754-2008\"/>\n             specification of the <code>acos</code> function applied to 64-bit binary floating point\n             values.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">The treatment of the <code>invalidOperation</code> exception is defined in <specref ref=\"op.numeric\"/>. </p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">If <code>$arg</code> is <code>NaN</code>, or if its absolute value is greater than one,\n             then the result is <code>NaN</code>.</p><p xmlns:e=\"http://www.w3.org/1999/XSL/Spec/ElementSyntax\">In other cases the result is an <code>xs:double</code> value representing an angle\n                <var>Œ∏</var> in radians in the range <code>0 &lt;= $</code><var>Œ∏</var><code> &lt;=\n                +</code><var>œÄ</var>. </p></div>\n", 
      "summary" : "<p>  string chars\n.</p>", 
      "annotation_str" : "", 
      "annotations" : [  ], 
      "updating" : false, 
      "parameters" : [ {
        "name" : "string", 
        "type" : "xs:string", 
        "occurrence" : "?", 
        "description" : ""
      } ], 
      "returns" : {
        "type" : "xs:string*", 
        "description" : ""
      }, 
      "errors" : [  ]
    } ], 
    "variables" : [  ]
  }
}