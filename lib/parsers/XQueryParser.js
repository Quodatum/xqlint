// This file was generated on Mon Jan 17, 2022 17:44 (UTC) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "XQueryParser.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 262:                       // 'xquery'
      lookahead2W(180);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'transform' | 'treat' | 'union' | 'update' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 63750                 // 'xquery' 'encoding'
     || lk == 129286)               // 'xquery' 'version'
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 175:                       // 'module'
      lookahead2W(179);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 90799:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(262);                   // 'xquery'
    lookahead1W(109);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 124:                       // 'encoding'
      consume(124);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      break;
    default:
      consume(252);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      lookahead1W(101);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 124)                // 'encoding'
      {
        consume(124);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
    }
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_QueryBody();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(131);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(175);                   // 'module'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(173);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(233);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(183);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'construction' |
                                    // 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'option' | 'or' | 'ordering' | 'revalidation' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'variable' | '|' | '||'
        break;
      case 150:                     // 'import'
        lookahead2W(181);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 44651               // 'declare' 'base-uri'
       && lk != 45675               // 'declare' 'boundary-space'
       && lk != 50283               // 'declare' 'construction'
       && lk != 52843               // 'declare' 'copy-namespaces'
       && lk != 53867               // 'declare' 'decimal-format'
       && lk != 55403               // 'declare' 'default'
       && lk != 70763               // 'declare' 'ft-option'
       && lk != 89750               // 'import' 'module'
       && lk != 90731               // 'declare' 'namespace'
       && lk != 99435               // 'declare' 'ordering'
       && lk != 108139              // 'declare' 'revalidation'
       && lk != 109718)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(166);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55403)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 90731:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 150:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 70763:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(233);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(182);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16491               // 'declare' '%'
       && lk != 51819               // 'declare' 'context'
       && lk != 72811               // 'declare' 'function'
       && lk != 97387               // 'declare' 'option'
       && lk != 128619)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(155);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51819:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 97387:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(52);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 107:                       // 'declare'
      lookahead2W(161);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55403)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 45675:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 44651:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50283:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 99435:                     // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 108139:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 52843:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(36);                // S^WS | '(:' | 'boundary-space'
    consume(89);                    // 'boundary-space'
    lookahead1W(126);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(230);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consume(96);                    // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consumeT(96);                   // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'base-uri'
    consume(87);                    // 'base-uri'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(98);                    // 'construction'
    lookahead1W(126);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 230:                       // 'strip'
      consume(230);                 // 'strip'
      break;
    default:
      consume(204);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(62);                // S^WS | '(:' | 'ordering'
    consume(194);                   // 'ordering'
    lookahead1W(124);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    default:
      consume(244);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consume(192);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    lookahead1W(114);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consume(144);                 // 'greatest'
      break;
    default:
      consume(166);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consumeT(192);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
    lookahead1W(114);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consumeT(144);                // 'greatest'
      break;
    default:
      consumeT(166);                // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(103);                   // 'copy-namespaces'
    lookahead1W(121);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(116);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(183);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 153:                       // 'inherit'
      consume(153);                 // 'inherit'
      break;
    default:
      consume(182);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(107);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 105:                       // 'decimal-format'
      consume(105);                 // 'decimal-format'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(105);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(171);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'exponent-separator' | 'grouping-separator' | 'infinity' | 'minus-sign' |
                                    // 'pattern-separator' | 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 52)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 106:                       // 'decimal-separator'
      consume(106);                 // 'decimal-separator'
      break;
    case 146:                       // 'grouping-separator'
      consume(146);                 // 'grouping-separator'
      break;
    case 152:                       // 'infinity'
      consume(152);                 // 'infinity'
      break;
    case 172:                       // 'minus-sign'
      consume(172);                 // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      consume(68);                  // 'NaN'
      break;
    case 200:                       // 'percent'
      consume(200);                 // 'percent'
      break;
    case 199:                       // 'per-mille'
      consume(199);                 // 'per-mille'
      break;
    case 263:                       // 'zero-digit'
      consume(263);                 // 'zero-digit'
      break;
    case 115:                       // 'digit'
      consume(115);                 // 'digit'
      break;
    case 198:                       // 'pattern-separator'
      consume(198);                 // 'pattern-separator'
      break;
    default:
      consume(131);                 // 'exponent-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 150:                       // 'import'
      lookahead2W(119);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 109718:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(150);                   // 'import'
    lookahead1W(65);                // S^WS | '(:' | 'schema'
    consume(214);                   // 'schema'
    lookahead1W(130);               // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 4)                    // StringLiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(100);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(92);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      lookahead1W(173);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(120);                 // 'element'
      lookahead1W(57);              // S^WS | '(:' | 'namespace'
      consume(177);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(150);                   // 'import'
    lookahead1W(56);                // S^WS | '(:' | 'module'
    consume(175);                   // 'module'
    lookahead1W(82);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 177)                  // 'namespace'
    {
      consume(177);                 // 'namespace'
      lookahead1W(173);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(100);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(92);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(173);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(108);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    default:
      consume(142);                 // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(108);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    default:
      consumeT(142);                // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consumeT(177);                  // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(51);                // S^WS | '(:' | 'ft-option'
    consume(138);                   // 'ft-option'
    lookahead1W(74);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(107);                   // 'declare'
    for (;;)
    {
      lookahead1W(134);             // S^WS | '%' | '(:' | 'function' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 251:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    default:
      whitespace();
      parse_FunctionDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(146);               // S^WS | '%' | '(' | '(:' | 'function' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(144);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(144);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(146);               // S^WS | '%' | '(' | '(:' | 'function' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(144);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(144);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(251);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(138);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(99);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(97);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(101);                   // 'context'
    lookahead1W(54);                // S^WS | '(:' | 'item'
    consume(161);                   // 'item'
    lookahead1W(138);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(99);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(97);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(142);                   // 'function'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(84);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(139);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(112);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      whitespace();
      parse_FunctionBody();
      break;
    default:
      consume(132);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(90);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(90);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(136);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(136);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'option'
    consume(190);                   // 'option'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(162);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(162);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(133);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      parse_ForClause();
      break;
    case 167:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(133);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      try_ForClause();
      break;
    case 167:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      parse_InitialClause();
      break;
    case 255:                       // 'where'
      parse_WhereClause();
      break;
    case 145:                       // 'group'
      parse_GroupByClause();
      break;
    case 104:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      try_InitialClause();
      break;
    case 255:                       // 'where'
      try_WhereClause();
      break;
    case 145:                       // 'group'
      try_GroupByClause();
      break;
    case 104:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(136);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      lookahead1W(164);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      lookahead1W(164);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(156);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(115);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(156);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(115);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(77);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(77);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(85);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(85);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(217);                   // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(217);                  // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(167);                   // 'let'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      lookahead1W(164);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(86);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(167);                  // 'let'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      lookahead1W(164);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(86);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(98);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(98);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(136);                   // 'for'
    lookahead1W(128);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(128);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(240);                   // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(102);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(167);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(240);                  // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(102);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(167);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(223);                   // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(102);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(110);               // S^WS | '(:' | 'end' | 'only'
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(223);                  // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(102);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(110);               // S^WS | '(:' | 'end' | 'only'
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(226);                   // 'start'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(226);                  // 'start'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 189)                  // 'only'
    {
      consume(189);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(125);                   // 'end'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 189)                  // 'only'
    {
      consumeT(189);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(125);                  // 'end'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(143);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consume(205);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(120);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consume(180);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(143);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consumeT(205);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(120);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consumeT(180);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(104);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(104);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(255);                   // 'where'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(255);                  // 'where'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(145);                   // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consume(90);                    // 'by'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(145);                  // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consumeT(90);                   // 'by'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(164);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(164);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42015                 // '$' 'array'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 87583                 // '$' 'map'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(170);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(165);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(170);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consume(51);                // ':='
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
      lookahead1W(165);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consume(96);                // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42015                 // '$' 'array'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 87583                 // '$' 'map'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(170);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(165);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(170);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consumeT(51);               // ':='
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
      lookahead1W(165);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consumeT(96);               // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        try_URILiteral();
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 192:                       // 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
      break;
    default:
      consume(225);                 // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
    }
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
      break;
    default:
      consumeT(225);                // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
    }
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(164);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(164);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    lookahead1W(172);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    lookahead1W(172);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consume(84);                // 'ascending'
        break;
      default:
        consume(112);               // 'descending'
      }
    }
    lookahead1W(168);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consume(122);                 // 'empty'
      lookahead1W(114);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consume(144);               // 'greatest'
        break;
      default:
        consume(166);               // 'least'
      }
    }
    lookahead1W(165);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consume(96);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consumeT(84);               // 'ascending'
        break;
      default:
        consumeT(112);              // 'descending'
      }
    }
    lookahead1W(168);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consumeT(122);                // 'empty'
      lookahead1W(114);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consumeT(144);              // 'greatest'
        break;
      default:
        consumeT(166);              // 'least'
      }
    }
    lookahead1W(165);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consumeT(96);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(210);                   // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(210);                  // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    default:
      consume(128);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    consume(213);                   // 'satisfies'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    default:
      consumeT(128);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    consumeT(213);                  // 'satisfies'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(102);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  function try_QuantifiedVarDecl()
  {
    consumeT(31);                   // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(102);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(231);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      lookahead1W(105);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(231);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      lookahead1W(105);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(91);                  // 'case'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(210);                   // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(91);                 // 'case'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SwitchCaseOperand();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(210);                  // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(242);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      lookahead1W(105);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(85);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(242);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseClause();
      lookahead1W(105);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(85);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(91);                    // 'case'
    lookahead1W(227);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
    }
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(210);                   // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(91);                   // 'case'
    lookahead1W(227);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
    }
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(210);                  // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(127);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(127);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(149);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consume(233);                   // 'then'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(121);                   // 'else'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(149);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consumeT(233);                  // 'then'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(121);                  // 'else'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'catch' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'catch' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(239);                   // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedTryTargetExpr();
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(239);                  // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedTryTargetExpr();
  }

  function parse_EnclosedTryTargetExpr()
  {
    eventHandler.startNonterminal("EnclosedTryTargetExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedTryTargetExpr", e0);
  }

  function try_EnclosedTryTargetExpr()
  {
    try_EnclosedExpr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(94);                    // 'catch'
    lookahead1W(221);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(94);                   // 'catch'
    lookahead1W(221);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_CatchErrorList();
    try_EnclosedExpr();
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(129);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(221);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(129);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(221);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 191:                     // 'or'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(191);          // 'or'
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_AndExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(191);                 // 'or'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 191:                     // 'or'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(191);          // 'or'
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_AndExpr();
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(191);                // 'or'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 80:                      // 'and'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(80);           // 'and'
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ComparisonExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(80);                  // 'and'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 80:                      // 'and'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(80);           // 'and'
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ComparisonExpr();
            memoize(4, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(80);                 // 'and'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    switch (l1)
    {
    case 27:                        // '!='
    case 53:                        // '<'
    case 57:                        // '<<'
    case 58:                        // '<='
    case 60:                        // '='
    case 62:                        // '>'
    case 63:                        // '>='
    case 64:                        // '>>'
    case 127:                       // 'eq'
    case 143:                       // 'ge'
    case 147:                       // 'gt'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 170:                       // 'lt'
    case 179:                       // 'ne'
      lookahead2W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 145                   // 'group'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 167                   // 'let'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 236                   // 'to'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          switch (l1)
          {
          case 127:                 // 'eq'
          case 143:                 // 'ge'
          case 147:                 // 'gt'
          case 165:                 // 'le'
          case 170:                 // 'lt'
          case 179:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 160:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(232);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_FTContainsExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    if (lk == -1)
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    switch (l1)
    {
    case 27:                        // '!='
    case 53:                        // '<'
    case 57:                        // '<<'
    case 58:                        // '<='
    case 60:                        // '='
    case 62:                        // '>'
    case 63:                        // '>='
    case 64:                        // '>>'
    case 127:                       // 'eq'
    case 143:                       // 'ge'
    case 147:                       // 'gt'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 170:                       // 'lt'
    case 179:                       // 'ne'
      lookahead2W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 145                   // 'group'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 167                   // 'let'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 236                   // 'to'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          switch (l1)
          {
          case 127:                 // 'eq'
          case 143:                 // 'ge'
          case 147:                 // 'gt'
          case 165:                 // 'le'
          case 170:                 // 'lt'
          case 179:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 160:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(232);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_FTContainsExpr();
          memoize(5, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    switch (l1)
    {
    case 99:                        // 'contains'
      lookahead2W(69);              // S^WS | '(:' | 'text'
      break;
    default:
      lk = l1;
    }
    if (lk == 118883)               // 'contains' 'text'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(99);             // 'contains'
          lookahead1W(69);          // S^WS | '(:' | 'text'
          consumeT(232);            // 'text'
          lookahead1W(153);         // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
          try_FTSelection();
          if (l1 == 259)            // 'without'
          {
            try_FTIgnoreOption();
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(99);                  // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consume(232);                 // 'text'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 259)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    switch (l1)
    {
    case 99:                        // 'contains'
      lookahead2W(69);              // S^WS | '(:' | 'text'
      break;
    default:
      lk = l1;
    }
    if (lk == 118883)               // 'contains' 'text'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(99);             // 'contains'
          lookahead1W(69);          // S^WS | '(:' | 'text'
          consumeT(232);            // 'text'
          lookahead1W(153);         // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
          try_FTSelection();
          if (l1 == 259)            // 'without'
          {
            try_FTIgnoreOption();
          }
          memoize(6, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(99);                 // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consumeT(232);                // 'text'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 259)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 267:                     // '||'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(267);          // '||'
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_RangeExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(267);                 // '||'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 267:                     // '||'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(267);          // '||'
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_RangeExpr();
            memoize(7, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(7, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(267);                // '||'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    switch (l1)
    {
    case 236:                       // 'to'
      lookahead2W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 53                    // '<'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 127                   // 'eq'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 143                   // 'ge'
     && lk != 145                   // 'group'
     && lk != 147                   // 'gt'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 160                   // 'is'
     && lk != 165                   // 'le'
     && lk != 167                   // 'let'
     && lk != 170                   // 'lt'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 179                   // 'ne'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(236);            // 'to'
          lookahead1W(232);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_AdditiveExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(236);                 // 'to'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    switch (l1)
    {
    case 236:                       // 'to'
      lookahead2W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 53                    // '<'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 127                   // 'eq'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 143                   // 'ge'
     && lk != 145                   // 'group'
     && lk != 147                   // 'gt'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 160                   // 'is'
     && lk != 165                   // 'le'
     && lk != 167                   // 'let'
     && lk != 170                   // 'lt'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 179                   // 'ne'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(236);            // 'to'
          lookahead1W(232);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_AdditiveExpr();
          memoize(8, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(236);                // 'to'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // ','
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_MultiplicativeExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consume(39);                // '+'
        break;
      default:
        consume(41);                // '-'
      }
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // ','
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_MultiplicativeExpr();
            memoize(9, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(9, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consumeT(39);               // '+'
        break;
      default:
        consumeT(41);               // '-'
      }
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 38:                      // '*'
      case 117:                     // 'div'
      case 148:                     // 'idiv'
      case 173:                     // 'mod'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 117:               // 'div'
              consumeT(117);        // 'div'
              break;
            case 148:               // 'idiv'
              consumeT(148);        // 'idiv'
              break;
            default:
              consumeT(173);        // 'mod'
            }
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_UnionExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 117:                     // 'div'
        consume(117);               // 'div'
        break;
      case 148:                     // 'idiv'
        consume(148);               // 'idiv'
        break;
      default:
        consume(173);               // 'mod'
      }
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 38:                      // '*'
      case 117:                     // 'div'
      case 148:                     // 'idiv'
      case 173:                     // 'mod'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 117:               // 'div'
              consumeT(117);        // 'div'
              break;
            case 148:               // 'idiv'
              consumeT(148);        // 'idiv'
              break;
            default:
              consumeT(173);        // 'mod'
            }
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_UnionExpr();
            memoize(10, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(10, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 117:                     // 'div'
        consumeT(117);              // 'div'
        break;
      case 148:                     // 'idiv'
        consumeT(148);              // 'idiv'
        break;
      default:
        consumeT(173);              // 'mod'
      }
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 243:                     // 'union'
      case 266:                     // '|'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 243:               // 'union'
              consumeT(243);        // 'union'
              break;
            default:
              consumeT(266);        // '|'
            }
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_IntersectExceptExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consume(243);               // 'union'
        break;
      default:
        consume(266);               // '|'
      }
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 243:                     // 'union'
      case 266:                     // '|'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 243:               // 'union'
              consumeT(243);        // 'union'
              break;
            default:
              consumeT(266);        // '|'
            }
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_IntersectExceptExpr();
            memoize(11, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(11, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consumeT(243);              // 'union'
        break;
      default:
        consumeT(266);              // '|'
      }
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(184);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 130:                     // 'except'
      case 157:                     // 'intersect'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 157:               // 'intersect'
              consumeT(157);        // 'intersect'
              break;
            default:
              consumeT(130);        // 'except'
            }
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_InstanceofExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consume(157);               // 'intersect'
        break;
      default:
        consume(130);               // 'except'
      }
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(184);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 130:                     // 'except'
      case 157:                     // 'intersect'
        lookahead2W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 157:               // 'intersect'
              consumeT(157);        // 'intersect'
              break;
            default:
              consumeT(130);        // 'except'
            }
            lookahead1W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_InstanceofExpr();
            memoize(12, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(12, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consumeT(157);              // 'intersect'
        break;
      default:
        consumeT(130);              // 'except'
      }
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(184);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 156:                       // 'instance'
      lookahead2W(59);              // S^WS | '(:' | 'of'
      break;
    default:
      lk = l1;
    }
    if (lk == 96412)                // 'instance' 'of'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(156);            // 'instance'
          lookahead1W(59);          // S^WS | '(:' | 'of'
          consumeT(188);            // 'of'
          lookahead1W(224);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(13, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(156);                 // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(184);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 156:                       // 'instance'
      lookahead2W(59);              // S^WS | '(:' | 'of'
      break;
    default:
      lk = l1;
    }
    if (lk == 96412)                // 'instance' 'of'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(156);            // 'instance'
          lookahead1W(59);          // S^WS | '(:' | 'of'
          consumeT(188);            // 'of'
          lookahead1W(224);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          memoize(13, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(13, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(156);                // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(184);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 238:                       // 'treat'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42734)                // 'treat' 'as'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(238);            // 'treat'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(224);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(14, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(238);                 // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(184);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 238:                       // 'treat'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42734)                // 'treat' 'as'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(238);            // 'treat'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(224);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          memoize(14, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(14, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(238);                // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(184);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42589)                // 'castable' 'as'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(93);             // 'castable'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(219);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(15, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(93);                  // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(184);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42589)                // 'castable' 'as'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(93);             // 'castable'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(219);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          memoize(15, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(15, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(93);                 // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_TransformWithExpr();
    lookahead1W(184);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42588)                // 'cast' 'as'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(92);             // 'cast'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(219);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(16, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(92);                  // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_TransformWithExpr();
    lookahead1W(184);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42588)                // 'cast' 'as'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(92);             // 'cast'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(219);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          memoize(16, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(16, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(92);                 // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_TransformWithExpr()
  {
    eventHandler.startNonterminal("TransformWithExpr", e0);
    parse_BasexUpdate1Expr();
    lookahead1W(184);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 237:                       // 'transform'
      lookahead2W(78);              // S^WS | '(:' | 'with'
      break;
    default:
      lk = l1;
    }
    if (lk == 132333)               // 'transform' 'with'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(237);            // 'transform'
          lookahead1W(78);          // S^WS | '(:' | 'with'
          consumeT(258);            // 'with'
          lookahead1W(80);          // S^WS | '(:' | '{'
          consumeT(264);            // '{'
          lookahead1W(237);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
          if (l1 != 268)            // '}'
          {
            try_Expr();
          }
          consumeT(268);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(17, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(237);                 // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consume(258);                 // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("TransformWithExpr", e0);
  }

  function try_TransformWithExpr()
  {
    try_BasexUpdate1Expr();
    lookahead1W(184);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 237:                       // 'transform'
      lookahead2W(78);              // S^WS | '(:' | 'with'
      break;
    default:
      lk = l1;
    }
    if (lk == 132333)               // 'transform' 'with'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(237);            // 'transform'
          lookahead1W(78);          // S^WS | '(:' | 'with'
          consumeT(258);            // 'with'
          lookahead1W(80);          // S^WS | '(:' | '{'
          consumeT(264);            // '{'
          lookahead1W(237);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
          if (l1 != 268)            // '}'
          {
            try_Expr();
          }
          consumeT(268);            // '}'
          memoize(17, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(17, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(237);                // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consumeT(258);                // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  function parse_BasexUpdate1Expr()
  {
    eventHandler.startNonterminal("BasexUpdate1Expr", e0);
    parse_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consume(245);                 // 'update'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("BasexUpdate1Expr", e0);
  }

  function try_BasexUpdate1Expr()
  {
    try_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consumeT(245);                // 'update'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  function parse_BasexUpdateExpr()
  {
    eventHandler.startNonterminal("BasexUpdateExpr", e0);
    parse_ArrowExpr();
    for (;;)
    {
      lookahead1W(187);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk != 135413)             // 'update' '{'
      {
        break;
      }
      consume(245);                 // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("BasexUpdateExpr", e0);
  }

  function try_BasexUpdateExpr()
  {
    try_ArrowExpr();
    for (;;)
    {
      lookahead1W(187);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk != 135413)             // 'update' '{'
      {
        break;
      }
      consumeT(245);                // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  function parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consume(61);                  // '=>'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  function try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consumeT(61);                 // '=>'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consume(41);                // '-'
        break;
      default:
        consume(39);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consumeT(41);               // '-'
        break;
      default:
        consumeT(39);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(209);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(209);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(231);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(231);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 53:                        // '<'
      consume(53);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 62:                        // '>'
      consume(62);                  // '>'
      break;
    default:
      consume(63);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 53:                        // '<'
      consumeT(53);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 62:                        // '>'
      consumeT(62);                 // '>'
      break;
    default:
      consumeT(63);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    default:
      consume(143);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    default:
      consumeT(143);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(64);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(64);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(249);                   // 'validate'
    lookahead1W(151);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consume(241);               // 'type'
        lookahead1W(219);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(249);                  // 'validate'
    lookahead1W(151);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consumeT(241);              // 'type'
        lookahead1W(219);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(229);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 164:                       // 'lax'
      consumeT(164);                // 'lax'
      break;
    default:
      consumeT(229);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(89);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(89);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(218);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
    }
    parse_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(2);                // PragmaContents
      consume(20);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(218);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
    }
    try_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(2);                // PragmaContents
      consumeT(20);                 // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(30);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 45:                        // '/'
      consume(45);                  // '/'
      lookahead1W(241);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consume(46);                  // '//'
      lookahead1W(230);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 45:                        // '/'
      consumeT(45);                 // '/'
      lookahead1W(241);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consumeT(46);                 // '//'
      lookahead1W(230);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(231);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(230);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(18, e0, lk);
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consume(45);                // '/'
        break;
      case 46:                      // '//'
        consume(46);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(230);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(231);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(230);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
            try_StepExpr();
            memoize(18, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(18, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consumeT(45);               // '/'
        break;
      case 46:                      // '//'
        consumeT(46);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(230);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(240);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(239);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(203);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 82:                        // 'array'
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 171:                       // 'map'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(201);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(198);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 123:                       // 'empty-sequence'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 149:                       // 'if'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 161:                       // 'item'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 231:                       // 'switch'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 242:                       // 'typeswitch'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17494                 // 'attribute' '('
     || lk == 17505                 // 'comment' '('
     || lk == 17527                 // 'document-node' '('
     || lk == 17528                 // 'element' '('
     || lk == 17586                 // 'namespace-node' '('
     || lk == 17592                 // 'node' '('
     || lk == 17614                 // 'processing-instruction' '('
     || lk == 17623                 // 'schema-attribute' '('
     || lk == 17624                 // 'schema-element' '('
     || lk == 17640                 // 'text' '('
     || lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(19, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17490:                     // 'array' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17531:                     // 'empty-sequence' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17557:                     // 'if' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17569:                     // 'item' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17579:                     // 'map' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17639:                     // 'switch' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17650:                     // 'typeswitch' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 42070:                     // 'attribute' 'array'
    case 42104:                     // 'element' 'array'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 87638:                     // 'attribute' 'map'
    case 87672:                     // 'element' 'map'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135250:                    // 'array' '{'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135339:                    // 'map' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(240);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(239);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(203);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 82:                        // 'array'
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 171:                       // 'map'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(201);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(198);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 123:                       // 'empty-sequence'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 149:                       // 'if'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 161:                       // 'item'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 231:                       // 'switch'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 242:                       // 'typeswitch'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17494                 // 'attribute' '('
     || lk == 17505                 // 'comment' '('
     || lk == 17527                 // 'document-node' '('
     || lk == 17528                 // 'element' '('
     || lk == 17586                 // 'namespace-node' '('
     || lk == 17592                 // 'node' '('
     || lk == 17614                 // 'processing-instruction' '('
     || lk == 17623                 // 'schema-attribute' '('
     || lk == 17624                 // 'schema-element' '('
     || lk == 17640                 // 'text' '('
     || lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(19, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(19, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17490:                     // 'array' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17531:                     // 'empty-sequence' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17557:                     // 'if' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17569:                     // 'item' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17579:                     // 'map' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17639:                     // 'switch' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17650:                     // 'typeswitch' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 42070:                     // 'attribute' 'array'
    case 42104:                     // 'element' 'array'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 87638:                     // 'attribute' 'map'
    case 87672:                     // 'element' 'map'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135250:                    // 'array' '{'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135339:                    // 'map' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(189);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(189);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(193);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(221);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(193);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(221);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 95:                        // 'child'
      consume(95);                  // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(134);                 // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(134);                // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 67)                   // '@'
    {
      consume(67);                  // '@'
    }
    lookahead1W(221);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 67)                   // '@'
    {
      consumeT(67);                 // '@'
    }
    lookahead1W(221);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 44:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(221);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 44:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(221);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(79);                  // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(79);                 // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(44);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(44);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(190);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(190);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 21:                        // Wildcard
      consume(21);                  // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 21:                        // Wildcard
      consumeT(21);                 // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(194);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 34:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(194);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        try_Predicate();
        break;
      case 34:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(234);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(234);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(189);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(189);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(69);                    // '['
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(70);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(69);                   // '['
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(70);                   // ']'
  }

  function parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(65);                    // '?'
    lookahead1W(176);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  function try_Lookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(176);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(65);                    // '?'
    lookahead1W(176);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(176);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  function try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consume(2);                   // DecimalLiteral
      break;
    default:
      consume(3);                   // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consumeT(2);                  // DecimalLiteral
      break;
    default:
      consumeT(3);                  // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(234);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(234);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(43);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(43);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(193);                   // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(193);                  // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(244);                   // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(244);                  // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(178);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(178);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(65);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(65);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
      parse_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
      try_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(53);                    // '<'
    parse_QName();
    parse_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consume(47);                  // '/>'
      break;
    default:
      consume(62);                  // '>'
      for (;;)
      {
        lookahead1(163);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      parse_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consume(17);                // S
      }
      lookahead1(9);                // '>'
      consume(62);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(53);                   // '<'
    try_QName();
    try_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consumeT(47);                 // '/>'
      break;
    default:
      consumeT(62);                 // '>'
      for (;;)
      {
        lookahead1(163);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      try_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consumeT(17);               // S
      }
      lookahead1(9);                // '>'
      consumeT(62);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consume(17);                  // S
      lookahead1(220);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        parse_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        lookahead1(8);              // '='
        consume(60);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consumeT(17);                 // S
      lookahead1(220);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        try_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        lookahead1(8);              // '='
        consumeT(60);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(158);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consume(7);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consume(8);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(158);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consumeT(7);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consumeT(8);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consume(10);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consumeT(10);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consume(11);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consumeT(11);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      parse_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consume(9);                   // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      try_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consumeT(9);                  // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(54);                    // '<!--'
    lookahead1(3);                  // DirCommentContents
    consume(22);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(42);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(54);                   // '<!--'
    lookahead1(3);                  // DirCommentContents
    consumeT(22);                   // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(42);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(0);                  // PITarget
    consume(12);                    // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(4);                // DirPIContents
      consume(23);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(66);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(0);                  // PITarget
    consumeT(12);                   // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(4);                // DirPIContents
      consumeT(23);                 // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(66);                   // '?>'
  }

  function parse_CDataSection()
  {
    eventHandler.startNonterminal("CDataSection", e0);
    consume(55);                    // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consume(24);                    // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consume(71);                    // ']]>'
    eventHandler.endNonterminal("CDataSection", e0);
  }

  function try_CDataSection()
  {
    consumeT(55);                   // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consumeT(24);                   // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consumeT(71);                   // ']]>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 118:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 120:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 118:                       // 'document'
      try_CompDocConstructor();
      break;
    case 120:                       // 'element'
      try_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      try_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(120);                   // 'element'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedContentExpr();
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(120);                  // 'element'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedContentExpr();
  }

  function parse_EnclosedContentExpr()
  {
    eventHandler.startNonterminal("EnclosedContentExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedContentExpr", e0);
  }

  function try_EnclosedContentExpr()
  {
    try_EnclosedExpr();
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(177);                   // 'namespace'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_PrefixExpr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_URIExpr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(177);                  // 'namespace'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_PrefixExpr();
      consumeT(268);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_URIExpr();
    consumeT(268);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(1);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(1);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(87);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(84);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(103);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(87);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(84);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(103);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consumeT(83);                 // 'as'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(171);                   // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(96);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(171);                  // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(96);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_MapConstructorEntry();
      }
    }
    consumeT(268);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consume(48);                    // ':'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consumeT(48);                   // ':'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_MapValueExpr();
  }

  function parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  function try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  function parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  function try_MapValueExpr()
  {
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 69:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    switch (l1)
    {
    case 69:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  function parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(69);                    // '['
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(70);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  function try_SquareArrayConstructor()
  {
    consumeT(69);                   // '['
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(70);                   // ']'
  }

  function parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(82);                    // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  function try_CurlyArrayConstructor()
  {
    consumeT(82);                   // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(73);                    // '``['
    parse_StringConstructorContent();
    consume(72);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  function try_StringConstructor()
  {
    consumeT(73);                   // '``['
    try_StringConstructorContent();
    consumeT(72);                   // ']``'
  }

  function parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(1);                  // StringConstructorChars
    consume(16);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consume(16);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  function try_StringConstructorContent()
  {
    lookahead1(1);                  // StringConstructorChars
    consumeT(16);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consumeT(16);                 // StringConstructorChars
    }
  }

  function parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(74);                    // '`{'
    lookahead1W(238);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(269);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  function try_StringConstructorInterpolation()
  {
    consumeT(74);                   // '`{'
    lookahead1W(238);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      try_Expr();
    }
    consumeT(269);                  // '}`'
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(185);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consume(65);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(185);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consumeT(65);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(83);                    // 'as'
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(83);                   // 'as'
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(202);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consume(123);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(195);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(202);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consumeT(123);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(195);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 82:                        // 'array'
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 171:                       // 'map'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(202);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    case 17569:                     // 'item' '('
      consume(161);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 17579:                     // 'map' '('
      parse_MapTest();
      break;
    case 17490:                     // 'array' '('
      parse_ArrayTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 82:                        // 'array'
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 171:                       // 'map'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(202);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    case 17569:                     // 'item' '('
      consumeT(161);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_FunctionTest();
      break;
    case 17579:                     // 'map' '('
      try_MapTest();
      break;
    case 17490:                     // 'array' '('
      try_ArrayTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      consume(65);                  // '?'
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      consume(39);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      consumeT(65);                 // '?'
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      consumeT(39);                 // '+'
    }
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 119:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 120:                       // 'element'
      parse_ElementTest();
      break;
    case 86:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 97:                        // 'comment'
      parse_CommentTest();
      break;
    case 232:                       // 'text'
      parse_TextTest();
      break;
    case 178:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 119:                       // 'document-node'
      try_DocumentTest();
      break;
    case 120:                       // 'element'
      try_ElementTest();
      break;
    case 86:                        // 'attribute'
      try_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      try_PITest();
      break;
    case 97:                        // 'comment'
      try_CommentTest();
      break;
    case 232:                       // 'text'
      try_TextTest();
      break;
    case 178:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(184);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(184);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(119);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(137);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(119);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(137);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(232);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(232);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(97);                    // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(178);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(178);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(175);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consume(4);                 // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(175);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consumeT(4);                // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(86);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(90);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(219);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(90);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(219);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(215);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(215);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(120);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(90);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(219);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(91);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consume(65);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(120);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(90);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(219);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
        lookahead1W(91);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consumeT(65);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(216);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(216);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(87);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(20, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(20, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(87);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(20, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(20, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(20, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(228);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(224);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(228);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(224);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_MapTest()
  {
    eventHandler.startNonterminal("MapTest", e0);
    switch (l1)
    {
    case 171:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(21, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyMapTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(21, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyMapTest();
      break;
    default:
      parse_TypedMapTest();
    }
    eventHandler.endNonterminal("MapTest", e0);
  }

  function try_MapTest()
  {
    switch (l1)
    {
    case 171:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(21, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyMapTest();
        memoize(21, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(21, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyMapTest();
      break;
    case -3:
      break;
    default:
      try_TypedMapTest();
    }
  }

  function parse_AnyMapTest()
  {
    eventHandler.startNonterminal("AnyMapTest", e0);
    consume(171);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyMapTest", e0);
  }

  function try_AnyMapTest()
  {
    consumeT(171);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedMapTest()
  {
    eventHandler.startNonterminal("TypedMapTest", e0);
    consume(171);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedMapTest", e0);
  }

  function try_TypedMapTest()
  {
    consumeT(171);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consumeT(40);                   // ','
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ArrayTest()
  {
    eventHandler.startNonterminal("ArrayTest", e0);
    switch (l1)
    {
    case 82:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(22, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(22, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyArrayTest();
      break;
    default:
      parse_TypedArrayTest();
    }
    eventHandler.endNonterminal("ArrayTest", e0);
  }

  function try_ArrayTest()
  {
    switch (l1)
    {
    case 82:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(22, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        memoize(22, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(22, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyArrayTest();
      break;
    case -3:
      break;
    default:
      try_TypedArrayTest();
    }
  }

  function parse_AnyArrayTest()
  {
    eventHandler.startNonterminal("AnyArrayTest", e0);
    consume(82);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyArrayTest", e0);
  }

  function try_AnyArrayTest()
  {
    consumeT(82);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedArrayTest()
  {
    eventHandler.startNonterminal("TypedArrayTest", e0);
    consume(82);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedArrayTest", e0);
  }

  function try_TypedArrayTest()
  {
    consumeT(82);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_URILiteral()
  {
    eventHandler.startNonterminal("URILiteral", e0);
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("URILiteral", e0);
  }

  function try_URILiteral()
  {
    consumeT(4);                    // StringLiteral
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(217);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_QName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(217);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_QName();
    }
  }

  function parse_QName()
  {
    eventHandler.startNonterminal("QName", e0);
    lookahead1(216);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'array'
      consume(82);                  // 'array'
      break;
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      break;
    case 97:                        // 'comment'
      consume(97);                  // 'comment'
      break;
    case 109:                       // 'delete'
      consume(109);                 // 'delete'
      break;
    case 119:                       // 'document-node'
      consume(119);                 // 'document-node'
      break;
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consume(123);                 // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consume(142);                 // 'function'
      break;
    case 149:                       // 'if'
      consume(149);                 // 'if'
      break;
    case 155:                       // 'insert'
      consume(155);                 // 'insert'
      break;
    case 161:                       // 'item'
      consume(161);                 // 'item'
      break;
    case 171:                       // 'map'
      consume(171);                 // 'map'
      break;
    case 178:                       // 'namespace-node'
      consume(178);                 // 'namespace-node'
      break;
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consume(206);                 // 'processing-instruction'
      break;
    case 208:                       // 'rename'
      consume(208);                 // 'rename'
      break;
    case 209:                       // 'replace'
      consume(209);                 // 'replace'
      break;
    case 215:                       // 'schema-attribute'
      consume(215);                 // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consume(216);                 // 'schema-element'
      break;
    case 231:                       // 'switch'
      consume(231);                 // 'switch'
      break;
    case 232:                       // 'text'
      consume(232);                 // 'text'
      break;
    case 242:                       // 'typeswitch'
      consume(242);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("QName", e0);
  }

  function try_QName()
  {
    lookahead1(216);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'array'
      consumeT(82);                 // 'array'
      break;
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      break;
    case 97:                        // 'comment'
      consumeT(97);                 // 'comment'
      break;
    case 109:                       // 'delete'
      consumeT(109);                // 'delete'
      break;
    case 119:                       // 'document-node'
      consumeT(119);                // 'document-node'
      break;
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consumeT(123);                // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consumeT(142);                // 'function'
      break;
    case 149:                       // 'if'
      consumeT(149);                // 'if'
      break;
    case 155:                       // 'insert'
      consumeT(155);                // 'insert'
      break;
    case 161:                       // 'item'
      consumeT(161);                // 'item'
      break;
    case 171:                       // 'map'
      consumeT(171);                // 'map'
      break;
    case 178:                       // 'namespace-node'
      consumeT(178);                // 'namespace-node'
      break;
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consumeT(206);                // 'processing-instruction'
      break;
    case 208:                       // 'rename'
      consumeT(208);                // 'rename'
      break;
    case 209:                       // 'replace'
      consumeT(209);                // 'replace'
      break;
    case 215:                       // 'schema-attribute'
      consumeT(215);                // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consumeT(216);                // 'schema-element'
      break;
    case 231:                       // 'switch'
      consumeT(231);                // 'switch'
      break;
    case 232:                       // 'text'
      consumeT(232);                // 'text'
      break;
    case 242:                       // 'typeswitch'
      consumeT(242);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 15:                        // QName^Token
      consume(15);                  // QName^Token
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 95:                        // 'child'
      consume(95);                  // 'child'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 102:                       // 'copy'
      consume(102);                 // 'copy'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 107:                       // 'declare'
      consume(107);                 // 'declare'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 118:                       // 'document'
      consume(118);                 // 'document'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 128:                       // 'every'
      consume(128);                 // 'every'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 134:                       // 'following'
      consume(134);                 // 'following'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 150:                       // 'import'
      consume(150);                 // 'import'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 159:                       // 'invoke'
      consume(159);                 // 'invoke'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 175:                       // 'module'
      consume(175);                 // 'module'
      break;
    case 174:                       // 'modify'
      consume(174);                 // 'modify'
      break;
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      break;
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 237:                       // 'transform'
      consume(237);                 // 'transform'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 239:                       // 'try'
      consume(239);                 // 'try'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    case 244:                       // 'unordered'
      consume(244);                 // 'unordered'
      break;
    case 245:                       // 'update'
      consume(245);                 // 'update'
      break;
    case 249:                       // 'validate'
      consume(249);                 // 'validate'
      break;
    case 255:                       // 'where'
      consume(255);                 // 'where'
      break;
    case 258:                       // 'with'
      consume(258);                 // 'with'
      break;
    default:
      consume(262);                 // 'xquery'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 15:                        // QName^Token
      consumeT(15);                 // QName^Token
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 102:                       // 'copy'
      consumeT(102);                // 'copy'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 107:                       // 'declare'
      consumeT(107);                // 'declare'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 118:                       // 'document'
      consumeT(118);                // 'document'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 128:                       // 'every'
      consumeT(128);                // 'every'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 134:                       // 'following'
      consumeT(134);                // 'following'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 150:                       // 'import'
      consumeT(150);                // 'import'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 159:                       // 'invoke'
      consumeT(159);                // 'invoke'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 175:                       // 'module'
      consumeT(175);                // 'module'
      break;
    case 174:                       // 'modify'
      consumeT(174);                // 'modify'
      break;
    case 177:                       // 'namespace'
      consumeT(177);                // 'namespace'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 193:                       // 'ordered'
      consumeT(193);                // 'ordered'
      break;
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      break;
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 237:                       // 'transform'
      consumeT(237);                // 'transform'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 239:                       // 'try'
      consumeT(239);                // 'try'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    case 244:                       // 'unordered'
      consumeT(244);                // 'unordered'
      break;
    case 245:                       // 'update'
      consumeT(245);                // 'update'
      break;
    case 249:                       // 'validate'
      consumeT(249);                // 'validate'
      break;
    case 255:                       // 'where'
      consumeT(255);                // 'where'
      break;
    case 258:                       // 'with'
      consumeT(258);                // 'with'
      break;
    default:
      consumeT(262);                // 'xquery'
    }
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(64);                // S^WS | '(:' | 'revalidation'
    consume(211);                   // 'revalidation'
    lookahead1W(142);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 229:                       // 'strict'
      consume(229);                 // 'strict'
      break;
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(222);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 88:                        // 'before'
      consume(88);                  // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consume(83);                // 'as'
        lookahead1W(113);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consume(133);             // 'first'
          break;
        default:
          consume(163);             // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consume(158);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 88:                        // 'before'
      consumeT(88);                 // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consumeT(83);               // 'as'
        lookahead1W(113);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consumeT(133);            // 'first'
          break;
        default:
          consumeT(163);            // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consumeT(158);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(155);                   // 'insert'
    lookahead1W(122);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SourceExpr();
    lookahead1W(147);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(155);                  // 'insert'
    lookahead1W(122);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_SourceExpr();
    lookahead1W(147);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    try_InsertExprTargetChoice();
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(109);                   // 'delete'
    lookahead1W(122);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(109);                  // 'delete'
    lookahead1W(122);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(209);                   // 'replace'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consume(250);                 // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consume(258);                   // 'with'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(209);                  // 'replace'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consumeT(250);                // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consumeT(258);                  // 'with'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(208);                   // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(208);                  // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_UpdatingFunctionCall()
  {
    eventHandler.startNonterminal("UpdatingFunctionCall", e0);
    consume(159);                   // 'invoke'
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consume(246);                   // 'updating'
    lookahead1W(229);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(234);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("UpdatingFunctionCall", e0);
  }

  function try_UpdatingFunctionCall()
  {
    consumeT(159);                  // 'invoke'
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consumeT(246);                  // 'updating'
    lookahead1W(229);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(234);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_CopyModifyExpr()
  {
    eventHandler.startNonterminal("CopyModifyExpr", e0);
    consume(102);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(94);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consume(51);                  // ':='
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    consume(174);                   // 'modify'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifyExpr", e0);
  }

  function try_CopyModifyExpr()
  {
    consumeT(102);                  // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(94);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(219);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consumeT(51);                 // ':='
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ExprSingle();
    }
    consumeT(174);                  // 'modify'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(196);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(196);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(253);                   // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(253);                  // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consume(141);                 // 'ftor'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consumeT(141);                // 'ftor'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consume(139);                 // 'ftand'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consumeT(139);                // 'ftand'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(208);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consume(186);                 // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consume(151);                 // 'in'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(208);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consumeT(186);                // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consumeT(151);                // 'in'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 140)                  // 'ftnot'
    {
      consume(140);                 // 'ftnot'
    }
    lookahead1W(145);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 140)                  // 'ftnot'
    {
      consumeT(140);                // 'ftnot'
    }
    lookahead1W(145);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(210);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    if (l1 == 248)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(210);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    if (l1 == 248)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'phrase' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'phrase' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      consume(264);                 // '{'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      consumeT(264);                // '{'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(89);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(89);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(268);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 81:                        // 'any'
      consume(81);                  // 'any'
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consume(260);               // 'word'
      }
      break;
    case 76:                        // 'all'
      consume(76);                  // 'all'
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 261:                     // 'words'
        lookahead2W(211);           // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
        break;
      default:
        lk = l1;
      }
      if (lk == 13061               // 'words' EOF
       || lk == 14085               // 'words' '!='
       || lk == 19205               // 'words' ')'
       || lk == 19717               // 'words' '*'
       || lk == 20229               // 'words' '+'
       || lk == 20741               // 'words' ','
       || lk == 21253               // 'words' '-'
       || lk == 24837               // 'words' ':'
       || lk == 26885               // 'words' ';'
       || lk == 27397               // 'words' '<'
       || lk == 29445               // 'words' '<<'
       || lk == 29957               // 'words' '<='
       || lk == 30981               // 'words' '='
       || lk == 32005               // 'words' '>'
       || lk == 32517               // 'words' '>='
       || lk == 33029               // 'words' '>>'
       || lk == 36101               // 'words' ']'
       || lk == 38661               // 'words' 'after'
       || lk == 41221               // 'words' 'and'
       || lk == 42757               // 'words' 'as'
       || lk == 43269               // 'words' 'ascending'
       || lk == 43781               // 'words' 'at'
       || lk == 45317               // 'words' 'before'
       || lk == 46853               // 'words' 'case'
       || lk == 47365               // 'words' 'cast'
       || lk == 47877               // 'words' 'castable'
       || lk == 49413               // 'words' 'collation'
       || lk == 50949               // 'words' 'contains'
       || lk == 53509               // 'words' 'count'
       || lk == 55557               // 'words' 'default'
       || lk == 57605               // 'words' 'descending'
       || lk == 58629               // 'words' 'different'
       || lk == 59653               // 'words' 'distance'
       || lk == 60165               // 'words' 'div'
       || lk == 62213               // 'words' 'else'
       || lk == 62725               // 'words' 'empty'
       || lk == 64261               // 'words' 'end'
       || lk == 64773               // 'words' 'entire'
       || lk == 65285               // 'words' 'eq'
       || lk == 66821               // 'words' 'except'
       || lk == 69893               // 'words' 'for'
       || lk == 73477               // 'words' 'ge'
       || lk == 74501               // 'words' 'group'
       || lk == 75525               // 'words' 'gt'
       || lk == 76037               // 'words' 'idiv'
       || lk == 80133               // 'words' 'instance'
       || lk == 80645               // 'words' 'intersect'
       || lk == 81157               // 'words' 'into'
       || lk == 82181               // 'words' 'is'
       || lk == 84741               // 'words' 'le'
       || lk == 85765               // 'words' 'let'
       || lk == 87301               // 'words' 'lt'
       || lk == 88837               // 'words' 'mod'
       || lk == 89349               // 'words' 'modify'
       || lk == 91909               // 'words' 'ne'
       || lk == 97029               // 'words' 'only'
       || lk == 98053               // 'words' 'or'
       || lk == 98565               // 'words' 'order'
       || lk == 99077               // 'words' 'ordered'
       || lk == 100613              // 'words' 'paragraphs'
       || lk == 107781              // 'words' 'return'
       || lk == 108805              // 'words' 'same'
       || lk == 109317              // 'words' 'satisfies'
       || lk == 113413              // 'words' 'sentences'
       || lk == 115461              // 'words' 'stable'
       || lk == 115973              // 'words' 'start'
       || lk == 120581              // 'words' 'times'
       || lk == 121093              // 'words' 'to'
       || lk == 121605              // 'words' 'transform'
       || lk == 122117              // 'words' 'treat'
       || lk == 124677              // 'words' 'union'
       || lk == 130821              // 'words' 'where'
       || lk == 131845              // 'words' 'window'
       || lk == 132357              // 'words' 'with'
       || lk == 132869              // 'words' 'without'
       || lk == 133893              // 'words' 'words'
       || lk == 136453              // 'words' '|'
       || lk == 136965              // 'words' '||'
       || lk == 137477              // 'words' '}'
       || lk == 137989)             // 'words' '}`'
      {
        lk = memoized(23, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(261);          // 'words'
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(23, e0, lk);
        }
      }
      if (lk == -1
       || lk == 71429               // 'words' 'ftand'
       || lk == 72453               // 'words' 'ftor'
       || lk == 95493               // 'words' 'not'
       || lk == 96005               // 'words' 'occurs'
       || lk == 127237              // 'words' 'using'
       || lk == 129797)             // 'words' 'weight'
      {
        consume(261);               // 'words'
      }
      break;
    default:
      consume(201);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 81:                        // 'any'
      consumeT(81);                 // 'any'
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consumeT(260);              // 'word'
      }
      break;
    case 76:                        // 'all'
      consumeT(76);                 // 'all'
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 261:                     // 'words'
        lookahead2W(211);           // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
        break;
      default:
        lk = l1;
      }
      if (lk == 13061               // 'words' EOF
       || lk == 14085               // 'words' '!='
       || lk == 19205               // 'words' ')'
       || lk == 19717               // 'words' '*'
       || lk == 20229               // 'words' '+'
       || lk == 20741               // 'words' ','
       || lk == 21253               // 'words' '-'
       || lk == 24837               // 'words' ':'
       || lk == 26885               // 'words' ';'
       || lk == 27397               // 'words' '<'
       || lk == 29445               // 'words' '<<'
       || lk == 29957               // 'words' '<='
       || lk == 30981               // 'words' '='
       || lk == 32005               // 'words' '>'
       || lk == 32517               // 'words' '>='
       || lk == 33029               // 'words' '>>'
       || lk == 36101               // 'words' ']'
       || lk == 38661               // 'words' 'after'
       || lk == 41221               // 'words' 'and'
       || lk == 42757               // 'words' 'as'
       || lk == 43269               // 'words' 'ascending'
       || lk == 43781               // 'words' 'at'
       || lk == 45317               // 'words' 'before'
       || lk == 46853               // 'words' 'case'
       || lk == 47365               // 'words' 'cast'
       || lk == 47877               // 'words' 'castable'
       || lk == 49413               // 'words' 'collation'
       || lk == 50949               // 'words' 'contains'
       || lk == 53509               // 'words' 'count'
       || lk == 55557               // 'words' 'default'
       || lk == 57605               // 'words' 'descending'
       || lk == 58629               // 'words' 'different'
       || lk == 59653               // 'words' 'distance'
       || lk == 60165               // 'words' 'div'
       || lk == 62213               // 'words' 'else'
       || lk == 62725               // 'words' 'empty'
       || lk == 64261               // 'words' 'end'
       || lk == 64773               // 'words' 'entire'
       || lk == 65285               // 'words' 'eq'
       || lk == 66821               // 'words' 'except'
       || lk == 69893               // 'words' 'for'
       || lk == 73477               // 'words' 'ge'
       || lk == 74501               // 'words' 'group'
       || lk == 75525               // 'words' 'gt'
       || lk == 76037               // 'words' 'idiv'
       || lk == 80133               // 'words' 'instance'
       || lk == 80645               // 'words' 'intersect'
       || lk == 81157               // 'words' 'into'
       || lk == 82181               // 'words' 'is'
       || lk == 84741               // 'words' 'le'
       || lk == 85765               // 'words' 'let'
       || lk == 87301               // 'words' 'lt'
       || lk == 88837               // 'words' 'mod'
       || lk == 89349               // 'words' 'modify'
       || lk == 91909               // 'words' 'ne'
       || lk == 97029               // 'words' 'only'
       || lk == 98053               // 'words' 'or'
       || lk == 98565               // 'words' 'order'
       || lk == 99077               // 'words' 'ordered'
       || lk == 100613              // 'words' 'paragraphs'
       || lk == 107781              // 'words' 'return'
       || lk == 108805              // 'words' 'same'
       || lk == 109317              // 'words' 'satisfies'
       || lk == 113413              // 'words' 'sentences'
       || lk == 115461              // 'words' 'stable'
       || lk == 115973              // 'words' 'start'
       || lk == 120581              // 'words' 'times'
       || lk == 121093              // 'words' 'to'
       || lk == 121605              // 'words' 'transform'
       || lk == 122117              // 'words' 'treat'
       || lk == 124677              // 'words' 'union'
       || lk == 130821              // 'words' 'where'
       || lk == 131845              // 'words' 'window'
       || lk == 132357              // 'words' 'with'
       || lk == 132869              // 'words' 'without'
       || lk == 133893              // 'words' 'words'
       || lk == 136453              // 'words' '|'
       || lk == 136965              // 'words' '||'
       || lk == 137477              // 'words' '}'
       || lk == 137989)             // 'words' '}`'
      {
        lk = memoized(23, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(261);          // 'words'
            memoize(23, e0A, -1);
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(23, e0A, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 71429               // 'words' 'ftand'
       || lk == 72453               // 'words' 'ftor'
       || lk == 95493               // 'words' 'not'
       || lk == 96005               // 'words' 'occurs'
       || lk == 127237              // 'words' 'using'
       || lk == 129797)             // 'words' 'weight'
      {
        consumeT(261);              // 'words'
      }
      break;
    default:
      consumeT(201);                // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(187);                   // 'occurs'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(235);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(187);                  // 'occurs'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(235);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(118);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      consume(236);                 // 'to'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(118);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_AdditiveExpr();
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(232);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
      consumeT(236);                // 'to'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 193:                       // 'ordered'
      parse_FTOrder();
      break;
    case 257:                       // 'window'
      parse_FTWindow();
      break;
    case 116:                       // 'distance'
      parse_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 193:                       // 'ordered'
      try_FTOrder();
      break;
    case 257:                       // 'window'
      try_FTWindow();
      break;
    case 116:                       // 'distance'
      try_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(193);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(193);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(257);                   // 'window'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(257);                  // 'window'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(116);                   // 'distance'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(116);                  // 'distance'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 261:                       // 'words'
      consume(261);                 // 'words'
      break;
    case 221:                       // 'sentences'
      consume(221);                 // 'sentences'
      break;
    default:
      consume(196);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 261:                       // 'words'
      consumeT(261);                // 'words'
      break;
    case 221:                       // 'sentences'
      consumeT(221);                // 'sentences'
      break;
    default:
      consumeT(196);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 212:                       // 'same'
      consume(212);                 // 'same'
      break;
    default:
      consume(114);                 // 'different'
    }
    lookahead1W(125);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 212:                       // 'same'
      consumeT(212);                // 'same'
      break;
    default:
      consumeT(114);                // 'different'
    }
    lookahead1W(125);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 220:                       // 'sentence'
      consume(220);                 // 'sentence'
      break;
    default:
      consume(195);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 220:                       // 'sentence'
      consumeT(220);                // 'sentence'
      break;
    default:
      consumeT(195);                // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(111);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consume(226);               // 'start'
        break;
      default:
        consume(125);               // 'end'
      }
      break;
    default:
      consume(126);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(100);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(111);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consumeT(226);              // 'start'
        break;
      default:
        consumeT(125);              // 'end'
      }
      break;
    default:
      consumeT(126);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(100);                // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(248);                 // 'using'
      lookahead1W(169);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(210);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(248);                // 'using'
      lookahead1W(169);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(210);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(152);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 190:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(152);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      try_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 190:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 91:                        // 'case'
      consume(91);                  // 'case'
      lookahead1W(117);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consume(154);               // 'insensitive'
        break;
      default:
        consume(219);               // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consume(169);                 // 'lowercase'
      break;
    default:
      consume(247);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      lookahead1W(117);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consumeT(154);              // 'insensitive'
        break;
      default:
        consumeT(219);              // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consumeT(169);                // 'lowercase'
      break;
    default:
      consumeT(247);                // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(113);                   // 'diacritics'
    lookahead1W(117);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consume(154);                 // 'insensitive'
      break;
    default:
      consume(219);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(113);                  // 'diacritics'
    lookahead1W(117);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consumeT(154);                // 'insensitive'
      break;
    default:
      consumeT(219);                // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 227:                       // 'stemming'
      consume(227);                 // 'stemming'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consume(227);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 227:                       // 'stemming'
      consumeT(227);                // 'stemming'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consumeT(227);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consume(234);                 // 'thesaurus'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consume(108);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(104);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(108);             // 'default'
        }
        for (;;)
        {
          lookahead1W(90);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consume(40);              // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consume(234);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consumeT(234);                // 'thesaurus'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        try_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(104);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(108);            // 'default'
        }
        for (;;)
        {
          lookahead1W(90);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consumeT(40);             // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consumeT(234);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(85);                    // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'relationship' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consume(207);                 // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    lookahead1W(212);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(150);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consume(168);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(85);                   // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'relationship' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consumeT(207);                // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
    }
    lookahead1W(212);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(150);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consumeT(168);                // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(118);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consume(236);                 // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(118);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consumeT(236);                // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 228:                       // 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consume(108);               // 'default'
        for (;;)
        {
          lookahead1W(210);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(25, e0);
            if (lk == 0)
            {
              var b0A = b0; var e0A = e0; var l1A = l1;
              var b1A = b1; var e1A = e1; var l2A = l2;
              var b2A = b2; var e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                lk = -1;
              }
              catch (p1A)
              {
                lk = -2;
              }
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(25, e0, lk);
            }
          }
          if (lk != -1)
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(210);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(24, e0);
            if (lk == 0)
            {
              var b0A = b0; var e0A = e0; var l1A = l1;
              var b1A = b1; var e1A = e1; var l2A = l2;
              var b2A = b2; var e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                lk = -1;
              }
              catch (p1A)
              {
                lk = -2;
              }
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(24, e0, lk);
            }
          }
          if (lk != -1)
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 228:                       // 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        for (;;)
        {
          lookahead1W(210);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(25, e0);
            if (lk == 0)
            {
              var b0A = b0; var e0A = e0; var l1A = l1;
              var b1A = b1; var e1A = e1; var l2A = l2;
              var b2A = b2; var e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                memoize(25, e0A, -1);
                continue;
              }
              catch (p1A)
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(25, e0A, -2);
                break;
              }
            }
          }
          if (lk != -1)
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(210);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(232);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(24, e0);
            if (lk == 0)
            {
              var b0A = b0; var e0A = e0; var l1A = l1;
              var b1A = b1; var e1A = e1; var l2A = l2;
              var b2A = b2; var e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                memoize(24, e0A, -1);
                continue;
              }
              catch (p1A)
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(24, e0A, -2);
                break;
              }
            }
          }
          if (lk != -1)
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      break;
    default:
      consume(34);                  // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consumeT(4);                // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    default:
      consume(130);                 // 'except'
    }
    lookahead1W(88);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    default:
      consumeT(130);                // 'except'
    }
    lookahead1W(88);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(162);                   // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(162);                  // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consume(256);                 // 'wildcards'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consume(256);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consumeT(256);                // 'wildcards'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consumeT(256);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(190);                   // 'option'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(190);                  // 'option'
    lookahead1W(219);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(259);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(100);                   // 'content'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(259);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(100);                  // 'content'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_UnionExpr();
  }

  function try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(81);               // CommentContents | '(:' | ':)'
      if (l1 == 49)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 19:                      // CommentContents
        consumeT(19);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(49);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 18:                        // S^WS
      consumeT(18);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 14:                        // NCName^Token
      consume(14);                  // NCName^Token
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    default:
      consume(255);                 // 'where'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 14:                        // NCName^Token
      consumeT(14);                 // NCName^Token
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    default:
      consumeT(255);                // 'where'
    }
  }

  function parse_QueryBody()
  {
    eventHandler.startNonterminal("QueryBody", e0);
    parse_Expr();
    eventHandler.endNonterminal("QueryBody", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(160);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(160);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(207);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'sliding' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(200);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'updating' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(199);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(206);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'value' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(201);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(205);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(197);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17557                 // 'if' '('
     || lk == 17639                 // 'switch' '('
     || lk == 17650)                // 'typeswitch' '('
    {
      lk = memoized(26, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_SwitchExpr();
          lk = -3;
        }
        catch (p3A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_TypeswitchExpr();
            lk = -4;
          }
          catch (p4A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_IfExpr();
              lk = -5;
            }
            catch (p5A)
            {
              lk = -13;
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(26, e0, lk);
      }
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case -3:
      parse_SwitchExpr();
      break;
    case -4:
      parse_TypeswitchExpr();
      break;
    case -5:
      parse_IfExpr();
      break;
    case 135407:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 126111:                    // 'invoke' 'updating'
      parse_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      parse_CopyModifyExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(207);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'sliding' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(200);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'updating' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(199);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(206);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'value' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(201);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(205);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(197);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17557                 // 'if' '('
     || lk == 17639                 // 'switch' '('
     || lk == 17650)                // 'typeswitch' '('
    {
      lk = memoized(26, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_SwitchExpr();
          memoize(26, e0A, -3);
          lk = -14;
        }
        catch (p3A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_TypeswitchExpr();
            memoize(26, e0A, -4);
            lk = -14;
          }
          catch (p4A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_IfExpr();
              memoize(26, e0A, -5);
              lk = -14;
            }
            catch (p5A)
            {
              lk = -13;
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(26, e0A, -13);
            }
          }
        }
      }
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case -3:
      try_SwitchExpr();
      break;
    case -4:
      try_TypeswitchExpr();
      break;
    case -5:
      try_IfExpr();
      break;
    case 135407:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 126111:                    // 'invoke' 'updating'
      try_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      try_CopyModifyExpr();
      break;
    case -14:
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consume(6);                   // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consume(13);                  // CharRef
      break;
    case 265:                       // '{{'
      consume(265);                 // '{{'
      break;
    case 270:                       // '}}'
      consume(270);                 // '}}'
      break;
    default:
      parse_EnclosedExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consumeT(6);                  // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consumeT(13);                 // CharRef
      break;
    case 265:                       // '{{'
      consumeT(265);                // '{{'
      break;
    case 270:                       // '}}'
      consumeT(270);                // '}}'
      break;
    default:
      try_EnclosedExpr();
    }
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(118);                   // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(118);                  // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(86);                    // 'attribute'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(232);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(97);                    // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(232);                   // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(232);                  // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(226);             // URIQualifiedName | QName^Token | S^WS | '#' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(177);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where' | '{'
      break;
    case 82:                        // 'array'
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 171:                       // 'map'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(132);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 123:                       // 'empty-sequence'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 149:                       // 'if'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 161:                       // 'item'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 231:                       // 'switch'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 242:                       // 'typeswitch'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 17550)                // 'function' '('
    {
      lk = memoized(27, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_FunctionCall();
          lk = -5;
        }
        catch (p5A)
        {
          lk = -9;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(27, e0, lk);
      }
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      parse_ContextItemExpr();
      break;
    case -5:
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17490:                     // 'array' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17494:                     // 'attribute' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17505:                     // 'comment' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17531:                     // 'empty-sequence' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17557:                     // 'if' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17569:                     // 'item' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17579:                     // 'map' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17586:                     // 'namespace-node' '('
    case 17587:                     // 'ne' '('
    case 17592:                     // 'node' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17614:                     // 'processing-instruction' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17639:                     // 'switch' '('
    case 17640:                     // 'text' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17650:                     // 'typeswitch' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case -9:
    case 32:                        // '%'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 135339:                    // 'map' '{'
      parse_MapConstructor();
      break;
    case 69:                        // '['
    case 135250:                    // 'array' '{'
      parse_ArrayConstructor();
      break;
    case 73:                        // '``['
      parse_StringConstructor();
      break;
    case 65:                        // '?'
      parse_UnaryLookup();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(226);             // URIQualifiedName | QName^Token | S^WS | '#' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(177);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where' | '{'
      break;
    case 82:                        // 'array'
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 171:                       // 'map'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(132);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 123:                       // 'empty-sequence'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 149:                       // 'if'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 161:                       // 'item'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 231:                       // 'switch'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 242:                       // 'typeswitch'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 17550)                // 'function' '('
    {
      lk = memoized(27, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_FunctionCall();
          memoize(27, e0A, -5);
          lk = -14;
        }
        catch (p5A)
        {
          lk = -9;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(27, e0A, -9);
        }
      }
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      try_ContextItemExpr();
      break;
    case -5:
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17490:                     // 'array' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17494:                     // 'attribute' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17505:                     // 'comment' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17531:                     // 'empty-sequence' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17557:                     // 'if' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17569:                     // 'item' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17579:                     // 'map' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17586:                     // 'namespace-node' '('
    case 17587:                     // 'ne' '('
    case 17592:                     // 'node' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17614:                     // 'processing-instruction' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17639:                     // 'switch' '('
    case 17640:                     // 'text' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17650:                     // 'typeswitch' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case -9:
    case 32:                        // '%'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 135339:                    // 'map' '{'
      try_MapConstructor();
      break;
    case 69:                        // '['
    case 135250:                    // 'array' '{'
      try_ArrayConstructor();
      break;
    case 73:                        // '``['
      try_StringConstructor();
      break;
    case 65:                        // '?'
      try_UnaryLookup();
      break;
    case -14:
      break;
    default:
      try_Constructor();
    }
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 18)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 5) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 5) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

}

XQueryParser.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 271; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 2563 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

XQueryParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

XQueryParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

XQueryParser.MAP0 =
[
  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  /* 452 */ 69, 69, 69, 69
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 2, 3, 94212, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242
];

XQueryParser.TRANSITION =
[
  /*     0 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*    15 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*    30 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*    45 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*    60 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*    75 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*    90 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   105 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   120 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   135 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   150 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   165 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   180 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   195 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   210 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   225 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   240 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   255 */ 18385, 18176, 18192, 18218, 18218, 18218, 18216, 18218, 18218, 18218, 18220, 18236, 18218, 18218, 18200,
  /*   270 */ 18218, 18250, 18266, 18385, 18385, 19336, 18385, 18385, 36127, 18385, 33696, 19505, 18385, 18385, 18385,
  /*   285 */ 18288, 20272, 20020, 20016, 20808, 23907, 24636, 28583, 18334, 25450, 18385, 18385, 18384, 18385, 42547,
  /*   300 */ 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576, 18592, 18539, 18560, 42518, 18837, 18385,
  /*   315 */ 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723, 18734, 18758, 19987, 18796, 18817, 42497,
  /*   330 */ 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251, 19070, 38218, 39582, 41127, 18856, 18884,
  /*   345 */ 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992, 19014, 18840, 25532, 19040, 19056, 21237,
  /*   360 */ 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176, 19194, 19246, 19427, 19280, 18385, 19328,
  /*   375 */ 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448, 19469, 18385, 19485, 19095, 19533, 19522,
  /*   390 */ 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739, 19776, 19792, 19831, 19806, 19847, 19863,
  /*   405 */ 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599, 20036, 20052, 20078, 18385, 18385, 18385,
  /*   420 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   435 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   450 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   465 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   480 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   495 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   510 */ 18385, 18385, 20097, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 20119, 20139, 20152,
  /*   525 */ 20168, 42417, 20192, 20226, 18385, 18385, 19336, 18385, 18385, 36127, 37257, 33696, 19505, 18385, 18385,
  /*   540 */ 18385, 18288, 20272, 20020, 20016, 23895, 18954, 24636, 28583, 18334, 25450, 18385, 18385, 18384, 18385,
  /*   555 */ 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576, 18592, 18539, 18560, 42518, 18837,
  /*   570 */ 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723, 18734, 18758, 19987, 18796, 18817,
  /*   585 */ 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251, 19070, 38218, 39582, 41127, 18856,
  /*   600 */ 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992, 19014, 18840, 25532, 19040, 19056,
  /*   615 */ 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176, 19194, 19246, 19427, 19280, 18385,
  /*   630 */ 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448, 19469, 18385, 19485, 19095, 19533,
  /*   645 */ 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739, 19776, 19792, 19831, 19806, 19847,
  /*   660 */ 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599, 20036, 20052, 20078, 18385, 18385,
  /*   675 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   690 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   705 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   720 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   735 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   750 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   765 */ 18385, 18385, 18385, 20097, 20248, 18385, 18385, 18385, 20269, 18385, 18385, 20288, 20307, 20323, 18385,
  /*   780 */ 18385, 18385, 20333, 20349, 20375, 18385, 18385, 19336, 18385, 18385, 37362, 18385, 33696, 19505, 18385,
  /*   795 */ 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 20397, 28583, 18334, 25450, 18385, 18385, 18384,
  /*   810 */ 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576, 18592, 18539, 18560, 42518,
  /*   825 */ 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723, 18734, 18758, 19987, 18796,
  /*   840 */ 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251, 19070, 38218, 39582, 41127,
  /*   855 */ 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992, 19014, 18840, 25532, 19040,
  /*   870 */ 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176, 19194, 19246, 19427, 19280,
  /*   885 */ 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448, 19469, 18385, 19485, 19095,
  /*   900 */ 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739, 19776, 19792, 19831, 19806,
  /*   915 */ 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599, 20036, 20052, 20078, 18385,
  /*   930 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   945 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   960 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   975 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*   990 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1005 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1020 */ 18385, 18385, 18385, 18385, 20425, 37672, 18385, 18385, 18385, 20454, 18385, 18385, 37674, 42070, 20119,
  /*  1035 */ 20474, 20498, 20456, 37676, 20513, 20226, 18385, 18385, 20482, 18385, 18385, 37237, 18385, 33696, 19505,
  /*  1050 */ 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 24219, 28583, 18334, 25450, 18385, 18385,
  /*  1065 */ 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576, 18592, 18539, 18560,
  /*  1080 */ 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723, 18734, 18758, 19987,
  /*  1095 */ 18796, 18817, 42497, 20062, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251, 19070, 38218, 39582,
  /*  1110 */ 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992, 19014, 18840, 25532,
  /*  1125 */ 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176, 19194, 19246, 19427,
  /*  1140 */ 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448, 19469, 18385, 19485,
  /*  1155 */ 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739, 19776, 19792, 19831,
  /*  1170 */ 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599, 20036, 20052, 20078,
  /*  1185 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1200 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1215 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1230 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1245 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1260 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1275 */ 18385, 18385, 18385, 18385, 18385, 20097, 23996, 18385, 18385, 18385, 20539, 18385, 18385, 23998, 23601,
  /*  1290 */ 20119, 18385, 34584, 42659, 20562, 20626, 20226, 18385, 18385, 19336, 18385, 18385, 36127, 18385, 33696,
  /*  1305 */ 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 24636, 28583, 18334, 25450, 18385,
  /*  1320 */ 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576, 18592, 18539,
  /*  1335 */ 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723, 18734, 18758,
  /*  1350 */ 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251, 19070, 38218,
  /*  1365 */ 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992, 19014, 18840,
  /*  1380 */ 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176, 19194, 19246,
  /*  1395 */ 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448, 19469, 18385,
  /*  1410 */ 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739, 19776, 19792,
  /*  1425 */ 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599, 20036, 20052,
  /*  1440 */ 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1455 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1470 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1485 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1500 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1515 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1530 */ 18385, 18385, 18385, 18385, 18385, 18385, 20097, 18385, 18385, 18385, 18385, 20660, 18385, 18385, 29892,
  /*  1545 */ 20665, 20119, 36480, 18385, 18385, 20681, 20717, 20226, 18385, 18385, 19336, 18385, 18385, 36127, 18385,
  /*  1560 */ 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 24636, 28583, 18334, 25450,
  /*  1575 */ 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576, 18592,
  /*  1590 */ 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723, 18734,
  /*  1605 */ 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251, 19070,
  /*  1620 */ 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992, 19014,
  /*  1635 */ 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176, 19194,
  /*  1650 */ 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448, 19469,
  /*  1665 */ 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739, 19776,
  /*  1680 */ 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599, 20036,
  /*  1695 */ 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1710 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1725 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1740 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1755 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1770 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1785 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 18385, 18385, 18385, 18385, 24899, 18385, 18385,
  /*  1800 */ 18385, 24174, 20743, 18385, 18385, 18385, 18385, 19294, 20763, 18385, 18385, 19336, 18385, 18385, 36127,
  /*  1815 */ 18385, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 24636, 28583, 18334,
  /*  1830 */ 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 20785,
  /*  1845 */ 20801, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723,
  /*  1860 */ 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251,
  /*  1875 */ 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992,
  /*  1890 */ 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176,
  /*  1905 */ 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448,
  /*  1920 */ 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739,
  /*  1935 */ 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599,
  /*  1950 */ 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1965 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1980 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  1995 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2010 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2025 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2040 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 20824, 18385, 18385, 18385, 20845, 18385,
  /*  2055 */ 18385, 20864, 20883, 20899, 18385, 18385, 18385, 20409, 20924, 20958, 18385, 18385, 19336, 18385, 18385,
  /*  2070 */ 36127, 20980, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 20908, 28583,
  /*  2085 */ 18334, 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555,
  /*  2100 */ 18576, 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694,
  /*  2115 */ 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208,
  /*  2130 */ 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970,
  /*  2145 */ 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230,
  /*  2160 */ 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420,
  /*  2175 */ 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687,
  /*  2190 */ 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003,
  /*  2205 */ 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2220 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2235 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2250 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2265 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2280 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2295 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 20998, 21043, 21043, 21043, 21026,
  /*  2310 */ 21043, 21043, 21010, 21059, 21039, 21083, 21075, 21099, 21114, 21129, 20226, 18385, 18385, 37107, 18385,
  /*  2325 */ 18385, 36127, 18385, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 24636,
  /*  2340 */ 28583, 18334, 18510, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534,
  /*  2355 */ 18555, 18576, 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228,
  /*  2370 */ 18694, 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497,
  /*  2385 */ 38208, 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918,
  /*  2400 */ 18970, 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210,
  /*  2415 */ 19230, 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373,
  /*  2430 */ 19420, 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709,
  /*  2445 */ 19687, 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964,
  /*  2460 */ 20003, 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2475 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2490 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2505 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2520 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2535 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2550 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 21189, 18385, 18385, 18385,
  /*  2565 */ 21155, 18385, 18385, 40227, 42070, 21183, 21266, 21205, 21274, 21253, 21219, 20226, 18385, 18385, 21282,
  /*  2580 */ 18385, 18385, 36127, 18385, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907,
  /*  2595 */ 24636, 28583, 18334, 24894, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593,
  /*  2610 */ 18534, 18555, 18576, 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658,
  /*  2625 */ 39228, 18694, 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837,
  /*  2640 */ 39497, 38208, 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940,
  /*  2655 */ 18918, 18970, 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192,
  /*  2670 */ 19210, 19230, 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775,
  /*  2685 */ 19373, 19420, 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678,
  /*  2700 */ 19709, 19687, 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928,
  /*  2715 */ 19964, 20003, 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2730 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2745 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2760 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2775 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2790 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2805 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 35495, 18385, 18385,
  /*  2820 */ 18385, 24899, 18385, 18385, 18385, 42070, 20119, 21370, 21372, 21298, 21355, 21388, 20226, 18385, 18385,
  /*  2835 */ 19336, 18385, 18385, 36127, 18385, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808,
  /*  2850 */ 23907, 24636, 28583, 18334, 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506,
  /*  2865 */ 31593, 18534, 18555, 18576, 21422, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635,
  /*  2880 */ 18658, 39228, 18694, 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19024, 18791, 18812, 20020, 18833,
  /*  2895 */ 18837, 39497, 38208, 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998,
  /*  2910 */ 18940, 18918, 18970, 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174,
  /*  2925 */ 19192, 19210, 19230, 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389,
  /*  2940 */ 18775, 19373, 19420, 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652,
  /*  2955 */ 19678, 19709, 19687, 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815,
  /*  2970 */ 19928, 19964, 20003, 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  2985 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3000 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3015 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3030 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3045 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3060 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 18385, 18385,
  /*  3075 */ 18385, 18385, 24899, 18385, 18385, 18385, 42070, 20119, 40630, 40633, 21445, 40625, 21469, 20226, 18385,
  /*  3090 */ 18385, 19336, 18385, 18385, 36127, 18385, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016,
  /*  3105 */ 20808, 23907, 24636, 28583, 18334, 25450, 18385, 18385, 21495, 18385, 42547, 18402, 18448, 18498, 18463,
  /*  3120 */ 19506, 31593, 18534, 18555, 18576, 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385,
  /*  3135 */ 18635, 18658, 39228, 18694, 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020,
  /*  3150 */ 18833, 18837, 39497, 38208, 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976,
  /*  3165 */ 18998, 18940, 18918, 18970, 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143,
  /*  3180 */ 19174, 19192, 19210, 19230, 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368,
  /*  3195 */ 19389, 18775, 19373, 19420, 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618,
  /*  3210 */ 19652, 19678, 19709, 19687, 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020,
  /*  3225 */ 19815, 19928, 19964, 20003, 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3240 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3255 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3270 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3285 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3300 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3315 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 23781,
  /*  3330 */ 18385, 18385, 18385, 21513, 21532, 18385, 23784, 42070, 21549, 21588, 21590, 21525, 42741, 21606, 20226,
  /*  3345 */ 18385, 18385, 19336, 18385, 18385, 36127, 18385, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020,
  /*  3360 */ 20016, 20808, 23907, 24636, 28583, 18334, 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498,
  /*  3375 */ 18463, 19506, 31593, 18534, 18555, 18576, 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385,
  /*  3390 */ 18385, 18635, 18658, 39228, 18694, 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812,
  /*  3405 */ 20020, 18833, 18837, 39497, 38208, 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924,
  /*  3420 */ 18976, 18998, 18940, 18918, 18970, 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127,
  /*  3435 */ 19143, 19174, 19192, 19210, 19230, 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770,
  /*  3450 */ 19368, 19389, 18775, 19373, 19420, 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602,
  /*  3465 */ 19618, 19652, 19678, 19709, 19687, 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979,
  /*  3480 */ 20020, 19815, 19928, 19964, 20003, 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3495 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3510 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3525 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3540 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3555 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3570 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 21647,
  /*  3585 */ 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 20119, 34010, 34013, 21671, 34005, 21695,
  /*  3600 */ 20226, 18385, 18385, 19336, 18385, 18385, 36127, 18385, 24383, 33016, 18385, 18385, 18385, 19636, 25055,
  /*  3615 */ 27301, 29508, 27938, 26030, 18385, 32012, 18385, 25450, 38368, 18385, 21495, 21723, 34876, 27283, 30437,
  /*  3630 */ 18385, 18385, 33017, 30829, 27301, 27301, 31224, 21743, 34476, 34476, 31019, 34206, 18385, 18385, 18385,
  /*  3645 */ 18385, 18385, 25148, 41218, 19629, 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301, 30564, 34476,
  /*  3660 */ 34476, 34476, 21747, 34206, 35923, 21764, 18385, 18385, 18385, 18385, 26619, 27283, 30437, 36508, 33395,
  /*  3675 */ 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617, 18385, 18385, 18385, 18385, 21616, 27283,
  /*  3690 */ 35864, 35844, 40653, 27301, 27302, 41467, 40441, 34476, 21746, 40873, 18385, 18385, 21781, 36508, 26874,
  /*  3705 */ 31115, 27301, 21800, 34476, 34497, 39119, 21843, 18385, 41820, 38895, 31109, 27301, 32425, 34476, 40300,
  /*  3720 */ 18385, 20644, 24756, 21862, 32390, 21889, 26825, 24383, 28978, 21907, 21923, 37578, 37286, 21950, 21971,
  /*  3735 */ 37931, 33405, 34312, 25931, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385,
  /*  3750 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3765 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3780 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3795 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3810 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3825 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  3840 */ 20097, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 22041, 20119, 18385, 18385, 18385, 38714,
  /*  3855 */ 22057, 20226, 18385, 18385, 19336, 18385, 18385, 37573, 18385, 24383, 33016, 18385, 18385, 18385, 19636,
  /*  3870 */ 25055, 27301, 29508, 41194, 26030, 18385, 18385, 18385, 25450, 18385, 18385, 18384, 18385, 34876, 27283,
  /*  3885 */ 30437, 18385, 18385, 33017, 30829, 27301, 27301, 31224, 21743, 34476, 34476, 39206, 34206, 18385, 18385,
  /*  3900 */ 18385, 18385, 18385, 25148, 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301, 30564,
  /*  3915 */ 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 24382, 27283, 30437, 36508,
  /*  3930 */ 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617, 18385, 18385, 18385, 18385, 24381,
  /*  3945 */ 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746, 40873, 18385, 18385, 18385, 36508,
  /*  3960 */ 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301, 32425, 34476,
  /*  3975 */ 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621,
  /*  3990 */ 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385,
  /*  4005 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4020 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4035 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4050 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4065 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4080 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4095 */ 18385, 20097, 22119, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 20119, 22083, 22096, 22112,
  /*  4110 */ 24107, 22141, 20226, 18385, 18385, 19336, 18385, 18385, 36127, 40270, 33696, 18707, 18385, 18385, 18385,
  /*  4125 */ 18288, 20272, 20020, 20016, 20808, 23907, 24636, 28583, 18334, 25450, 18385, 18385, 18384, 18385, 42547,
  /*  4140 */ 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576, 18592, 18539, 18560, 42518, 18837, 18385,
  /*  4155 */ 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723, 18734, 18758, 19987, 18796, 18817, 42497,
  /*  4170 */ 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251, 19070, 38218, 39582, 41127, 18856, 18884,
  /*  4185 */ 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992, 19014, 18840, 25532, 19040, 19056, 21237,
  /*  4200 */ 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176, 19194, 19246, 19427, 19280, 18385, 19328,
  /*  4215 */ 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448, 19469, 18385, 19485, 19095, 19533, 19522,
  /*  4230 */ 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739, 19776, 19792, 19831, 19806, 19847, 19863,
  /*  4245 */ 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599, 20036, 20052, 20078, 18385, 18385, 18385,
  /*  4260 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4275 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4290 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4305 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4320 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4335 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4350 */ 18385, 18385, 20097, 22167, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 22257, 20119, 22186, 18385,
  /*  4365 */ 18385, 22348, 22205, 22231, 18385, 18385, 19336, 18385, 18385, 22253, 18385, 24383, 33016, 18385, 18385,
  /*  4380 */ 18385, 19636, 25055, 27301, 29508, 40807, 26030, 18385, 18385, 18385, 25450, 18385, 18385, 22273, 18385,
  /*  4395 */ 34876, 27283, 30437, 18385, 18385, 33017, 30829, 27301, 27301, 31224, 21743, 34476, 34476, 39206, 38140,
  /*  4410 */ 22298, 18385, 18385, 18385, 18385, 39926, 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301,
  /*  4425 */ 27301, 30564, 34476, 34476, 34476, 21747, 28025, 22316, 18385, 18385, 18385, 18385, 42635, 24382, 27283,
  /*  4440 */ 30437, 36508, 33395, 27301, 27301, 27301, 40371, 34476, 34476, 34476, 21748, 22336, 18385, 18385, 18385,
  /*  4455 */ 18385, 24381, 27283, 35864, 35844, 27301, 27301, 38533, 22364, 34476, 34476, 21746, 40873, 18385, 18385,
  /*  4470 */ 18385, 36508, 26874, 31115, 27301, 31407, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301,
  /*  4485 */ 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955,
  /*  4500 */ 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385,
  /*  4515 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4530 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4545 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4560 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4575 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4590 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4605 */ 18385, 18385, 18385, 20097, 31866, 18385, 18385, 18385, 22391, 22409, 18385, 18272, 42070, 22429, 41086,
  /*  4620 */ 22465, 22476, 42874, 22500, 22543, 18385, 18385, 35049, 18385, 18385, 36127, 18385, 33696, 19505, 18385,
  /*  4635 */ 18385, 18385, 18288, 20291, 22758, 18428, 22602, 22579, 24636, 28583, 18334, 24559, 18385, 18385, 18384,
  /*  4650 */ 18385, 42547, 18402, 18448, 18498, 18463, 19506, 41543, 23020, 22567, 22692, 22595, 22618, 23441, 22634,
  /*  4665 */ 22722, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723, 18734, 18758, 30045, 22975,
  /*  4680 */ 23489, 22760, 30054, 23286, 22664, 18432, 22680, 22722, 39497, 38208, 38251, 19070, 38218, 39582, 41127,
  /*  4695 */ 18856, 18884, 19497, 22708, 22748, 22776, 23478, 23240, 22804, 22833, 22820, 22862, 23547, 25532, 19040,
  /*  4710 */ 19056, 21237, 19086, 19111, 19127, 22889, 22934, 22964, 22918, 41062, 22991, 23449, 23007, 23036, 19280,
  /*  4725 */ 18385, 19328, 33700, 19352, 18415, 23057, 23073, 23264, 23129, 23145, 19448, 19469, 18385, 19485, 19662,
  /*  4740 */ 23173, 22788, 23254, 23188, 19602, 19618, 19652, 23225, 23500, 23280, 23302, 19776, 23341, 23357, 23373,
  /*  4755 */ 23410, 22873, 23088, 22645, 22846, 22648, 22732, 22948, 23426, 23465, 22904, 23516, 23532, 23563, 18385,
  /*  4770 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4785 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4800 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4815 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4830 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4845 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  4860 */ 18385, 18385, 18385, 18385, 20097, 38220, 18385, 18385, 18385, 23582, 23617, 18385, 18385, 42070, 23643,
  /*  4875 */ 26221, 23671, 26229, 38220, 23685, 20226, 18385, 18385, 19336, 18385, 18385, 36127, 18385, 33696, 19505,
  /*  4890 */ 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 24636, 28583, 18334, 25450, 18385, 18385,
  /*  4905 */ 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576, 18592, 18539, 18560,
  /*  4920 */ 42518, 18837, 18385, 18615, 18385, 18385, 18385, 23711, 23761, 39228, 18694, 18723, 18734, 18758, 19987,
  /*  4935 */ 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 19693, 23800, 38208, 38251, 19070, 38218, 40472,
  /*  4950 */ 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992, 19014, 42780, 25532,
  /*  4965 */ 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 23835, 23851, 19176, 19194, 19246, 19427,
  /*  4980 */ 19280, 18385, 19328, 33700, 19352, 18770, 19368, 23880, 18775, 19373, 19420, 19448, 19469, 18385, 19485,
  /*  4995 */ 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739, 19776, 19792, 19831,
  /*  5010 */ 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599, 20036, 20052, 20078,
  /*  5025 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5040 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5055 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5070 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5085 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5100 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5115 */ 18385, 18385, 18385, 18385, 18385, 20097, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 18385,
  /*  5130 */ 23923, 23943, 23946, 23962, 21339, 23986, 20226, 18385, 18385, 19336, 18385, 18385, 36127, 18385, 33696,
  /*  5145 */ 18868, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 19723, 24636, 28583, 18334, 25450, 18385,
  /*  5160 */ 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576, 18592, 18539,
  /*  5175 */ 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723, 18734, 18758,
  /*  5190 */ 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251, 19070, 38218,
  /*  5205 */ 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992, 19014, 18840,
  /*  5220 */ 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176, 19194, 19246,
  /*  5235 */ 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448, 19469, 18385,
  /*  5250 */ 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739, 19776, 19792,
  /*  5265 */ 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599, 20036, 20052,
  /*  5280 */ 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5295 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5310 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5325 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5340 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5355 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5370 */ 18385, 18385, 18385, 18385, 18385, 18385, 24014, 18385, 24080, 18385, 18385, 24899, 18385, 18385, 18385,
  /*  5385 */ 42070, 20119, 24044, 24057, 24073, 24901, 24097, 24123, 18385, 18385, 19336, 18385, 18385, 36127, 18385,
  /*  5400 */ 33696, 24156, 24172, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 19158, 24636, 28583, 18334, 25450,
  /*  5415 */ 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576, 18592,
  /*  5430 */ 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723, 18734,
  /*  5445 */ 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251, 19070,
  /*  5460 */ 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992, 19014,
  /*  5475 */ 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176, 19194,
  /*  5490 */ 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448, 19469,
  /*  5505 */ 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739, 19776,
  /*  5520 */ 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599, 20036,
  /*  5535 */ 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5550 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5565 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5580 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5595 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5610 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5625 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24190, 37171, 18385, 18385, 18385, 24899, 18385, 18385,
  /*  5640 */ 18385, 42070, 20119, 24264, 24267, 24283, 20458, 24321, 24356, 18385, 18385, 19336, 18385, 18385, 36127,
  /*  5655 */ 18385, 33696, 19505, 24379, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 19875, 24399, 28583, 18334,
  /*  5670 */ 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576,
  /*  5685 */ 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723,
  /*  5700 */ 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251,
  /*  5715 */ 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992,
  /*  5730 */ 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176,
  /*  5745 */ 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448,
  /*  5760 */ 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739,
  /*  5775 */ 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599,
  /*  5790 */ 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5805 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5820 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5835 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5850 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5865 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  5880 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24427, 18385, 18385, 18385, 18385, 24443, 18385,
  /*  5895 */ 18385, 18385, 42070, 20119, 24445, 24461, 18385, 37206, 24495, 20226, 18385, 18385, 19336, 18385, 18385,
  /*  5910 */ 36127, 40500, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 24521, 19404, 24636, 28583,
  /*  5925 */ 18334, 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555,
  /*  5940 */ 18576, 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694,
  /*  5955 */ 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208,
  /*  5970 */ 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970,
  /*  5985 */ 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230,
  /*  6000 */ 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420,
  /*  6015 */ 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687,
  /*  6030 */ 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003,
  /*  6045 */ 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6060 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6075 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6090 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6105 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6120 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6135 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 18385, 18385, 18385, 18385, 24899,
  /*  6150 */ 18385, 18385, 18385, 42070, 20119, 18385, 18385, 18385, 38395, 24549, 20226, 18385, 18385, 19336, 18385,
  /*  6165 */ 18385, 36127, 18385, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 24636,
  /*  6180 */ 28583, 18334, 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534,
  /*  6195 */ 18555, 18576, 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228,
  /*  6210 */ 18694, 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497,
  /*  6225 */ 38208, 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918,
  /*  6240 */ 18970, 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210,
  /*  6255 */ 19230, 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373,
  /*  6270 */ 19420, 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709,
  /*  6285 */ 19687, 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964,
  /*  6300 */ 20003, 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6315 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6330 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6345 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6360 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6375 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6390 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385, 18385, 18385,
  /*  6405 */ 24899, 18385, 18385, 18385, 42070, 24605, 30438, 40878, 30076, 33407, 24626, 37376, 18385, 18385, 19336,
  /*  6420 */ 18385, 18385, 18385, 18385, 24383, 33016, 18385, 18385, 18385, 19636, 25055, 27301, 29508, 27938, 26030,
  /*  6435 */ 18385, 18385, 18385, 25450, 18385, 18385, 18385, 18385, 34876, 27283, 30437, 18385, 18385, 33017, 23324,
  /*  6450 */ 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206, 18385, 18385, 18385, 18385, 18385, 32047, 18385,
  /*  6465 */ 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301, 26002, 34476, 34476, 34476, 21747, 38816,
  /*  6480 */ 24671, 18385, 18385, 18385, 18385, 42635, 24382, 27283, 30437, 36508, 33395, 27301, 27301, 27301, 21873,
  /*  6495 */ 34476, 34476, 34476, 21748, 22336, 18385, 18385, 18385, 34263, 24381, 27283, 35864, 35844, 27301, 27301,
  /*  6510 */ 27302, 24691, 34476, 34476, 21746, 40873, 18385, 18385, 18385, 36508, 26874, 31115, 27301, 31407, 34476,
  /*  6525 */ 34476, 39119, 18385, 18385, 33575, 38895, 31109, 27301, 32425, 34476, 39125, 18385, 18385, 24756, 31116,
  /*  6540 */ 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621, 33402, 37931, 33405, 30827, 39202,
  /*  6555 */ 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6570 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6585 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6600 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6615 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6630 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6645 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385, 18385,
  /*  6660 */ 18385, 24899, 18385, 18385, 18385, 42070, 24605, 30438, 40878, 30076, 33407, 24626, 37376, 18385, 18385,
  /*  6675 */ 19336, 18385, 18385, 18385, 18385, 24383, 33016, 18385, 18385, 18385, 19636, 25055, 27301, 29508, 27938,
  /*  6690 */ 26030, 18385, 18385, 18385, 25450, 18385, 18385, 18385, 18385, 34876, 27283, 30437, 18385, 18385, 33017,
  /*  6705 */ 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206, 18385, 18385, 18385, 18385, 18385, 32047,
  /*  6720 */ 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301, 26002, 34476, 34476, 34476, 21747,
  /*  6735 */ 38816, 24671, 18385, 18385, 18385, 18385, 42635, 24382, 27283, 30437, 36508, 33395, 27301, 27301, 27301,
  /*  6750 */ 21873, 34476, 34476, 34476, 21748, 22336, 18385, 18385, 18385, 18385, 24381, 27283, 35864, 35844, 27301,
  /*  6765 */ 27301, 27302, 24691, 34476, 34476, 21746, 40873, 18385, 18385, 18385, 36508, 26874, 31115, 27301, 31407,
  /*  6780 */ 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301, 32425, 34476, 39125, 18385, 18385, 24756,
  /*  6795 */ 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621, 33402, 37931, 33405, 30827,
  /*  6810 */ 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6825 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6840 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6855 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6870 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6885 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  6900 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385,
  /*  6915 */ 18385, 18385, 24899, 18385, 18385, 18385, 42070, 24605, 30438, 40878, 30076, 33407, 24626, 37376, 18385,
  /*  6930 */ 18385, 19336, 18385, 18385, 18385, 18385, 24383, 33016, 18385, 18385, 18385, 19636, 25055, 27301, 29508,
  /*  6945 */ 27938, 26030, 18385, 18385, 18385, 25450, 18385, 18385, 18385, 18385, 34876, 27283, 30437, 18385, 18385,
  /*  6960 */ 33017, 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206, 18385, 18385, 18385, 18385, 18385,
  /*  6975 */ 32047, 31650, 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301, 26002, 34476, 34476, 34476,
  /*  6990 */ 21747, 38816, 24671, 18385, 18385, 18385, 18385, 42635, 24382, 27283, 30437, 36508, 33395, 27301, 27301,
  /*  7005 */ 27301, 21873, 34476, 34476, 34476, 21748, 22336, 18385, 18385, 18385, 18385, 24381, 27283, 35864, 35844,
  /*  7020 */ 27301, 27301, 27302, 24691, 34476, 34476, 21746, 40873, 18385, 18385, 18385, 36508, 26874, 31115, 27301,
  /*  7035 */ 31407, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301, 32425, 34476, 39125, 18385, 18385,
  /*  7050 */ 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621, 33402, 37931, 33405,
  /*  7065 */ 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7080 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7095 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7110 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7125 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7140 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7155 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385,
  /*  7170 */ 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 24605, 30438, 40878, 30076, 33407, 24626, 37376,
  /*  7185 */ 18385, 18385, 19336, 18385, 18385, 18385, 18385, 24383, 33016, 18385, 18385, 18385, 19636, 25055, 27301,
  /*  7200 */ 29508, 27938, 26030, 18385, 18385, 18385, 25450, 18385, 18385, 18385, 18385, 34876, 27283, 30437, 18385,
  /*  7215 */ 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206, 18385, 18385, 18385, 18385,
  /*  7230 */ 18385, 32047, 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301, 26002, 34476, 34476,
  /*  7245 */ 34476, 21747, 38816, 24671, 18385, 18385, 18385, 18385, 42724, 24382, 27283, 30437, 36508, 33395, 27301,
  /*  7260 */ 27301, 27301, 21873, 34476, 34476, 34476, 21748, 22336, 18385, 18385, 18385, 18385, 24381, 27283, 35864,
  /*  7275 */ 35844, 27301, 27301, 27302, 24691, 34476, 34476, 21746, 40873, 18385, 18385, 18385, 36508, 26874, 31115,
  /*  7290 */ 27301, 31407, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301, 32425, 34476, 39125, 18385,
  /*  7305 */ 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621, 33402, 37931,
  /*  7320 */ 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7335 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7350 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7365 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7380 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7395 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7410 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583,
  /*  7425 */ 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 24605, 30438, 40878, 30076, 33407, 24626,
  /*  7440 */ 37376, 18385, 18385, 19336, 18385, 18385, 26503, 18385, 24383, 33016, 18385, 18385, 18385, 19636, 25055,
  /*  7455 */ 27301, 29508, 27938, 26030, 18385, 18385, 18385, 25450, 18385, 18385, 26507, 18385, 34876, 27283, 30437,
  /*  7470 */ 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206, 18385, 18385, 18385,
  /*  7485 */ 18385, 18385, 32047, 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301, 26002, 34476,
  /*  7500 */ 34476, 34476, 21747, 38816, 24671, 18385, 18385, 18385, 18385, 42635, 24382, 27283, 30437, 36508, 33395,
  /*  7515 */ 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 22336, 18385, 18385, 18385, 18385, 24381, 27283,
  /*  7530 */ 35864, 35844, 27301, 27301, 27302, 24691, 34476, 34476, 21746, 40873, 18385, 18385, 18385, 36508, 26874,
  /*  7545 */ 31115, 27301, 31407, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301, 32425, 34476, 39125,
  /*  7560 */ 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621, 33402,
  /*  7575 */ 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385,
  /*  7590 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7605 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7620 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7635 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7650 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7665 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7680 */ 24583, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 24605, 30438, 40878, 30076, 33407,
  /*  7695 */ 24626, 37376, 18385, 18385, 19336, 18385, 18385, 18385, 18385, 24383, 33016, 18385, 18385, 18385, 19636,
  /*  7710 */ 25055, 27301, 29508, 27938, 26030, 18385, 18385, 18385, 25450, 18385, 18385, 18385, 18385, 34876, 27283,
  /*  7725 */ 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206, 18385, 18385,
  /*  7740 */ 18385, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301, 26002,
  /*  7755 */ 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 24382, 27283, 30437, 36508,
  /*  7770 */ 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617, 18385, 18385, 18385, 18385, 24381,
  /*  7785 */ 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746, 40873, 18385, 18385, 18385, 36508,
  /*  7800 */ 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301, 32425, 34476,
  /*  7815 */ 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621,
  /*  7830 */ 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385,
  /*  7845 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7860 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7875 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7890 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7905 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7920 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  7935 */ 18385, 24583, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 24605, 30438, 40878, 30076,
  /*  7950 */ 33407, 24626, 37376, 18385, 18385, 19336, 18385, 18385, 18385, 18385, 24383, 33016, 18385, 18385, 18385,
  /*  7965 */ 19636, 25055, 27301, 29508, 27938, 21995, 18385, 18385, 18385, 25450, 18385, 18385, 18385, 18385, 34876,
  /*  7980 */ 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206, 18385,
  /*  7995 */ 18385, 18385, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301,
  /*  8010 */ 26002, 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 24382, 27283, 30437,
  /*  8025 */ 36508, 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617, 18385, 18385, 18385, 18385,
  /*  8040 */ 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746, 40873, 18385, 18385, 18385,
  /*  8055 */ 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301, 32425,
  /*  8070 */ 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404,
  /*  8085 */ 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385,
  /*  8100 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8115 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8130 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8145 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8160 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8175 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8190 */ 18385, 18385, 24583, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 24605, 30438, 40878,
  /*  8205 */ 30076, 33407, 24718, 37376, 18385, 18385, 19336, 18385, 18385, 18385, 18385, 24383, 33016, 18385, 18385,
  /*  8220 */ 18385, 19636, 25055, 27301, 29508, 27938, 26030, 18385, 18385, 18385, 25450, 18385, 18385, 18385, 18385,
  /*  8235 */ 34876, 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206,
  /*  8250 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301,
  /*  8265 */ 27301, 26002, 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 24382, 27283,
  /*  8280 */ 30437, 36508, 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617, 18385, 18385, 18385,
  /*  8295 */ 18385, 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746, 40873, 18385, 18385,
  /*  8310 */ 18385, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301,
  /*  8325 */ 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955,
  /*  8340 */ 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385,
  /*  8355 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8370 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8385 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8400 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8415 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8430 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8445 */ 18385, 18385, 18385, 24583, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 24744, 30438,
  /*  8460 */ 40878, 30076, 33407, 24626, 37376, 18385, 18385, 19336, 18385, 18385, 18385, 18385, 24383, 33016, 18385,
  /*  8475 */ 18385, 18385, 19636, 25055, 27301, 29508, 27938, 26030, 18385, 18385, 18385, 25450, 18385, 18385, 18385,
  /*  8490 */ 34156, 34876, 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206,
  /*  8505 */ 34206, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301,
  /*  8520 */ 27301, 27301, 26002, 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 24382,
  /*  8535 */ 27283, 30437, 36508, 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617, 18385, 18385,
  /*  8550 */ 18385, 18385, 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746, 40873, 18385,
  /*  8565 */ 18385, 18385, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109,
  /*  8580 */ 27301, 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851,
  /*  8595 */ 21955, 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385,
  /*  8610 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8625 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8640 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8655 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8670 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8685 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8700 */ 18385, 18385, 18385, 18385, 24583, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 24605,
  /*  8715 */ 30438, 40878, 21453, 24783, 24798, 37376, 18385, 18385, 19336, 18385, 18385, 18385, 18385, 24383, 33016,
  /*  8730 */ 18385, 18385, 18385, 19636, 25055, 27301, 29508, 27938, 26030, 18385, 18385, 18385, 25450, 18385, 18385,
  /*  8745 */ 18385, 18385, 34876, 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476, 34476,
  /*  8760 */ 39206, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385, 34878, 23325,
  /*  8775 */ 27301, 27301, 27301, 26002, 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8790 */ 24382, 27283, 30437, 36508, 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617, 18385,
  /*  8805 */ 18385, 18385, 18385, 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746, 40873,
  /*  8820 */ 18385, 18385, 18385, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385, 38895,
  /*  8835 */ 31109, 27301, 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406,
  /*  8850 */ 38851, 21955, 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931,
  /*  8865 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8880 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8895 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8910 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8925 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8940 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  8955 */ 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070,
  /*  8970 */ 24605, 30438, 40878, 30076, 33407, 24626, 37376, 18385, 18385, 19336, 18385, 18385, 18385, 18385, 24383,
  /*  8985 */ 33016, 18385, 18385, 18385, 19636, 25055, 27301, 29508, 27938, 26030, 18385, 18385, 18385, 25450, 18385,
  /*  9000 */ 18385, 18385, 18385, 34876, 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476,
  /*  9015 */ 34476, 39206, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385, 34878,
  /*  9030 */ 23325, 27301, 27301, 27301, 26002, 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385,
  /*  9045 */ 18385, 24382, 27283, 30437, 36508, 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617,
  /*  9060 */ 18385, 18385, 18385, 18385, 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746,
  /*  9075 */ 40873, 18385, 18385, 38875, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385,
  /*  9090 */ 38895, 31109, 27301, 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294,
  /*  9105 */ 33406, 38851, 21955, 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011,
  /*  9120 */ 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9135 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9150 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9165 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9180 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9195 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9210 */ 18385, 18385, 18385, 18385, 18385, 18385, 24824, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385,
  /*  9225 */ 42070, 24605, 30438, 40878, 30076, 33407, 24626, 37376, 18385, 18385, 19336, 18385, 18385, 18385, 18385,
  /*  9240 */ 24383, 33016, 18385, 18385, 18385, 19636, 25055, 27301, 29508, 27938, 26030, 18385, 18385, 18385, 25450,
  /*  9255 */ 18385, 18385, 18385, 18385, 34876, 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652,
  /*  9270 */ 34476, 34476, 39206, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385,
  /*  9285 */ 34878, 23325, 27301, 27301, 27301, 26002, 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385,
  /*  9300 */ 18385, 18385, 24382, 27283, 30437, 36508, 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748,
  /*  9315 */ 41617, 18385, 18385, 18385, 18385, 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476,
  /*  9330 */ 21746, 40873, 18385, 18385, 18385, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385,
  /*  9345 */ 18385, 38895, 31109, 27301, 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383,
  /*  9360 */ 31294, 33406, 38851, 21955, 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674,
  /*  9375 */ 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9390 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9405 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9420 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9435 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9450 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9465 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 18385, 18385, 18385, 18385, 24899, 18385, 18385,
  /*  9480 */ 18385, 42070, 20119, 24846, 24870, 24917, 24854, 24884, 20226, 18385, 18385, 19336, 18385, 18385, 36127,
  /*  9495 */ 18385, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 24636, 28583, 18334,
  /*  9510 */ 25450, 18385, 18385, 18384, 24935, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576,
  /*  9525 */ 18592, 18539, 18560, 24955, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723,
  /*  9540 */ 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251,
  /*  9555 */ 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992,
  /*  9570 */ 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176,
  /*  9585 */ 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448,
  /*  9600 */ 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 24983, 19652, 19678, 19709, 19687, 19739,
  /*  9615 */ 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599,
  /*  9630 */ 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9645 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9660 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9675 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9690 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9705 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9720 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 18385, 18385, 18385, 18385, 24899, 18385,
  /*  9735 */ 18385, 18385, 42070, 20119, 18385, 18385, 18385, 18385, 19294, 20226, 18385, 18385, 19336, 18385, 18385,
  /*  9750 */ 36127, 18385, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 24636, 28583,
  /*  9765 */ 18334, 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555,
  /*  9780 */ 18576, 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694,
  /*  9795 */ 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208,
  /*  9810 */ 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970,
  /*  9825 */ 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230,
  /*  9840 */ 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420,
  /*  9855 */ 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687,
  /*  9870 */ 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003,
  /*  9885 */ 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9900 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9915 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9930 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9945 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9960 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /*  9975 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 25017, 25053, 18385, 18385, 18385, 25071,
  /*  9990 */ 18385, 18385, 18385, 42070, 25089, 26114, 25109, 26122, 25073, 25123, 20226, 18385, 18385, 19336, 18385,
  /* 10005 */ 18385, 36127, 18385, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 24533, 24636,
  /* 10020 */ 28583, 18334, 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534,
  /* 10035 */ 18555, 18576, 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228,
  /* 10050 */ 18694, 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497,
  /* 10065 */ 38208, 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918,
  /* 10080 */ 18970, 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210,
  /* 10095 */ 19230, 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373,
  /* 10110 */ 19420, 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709,
  /* 10125 */ 19687, 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964,
  /* 10140 */ 20003, 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10155 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10170 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10185 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10200 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10215 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10230 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 25171, 25193, 18385, 18385, 18385,
  /* 10245 */ 24899, 18385, 18385, 18385, 42070, 20119, 18385, 18385, 18385, 23157, 25211, 20226, 18385, 18385, 19336,
  /* 10260 */ 18385, 18385, 36127, 25227, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 21429, 24967,
  /* 10275 */ 25246, 28583, 18334, 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593,
  /* 10290 */ 18534, 18555, 18576, 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658,
  /* 10305 */ 39228, 18694, 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837,
  /* 10320 */ 39497, 38208, 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940,
  /* 10335 */ 18918, 18970, 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192,
  /* 10350 */ 19210, 19230, 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775,
  /* 10365 */ 19373, 19420, 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678,
  /* 10380 */ 19709, 19687, 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928,
  /* 10395 */ 19964, 20003, 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10410 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10425 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10440 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10455 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10470 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10485 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 25274, 18385,
  /* 10500 */ 18385, 25293, 25318, 18385, 22282, 25352, 25368, 25381, 25394, 25410, 25424, 25440, 24028, 18385, 25598,
  /* 10515 */ 20176, 20598, 25474, 25509, 25548, 25564, 28413, 25589, 25616, 25657, 25573, 25673, 25717, 32076, 25703,
  /* 10530 */ 25733, 39617, 18385, 19760, 25450, 41462, 24589, 18385, 25749, 34876, 27284, 30437, 19943, 38264, 21406,
  /* 10545 */ 25771, 27301, 27301, 40088, 24652, 34476, 42194, 25795, 34206, 31957, 32997, 20202, 36532, 42443, 32047,
  /* 10560 */ 18385, 37796, 27283, 25822, 25838, 25871, 26388, 40339, 27301, 25917, 25953, 30603, 34476, 30986, 26018,
  /* 10575 */ 26046, 26093, 18385, 22440, 18385, 37542, 42635, 21784, 26146, 26198, 26256, 36894, 26289, 26309, 26329,
  /* 10590 */ 21873, 26347, 35131, 31932, 29048, 26373, 25487, 26414, 18385, 26438, 26454, 27283, 35864, 35844, 27301,
  /* 10605 */ 27301, 26474, 24691, 34476, 34476, 26524, 26601, 26635, 38161, 39634, 36508, 28294, 26651, 33429, 31407,
  /* 10620 */ 34476, 29352, 35141, 22527, 18385, 18385, 38895, 31109, 26668, 26687, 29835, 39125, 18385, 18385, 24756,
  /* 10635 */ 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 34555, 33402, 29075, 33405, 33534,
  /* 10650 */ 39202, 26723, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10665 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10680 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10695 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10710 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10725 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10740 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 26746,
  /* 10755 */ 18385, 18385, 24899, 18385, 18385, 18385, 26772, 26788, 23737, 23745, 26812, 39033, 26846, 37376, 18385,
  /* 10770 */ 18385, 19336, 18385, 18385, 18385, 18385, 24383, 33016, 18385, 18385, 18385, 19636, 25055, 27301, 29508,
  /* 10785 */ 27938, 26030, 18385, 18385, 18385, 25450, 18385, 18385, 18385, 18385, 34876, 27283, 30437, 18385, 18385,
  /* 10800 */ 33017, 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206, 18385, 18385, 18385, 18385, 25493,
  /* 10815 */ 32047, 26756, 36506, 27283, 26872, 26752, 34878, 23325, 27301, 27301, 28668, 26002, 34476, 34476, 33193,
  /* 10830 */ 21747, 38816, 24671, 18385, 18385, 18385, 18385, 42635, 24382, 27283, 30437, 36508, 33395, 27301, 27301,
  /* 10845 */ 27301, 21873, 34476, 34476, 34476, 21748, 22336, 18385, 18385, 18385, 26890, 24919, 27283, 26909, 35844,
  /* 10860 */ 26927, 27301, 27302, 26945, 34476, 34476, 21746, 40873, 18385, 18385, 18385, 36508, 26874, 31115, 27301,
  /* 10875 */ 31407, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301, 32425, 34476, 39125, 18385, 18385,
  /* 10890 */ 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621, 33402, 37931, 26961,
  /* 10905 */ 26992, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10920 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10935 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10950 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10965 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10980 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 10995 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385,
  /* 11010 */ 24728, 18385, 18385, 24899, 18642, 18385, 18385, 39587, 27018, 27031, 27042, 27058, 27072, 27088, 37376,
  /* 11025 */ 18385, 40479, 18518, 18385, 21934, 18385, 18385, 24383, 33016, 18385, 18385, 20769, 19636, 41290, 40343,
  /* 11040 */ 29508, 27114, 27142, 18385, 27158, 18385, 26856, 18385, 26070, 18385, 37382, 27178, 27283, 38497, 18368,
  /* 11055 */ 24140, 33017, 27194, 27210, 27301, 31224, 27234, 27263, 34476, 39206, 34206, 30781, 18385, 33210, 18385,
  /* 11070 */ 33658, 32047, 31207, 19902, 27282, 30436, 18385, 34878, 23325, 34665, 27300, 27318, 26002, 31811, 26701,
  /* 11085 */ 27931, 21747, 38816, 24671, 18385, 24340, 18385, 36984, 42635, 24382, 27283, 30437, 36508, 33395, 27301,
  /* 11100 */ 27301, 36076, 21873, 34476, 34476, 31975, 21748, 22336, 18385, 18385, 18385, 18385, 27336, 27283, 35864,
  /* 11115 */ 35844, 27301, 41655, 27302, 24691, 34476, 29704, 21746, 40873, 18385, 30188, 18385, 28348, 27358, 27387,
  /* 11130 */ 25894, 31407, 34476, 27407, 26357, 29420, 18385, 18385, 29976, 31109, 34980, 32425, 27425, 39125, 18385,
  /* 11145 */ 34114, 24756, 31116, 41609, 36026, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621, 33402, 32276,
  /* 11160 */ 27447, 30827, 39202, 30831, 34210, 35674, 35674, 27483, 21931, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11175 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11190 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11205 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11220 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11235 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11250 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583,
  /* 11265 */ 18385, 20848, 18385, 18385, 24899, 25458, 18385, 27534, 42070, 27558, 27571, 27583, 27599, 27613, 27629,
  /* 11280 */ 37376, 18385, 18385, 19336, 18385, 18385, 18385, 18385, 24383, 27664, 22449, 22170, 22447, 35032, 25055,
  /* 11295 */ 38781, 26537, 27771, 27126, 18385, 28548, 27689, 27098, 26893, 18385, 18385, 18385, 41339, 23819, 39783,
  /* 11310 */ 27705, 27732, 40528, 18301, 28443, 26398, 38787, 27748, 34476, 27764, 36234, 34206, 18385, 18385, 38270,
  /* 11325 */ 18385, 31459, 32047, 18385, 36506, 27283, 30436, 18385, 39551, 27787, 27301, 27301, 27301, 26002, 34476,
  /* 11340 */ 34476, 34476, 21747, 27810, 27840, 18385, 18385, 27866, 28247, 42635, 24382, 27283, 30437, 36508, 27886,
  /* 11355 */ 27301, 27301, 32093, 27917, 29043, 34476, 34476, 28055, 22336, 18385, 18385, 18385, 18385, 33276, 27283,
  /* 11370 */ 35864, 29641, 27301, 36657, 27302, 27954, 34476, 37911, 21746, 40873, 31201, 33622, 18385, 22067, 26874,
  /* 11385 */ 27984, 33747, 31407, 36794, 30533, 39119, 30359, 18385, 18385, 38895, 31109, 27301, 32425, 34476, 39125,
  /* 11400 */ 31342, 18385, 24756, 31116, 37838, 41432, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621, 32289,
  /* 11415 */ 37931, 28041, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385,
  /* 11430 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11445 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11460 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11475 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11490 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11505 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11520 */ 24583, 18385, 18386, 28082, 18385, 24899, 28101, 28117, 20546, 24808, 28134, 28147, 28160, 28176, 28190,
  /* 11535 */ 28206, 37376, 24411, 25336, 19336, 28232, 21572, 32005, 23970, 28268, 28284, 35344, 28328, 28364, 28380,
  /* 11550 */ 28429, 28464, 31145, 28494, 28524, 18385, 34083, 28606, 28540, 28564, 28871, 28599, 28622, 34876, 27283,
  /* 11565 */ 28641, 37252, 18385, 33123, 23324, 28661, 28684, 29322, 28728, 28764, 39402, 28800, 34206, 19752, 28828,
  /* 11580 */ 28870, 28887, 28927, 20727, 24939, 20942, 28963, 34945, 20438, 28994, 41584, 28698, 28712, 33544, 27002,
  /* 11595 */ 29028, 29064, 29091, 26976, 29127, 29162, 29178, 42565, 18385, 29198, 42806, 21139, 29221, 29241, 29277,
  /* 11610 */ 33395, 29313, 31684, 27301, 29338, 27247, 34476, 32240, 36053, 29374, 37441, 18385, 29409, 24505, 30862,
  /* 11625 */ 19586, 34041, 29443, 32916, 40772, 29496, 24691, 29541, 29528, 29566, 29605, 18385, 32734, 18385, 24610,
  /* 11640 */ 29629, 29657, 41406, 29684, 29105, 29720, 39119, 38604, 22215, 29756, 24767, 29779, 42139, 29826, 29851,
  /* 11655 */ 29867, 25001, 39736, 24756, 29291, 29915, 33825, 26825, 29968, 31294, 35608, 36333, 29992, 30020, 37297,
  /* 11670 */ 31322, 30070, 30092, 30129, 35645, 30831, 30994, 30145, 35674, 22011, 21931, 18385, 18385, 18385, 18385,
  /* 11685 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11700 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11715 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11730 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11745 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11760 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11775 */ 18385, 24583, 18385, 18385, 30184, 18385, 30204, 18619, 30228, 27850, 30246, 30262, 30275, 30283, 30299,
  /* 11790 */ 30313, 30329, 37376, 18385, 30355, 19336, 18385, 18385, 26240, 18385, 24383, 33016, 18385, 26237, 33858,
  /* 11805 */ 30375, 21727, 32203, 29456, 34857, 34377, 18385, 25636, 18385, 25626, 18385, 18385, 30409, 34244, 26796,
  /* 11820 */ 27283, 30437, 33676, 25177, 30429, 24305, 27301, 27301, 31224, 30454, 34476, 34476, 29111, 42223, 18385,
  /* 11835 */ 18385, 18385, 18385, 18385, 32047, 18385, 36506, 27283, 30436, 25093, 34878, 23325, 27301, 27301, 38663,
  /* 11850 */ 26002, 34476, 34476, 28784, 21747, 38816, 24671, 18385, 18385, 30490, 18385, 42635, 24382, 27283, 30437,
  /* 11865 */ 30868, 33395, 27301, 41152, 27301, 21873, 34476, 38568, 34476, 21748, 22336, 18385, 37599, 18385, 18385,
  /* 11880 */ 24381, 26273, 34149, 30507, 27301, 27301, 30556, 24691, 34476, 37711, 39112, 40873, 18385, 18385, 18385,
  /* 11895 */ 36508, 26874, 31115, 27301, 31407, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301, 32425,
  /* 11910 */ 34476, 38041, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404,
  /* 11925 */ 41621, 33402, 37931, 33405, 30827, 39202, 30831, 31940, 30580, 32885, 30628, 21931, 18385, 18385, 18385,
  /* 11940 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11955 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11970 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 11985 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12000 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12015 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12030 */ 18385, 18385, 24583, 18385, 18385, 18385, 18385, 24899, 18385, 30677, 18385, 42070, 30696, 30709, 30717,
  /* 12045 */ 30733, 30747, 30763, 37376, 18385, 18385, 19336, 18385, 18385, 26911, 18385, 24383, 33016, 18385, 18385,
  /* 12060 */ 18385, 19636, 25055, 27301, 29508, 27938, 26030, 39818, 18385, 18385, 25450, 18385, 18385, 18385, 29261,
  /* 12075 */ 34876, 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206,
  /* 12090 */ 18385, 18385, 18385, 18385, 18385, 18385, 35802, 36506, 27283, 30436, 18385, 34878, 30797, 27301, 27301,
  /* 12105 */ 27301, 39081, 34476, 34476, 34476, 21747, 34206, 18385, 18385, 31786, 18385, 24334, 18385, 24382, 27283,
  /* 12120 */ 31904, 27342, 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 32430, 30820, 18385, 18385, 18385,
  /* 12135 */ 18385, 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746, 40873, 18385, 34331,
  /* 12150 */ 33052, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 22151, 30847, 30884, 30923, 31109, 27301,
  /* 12165 */ 32425, 34476, 39125, 18385, 38994, 30946, 34407, 30974, 31010, 26825, 39157, 40735, 31035, 31091, 21955,
  /* 12180 */ 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 27901, 31132, 22011, 21931, 18385, 18385,
  /* 12195 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12210 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12225 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12240 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12255 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12270 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12285 */ 18385, 18385, 18385, 24583, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 24605, 30438,
  /* 12300 */ 40878, 30076, 33407, 24626, 37376, 18385, 25195, 31161, 18385, 18385, 18385, 39131, 24383, 29225, 18385,
  /* 12315 */ 18385, 39136, 31188, 34806, 31223, 31240, 29952, 38926, 18385, 18385, 41364, 25450, 37536, 29205, 18385,
  /* 12330 */ 18385, 34876, 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31264, 24652, 34476, 36803, 39206,
  /* 12345 */ 34206, 18385, 18385, 23927, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385, 31280, 23325, 27301,
  /* 12360 */ 27301, 27301, 26562, 34476, 34476, 34476, 40704, 34206, 29146, 18385, 18385, 18385, 18385, 18385, 24382,
  /* 12375 */ 27283, 30437, 36508, 31315, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617, 18385, 18385,
  /* 12390 */ 31338, 18385, 24381, 27283, 35864, 35844, 27301, 27301, 25994, 41467, 34476, 34476, 31358, 40873, 18385,
  /* 12405 */ 18385, 18385, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109,
  /* 12420 */ 27301, 32425, 34476, 39125, 35384, 18385, 36389, 31116, 33403, 34476, 31381, 24383, 31402, 34850, 37661,
  /* 12435 */ 21955, 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385,
  /* 12450 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12465 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12480 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12495 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12510 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12525 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12540 */ 18385, 18385, 18385, 18385, 24583, 18385, 18385, 27511, 18385, 24899, 31452, 31423, 31445, 31475, 31491,
  /* 12555 */ 31504, 31528, 31512, 31544, 31559, 37376, 18385, 18385, 29881, 26613, 18385, 18385, 32519, 31614, 33016,
  /* 12570 */ 30902, 30896, 31630, 31666, 34527, 31682, 31700, 21983, 31725, 18385, 18385, 18385, 31741, 18385, 18349,
  /* 12585 */ 18385, 18385, 34876, 19581, 31765, 18476, 18385, 32660, 42684, 32679, 27301, 28478, 31802, 36939, 34477,
  /* 12600 */ 40118, 34206, 35402, 34780, 18385, 31827, 40601, 31862, 36714, 31882, 27283, 31903, 20359, 42295, 23325,
  /* 12615 */ 27301, 32209, 37627, 31920, 34476, 37693, 36948, 32793, 34206, 18385, 18385, 18385, 26489, 25855, 31956,
  /* 12630 */ 24382, 27283, 30437, 36508, 38421, 27301, 27301, 27301, 21873, 31973, 34476, 34476, 21748, 41617, 37966,
  /* 12645 */ 31991, 32028, 38019, 28900, 27283, 32044, 32063, 27301, 32092, 27302, 41467, 32813, 34476, 27266, 32109,
  /* 12660 */ 38586, 31643, 18385, 32318, 32125, 32152, 32177, 32225, 32262, 26585, 32305, 18385, 18385, 34459, 32345,
  /* 12675 */ 31109, 32370, 38741, 40695, 39125, 22510, 38622, 24756, 31116, 33403, 34476, 32489, 24383, 31294, 33406,
  /* 12690 */ 38851, 33580, 33404, 41621, 25806, 32406, 33405, 30827, 39202, 41298, 32446, 35674, 35674, 32475, 21931,
  /* 12705 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12720 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12735 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12750 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12765 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12780 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12795 */ 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070,
  /* 12810 */ 24605, 30438, 40878, 30076, 33407, 24626, 37376, 18385, 18385, 19336, 18385, 18385, 32517, 18385, 24383,
  /* 12825 */ 33016, 18385, 18385, 18385, 19636, 25055, 27301, 29508, 27938, 26030, 18385, 18385, 18385, 25450, 18385,
  /* 12840 */ 18385, 18385, 18385, 34876, 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476,
  /* 12855 */ 34476, 39206, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385, 34878,
  /* 12870 */ 23325, 27301, 27301, 27301, 26002, 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385,
  /* 12885 */ 18385, 24382, 27283, 30437, 36508, 33395, 27301, 39662, 27301, 21873, 34476, 39411, 34476, 21748, 41617,
  /* 12900 */ 18385, 18385, 18385, 18385, 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746,
  /* 12915 */ 40873, 18385, 18385, 18385, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385,
  /* 12930 */ 38895, 31109, 27301, 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294,
  /* 12945 */ 33406, 38851, 21955, 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011,
  /* 12960 */ 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12975 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 12990 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13005 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13020 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13035 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13050 */ 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385, 24132, 18385, 24899, 18385, 32535, 22393,
  /* 13065 */ 28216, 32558, 32571, 32579, 32595, 32609, 32625, 37376, 25327, 18385, 19336, 18385, 24567, 27648, 18385,
  /* 13080 */ 24383, 32659, 18385, 19948, 38951, 28911, 40308, 32676, 30158, 27938, 21995, 40009, 18385, 18385, 32695,
  /* 13095 */ 32719, 18385, 18673, 40019, 23107, 37403, 30437, 25230, 18385, 23113, 32750, 25779, 34671, 32766, 32782,
  /* 13110 */ 32809, 36180, 36205, 32829, 27518, 18385, 18385, 18385, 35365, 18385, 18385, 26458, 27283, 30436, 18385,
  /* 13125 */ 34878, 40203, 32855, 27301, 32932, 39081, 32952, 32976, 30465, 21747, 34206, 18385, 25037, 32996, 18385,
  /* 13140 */ 32542, 31429, 24382, 37420, 30437, 36508, 33395, 27301, 41160, 29802, 21873, 34476, 42176, 37488, 21748,
  /* 13155 */ 41617, 24472, 18385, 18385, 29256, 24381, 33013, 35864, 35844, 32908, 27301, 27302, 41467, 28742, 34476,
  /* 13170 */ 21746, 33033, 18385, 18385, 33068, 33105, 33139, 33166, 27301, 34691, 33190, 34476, 39119, 39533, 18385,
  /* 13185 */ 41964, 38895, 31109, 27301, 32425, 34476, 39125, 18385, 33209, 24756, 31116, 34200, 35982, 26825, 24383,
  /* 13200 */ 31294, 33406, 38851, 21955, 33404, 41621, 33402, 37931, 33405, 32839, 33226, 31172, 34210, 32870, 36307,
  /* 13215 */ 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13230 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13245 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13260 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13275 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13290 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13305 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385, 18742, 18385, 33256, 18385, 30773,
  /* 13320 */ 18385, 30339, 33292, 33305, 33313, 33329, 33343, 33359, 37376, 34121, 18385, 19336, 18385, 28252, 18385,
  /* 13335 */ 18385, 24383, 33385, 18385, 34119, 22551, 19636, 22484, 33423, 30520, 30540, 36246, 18385, 28118, 18385,
  /* 13350 */ 25450, 18385, 37755, 29763, 18385, 34876, 27283, 30437, 18385, 39321, 26174, 42255, 27301, 18310, 33445,
  /* 13365 */ 33461, 34476, 33497, 27431, 33560, 33596, 33615, 33638, 18385, 18385, 33657, 18385, 36506, 27283, 30436,
  /* 13380 */ 18385, 34878, 23394, 38671, 37830, 27301, 26002, 25968, 40406, 34476, 21747, 34206, 18385, 33674, 33692,
  /* 13395 */ 18385, 33877, 18385, 33716, 27283, 30437, 36508, 33395, 40049, 27301, 33742, 34759, 37508, 34476, 29469,
  /* 13410 */ 21748, 41617, 18385, 18385, 18385, 18385, 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476,
  /* 13425 */ 34476, 21746, 40873, 18385, 18385, 18385, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 33763,
  /* 13440 */ 18385, 18385, 38895, 31109, 27301, 32425, 34476, 39125, 18385, 18385, 42283, 33781, 35667, 36767, 26825,
  /* 13455 */ 24383, 31294, 33406, 38851, 33800, 42015, 33849, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674,
  /* 13470 */ 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13485 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13500 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13515 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13530 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13545 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13560 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385, 29899, 18385, 33874, 18385,
  /* 13575 */ 28842, 33893, 33903, 33919, 33932, 33941, 33957, 33971, 33987, 37376, 20232, 18385, 19336, 34071, 18363,
  /* 13590 */ 18385, 21846, 30113, 34029, 34057, 26130, 34099, 34137, 28854, 34172, 36320, 34226, 28812, 26508, 34242,
  /* 13605 */ 18385, 20588, 30212, 34260, 41898, 38473, 34876, 27283, 29005, 32703, 20577, 34279, 23324, 25901, 26929,
  /* 13620 */ 31224, 24652, 38563, 33471, 32246, 34302, 41813, 18385, 21562, 18385, 18385, 18385, 34328, 39961, 27283,
  /* 13635 */ 30930, 18385, 32136, 23325, 34347, 27301, 32936, 26002, 40800, 34476, 34476, 34365, 34206, 18385, 18385,
  /* 13650 */ 18385, 20701, 18385, 18385, 34393, 27283, 34446, 36508, 38447, 27301, 39013, 34349, 21873, 34475, 34476,
  /* 13665 */ 34493, 34748, 41617, 34513, 34571, 28645, 18385, 37761, 34600, 36560, 34627, 32191, 32384, 34687, 41467,
  /* 13680 */ 34707, 34733, 21746, 34775, 34796, 34822, 27716, 34873, 34894, 39356, 27301, 34691, 35101, 34476, 31048,
  /* 13695 */ 35247, 18385, 18385, 34938, 34961, 37467, 41187, 34996, 38701, 18385, 18385, 35020, 25884, 35065, 35081,
  /* 13710 */ 26825, 31102, 35449, 32643, 38851, 21955, 35157, 30103, 30004, 24702, 37867, 35173, 39202, 30831, 25937,
  /* 13725 */ 35199, 35674, 35228, 35244, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13740 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13755 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13770 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13785 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13800 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13815 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385, 19432, 18385, 24899,
  /* 13830 */ 22300, 20123, 18385, 19453, 35263, 35276, 35288, 35304, 35318, 35334, 21326, 35360, 35381, 35523, 20964,
  /* 13845 */ 35400, 18385, 35418, 35434, 35477, 35511, 35539, 35555, 35578, 35594, 35631, 32459, 35690, 35734, 18385,
  /* 13860 */ 18385, 23623, 27639, 18385, 35750, 23627, 28625, 34876, 35778, 30437, 18385, 18385, 41238, 23324, 28448,
  /* 13875 */ 33784, 27794, 24652, 38844, 40432, 21815, 34206, 18385, 23203, 18385, 35797, 24675, 36361, 35818, 35836,
  /* 13890 */ 27283, 35860, 35881, 35904, 23325, 27301, 35939, 27301, 35962, 34476, 34430, 34476, 27968, 25687, 35998,
  /* 13905 */ 27162, 36697, 18385, 18385, 18385, 24382, 27283, 30437, 23811, 33395, 38516, 27301, 27301, 21873, 34476,
  /* 13920 */ 36022, 34476, 21748, 41617, 18385, 37949, 18385, 24994, 24381, 27283, 35864, 35844, 27301, 27301, 27302,
  /* 13935 */ 36042, 34476, 34476, 21746, 40873, 29182, 18385, 18385, 36508, 41990, 36069, 36092, 35183, 32980, 34476,
  /* 13950 */ 36112, 33046, 18385, 18385, 28304, 29393, 27301, 40157, 34476, 39125, 18385, 18385, 24756, 31116, 33403,
  /* 13965 */ 34476, 30642, 24383, 36144, 41708, 31248, 21955, 36167, 41621, 36221, 36262, 33405, 30827, 39202, 30831,
  /* 13980 */ 33833, 34187, 35674, 36292, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 13995 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14010 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14025 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14040 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14055 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14070 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385, 18385, 18385,
  /* 14085 */ 24899, 18385, 42642, 24081, 21707, 36377, 30385, 30393, 36405, 36419, 36435, 37376, 18385, 29141, 36469,
  /* 14100 */ 18385, 18385, 18385, 18385, 36504, 33016, 22189, 36524, 18385, 36548, 25055, 26331, 29508, 34653, 26030,
  /* 14115 */ 18385, 40593, 18385, 25450, 18385, 36353, 40583, 31749, 31887, 27283, 30437, 29427, 18385, 33017, 42475,
  /* 14130 */ 39898, 35461, 41414, 36576, 31709, 36612, 36638, 34922, 36673, 18385, 36692, 18385, 36713, 36730, 18385,
  /* 14145 */ 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301, 26002, 34476, 34476, 34476, 21747, 37995,
  /* 14160 */ 20696, 21230, 18385, 18385, 20934, 24479, 28343, 33115, 35915, 36508, 33395, 36096, 27301, 27301, 38068,
  /* 14175 */ 34476, 36761, 34476, 21748, 41617, 27870, 18385, 18385, 18385, 24381, 27283, 35864, 35844, 27301, 36151,
  /* 14190 */ 27302, 36783, 34476, 35974, 21746, 40873, 18385, 18385, 18385, 36508, 26874, 31115, 27301, 34691, 34476,
  /* 14205 */ 34476, 39119, 18385, 28947, 18385, 38895, 36819, 27301, 32425, 34476, 36842, 18385, 18385, 24756, 31116,
  /* 14220 */ 33403, 34476, 26825, 24383, 31294, 33406, 32960, 34837, 33404, 41503, 36864, 37931, 33405, 30827, 39202,
  /* 14235 */ 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14250 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14265 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14280 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14295 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14310 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14325 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385, 18385,
  /* 14340 */ 18385, 24899, 18385, 18385, 18385, 42070, 24605, 30438, 40878, 30076, 33407, 24626, 37376, 18385, 18385,
  /* 14355 */ 19336, 18385, 18385, 30230, 18385, 24383, 36884, 31839, 29610, 31846, 19636, 29613, 36910, 36929, 36622,
  /* 14370 */ 26030, 40837, 18385, 18385, 25450, 18385, 18385, 18385, 18385, 34876, 27283, 30437, 18385, 18385, 33017,
  /* 14385 */ 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14400 */ 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301, 29589, 34476, 34476, 34476, 21747,
  /* 14415 */ 34206, 18385, 18385, 18385, 18385, 18385, 18385, 24382, 27283, 30437, 36508, 33395, 27301, 27301, 27301,
  /* 14430 */ 21873, 34476, 34476, 34476, 21748, 41617, 18385, 18385, 18385, 18385, 24381, 27283, 35864, 35844, 27301,
  /* 14445 */ 27301, 27302, 41467, 34476, 34476, 21746, 40873, 18385, 18385, 18385, 36508, 26874, 31115, 27301, 34691,
  /* 14460 */ 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301, 32425, 34476, 39125, 18385, 18385, 24756,
  /* 14475 */ 36826, 33403, 36964, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621, 33402, 37931, 33405, 30827,
  /* 14490 */ 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14505 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14520 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14535 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14550 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14565 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14580 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385,
  /* 14595 */ 21533, 36983, 37000, 20103, 21533, 18385, 42070, 37022, 37035, 37043, 37059, 37073, 37089, 37376, 18385,
  /* 14610 */ 25029, 19336, 25847, 37123, 37139, 40917, 29386, 37158, 31386, 37193, 37222, 33150, 33240, 27998, 33813,
  /* 14625 */ 37273, 37313, 18385, 18385, 18385, 35762, 37329, 37347, 33765, 18385, 37398, 37419, 30437, 18385, 37436,
  /* 14640 */ 34611, 37457, 27218, 26313, 31224, 37483, 37504, 27459, 39206, 37524, 18385, 18385, 37558, 18385, 23595,
  /* 14655 */ 18385, 19304, 36506, 27283, 37594, 25755, 34878, 37615, 27391, 27301, 30804, 37649, 37692, 37709, 36967,
  /* 14670 */ 26550, 34206, 18385, 33641, 18385, 37727, 37743, 37777, 37793, 40249, 27673, 28395, 37812, 27301, 37854,
  /* 14685 */ 37883, 34541, 34476, 26574, 37902, 42024, 37927, 37947, 18385, 21479, 37965, 24248, 27283, 40539, 37982,
  /* 14700 */ 31068, 27301, 27302, 41467, 36591, 34476, 24655, 38011, 36453, 23209, 18385, 36508, 26874, 31115, 27301,
  /* 14715 */ 18318, 34476, 34476, 38035, 18385, 33271, 18385, 38895, 38057, 27301, 38084, 41716, 39125, 37006, 18385,
  /* 14730 */ 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 39707, 23041, 39392, 38106, 33402, 22375, 26730,
  /* 14745 */ 31058, 39202, 30831, 34210, 38127, 35705, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14760 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14775 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14790 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14805 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14820 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 14835 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583, 18385,
  /* 14850 */ 18385, 18385, 38156, 38177, 21765, 38193, 38236, 27824, 38286, 38299, 38312, 38328, 38342, 38358, 26060,
  /* 14865 */ 18385, 18385, 38384, 18385, 18385, 23655, 18385, 22125, 38411, 24240, 20210, 30661, 38437, 25258, 34973,
  /* 14880 */ 34640, 35615, 40130, 26077, 36445, 18385, 25450, 38463, 18385, 18385, 18385, 19569, 26267, 39851, 22413,
  /* 14895 */ 42095, 38489, 42831, 38513, 38532, 31224, 38549, 27467, 34476, 29358, 33524, 39623, 18385, 41939, 24205,
  /* 14910 */ 38584, 18385, 18385, 36506, 27283, 30436, 39629, 34878, 23325, 27301, 27301, 27301, 26002, 34476, 34476,
  /* 14925 */ 34476, 21747, 34206, 18385, 39824, 36676, 38602, 38620, 39516, 23099, 39979, 28312, 38638, 38654, 27301,
  /* 14940 */ 35946, 38687, 29668, 34476, 27409, 35091, 38730, 38757, 38973, 18385, 28942, 18385, 24381, 26156, 35489,
  /* 14955 */ 38803, 27301, 42052, 27302, 41467, 34476, 38832, 21746, 40873, 18385, 38867, 18385, 38891, 26874, 31115,
  /* 14970 */ 38911, 31299, 29550, 40167, 39119, 18385, 18385, 38942, 41108, 39350, 27301, 32425, 34476, 38967, 38989,
  /* 14985 */ 23695, 27371, 39010, 39029, 30168, 40908, 39049, 39072, 33406, 40177, 21955, 39097, 39152, 33402, 42230,
  /* 15000 */ 40057, 30827, 39173, 32635, 39189, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15015 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15030 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15045 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15060 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15075 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15090 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 24583,
  /* 15105 */ 18385, 18385, 18385, 24231, 24899, 18385, 18385, 39222, 25302, 39244, 39257, 39265, 39281, 39295, 39311,
  /* 15120 */ 25137, 39788, 20381, 19336, 18385, 22519, 39337, 42450, 24383, 39372, 30652, 33369, 39427, 30958, 39443,
  /* 15135 */ 28012, 35212, 39459, 39475, 23566, 30907, 39491, 41268, 18385, 18385, 39513, 39532, 39549, 32329, 26182,
  /* 15150 */ 30491, 39567, 39603, 39650, 27301, 39684, 36913, 39700, 29740, 33481, 41041, 28508, 39723, 39752, 23776,
  /* 15165 */ 20523, 20636, 18385, 18385, 23724, 39771, 42305, 39804, 39840, 41015, 29297, 29580, 37633, 26002, 39867,
  /* 15180 */ 35111, 21891, 39883, 39914, 33599, 18385, 39942, 23384, 35820, 41281, 39958, 39977, 39995, 21398, 40040,
  /* 15195 */ 40073, 27301, 29810, 40104, 29480, 29699, 29512, 40146, 41617, 40193, 18385, 28577, 40219, 24381, 40243,
  /* 15210 */ 40265, 40286, 40324, 40359, 27302, 38111, 40387, 40422, 21746, 40457, 18385, 40495, 29012, 40516, 32354,
  /* 15225 */ 40555, 27301, 31075, 40684, 34476, 40571, 18385, 40617, 40843, 38895, 39056, 40649, 40669, 28748, 36276,
  /* 15240 */ 18385, 18385, 40720, 26652, 32420, 36193, 27497, 35562, 40762, 40788, 30034, 21955, 33404, 41621, 33402,
  /* 15255 */ 37931, 33405, 35657, 40823, 40859, 33511, 35674, 35674, 40894, 21931, 18385, 18385, 18385, 18385, 18385,
  /* 15270 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15285 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15300 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15315 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15330 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15345 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15360 */ 24583, 18385, 18385, 18385, 25155, 24899, 18385, 20747, 18385, 42070, 40933, 40946, 40959, 40975, 40989,
  /* 15375 */ 41005, 37376, 18385, 18385, 36488, 18385, 24363, 18385, 18385, 24383, 33016, 18385, 33997, 18385, 33726,
  /* 15390 */ 25055, 36653, 29941, 27938, 26030, 22237, 18385, 18385, 25450, 18385, 18385, 40024, 19225, 21625, 27283,
  /* 15405 */ 30437, 28085, 18385, 21631, 42609, 27301, 27301, 27320, 41031, 34476, 34476, 34717, 41496, 41057, 36006,
  /* 15420 */ 18385, 18385, 41078, 18385, 26213, 41102, 19912, 30436, 41124, 34878, 41143, 37821, 41176, 29793, 26002,
  /* 15435 */ 38090, 41683, 35121, 21747, 34206, 18385, 41210, 18385, 18385, 18385, 37331, 24382, 41234, 30437, 36508,
  /* 15450 */ 33395, 32899, 27301, 27301, 40746, 30474, 34476, 34476, 21748, 41254, 18385, 26106, 18385, 18385, 24381,
  /* 15465 */ 27283, 35864, 41314, 27301, 27301, 27302, 41467, 34476, 34476, 21746, 41355, 18385, 18385, 31778, 36508,
  /* 15480 */ 26874, 41388, 27301, 34691, 41430, 34476, 39119, 36848, 18385, 18385, 38895, 31109, 27301, 32425, 34476,
  /* 15495 */ 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 34909, 36868, 38851, 21955, 33404, 41621,
  /* 15510 */ 33402, 37931, 33405, 30827, 41448, 30831, 34210, 35674, 41483, 22011, 21931, 18385, 18385, 18385, 18385,
  /* 15525 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15540 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15555 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15570 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15585 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15600 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15615 */ 18385, 24583, 18385, 18385, 18385, 18385, 24899, 20867, 20829, 31569, 41519, 24605, 41535, 26830, 21655,
  /* 15630 */ 41559, 41574, 37376, 18385, 18385, 19336, 18385, 18385, 18385, 18385, 24383, 33016, 18385, 18385, 18385,
  /* 15645 */ 19636, 25055, 41600, 30593, 27938, 26030, 18385, 25277, 37099, 25450, 18385, 18385, 18385, 18385, 33089,
  /* 15660 */ 27283, 35041, 18385, 24830, 33017, 23324, 41637, 41654, 31224, 41671, 30612, 34476, 26707, 41327, 18385,
  /* 15675 */ 18385, 18385, 18385, 18385, 25524, 18385, 36506, 26165, 34286, 18385, 34878, 23325, 27301, 41699, 27301,
  /* 15690 */ 26002, 34476, 29732, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 24382, 27283, 30437,
  /* 15705 */ 36508, 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617, 18385, 18385, 18385, 18385,
  /* 15720 */ 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746, 40873, 18385, 41947, 18385,
  /* 15735 */ 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 36344, 18385, 38895, 31109, 27301, 32425,
  /* 15750 */ 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 22025, 24383, 31294, 33406, 38851, 21955, 33404,
  /* 15765 */ 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385,
  /* 15780 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15795 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15810 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15825 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15840 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15855 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 15870 */ 18385, 18385, 24583, 18385, 18385, 18385, 20253, 24899, 18385, 18892, 35865, 21167, 41732, 41745, 41757,
  /* 15885 */ 41773, 41787, 41803, 37376, 18385, 18385, 19336, 18385, 18385, 18385, 18385, 24383, 33016, 18385, 18385,
  /* 15900 */ 18385, 19636, 25055, 26293, 29508, 41836, 41864, 18385, 18385, 18385, 25450, 18385, 18385, 18385, 41889,
  /* 15915 */ 34876, 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476, 34476, 39206, 34206,
  /* 15930 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301, 27301,
  /* 15945 */ 27301, 26002, 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385, 41880, 24382, 27283,
  /* 15960 */ 30437, 36508, 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617, 18385, 19312, 18385,
  /* 15975 */ 18385, 24381, 27283, 35864, 35844, 41638, 27301, 33174, 41467, 36596, 34476, 29928, 40873, 18385, 18385,
  /* 15990 */ 18385, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109, 27301,
  /* 16005 */ 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851, 21955,
  /* 16020 */ 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385, 18385,
  /* 16035 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16050 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16065 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16080 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16095 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16110 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16125 */ 18385, 18385, 18385, 24824, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 24605, 30438,
  /* 16140 */ 40878, 21679, 41914, 41929, 37376, 18385, 18385, 19336, 41963, 25600, 18385, 18385, 33082, 41980, 32501,
  /* 16155 */ 25641, 26422, 19636, 27542, 42006, 34420, 27938, 26030, 18385, 18385, 18678, 25450, 37177, 22320, 41372,
  /* 16170 */ 18385, 34876, 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 21827, 24652, 34476, 34476, 42040,
  /* 16185 */ 35718, 42068, 18385, 18385, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385, 34878, 23325, 27301,
  /* 16200 */ 27301, 27301, 26002, 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 24382,
  /* 16215 */ 27283, 30437, 36508, 33395, 27301, 27301, 27301, 41848, 34476, 34476, 34476, 21748, 41617, 42086, 18385,
  /* 16230 */ 18385, 18385, 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746, 40873, 18385,
  /* 16245 */ 18385, 18385, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385, 38895, 31109,
  /* 16260 */ 27301, 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406, 38851,
  /* 16275 */ 21955, 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931, 18385,
  /* 16290 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16305 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16320 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16335 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16350 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16365 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16380 */ 18385, 18385, 18385, 18385, 24583, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070, 24605,
  /* 16395 */ 30438, 40878, 30076, 33407, 24626, 21312, 18385, 18385, 19336, 18385, 18385, 20605, 18385, 24383, 33016,
  /* 16410 */ 18385, 18385, 18385, 19636, 20610, 26671, 29508, 25982, 42111, 18385, 18385, 18385, 25450, 18385, 18385,
  /* 16425 */ 18385, 18385, 34876, 27283, 30437, 18385, 18385, 33017, 38770, 27301, 27301, 32161, 24652, 34476, 34476,
  /* 16440 */ 42127, 34206, 30680, 18385, 18385, 23315, 18385, 18385, 18385, 36506, 35781, 30436, 18385, 34878, 23325,
  /* 16455 */ 42155, 37886, 27301, 26002, 40400, 34476, 42173, 21747, 34206, 18385, 24296, 18385, 18385, 18385, 18385,
  /* 16470 */ 24382, 28406, 30437, 36508, 39382, 39668, 27301, 27301, 28066, 34476, 42192, 34476, 21748, 41617, 18385,
  /* 16485 */ 18482, 18385, 18385, 24381, 27283, 35864, 42210, 27301, 41397, 42157, 41467, 34476, 28778, 35004, 40873,
  /* 16500 */ 18385, 18385, 42246, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 31365, 18385, 18385, 30413, 38895,
  /* 16515 */ 31109, 27301, 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294, 33406,
  /* 16530 */ 38851, 21955, 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011, 21931,
  /* 16545 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16560 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16575 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16590 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16605 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16620 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16635 */ 18385, 18385, 18385, 18385, 18385, 24583, 18385, 18385, 18385, 18385, 24899, 18385, 18385, 18385, 42070,
  /* 16650 */ 42271, 30438, 40878, 30076, 33407, 24626, 37376, 18385, 18385, 19336, 18385, 18385, 18385, 18385, 24383,
  /* 16665 */ 33016, 18385, 18385, 18385, 19636, 25055, 27301, 29508, 27938, 26030, 18385, 18385, 18385, 25450, 18385,
  /* 16680 */ 18385, 18385, 18385, 34876, 27283, 30437, 18385, 18385, 33017, 23324, 27301, 27301, 31224, 24652, 34476,
  /* 16695 */ 34476, 39206, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 36506, 27283, 30436, 18385, 34878,
  /* 16710 */ 23325, 27301, 27301, 27301, 26002, 34476, 34476, 34476, 21747, 34206, 18385, 18385, 18385, 18385, 18385,
  /* 16725 */ 18385, 24382, 27283, 30437, 36508, 33395, 27301, 27301, 27301, 21873, 34476, 34476, 34476, 21748, 41617,
  /* 16740 */ 18385, 18385, 18385, 18385, 24381, 27283, 35864, 35844, 27301, 27301, 27302, 41467, 34476, 34476, 21746,
  /* 16755 */ 40873, 18385, 18385, 18385, 36508, 26874, 31115, 27301, 34691, 34476, 34476, 39119, 18385, 18385, 18385,
  /* 16770 */ 38895, 31109, 27301, 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403, 34476, 26825, 24383, 31294,
  /* 16785 */ 33406, 38851, 21955, 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831, 34210, 35674, 35674, 22011,
  /* 16800 */ 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16815 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16830 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16845 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16860 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16875 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 16890 */ 18385, 18385, 18385, 18385, 18385, 18385, 20097, 18385, 18385, 18385, 18385, 42321, 42323, 42416, 42378,
  /* 16905 */ 42339, 42355, 42415, 42386, 42402, 42367, 42433, 42466, 18385, 18385, 19336, 18385, 18385, 36745, 18385,
  /* 16920 */ 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 42491, 20808, 23864, 24636, 28583, 18334, 25450,
  /* 16935 */ 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 42513, 31598,
  /* 16950 */ 18539, 18560, 42518, 42534, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723, 18734,
  /* 16965 */ 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251, 19070,
  /* 16980 */ 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992, 19014,
  /* 16995 */ 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176, 19194,
  /* 17010 */ 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448, 19469,
  /* 17025 */ 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739, 19776,
  /* 17040 */ 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599, 20036,
  /* 17055 */ 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17070 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17085 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17100 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17115 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17130 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17145 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 18385, 18385, 18385, 18385, 24899, 18385, 20982,
  /* 17160 */ 42563, 42070, 20119, 42581, 42584, 42600, 21497, 42625, 20226, 18385, 18385, 19336, 18385, 18385, 36127,
  /* 17175 */ 18385, 33696, 19505, 20081, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 24636, 28583, 18334,
  /* 17190 */ 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555, 18576,
  /* 17205 */ 18592, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694, 18723,
  /* 17220 */ 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208, 38251,
  /* 17235 */ 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970, 18992,
  /* 17250 */ 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230, 19176,
  /* 17265 */ 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420, 19448,
  /* 17280 */ 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687, 19739,
  /* 17295 */ 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003, 18599,
  /* 17310 */ 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17325 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17340 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17355 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17370 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17385 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17400 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 18385, 18385, 18385, 18385, 24899, 42658,
  /* 17415 */ 18385, 18385, 37142, 42675, 31577, 42700, 31585, 39755, 42714, 20226, 18385, 18385, 19336, 18385, 18385,
  /* 17430 */ 36127, 42740, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 23907, 24636, 28583,
  /* 17445 */ 18334, 25450, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593, 18534, 18555,
  /* 17460 */ 42757, 42773, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658, 39228, 18694,
  /* 17475 */ 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837, 39497, 38208,
  /* 17490 */ 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940, 18918, 18970,
  /* 17505 */ 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192, 19210, 19230,
  /* 17520 */ 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775, 19373, 19420,
  /* 17535 */ 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678, 19709, 19687,
  /* 17550 */ 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928, 19964, 20003,
  /* 17565 */ 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17580 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17595 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17610 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17625 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17640 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17655 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 20097, 18385, 18385, 18385, 18385, 24899,
  /* 17670 */ 18385, 18385, 18385, 42070, 20119, 18385, 18385, 18385, 18385, 42796, 37376, 18385, 18385, 19336, 18385,
  /* 17685 */ 18385, 18385, 18385, 24383, 33016, 18385, 18385, 18385, 19636, 25055, 27301, 29508, 27938, 26030, 18385,
  /* 17700 */ 18385, 18385, 25450, 18385, 18385, 18385, 18385, 34876, 27283, 30437, 18385, 18385, 33017, 30829, 27301,
  /* 17715 */ 27301, 31224, 21743, 34476, 34476, 39206, 34206, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 36506,
  /* 17730 */ 27283, 30436, 18385, 34878, 23325, 27301, 27301, 27301, 30564, 34476, 34476, 34476, 21747, 34206, 18385,
  /* 17745 */ 18385, 18385, 18385, 18385, 18385, 24382, 27283, 30437, 36508, 33395, 27301, 27301, 27301, 21873, 34476,
  /* 17760 */ 34476, 34476, 21748, 41617, 18385, 18385, 18385, 18385, 24381, 27283, 35864, 35844, 27301, 27301, 27302,
  /* 17775 */ 41467, 34476, 34476, 21746, 40873, 18385, 18385, 18385, 36508, 26874, 31115, 27301, 34691, 34476, 34476,
  /* 17790 */ 39119, 18385, 18385, 18385, 38895, 31109, 27301, 32425, 34476, 39125, 18385, 18385, 24756, 31116, 33403,
  /* 17805 */ 34476, 26825, 24383, 31294, 33406, 38851, 21955, 33404, 41621, 33402, 37931, 33405, 30827, 39202, 30831,
  /* 17820 */ 34210, 35674, 35674, 22011, 21931, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17835 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17850 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17865 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17880 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17895 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17910 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 17925 */ 18385, 18385, 18385, 42822, 18385, 42873, 42847, 42850, 42866, 35888, 42872, 36128, 18385, 18385, 18385,
  /* 17940 */ 18385, 18385, 36127, 18385, 33696, 19505, 18385, 18385, 18385, 18288, 20272, 20020, 20016, 20808, 19258,
  /* 17955 */ 24636, 28583, 18334, 18385, 18385, 18385, 18384, 18385, 42547, 18402, 18448, 18498, 18463, 19506, 31593,
  /* 17970 */ 18534, 18555, 42513, 31598, 18539, 18560, 42518, 18837, 18385, 18615, 18385, 18385, 18385, 18635, 18658,
  /* 17985 */ 39228, 18694, 18723, 18734, 18758, 19987, 18796, 18817, 42497, 19264, 18791, 18812, 20020, 18833, 18837,
  /* 18000 */ 39497, 38208, 38251, 19070, 38218, 39582, 41127, 18856, 18884, 19497, 18908, 18924, 18976, 18998, 18940,
  /* 18015 */ 18918, 18970, 18992, 19014, 18840, 25532, 19040, 19056, 21237, 19086, 19111, 19127, 19143, 19174, 19192,
  /* 18030 */ 19210, 19230, 19176, 19194, 19246, 19427, 19280, 18385, 19328, 33700, 19352, 18770, 19368, 19389, 18775,
  /* 18045 */ 19373, 19420, 19448, 19469, 18385, 19485, 19095, 19533, 19522, 19538, 19554, 19602, 19618, 19652, 19678,
  /* 18060 */ 19709, 19687, 19739, 19776, 19792, 19831, 19806, 19847, 19863, 19891, 20019, 19979, 20020, 19815, 19928,
  /* 18075 */ 19964, 20003, 18599, 20036, 20052, 20078, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 18090 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 18105 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 18120 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 18135 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 18150 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385,
  /* 18165 */ 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 18385, 0, 2, 3, 94212, 5, 6, 0, 0,
  /* 18184 */ 0, 0, 0, 0, 73983, 73983, 73983, 73983, 0, 0, 78082, 78082, 73983, 73983, 78082, 78082, 78082, 78082,
  /* 18202 */ 78082, 78082, 78082, 78082, 78082, 78082, 0, 0, 73983, 78082, 73983, 78082, 78082, 78082, 78082, 313,
  /* 18218 */ 78082, 78082, 78082, 78082, 78082, 78082, 78082, 78082, 78082, 78082, 78082, 78082, 78082, 78082, 78082,
  /* 18233 */ 78082, 45056, 49152, 78082, 78082, 78082, 40960, 78082, 78082, 78082, 78082, 78082, 78082, 78082, 78082,
  /* 18248 */ 78082, 78082, 78082, 78082, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 73983, 0, 0, 78082, 0, 2105344, 261,
  /* 18271 */ 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592,
  /* 18295 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 0, 0, 1078, 0, 1127, 1129, 495, 495, 495,
  /* 18313 */ 495, 495, 495, 495, 1164, 495, 495, 495, 495, 495, 495, 495, 495, 2132, 495, 495, 0, 0, 0, 0, 517, 0,
  /* 18335 */ 2871296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 1002, 0, 0, 0, 0, 0, 0, 0, 0, 1011, 0,
  /* 18364 */ 0, 0, 0, 641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1049, 0, 0, 0, 0, 2109440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18396 */ 0, 0, 0, 0, 0, 280, 2158592, 2686976, 2158592, 2703360, 2158592, 2158592, 2756608, 2777088, 2797568,
  /* 18411 */ 2158592, 2834432, 2158592, 2883584, 2158592, 2158592, 2158592, 0, 2163480, 2163480, 2163480, 2163480,
  /* 18423 */ 2163480, 2163480, 2163480, 2163480, 2548504, 2163480, 2163480, 2163480, 849, 2163538, 2163538, 2163538,
  /* 18435 */ 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538,
  /* 18446 */ 2163538, 2163538, 3067904, 2158592, 2158592, 2158592, 0, 0, 0, 0, 2621440, 0, 2686976, 2703360, 0, 0,
  /* 18462 */ 2756608, 2777088, 0, 2883584, 0, 0, 0, 0, 0, 0, 2719744, 0, 0, 2883584, 0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
  /* 18486 */ 0, 0, 0, 0, 0, 0, 1870, 0, 0, 0, 0, 0, 2797568, 0, 2834432, 2883584, 0, 0, 0, 0, 0, 0, 2883584, 2441216,
  /* 18510 */ 0, 0, 0, 0, 0, 0, 2179687, 2179687, 0, 0, 0, 0, 0, 0, 0, 0, 313, 313, 313, 617, 0, 0, 0, 0, 2162688,
  /* 18535 */ 2162688, 2162688, 2162688, 2162688, 2621440, 2162688, 2162688, 2162688, 2162688, 2686976, 2162688,
  /* 18546 */ 2703360, 2162688, 2711552, 2162688, 2162688, 2756608, 2162688, 2777088, 2797568, 2162688, 2756608,
  /* 18557 */ 2162688, 2777088, 2797568, 2162688, 2162688, 2162688, 2834432, 2162688, 2162688, 2883584, 2162688,
  /* 18568 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18579 */ 2162688, 2162688, 2162688, 3067904, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18590 */ 2162688, 848, 0, 0, 851, 2162688, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18604 */ 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 2424832, 2162688, 2162688, 0, 0, 0, 2613248, 0, 0, 0, 0,
  /* 18623 */ 0, 0, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 2772992, 0, 0, 0, 0, 2113536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
  /* 18652 */ 271, 0, 0, 0, 0, 0, 0, 0, 0, 2658304, 0, 2785280, 0, 0, 0, 0, 0, 0, 0, 0, 2379776, 0, 0, 0, 0, 1018, 0, 0,
  /* 18680 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 965, 0, 0, 0, 0, 2158592, 2580480, 2158592, 2158592, 2613248, 2158592, 2658304,
  /* 18701 */ 2158592, 2158592, 2158592, 2158592, 2785280, 2809856, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18712 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 192512, 0, 2158592, 2158592,
  /* 18725 */ 2158592, 2158592, 2158592, 2428928, 0, 0, 2580480, 0, 0, 0, 0, 2809856, 0, 0, 0, 0, 2809856, 0, 0, 0, 0,
  /* 18746 */ 0, 0, 0, 0, 289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2809856, 2158592,
  /* 18767 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18779 */ 2162688, 2162688, 2162688, 2547712, 2162688, 2162688, 2162688, 2162688, 2633728, 2162688, 2162688,
  /* 18790 */ 2715648, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18801 */ 2162688, 2580480, 2162688, 2162688, 2162688, 2162688, 2613248, 2162688, 2162688, 2162688, 2658304,
  /* 18812 */ 2613248, 2162688, 2162688, 2162688, 2658304, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18823 */ 2162688, 2162688, 2785280, 2801664, 2809856, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18834 */ 2162688, 2162688, 3080192, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18845 */ 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 2486272, 2158592, 2158592, 2158592, 2158592,
  /* 18860 */ 2596864, 2158592, 2158592, 2158592, 2707456, 2158592, 2158592, 2875392, 2158592, 2158592, 2158592,
  /* 18871 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 237568,
  /* 18884 */ 2158592, 2158592, 2158592, 2158592, 2478080, 0, 0, 2707456, 0, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0,
  /* 18907 */ 0, 2158592, 3158016, 2158592, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2473984, 2478080,
  /* 18922 */ 2162688, 2162688, 2162688, 2519040, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18933 */ 2596864, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3158016,
  /* 18944 */ 2162688, 0, 0, 0, 0, 2121728, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 907, 2162688, 2162688,
  /* 18961 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 2162688, 2162688, 2162688, 2162688,
  /* 18974 */ 2162688, 2162688, 2707456, 2162688, 2162688, 2162688, 2162688, 2162688, 2760704, 2162688, 2162688,
  /* 18985 */ 2162688, 2854912, 2875392, 2162688, 2162688, 2162688, 2162688, 2854912, 2875392, 2162688, 2162688,
  /* 18996 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2994176, 3018752, 2162688, 2162688,
  /* 19007 */ 2162688, 3051520, 2162688, 2162688, 2162688, 2162688, 2162688, 3051520, 2162688, 2162688, 2162688,
  /* 19018 */ 2162688, 2162688, 2162688, 2162688, 2162688, 3158016, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19029 */ 2162688, 2162688, 0, 0, 0, 0, 90112, 2162688, 2428928, 2162688, 2162688, 0, 0, 0, 3026944, 0, 0, 0, 0, 0,
  /* 19049 */ 0, 0, 0, 0, 0, 0, 2646016, 0, 2781184, 0, 0, 0, 0, 0, 0, 3125248, 0, 0, 0, 0, 3043328, 0, 0, 0, 0, 0,
  /* 19075 */ 2875392, 0, 2768896, 0, 0, 0, 0, 0, 0, 2838528, 0, 0, 0, 0, 2572288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19100 */ 2158592, 2158592, 2158592, 2158592, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2498560, 2158592,
  /* 19112 */ 2527232, 2158592, 2158592, 2600960, 2158592, 2695168, 2158592, 2158592, 2887680, 2158592, 2158592,
  /* 19123 */ 2158592, 3026944, 3076096, 3096576, 3145728, 0, 0, 0, 0, 0, 0, 3076096, 3096576, 0, 0, 0, 0, 0, 0,
  /* 19142 */ 2887680, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 0, 2162688,
  /* 19157 */ 2437120, 2162688, 2162688, 2162688, 2162688, 241664, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19169 */ 2162688, 2162688, 0, 2, 6, 2162688, 2162688, 2490368, 2162688, 2162688, 2527232, 2162688, 2162688,
  /* 19182 */ 2162688, 2162688, 2162688, 2162688, 2600960, 2625536, 2162688, 2162688, 2162688, 2695168, 2162688,
  /* 19193 */ 2695168, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2887680, 2162688,
  /* 19204 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3026944,
  /* 19215 */ 2162688, 2162688, 3076096, 2162688, 3096576, 2162688, 2162688, 2162688, 3145728, 2162688, 0, 0, 0, 0,
  /* 19229 */ 1027, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 2437120, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19248 */ 3026944, 2162688, 2162688, 3076096, 2162688, 3096576, 2162688, 2162688, 2162688, 3145728, 2162688,
  /* 19259 */ 2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0,
  /* 19272 */ 0, 0, 0, 0, 2162688, 2428928, 2162688, 2162688, 2818048, 0, 2879488, 0, 2961408, 0, 2977792, 0, 0, 0, 0,
  /* 19291 */ 3153920, 0, 2813952, 0, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 1372, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19320 */ 1868, 0, 0, 0, 0, 0, 0, 0, 2715648, 0, 0, 0, 3039232, 0, 0, 3022848, 0, 0, 0, 0, 0, 0, 0, 0, 313, 313,
  /* 19346 */ 313, 0, 0, 0, 0, 0, 2961408, 2158592, 3022848, 0, 0, 2633728, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2813952,
  /* 19368 */ 2162688, 2633728, 2162688, 2162688, 2715648, 2736128, 2162688, 2162688, 2813952, 2818048, 2162688,
  /* 19379 */ 2162688, 2908160, 2162688, 2162688, 2953216, 2162688, 2961408, 2162688, 2162688, 3022848, 2162688,
  /* 19390 */ 2961408, 2162688, 2162688, 3022848, 3047424, 2162688, 2162688, 2162688, 2162688, 3174400, 0, 0, 0, 0,
  /* 19404 */ 2162688, 2162688, 2162688, 2162688, 245760, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19416 */ 2162688, 0, 2, 6, 3047424, 2162688, 2162688, 2162688, 2162688, 3174400, 2162688, 2162688, 2162688,
  /* 19429 */ 2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 293, 294, 295, 0, 2514944, 0, 0, 2543616,
  /* 19452 */ 2592768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 293, 0, 0, 45056, 49152, 0, 3133440, 0, 2727936, 0, 0, 0, 0, 0,
  /* 19478 */ 2891776, 0, 0, 0, 3014656, 0, 2539520, 2920448, 0, 0, 0, 2158592, 2158592, 2158592, 2543616, 2158592,
  /* 19494 */ 2158592, 2158592, 2158592, 0, 0, 0, 0, 0, 0, 3158016, 0, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 19510 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 0, 2162688, 2162688,
  /* 19524 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2498560, 2539520, 2543616,
  /* 19535 */ 2162688, 2162688, 2592768, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2891776, 2162688,
  /* 19546 */ 2162688, 2957312, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19557 */ 2162688, 2162688, 2162688, 2457600, 0, 0, 0, 0, 0, 0, 0, 2895872, 0, 0, 0, 0, 1050, 397, 397, 1053, 397,
  /* 19578 */ 1057, 397, 1059, 397, 397, 397, 397, 1065, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
  /* 19598 */ 1923, 397, 397, 397, 0, 0, 2682880, 0, 2641920, 2609152, 2691072, 0, 0, 0, 0, 2936832, 0, 0, 3084288,
  /* 19617 */ 3129344, 0, 2940928, 2416640, 0, 0, 0, 0, 0, 0, 0, 2723840, 0, 0, 0, 0, 0, 0, 1385, 0, 0, 0, 397, 397,
  /* 19641 */ 397, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 2158592, 2482176, 2158592, 2158592, 2740224, 2158592,
  /* 19659 */ 2158592, 2482176, 2740224, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 0, 2163480, 2163480,
  /* 19674 */ 2163480, 2163480, 2163480, 2499352, 2158592, 2158592, 0, 2420736, 2162688, 2162688, 2482176, 2162688,
  /* 19686 */ 2162688, 2162688, 2584576, 2162688, 2162688, 2682880, 2740224, 2162688, 2162688, 2162688, 2162688,
  /* 19697 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 261, 0, 0, 0, 2162688, 2162688,
  /* 19711 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3121152, 2420736, 2162688, 2162688,
  /* 19722 */ 2482176, 2162688, 2162688, 2162688, 2162688, 237568, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19734 */ 2162688, 2162688, 0, 2, 6, 3121152, 2162688, 2162688, 2162688, 2162688, 0, 2494464, 0, 0, 0, 2826240, 0,
  /* 19751 */ 2973696, 0, 0, 0, 0, 0, 1289, 0, 1291, 0, 0, 0, 0, 0, 0, 0, 0, 962, 0, 0, 0, 0, 0, 0, 0, 3100672, 0, 0, 0,
  /* 19780 */ 0, 0, 0, 0, 2916352, 0, 2445312, 0, 2445312, 2494464, 2158592, 2744320, 2973696, 2744320, 0, 2158592, 0,
  /* 19797 */ 2162688, 2445312, 2453504, 2494464, 2162688, 2162688, 2162688, 2162688, 2650112, 2744320, 2826240,
  /* 19808 */ 2928640, 2162688, 2973696, 2162688, 2162688, 2162688, 3100672, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19825 */ 2162688, 2162688, 2588672, 2162688, 2162688, 2162688, 2928640, 2162688, 2973696, 2162688, 2162688,
  /* 19836 */ 2162688, 3100672, 2162688, 2445312, 2453504, 2494464, 2162688, 2162688, 2162688, 2162688, 2650112,
  /* 19847 */ 2846720, 0, 0, 0, 0, 0, 0, 2805760, 0, 3178496, 2560000, 2560000, 0, 2162688, 2551808, 2560000, 2162688,
  /* 19864 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3092480, 2162688, 2551808, 2560000,
  /* 19875 */ 2162688, 2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19887 */ 2162688, 0, 2, 0, 2162688, 2162688, 2162688, 2162688, 3092480, 0, 0, 0, 0, 0, 2850816, 0, 0, 0, 0, 0, 0,
  /* 19908 */ 1386, 0, 0, 1389, 397, 397, 397, 397, 397, 397, 397, 1400, 397, 397, 397, 397, 397, 397, 397, 1406,
  /* 19928 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2588672, 2162688, 2162688, 2162688, 2162688,
  /* 19939 */ 2162688, 2162688, 2162688, 2465792, 0, 0, 0, 0, 1087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 583, 0, 0, 0, 0,
  /* 19964 */ 2531328, 2985984, 0, 0, 0, 0, 2162688, 2162688, 2605056, 2162688, 2830336, 2162688, 2162688, 2162688,
  /* 19978 */ 2985984, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2502656, 0, 0, 0, 0, 0, 0, 0, 2162688, 2162688,
  /* 19995 */ 2428928, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2605056, 2162688,
  /* 20006 */ 2830336, 2162688, 2162688, 2162688, 2985984, 2523136, 0, 0, 0, 0, 2162688, 2162688, 2162688, 0, 2162688,
  /* 20021 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 20032 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2981888, 2424832, 2162688, 2162688, 2162688,
  /* 20043 */ 2162688, 2981888, 2535424, 0, 0, 2912256, 2162688, 2654208, 2932736, 2162688, 2162688, 2654208, 2932736,
  /* 20056 */ 2162688, 2637824, 2699264, 2555904, 2162688, 2555904, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 20067 */ 2162688, 2162688, 1510, 0, 0, 1515, 0, 2162688, 2428928, 2162688, 2162688, 2162688, 2945024, 2945024, 0,
  /* 20082 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1097728, 0, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20113 */ 296, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 0, 0, 111006,
  /* 20143 */ 111006, 111006, 111006, 111006, 414, 414, 414, 414, 414, 111006, 111006, 111006, 414, 414, 111006, 111006,
  /* 20159 */ 111006, 111006, 111006, 414, 111006, 111006, 111006, 111006, 111006, 414, 111006, 414, 414, 414, 414, 414,
  /* 20175 */ 414, 0, 0, 0, 0, 0, 0, 0, 0, 313, 313, 313, 0, 0, 0, 0, 620, 111006, 111006, 0, 0, 2, 2, 3, 94212, 5, 6,
  /* 20202 */ 0, 0, 0, 0, 0, 0, 0, 1320, 0, 0, 0, 0, 0, 0, 0, 0, 748, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 2105344, 261, 262,
  /* 20232 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 585, 0, 587, 588, 0, 0, 118784, 0, 0, 261, 118784, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20261 */ 0, 0, 0, 308, 309, 310, 311, 312, 0, 313, 261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 2162688,
  /* 20288 */ 0, 0, 261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2163480, 2163480, 261, 261, 0, 0, 0, 0, 0, 0, 0, 261,
  /* 20317 */ 0, 0, 0, 261, 119150, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 261, 261, 261, 261, 261,
  /* 20343 */ 261, 261, 261, 261, 261, 0, 0, 261, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
  /* 20372 */ 0, 1429, 0, 0, 0, 0, 2105344, 21044, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 601, 602, 603, 0, 0, 0, 0, 0, 0,
  /* 20400 */ 261, 0, 0, 0, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 0, 262, 262, 262, 262, 262, 262, 262, 262, 262,
  /* 20423 */ 262, 0, 0, 2, 2183415, 94212, 5, 6, 251, 0, 0, 0, 0, 0, 251, 0, 0, 0, 0, 0, 1291, 1418, 0, 0, 0, 0, 1426,
  /* 20450 */ 0, 0, 0, 1430, 0, 313, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 258466, 0, 122880, 0,
  /* 20477 */ 122880, 122880, 122880, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 313, 313, 313, 0, 0, 147456, 0, 0, 122880,
  /* 20499 */ 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 0, 122880, 122880, 122880, 122880, 122880, 0, 0, 0, 2,
  /* 20518 */ 2, 2183415, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 1336, 0, 0, 0, 0, 0, 0, 724992, 1343, 0, 313, 0, 0, 131072,
  /* 20544 */ 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280, 321, 321, 351, 0, 0, 0, 0, 0, 0, 131072, 0, 131072,
  /* 20568 */ 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
  /* 20587 */ 0, 0, 0, 0, 972, 0, 0, 313, 313, 0, 976, 0, 0, 0, 0, 0, 0, 627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 662, 0, 0, 0,
  /* 20618 */ 0, 0, 0, 0, 0, 0, 495, 495, 0, 131072, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 1351, 0, 0, 0, 0,
  /* 20648 */ 0, 0, 0, 0, 2293, 2294, 0, 0, 0, 0, 0, 0, 0, 313, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 135168,
  /* 20677 */ 0, 0, 45056, 49152, 135168, 0, 0, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168,
  /* 20693 */ 135168, 135168, 135168, 0, 0, 0, 0, 1287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1636, 1637, 0, 0, 0, 0, 135168,
  /* 20719 */ 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 1362, 0, 0, 1365, 0, 0, 1367, 0, 0, 0, 0, 0, 367, 0, 0,
  /* 20749 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 341, 0, 0, 0, 0, 0, 0, 2105344, 565, 566, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 617,
  /* 20780 */ 0, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3067904, 2162688, 2162688, 2162688,
  /* 20795 */ 2162688, 2162688, 2162688, 2162688, 2162688, 1192, 0, 0, 1195, 2162688, 2162688, 2441216, 2449408,
  /* 20808 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 2162688,
  /* 20821 */ 2162688, 2162688, 2162688, 139264, 0, 0, 262, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0, 0,
  /* 20846 */ 313, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278, 279, 0, 0, 0, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20878 */ 0, 0, 324, 0, 0, 262, 262, 0, 0, 0, 0, 0, 0, 0, 262, 0, 0, 0, 262, 45056, 139634, 0, 0, 0, 40960, 0, 0, 0,
  /* 20906 */ 0, 0, 0, 0, 0, 0, 0, 0, 262, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 0, 262, 0, 0, 2, 2, 3, 94212, 5,
  /* 20933 */ 6, 0, 0, 0, 0, 0, 0, 0, 1646, 0, 0, 0, 0, 0, 0, 0, 0, 1388, 0, 397, 1390, 1391, 397, 397, 397, 0, 0, 0,
  /* 20961 */ 2105344, 261, 21047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 631, 0, 0, 634, 0, 636, 0, 36864, 0, 0, 0, 0, 0, 0, 0,
  /* 20989 */ 0, 0, 0, 0, 0, 0, 0, 0, 1093632, 0, 0, 259, 259, 0, 0, 259, 259, 143619, 259, 259, 259, 259, 259, 259,
  /* 21013 */ 259, 143619, 259, 259, 143619, 259, 259, 259, 259, 259, 259, 259, 259, 259, 314, 259, 143619, 259, 259,
  /* 21032 */ 259, 259, 143619, 318, 259, 259, 259, 259, 259, 259, 40960, 259, 259, 259, 259, 259, 259, 259, 259, 259,
  /* 21052 */ 259, 259, 259, 259, 259, 259, 259, 259, 143678, 143619, 259, 259, 259, 259, 259, 259, 143678, 259, 259,
  /* 21071 */ 259, 143678, 45056, 49152, 143619, 143619, 143619, 259, 259, 143619, 143619, 143619, 143619, 143619,
  /* 21085 */ 143619, 143619, 143619, 143619, 143619, 143619, 259, 259, 259, 259, 259, 259, 143619, 259, 259, 143619,
  /* 21101 */ 259, 259, 259, 259, 259, 259, 0, 0, 0, 259, 0, 259, 259, 143619, 259, 143619, 143619, 143619, 143619,
  /* 21120 */ 143619, 143619, 143678, 143678, 143678, 143678, 143678, 143678, 143678, 143619, 143619, 0, 0, 2, 2, 3,
  /* 21136 */ 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 1673, 0, 1675, 0, 0, 1678, 397, 397, 397, 0, 313, 0, 0, 155648, 0, 0, 0,
  /* 21163 */ 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 308, 0, 0, 309, 0, 308, 0, 0, 0, 45056, 49152, 155648, 0, 0, 40960,
  /* 21187 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 155648, 155648, 155648, 155648, 155648, 155648,
  /* 21211 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 0, 0, 2, 2, 0, 94212, 5,
  /* 21228 */ 6, 126976, 0, 0, 0, 0, 0, 0, 1610, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2527232, 2695168, 0, 3145728, 0, 0, 0, 0,
  /* 21254 */ 155648, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 155648, 155648,
  /* 21277 */ 155648, 155648, 155648, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 313, 313, 204800, 0, 0, 0, 0, 0, 159744,
  /* 21299 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 0, 0, 0, 0, 0, 90628, 0, 0, 0, 0, 261, 262, 0, 0,
  /* 21320 */ 0, 0, 0, 0, 0, 572, 0, 0, 0, 0, 261, 262, 0, 0, 0, 0, 0, 0, 571, 0, 0, 0, 0, 0, 221722, 221722, 221722,
  /* 21347 */ 221722, 221722, 221722, 221722, 221722, 221722, 221722, 221600, 0, 159744, 0, 0, 0, 0, 90628, 90628,
  /* 21363 */ 90628, 90628, 90628, 90628, 90628, 90628, 90628, 159744, 0, 159744, 159744, 159744, 159744, 159744,
  /* 21377 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 90628, 0,
  /* 21391 */ 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 1714, 397, 397, 397, 397, 397, 397, 397, 397, 1116, 397,
  /* 21416 */ 397, 397, 1120, 0, 1099, 0, 0, 90112, 851, 2162688, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688,
  /* 21432 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 908, 0, 2162688, 2162688, 2162688, 2162688,
  /* 21445 */ 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 0, 0, 0, 0, 0, 0, 0, 0, 495, 515, 515,
  /* 21464 */ 515, 495, 518, 515, 515, 163840, 163840, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 1881, 0, 0, 0,
  /* 21490 */ 1884, 0, 0, 0, 0, 2109440, 1014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1094063, 0, 313, 0, 0, 0, 0,
  /* 21519 */ 0, 0, 0, 0, 167936, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0,
  /* 21539 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 296, 167936, 0, 0, 40960, 167936, 167936, 0, 0, 167936, 0, 167936, 0, 167936,
  /* 21562 */ 0, 0, 0, 0, 0, 1318, 0, 0, 1321, 1322, 0, 0, 0, 0, 0, 0, 643, 0, 0, 0, 647, 0, 0, 0, 0, 0, 0, 0, 167936,
  /* 21591 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
  /* 21604 */ 167936, 167936, 167936, 167936, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 1906, 0, 0, 0, 0, 0, 0,
  /* 21630 */ 397, 397, 397, 1055, 397, 397, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 0, 2, 3, 248, 5, 6, 0, 252,
  /* 21655 */ 0, 0, 0, 0, 0, 0, 0, 0, 512, 512, 512, 512, 512, 535, 512, 512, 172032, 172032, 172032, 172032, 172032,
  /* 21676 */ 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 514, 514, 514, 514, 514, 537, 514, 514, 172032, 172032,
  /* 21697 */ 53491, 53491, 2, 2, 3, 0, 5, 6, 0, 561, 0, 0, 0, 0, 0, 355, 0, 0, 0, 0, 355, 0, 0, 0, 45056, 49152, 0, 0,
  /* 21725 */ 0, 1033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 659, 0, 495, 495, 0, 0, 851, 517, 517, 517, 517, 517, 517,
  /* 21752 */ 517, 517, 517, 517, 517, 517, 517, 495, 495, 495, 495, 495, 1605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21778 */ 0, 0, 299, 0, 0, 2066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 397, 1680, 495, 495, 495, 2129, 495,
  /* 21805 */ 495, 495, 495, 495, 495, 495, 0, 0, 0, 0, 517, 517, 517, 517, 1255, 517, 517, 517, 517, 517, 0, 0, 495,
  /* 21828 */ 495, 495, 495, 495, 1180, 495, 495, 495, 495, 495, 495, 495, 495, 495, 848, 0, 0, 2172, 0, 0, 0, 0, 0, 0,
  /* 21852 */ 0, 0, 0, 0, 0, 0, 0, 625, 0, 0, 397, 397, 0, 2310, 495, 495, 495, 495, 495, 495, 2316, 495, 495, 495, 495,
  /* 21877 */ 495, 0, 0, 0, 0, 1514, 0, 0, 0, 0, 517, 517, 517, 2334, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 21901 */ 517, 517, 517, 517, 517, 1568, 2373, 495, 495, 495, 495, 495, 495, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 21922 */ 2383, 517, 2384, 2385, 517, 517, 517, 517, 517, 517, 495, 517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 650,
  /* 21948 */ 0, 0, 517, 2419, 517, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 0, 495, 495, 495, 0, 2431, 495, 495,
  /* 21975 */ 495, 495, 495, 495, 495, 495, 495, 2441, 517, 517, 517, 517, 517, 517, 517, 905, 517, 0, 0, 0, 495, 495,
  /* 21997 */ 495, 495, 0, 517, 517, 517, 517, 517, 517, 517, 517, 243, 2, 6, 495, 517, 517, 517, 517, 0, 0, 495, 495,
  /* 22020 */ 517, 517, 495, 517, 495, 517, 495, 495, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2354, 2355, 356, 0, 0, 0, 0,
  /* 22046 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 180764, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0,
  /* 22073 */ 0, 2084, 397, 397, 397, 397, 2089, 397, 397, 397, 0, 0, 0, 188831, 188831, 188831, 188831, 188831, 0, 0,
  /* 22093 */ 0, 0, 0, 188831, 188831, 188831, 0, 0, 188831, 188831, 188831, 188831, 188831, 0, 188831, 188831, 188831,
  /* 22110 */ 188831, 188831, 0, 188831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 692, 0, 397,
  /* 22138 */ 695, 397, 397, 188831, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 2175, 0, 933888, 0, 1011712, 0,
  /* 22164 */ 0, 0, 0, 0, 0, 260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 0, 0, 260, 0, 260, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22197 */ 0, 0, 0, 0, 0, 743, 0, 0, 0, 357, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 2187, 2188, 0,
  /* 22225 */ 2189, 0, 905216, 0, 0, 0, 0, 0, 0, 260, 261, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 935, 0, 0, 0, 0, 0, 0, 0,
  /* 22255 */ 0, 657, 357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 657, 1015, 0, 0, 0, 0, 0, 0, 1021, 0, 0,
  /* 22284 */ 0, 0, 0, 0, 0, 267, 266, 0, 266, 266, 267, 267, 0, 0, 0, 1283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22314 */ 325, 0, 0, 0, 1283, 1596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1010, 0, 0, 0, 495, 495, 517, 517, 517, 517,
  /* 22342 */ 517, 517, 517, 1594, 0, 1596, 0, 0, 0, 0, 0, 357, 357, 357, 357, 357, 357, 357, 357, 357, 357, 0, 1980, 0,
  /* 22366 */ 0, 0, 0, 1782, 1982, 0, 0, 0, 0, 517, 517, 517, 517, 517, 0, 0, 0, 0, 0, 2455, 0, 0, 2458, 495, 2460, 0,
  /* 22392 */ 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 353, 0, 0, 265, 265, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22424 */ 0, 1094, 0, 1050, 1084, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 0, 0, 1622, 0, 0, 0, 0, 0, 0,
  /* 22453 */ 0, 0, 0, 733, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 200968, 200704, 200969, 200704, 200704, 200968, 200704,
  /* 22473 */ 200704, 200704, 200969, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 0, 0, 0, 0, 0, 0,
  /* 22490 */ 0, 0, 584, 0, 0, 0, 0, 0, 495, 495, 200968, 200704, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 2286,
  /* 22518 */ 2287, 0, 0, 0, 0, 0, 0, 0, 644, 0, 0, 0, 0, 0, 0, 0, 0, 2176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151552, 2105344,
  /* 22547 */ 261, 262, 0, 208896, 0, 0, 0, 0, 0, 0, 0, 0, 584, 0, 0, 0, 0, 584, 0, 0, 2163480, 2757400, 2163480,
  /* 22570 */ 2777880, 2798360, 2163480, 2163480, 2163480, 2835224, 2163480, 2163480, 2884376, 2163480, 2163480,
  /* 22581 */ 2163480, 2163480, 0, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 0, 2, 6, 0,
  /* 22596 */ 0, 851, 2163538, 2163538, 2442066, 2450258, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538,
  /* 22609 */ 2163538, 2163538, 0, 0, 0, 2163480, 2163480, 2163480, 2163480, 2622290, 2163538, 2163538, 2163538,
  /* 22622 */ 2163538, 2687826, 2163538, 2704210, 2163538, 2712402, 2163538, 2163538, 2757458, 2163538, 2777938,
  /* 22633 */ 2798418, 2163538, 3068754, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 0, 0,
  /* 22646 */ 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 2163538,
  /* 22657 */ 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2614098, 2163538, 2163538, 2163538,
  /* 22668 */ 2659154, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2786130, 2802514,
  /* 22679 */ 2810706, 2163538, 2163538, 2163538, 3081042, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538,
  /* 22690 */ 2163538, 2163538, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 3068696, 2163480, 2163480,
  /* 22701 */ 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 848, 2158592, 3158016, 2158592, 0, 0, 0, 0, 0,
  /* 22716 */ 2163480, 2163480, 2163480, 2163480, 2474776, 2478872, 2163480, 2163480, 2163480, 2163480, 2163538,
  /* 22727 */ 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 0, 0, 0, 0, 0, 0, 0, 0, 2163480, 2163480,
  /* 22744 */ 2589464, 2163480, 2163480, 2163480, 2163480, 2519832, 2163480, 2163480, 2163480, 2163480, 2163480,
  /* 22755 */ 2163480, 2163480, 2597656, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480,
  /* 22766 */ 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 3080984, 2163480, 2708248,
  /* 22777 */ 2163480, 2163480, 2163480, 2163480, 2163480, 2761496, 2163480, 2163480, 2163480, 2855704, 2876184,
  /* 22788 */ 2163480, 2163480, 2163480, 2163480, 2163480, 2163538, 2163538, 2163538, 2163538, 2163538, 2499410,
  /* 22799 */ 2540370, 2544466, 2163538, 2163538, 2593618, 2163538, 2163538, 2474834, 2478930, 2163538, 2163538,
  /* 22810 */ 2163538, 2519890, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2597714, 2855762,
  /* 22821 */ 2876242, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2995026,
  /* 22832 */ 3019602, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2708306, 2163538, 2163538, 2163538,
  /* 22843 */ 2163538, 2163538, 2761554, 2163538, 2163538, 2163538, 2163538, 2163538, 0, 2502656, 0, 0, 0, 0, 0, 0, 0,
  /* 22860 */ 2163480, 2163480, 3052370, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538,
  /* 22871 */ 3158866, 2163538, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480, 3093272,
  /* 22882 */ 2163538, 2552658, 2560850, 2163538, 2163538, 2163538, 2163538, 0, 0, 2158592, 2158592, 2158592, 2158592,
  /* 22895 */ 2158592, 2158592, 2158592, 0, 0, 0, 0, 2163480, 2437912, 2163480, 2163480, 2163480, 2163538, 2163538,
  /* 22909 */ 2163538, 2163538, 2163538, 2163538, 0, 0, 0, 0, 2425624, 2163480, 2163480, 2163480, 2163480, 3027736,
  /* 22923 */ 2163480, 2163480, 3076888, 2163480, 3097368, 2163480, 2163480, 2163480, 3146520, 2163480, 0, 2163480,
  /* 22935 */ 2163480, 2491160, 2163480, 2163480, 2528024, 2163480, 2163480, 2163480, 2163480, 2163480, 2163480,
  /* 22946 */ 2601752, 2626328, 2163480, 2163480, 2163480, 2163480, 2163538, 2163538, 2589522, 2163538, 2163538,
  /* 22957 */ 2163538, 2163538, 2163538, 2163538, 2163538, 2465792, 0, 2163480, 2695960, 2163480, 2163480, 2163480,
  /* 22969 */ 2163480, 2163480, 2163480, 2163480, 2163480, 2888472, 2163480, 2163480, 2163480, 2163480, 2163480,
  /* 22980 */ 2163480, 2581272, 2163480, 2163480, 2163480, 2163480, 2614040, 2163480, 2163480, 2163480, 2659096,
  /* 22991 */ 2491218, 2163538, 2163538, 2528082, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2601810,
  /* 23002 */ 2626386, 2163538, 2163538, 2163538, 2696018, 2163538, 2163538, 3027794, 2163538, 2163538, 3076946,
  /* 23013 */ 2163538, 3097426, 2163538, 2163538, 2163538, 3146578, 2163538, 2163480, 2163480, 2163480, 2163480,
  /* 23024 */ 2163480, 2622232, 2163480, 2163480, 2163480, 2163480, 2687768, 2163480, 2704152, 2163480, 2712344,
  /* 23035 */ 2163480, 2163480, 2163538, 2163538, 2163538, 2163538, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 0, 2402, 495,
  /* 23056 */ 495, 2163480, 2634520, 2163480, 2163480, 2716440, 2736920, 2163480, 2163480, 2814744, 2818840, 2163480,
  /* 23068 */ 2163480, 2908952, 2163480, 2163480, 2954008, 2163480, 2962200, 2163480, 2163480, 3023640, 3048216,
  /* 23079 */ 2163480, 2163480, 2163480, 2163480, 3175192, 0, 0, 0, 0, 2163538, 2163538, 2163538, 2163538, 3093330, 0,
  /* 23094 */ 0, 0, 0, 0, 2850816, 0, 0, 0, 0, 0, 0, 1672, 0, 0, 0, 0, 0, 0, 397, 397, 397, 1054, 397, 397, 397, 397,
  /* 23120 */ 397, 397, 397, 397, 397, 0, 0, 0, 0, 2736978, 2163538, 2163538, 2814802, 2818898, 2163538, 2163538,
  /* 23136 */ 2909010, 2163538, 2163538, 2954066, 2163538, 2962258, 2163538, 2163538, 3023698, 3048274, 2163538,
  /* 23147 */ 2163538, 2163538, 2163538, 3175250, 2163480, 2163480, 2163480, 2163538, 2163538, 2163538, 0, 0, 0, 0, 0,
  /* 23162 */ 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 0, 2540312, 2544408, 2163480, 2163480, 2593560, 2163480,
  /* 23179 */ 2163480, 2163480, 2163480, 2163480, 2163480, 2892568, 2163480, 2163480, 2958104, 2163480, 2163480,
  /* 23190 */ 2163480, 2163538, 2163538, 2163538, 2457600, 0, 0, 0, 0, 0, 0, 0, 2895872, 0, 0, 0, 0, 1303, 651264, 0, 0,
  /* 23211 */ 0, 0, 0, 0, 0, 0, 0, 0, 2059, 0, 0, 0, 0, 0, 2158592, 2158592, 0, 2421528, 2163480, 2163480, 2482968,
  /* 23232 */ 2163480, 2163480, 2163480, 2585368, 2163480, 2163480, 2683672, 2741016, 2163480, 2163480, 2163480,
  /* 23243 */ 3158808, 2163480, 0, 0, 0, 0, 2121728, 0, 0, 0, 0, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538,
  /* 23260 */ 2892626, 2163538, 2163538, 2958162, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538,
  /* 23271 */ 2548562, 2163538, 2163538, 2163538, 2163538, 2634578, 2163538, 2163538, 2716498, 2163538, 2585426,
  /* 23282 */ 2163538, 2163538, 2683730, 2741074, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538,
  /* 23293 */ 2163538, 2163538, 2163538, 2163538, 2581330, 2163538, 2163538, 2163538, 2163538, 3122002, 2163480,
  /* 23304 */ 2163480, 2163538, 2163538, 0, 2494464, 0, 0, 0, 2826240, 0, 2973696, 0, 0, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
  /* 23326 */ 0, 0, 0, 0, 0, 1127, 495, 495, 495, 495, 495, 495, 495, 495, 495, 2973696, 2744320, 0, 2158592, 0,
  /* 23346 */ 2163480, 2446104, 2454296, 2495256, 2163480, 2163480, 2163480, 2163480, 2650904, 2745112, 2827032,
  /* 23357 */ 2929432, 2163480, 2974488, 2163480, 2163480, 2163480, 3101464, 2163538, 2446162, 2454354, 2495314,
  /* 23368 */ 2163538, 2163538, 2163538, 2163538, 2650962, 2745170, 2827090, 2929490, 2163538, 2974546, 2163538,
  /* 23379 */ 2163538, 2163538, 3101522, 2163480, 2163538, 0, 0, 0, 0, 0, 0, 1632, 0, 1633, 1634, 0, 0, 0, 0, 0, 0,
  /* 23400 */ 1127, 495, 495, 495, 495, 495, 495, 495, 495, 1457, 2846720, 0, 0, 0, 0, 0, 0, 2805760, 0, 3178496,
  /* 23420 */ 2560000, 2560000, 0, 2163480, 2552600, 2560792, 2531328, 2985984, 0, 0, 0, 0, 2163480, 2163480, 2605848,
  /* 23435 */ 2163480, 2831128, 2163480, 2163480, 2163480, 2986776, 2163538, 2163538, 2163538, 2835282, 2163538,
  /* 23446 */ 2163538, 2884434, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538,
  /* 23457 */ 2888530, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 2605906, 2163538,
  /* 23468 */ 2831186, 2163538, 2163538, 2163538, 2986834, 2523136, 0, 0, 0, 0, 2163480, 2163480, 2163480, 2163480,
  /* 23482 */ 2163480, 2994968, 3019544, 2163480, 2163480, 2163480, 3052312, 2163480, 2163480, 2163480, 2163480,
  /* 23493 */ 2163480, 2163480, 2163480, 2163480, 2786072, 2802456, 2810648, 2163480, 2163480, 2163480, 2163480,
  /* 23504 */ 2163480, 2163480, 2163480, 2163480, 2163480, 3121944, 2421586, 2163538, 2163538, 2483026, 2163538,
  /* 23515 */ 2163538, 2163480, 2163480, 2982680, 2425682, 2163538, 2163538, 2163538, 2163538, 2982738, 2535424, 0, 0,
  /* 23528 */ 2912256, 2163480, 2655000, 2933528, 2163480, 2163538, 2655058, 2933586, 2163538, 2637824, 2699264,
  /* 23539 */ 2556696, 2163480, 2556754, 2163538, 2163480, 2163538, 2163480, 2163538, 2163480, 2163480, 2163538,
  /* 23550 */ 2163538, 2163538, 2163538, 2163538, 2163538, 2163538, 0, 0, 0, 0, 0, 0, 2486272, 2163538, 2945816,
  /* 23565 */ 2945874, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 937, 0, 0, 0, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088,
  /* 23595 */ 0, 0, 0, 0, 0, 1349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 45056, 49152, 0, 217088, 0, 0, 217088,
  /* 23622 */ 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 964, 0, 0, 0, 0, 0, 0, 0, 0, 1029, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0,
  /* 23653 */ 0, 217088, 0, 0, 0, 0, 0, 568, 0, 0, 0, 0, 0, 0, 568, 0, 0, 0, 217088, 217088, 217088, 217088, 217088,
  /* 23676 */ 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 0, 0, 2, 2, 3,
  /* 23692 */ 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 2292, 0, 0, 0, 0, 2296, 0, 0, 0, 0, 2772992, 0, 0, 0, 0, 2113536, 0, 0,
  /* 23720 */ 0, 0, 0, 57344, 0, 0, 0, 0, 0, 1384, 0, 0, 0, 0, 397, 397, 1392, 397, 397, 397, 0, 0, 0, 0, 372, 359, 359,
  /* 23747 */ 359, 359, 359, 359, 359, 359, 359, 359, 359, 469, 359, 359, 359, 359, 28672, 0, 0, 2658304, 0, 2785280, 0,
  /* 23768 */ 0, 0, 0, 0, 0, 0, 0, 2379776, 0, 0, 0, 0, 1317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 0, 0, 0,
  /* 23799 */ 0, 261, 0, 262, 0, 0, 0, 262, 0, 0, 0, 2473984, 0, 0, 0, 0, 0, 0, 1713, 0, 397, 397, 397, 397, 397, 397,
  /* 23825 */ 397, 397, 397, 1069, 397, 397, 1071, 397, 397, 397, 2162688, 2162688, 2162688, 2162688, 3026944, 2162688,
  /* 23841 */ 2162688, 3076096, 2162688, 3096576, 2162688, 2162688, 2162688, 3145728, 2162688, 848, 0, 0, 0, 848, 0,
  /* 23856 */ 851, 0, 0, 0, 851, 0, 2162688, 2437120, 2162688, 2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688,
  /* 23872 */ 2162688, 2162688, 2162688, 2162688, 2162688, 0, 4263936, 6, 2162688, 2961408, 2162688, 2162688, 3022848,
  /* 23885 */ 3047424, 2162688, 2162688, 2162688, 2162688, 3174400, 848, 0, 851, 0, 2162688, 2162688, 2162688, 2162688,
  /* 23899 */ 2162688, 2162688, 2162688, 2162688, 2162688, 907, 0, 0, 2162688, 2162688, 2162688, 2162688, 0, 2162688,
  /* 23913 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 221564, 0, 0, 0, 0, 0, 0,
  /* 23933 */ 0, 0, 0, 0, 0, 0, 1325, 0, 0, 0, 0, 0, 0, 221600, 221600, 221600, 221600, 221600, 221600, 221600, 221600,
  /* 23954 */ 221600, 221600, 221600, 221600, 221600, 221600, 221600, 221600, 221600, 221600, 221600, 221600, 221600,
  /* 23967 */ 221600, 221600, 221600, 0, 0, 0, 0, 0, 0, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0, 221600, 221733, 0, 0, 2, 2, 3,
  /* 23993 */ 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 94212, 5, 6, 0, 0,
  /* 24022 */ 249856, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 261, 262, 0, 0, 0, 0, 0, 570, 0, 0, 573, 574, 0, 0, 0, 250273,
  /* 24048 */ 250273, 250273, 250273, 250273, 249856, 249856, 249856, 249856, 250273, 250273, 250273, 250273, 249856,
  /* 24061 */ 249856, 250273, 250273, 250273, 250273, 250273, 249856, 250273, 250273, 250273, 250273, 250273, 249856,
  /* 24074 */ 250273, 249856, 249856, 249856, 249856, 249856, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
  /* 24097 */ 250273, 250273, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 188831, 188831, 188831, 188831, 188831,
  /* 24119 */ 188831, 188831, 188831, 188831, 0, 0, 0, 2105344, 261, 262, 0, 0, 212992, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0,
  /* 24142 */ 0, 0, 0, 0, 0, 0, 1082, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 24162 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 114688, 0, 241664, 0, 262144, 0, 0, 0, 0,
  /* 24178 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 258048, 0, 0, 0, 0, 258048, 0, 0,
  /* 24207 */ 0, 0, 1333, 0, 1335, 0, 0, 1338, 0, 0, 0, 1342, 0, 0, 0, 0, 926, 930, 0, 2441216, 2449408, 0, 0, 2469888,
  /* 24231 */ 0, 0, 0, 0, 0, 302, 303, 304, 305, 0, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 0, 0, 0, 1907, 0, 0, 0, 0, 0,
  /* 24262 */ 397, 397, 0, 0, 0, 258466, 258466, 258466, 258466, 258466, 258466, 258466, 258466, 258466, 258466, 258466,
  /* 24278 */ 258466, 258466, 258466, 258466, 258466, 258466, 258466, 258466, 258466, 258466, 258466, 258466, 258466, 0,
  /* 24292 */ 0, 0, 0, 258048, 0, 0, 0, 0, 0, 1609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1127, 495, 495, 495, 495, 495, 495,
  /* 24319 */ 495, 1140, 258466, 258466, 0, 0, 2, 2, 3, 94212, 0, 6, 0, 0, 274432, 0, 0, 0, 0, 0, 1644, 0, 0, 0, 0, 0,
  /* 24345 */ 0, 0, 0, 0, 0, 1624, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 261, 262, 196608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 646, 0,
  /* 24374 */ 0, 0, 0, 0, 0, 253952, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 176128,
  /* 24400 */ 294912, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 0, 580, 581, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24426 */ 590, 0, 2, 3, 94212, 2195705, 6, 0, 0, 0, 0, 253, 0, 0, 0, 0, 253, 0, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24454 */ 270336, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 270336, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 0, 1854, 0, 0, 0,
  /* 24482 */ 0, 0, 0, 0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 2, 2, 3, 94212, 2195705, 6, 0, 0, 0, 0, 0, 0,
  /* 24511 */ 0, 364544, 0, 0, 0, 1896, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 24528 */ 2162688, 2162688, 245760, 0, 0, 2162688, 2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688, 2162688,
  /* 24542 */ 2162688, 2162688, 2162688, 2162688, 0, 245, 4297264, 0, 278528, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0,
  /* 24564 */ 0, 0, 2179688, 0, 0, 0, 0, 0, 0, 0, 0, 645, 0, 0, 0, 0, 0, 0, 0, 53491, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0,
  /* 24594 */ 0, 0, 0, 0, 0, 1008, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 397,
  /* 24623 */ 397, 397, 2091, 495, 517, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0,
  /* 24647 */ 2469888, 0, 0, 0, 0, 91306, 1127, 851, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 24668 */ 495, 495, 2024, 0, 0, 0, 1596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1356, 0, 0, 0, 1980, 0, 0, 0, 0, 0,
  /* 24697 */ 1982, 0, 0, 0, 0, 517, 517, 517, 517, 517, 0, 0, 0, 0, 2454, 0, 0, 0, 0, 495, 495, 495, 517, 53491, 53806,
  /* 24722 */ 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 271, 272, 273, 274, 275, 276, 277, 0, 0, 0, 0, 0, 0, 40960, 0, 0,
  /* 24750 */ 0, 0, 0, 0, 0, 387, 0, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 0, 0, 0, 397, 2211, 397, 397, 397,
  /* 24776 */ 2214, 397, 2216, 2217, 0, 2218, 0, 515, 515, 515, 515, 515, 515, 518, 518, 518, 518, 518, 518, 518, 518,
  /* 24797 */ 518, 515, 518, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 283, 0, 0, 0, 0, 0, 0, 0, 45056,
  /* 24823 */ 49152, 53492, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1081, 0, 0, 0, 0, 0, 0, 0, 0, 286720,
  /* 24850 */ 286720, 286720, 286720, 286720, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720, 286720, 286720, 286720,
  /* 24866 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 286720, 286720, 286720, 286720, 286720, 0,
  /* 24881 */ 286720, 286720, 286720, 286720, 286720, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 313, 0, 0, 0, 0, 0,
  /* 24906 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250273, 0, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 1914, 0,
  /* 24936 */ 0, 0, 1034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1376, 1377, 0, 0, 2162688, 3067904, 2162688, 2162688,
  /* 24959 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 303104, 2162688, 2162688, 2162688, 2162688, 0,
  /* 24972 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 925, 6, 0, 2940928, 2416640,
  /* 24986 */ 229376, 0, 0, 0, 0, 0, 0, 2723840, 0, 0, 0, 0, 0, 0, 1894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 901120, 0, 0, 0, 0,
  /* 25015 */ 0, 0, 0, 245, 3, 94212, 5, 250, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 596, 597, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25045 */ 1611, 1612, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 495, 495, 0, 313, 0, 0, 0,
  /* 25076 */ 0, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 0, 0, 290816, 290816, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25105 */ 1427, 0, 0, 0, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816,
  /* 25120 */ 290816, 290816, 290816, 290816, 290816, 0, 0, 245, 245, 3, 94212, 5, 4297264, 0, 0, 0, 562, 0, 0, 0, 0,
  /* 25141 */ 261, 262, 0, 0, 0, 0, 569, 0, 0, 0, 0, 0, 0, 2113536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 307, 0, 0, 0, 0, 0,
  /* 25171 */ 0, 246, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1101, 0, 0, 0, 0, 0, 0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25203 */ 0, 0, 0, 0, 0, 0, 605, 606, 0, 539, 0, 0, 4264495, 246, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 563, 0, 0, 1105920,
  /* 25230 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 938, 0, 0, 0, 0, 299008, 0, 0, 0, 0, 2441216, 2449408, 0, 0,
  /* 25257 */ 2469888, 0, 0, 0, 0, 0, 609, 0, 0, 0, 0, 0, 0, 748, 0, 495, 795, 0, 266, 267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25286 */ 0, 0, 0, 0, 952, 0, 0, 0, 313, 0, 0, 0, 0, 0, 0, 267, 0, 0, 0, 0, 0, 0, 0, 362, 304, 0, 0, 0, 0, 0, 45056,
  /* 25317 */ 49152, 0, 0, 266, 0, 267, 0, 266, 266, 267, 0, 0, 0, 0, 0, 0, 0, 582, 583, 0, 0, 0, 0, 0, 0, 0, 598, 599,
  /* 25345 */ 0, 0, 0, 0, 604, 0, 0, 0, 0, 0, 358, 360, 267, 0, 0, 0, 0, 267, 0, 365, 0, 45056, 49152, 0, 0, 0, 40960,
  /* 25372 */ 0, 0, 0, 0, 0, 0, 266, 0, 395, 398, 398, 398, 419, 419, 419, 419, 419, 441, 441, 441, 441, 441, 441, 441,
  /* 25396 */ 441, 456, 460, 441, 441, 441, 441, 441, 456, 468, 441, 441, 441, 441, 460, 441, 460, 460, 460, 460, 460,
  /* 25417 */ 493, 496, 496, 496, 496, 496, 519, 496, 496, 496, 496, 496, 496, 519, 519, 519, 519, 519, 519, 519, 519,
  /* 25438 */ 519, 541, 541, 550, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 313, 313, 0, 0, 0, 0, 0, 0, 0,
  /* 25465 */ 0, 279, 279, 0, 323, 0, 0, 0, 0, 0, 0, 639, 0, 0, 642, 0, 0, 0, 0, 0, 0, 649, 0, 0, 0, 0, 0, 1853, 0, 0,
  /* 25495 */ 0, 0, 0, 0, 0, 0, 0, 0, 1354, 0, 0, 0, 0, 0, 653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 0,
  /* 25528 */ 1361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2600960, 0, 0, 0, 0, 0, 2887680, 0, 0, 0, 0, 570, 0, 0, 0, 0, 0, 0,
  /* 25558 */ 0, 0, 0, 0, 0, 679, 0, 0, 682, 0, 0, 0, 0, 0, 689, 0, 0, 0, 397, 397, 696, 397, 397, 774, 719, 397, 397,
  /* 25585 */ 397, 0, 620, 0, 0, 0, 0, 726, 0, 0, 0, 0, 0, 0, 592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 651, 0, 0,
  /* 25617 */ 0, 726, 0, 726, 0, 0, 0, 0, 749, 0, 0, 0, 0, 0, 0, 313, 313, 0, 0, 0, 0, 0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
  /* 25648 */ 0, 0, 0, 0, 730, 0, 0, 0, 0, 0, 756, 620, 0, 0, 0, 760, 0, 0, 0, 620, 0, 0, 0, 0, 766, 0, 0, 653, 620, 0,
  /* 25678 */ 0, 0, 0, 0, 0, 0, 0, 0, 756, 495, 495, 495, 495, 517, 1588, 517, 651781, 517, 517, 517, 517, 0, 0, 0,
  /* 25702 */ 1595, 517, 888, 517, 891, 517, 517, 903, 517, 517, 0, 0, 0, 495, 495, 797, 495, 495, 495, 495, 495, 495,
  /* 25724 */ 822, 824, 495, 829, 495, 832, 495, 495, 844, 913, 832, 495, 495, 0, 517, 517, 856, 517, 921, 891, 517,
  /* 25745 */ 517, 53491, 2, 6, 0, 1031, 0, 0, 0, 1035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1315, 0, 0, 0, 0, 0, 0, 1008, 0,
  /* 25774 */ 0, 0, 0, 0, 1127, 495, 495, 495, 495, 495, 495, 495, 495, 1151, 495, 495, 495, 495, 495, 495, 495, 517,
  /* 25796 */ 517, 1250, 517, 517, 517, 517, 517, 517, 517, 0, 0, 495, 495, 495, 495, 2435, 495, 2437, 2438, 2439, 495,
  /* 25817 */ 517, 517, 517, 517, 2445, 397, 397, 1410, 397, 397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1420, 0, 1422, 0, 0, 0,
  /* 25843 */ 0, 0, 0, 1424, 0, 0, 0, 0, 0, 0, 0, 628, 0, 0, 0, 0, 0, 0, 0, 0, 1647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
  /* 25874 */ 397, 397, 397, 397, 397, 1437, 397, 397, 397, 1441, 397, 397, 0, 495, 495, 495, 495, 2313, 2314, 2315,
  /* 25894 */ 495, 495, 495, 495, 495, 495, 2121, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1153, 495, 495, 495, 495,
  /* 25915 */ 495, 495, 495, 495, 1489, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1501, 495, 495, 495, 495, 517,
  /* 25936 */ 2497, 517, 517, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0, 0, 495, 495, 2528, 495, 495, 1505, 495, 495,
  /* 25958 */ 495, 495, 1511, 1514, 91306, 1516, 1514, 517, 517, 1520, 517, 517, 517, 517, 1527, 517, 517, 517, 517,
  /* 25977 */ 517, 517, 517, 517, 1535, 517, 517, 517, 517, 900, 517, 517, 517, 517, 0, 0, 0, 495, 495, 495, 495, 495,
  /* 25999 */ 1974, 495, 495, 495, 495, 495, 495, 495, 495, 495, 0, 1514, 91306, 0, 1514, 517, 517, 517, 517, 517, 517,
  /* 26020 */ 1571, 517, 517, 517, 517, 1575, 517, 517, 517, 517, 495, 495, 495, 495, 0, 517, 517, 517, 517, 517, 517,
  /* 26041 */ 517, 517, 53491, 2, 6, 1583, 495, 495, 495, 517, 517, 517, 517, 1590, 517, 517, 517, 0, 1594, 0, 0, 0, 0,
  /* 26064 */ 261, 262, 0, 0, 0, 568, 0, 0, 0, 0, 0, 0, 1004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 934, 0, 0, 936, 0, 0, 0, 0, 0,
  /* 26095 */ 0, 1596, 0, 0, 0, 0, 0, 0, 0, 0, 1601, 0, 0, 0, 0, 0, 1865, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 290816,
  /* 26124 */ 290816, 290816, 290816, 290816, 290816, 290816, 0, 0, 0, 0, 0, 0, 0, 0, 725, 0, 0, 585, 0, 752, 0, 0,
  /* 26146 */ 1681, 397, 397, 397, 397, 397, 397, 397, 397, 1688, 397, 397, 397, 397, 397, 397, 397, 397, 1920, 397,
  /* 26166 */ 397, 397, 397, 397, 397, 397, 397, 1401, 397, 397, 397, 397, 397, 397, 397, 1115, 397, 397, 397, 397, 0,
  /* 26187 */ 0, 0, 0, 0, 0, 0, 0, 0, 1085, 0, 0, 397, 397, 397, 397, 1698, 1699, 0, 0, 1701, 0, 0, 0, 0, 0, 1699, 0, 0,
  /* 26215 */ 0, 0, 1370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 217088, 217088, 217088, 217088, 217088, 217088,
  /* 26236 */ 217088, 0, 0, 0, 0, 0, 0, 0, 0, 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1710, 0, 0, 0, 0, 397, 397,
  /* 26266 */ 1716, 397, 397, 397, 397, 397, 1066, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 1922, 397,
  /* 26286 */ 397, 397, 397, 495, 495, 495, 1735, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 837, 495,
  /* 26307 */ 495, 495, 495, 495, 495, 1749, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1168, 495, 495,
  /* 26328 */ 495, 495, 1760, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 843, 495, 517, 517,
  /* 26349 */ 517, 1792, 517, 1794, 517, 517, 517, 1797, 517, 517, 517, 517, 517, 517, 495, 495, 2163, 517, 517, 2166,
  /* 26369 */ 0, 0, 0, 2170, 495, 495, 517, 517, 1843, 517, 517, 517, 517, 1594, 0, 1596, 0, 0, 1847, 0, 0, 0, 0, 1447,
  /* 26393 */ 1448, 1127, 495, 495, 1450, 495, 495, 495, 495, 495, 495, 1163, 495, 495, 1165, 495, 1167, 495, 495, 495,
  /* 26413 */ 495, 0, 0, 1863, 0, 0, 0, 0, 1867, 0, 0, 0, 0, 0, 0, 0, 0, 761, 0, 0, 0, 0, 730, 0, 0, 0, 0, 0, 1891, 0,
  /* 26443 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1899, 0, 0, 1902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 397, 397, 1393, 397,
  /* 26473 */ 397, 495, 495, 1972, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1978, 495, 495, 0, 0, 0, 0, 1631, 0, 0,
  /* 26496 */ 0, 0, 0, 0, 0, 0, 1638, 0, 0, 0, 0, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 939, 2015, 517, 517,
  /* 26527 */ 517, 517, 517, 517, 517, 517, 517, 2021, 517, 517, 495, 495, 495, 0, 517, 517, 517, 517, 517, 517, 517,
  /* 26548 */ 517, 873, 517, 517, 517, 517, 517, 517, 1574, 517, 517, 1577, 517, 517, 495, 495, 495, 495, 495, 1508,
  /* 26568 */ 495, 0, 1514, 91306, 0, 1514, 517, 517, 517, 517, 517, 517, 517, 1809, 1810, 517, 1812, 517, 517, 517,
  /* 26588 */ 517, 517, 517, 517, 517, 2152, 517, 517, 517, 517, 2155, 517, 517, 495, 517, 517, 517, 517, 0, 0, 0, 0, 0,
  /* 26611 */ 0, 2034, 0, 0, 0, 0, 0, 626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1676, 0, 0, 397, 397, 397, 0, 2039, 0, 0, 0, 0,
  /* 26641 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2048, 2103, 397, 397, 0, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 26666 */ 495, 2319, 495, 495, 2233, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 841, 495, 495,
  /* 26687 */ 2245, 495, 495, 495, 495, 517, 517, 517, 517, 517, 517, 517, 517, 2256, 517, 517, 517, 517, 517, 1541,
  /* 26707 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 0, 0, 495, 495, 495, 1159, 0, 0, 0, 2507, 2508, 0, 495,
  /* 26730 */ 495, 495, 495, 495, 495, 495, 495, 495, 517, 2470, 517, 517, 517, 517, 517, 517, 0, 0, 0, 268, 269, 270,
  /* 26752 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26786 */ 45056, 49152, 0, 372, 0, 40960, 0, 0, 372, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 1056, 397, 397, 397, 397,
  /* 26810 */ 397, 397, 359, 359, 359, 359, 359, 359, 359, 359, 495, 495, 495, 495, 495, 517, 495, 495, 517, 517, 0, 0,
  /* 26832 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 0, 0, 339, 0, 542, 551, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0,
  /* 26861 */ 0, 313, 313, 0, 0, 0, 0, 0, 980, 943, 0, 397, 1408, 397, 397, 397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397,
  /* 26889 */ 397, 0, 0, 1890, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 995, 0, 997, 397, 1924, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26920 */ 0, 0, 0, 0, 0, 667, 0, 1943, 1944, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 26943 */ 1171, 495, 1980, 0, 0, 0, 0, 0, 1982, 0, 0, 0, 0, 517, 517, 517, 1986, 1987, 495, 495, 2463, 495, 2465,
  /* 26966 */ 495, 2467, 495, 517, 517, 517, 517, 2473, 517, 2475, 517, 517, 517, 517, 1572, 517, 517, 517, 517, 517,
  /* 26986 */ 517, 1579, 1580, 495, 495, 1477, 2477, 517, 0, 0, 0, 0, 0, 0, 0, 0, 495, 495, 495, 495, 495, 495, 1509, 0,
  /* 27010 */ 1514, 91306, 0, 1514, 1519, 517, 517, 1521, 0, 373, 374, 40960, 374, 381, 373, 374, 381, 271, 381, 0, 381,
  /* 27031 */ 399, 399, 399, 420, 420, 420, 435, 437, 442, 442, 455, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
  /* 27052 */ 442, 470, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 497, 497, 497, 497, 497, 520, 497,
  /* 27073 */ 497, 497, 497, 497, 497, 520, 520, 520, 520, 520, 520, 520, 520, 520, 543, 543, 552, 53491, 53491, 2, 2,
  /* 27094 */ 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 313, 313, 0, 0, 977, 0, 0, 0, 0, 0, 517, 517, 517, 892, 517, 517, 517,
  /* 27121 */ 517, 517, 0, 0, 0, 495, 495, 495, 495, 0, 517, 517, 517, 873, 517, 517, 517, 517, 53491, 2, 6, 495, 833,
  /* 27144 */ 495, 495, 0, 517, 517, 517, 517, 517, 892, 517, 517, 53491, 2, 6, 0, 0, 0, 943, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27171 */ 0, 0, 0, 1614, 0, 0, 0, 0, 0, 0, 1049, 0, 397, 1052, 397, 397, 397, 397, 397, 397, 397, 397, 1062, 1123,
  /* 27195 */ 1082, 0, 0, 0, 0, 0, 1127, 1128, 495, 1131, 495, 495, 495, 495, 1139, 495, 1144, 495, 495, 495, 495, 495,
  /* 27217 */ 1150, 495, 495, 495, 495, 495, 495, 495, 495, 1152, 495, 495, 495, 495, 495, 495, 495, 91306, 1127, 851,
  /* 27237 */ 1197, 517, 1200, 517, 517, 517, 517, 1208, 517, 1213, 517, 517, 517, 517, 517, 517, 1795, 517, 517, 517,
  /* 27257 */ 517, 517, 1800, 517, 1802, 517, 517, 517, 1219, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 27277 */ 517, 517, 495, 2023, 495, 1396, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
  /* 27298 */ 397, 1074, 1471, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 0, 1487,
  /* 27319 */ 1488, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1191, 848, 1900, 1901, 0, 0,
  /* 27340 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 1718, 397, 397, 397, 397, 397, 397, 0, 0, 0, 2095, 0, 0,
  /* 27367 */ 0, 2099, 0, 2101, 0, 397, 397, 397, 397, 397, 397, 2305, 0, 0, 0, 0, 0, 909312, 0, 397, 397, 2104, 397, 0,
  /* 27391 */ 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1468, 495, 495, 495, 517, 2148, 517, 517, 517,
  /* 27412 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1816, 517, 517, 517, 517, 2263, 2264, 517,
  /* 27432 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 0, 0, 495, 495, 1136, 495, 495, 2462, 495, 495, 495, 495,
  /* 27453 */ 495, 495, 517, 517, 517, 2472, 517, 517, 517, 517, 517, 517, 517, 1237, 517, 517, 517, 517, 517, 517, 517,
  /* 27474 */ 517, 517, 517, 517, 1226, 517, 517, 517, 517, 2553, 517, 517, 517, 2555, 0, 0, 495, 495, 517, 517, 495,
  /* 27495 */ 517, 495, 517, 495, 495, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0, 2353, 0, 0, 0, 0, 285, 286, 287, 0, 0, 0, 0, 0,
  /* 27523 */ 0, 0, 0, 0, 1293, 0, 0, 0, 0, 0, 0, 0, 0, 279, 347, 0, 0, 0, 279, 0, 0, 0, 0, 0, 0, 0, 0, 786, 0, 0, 0, 0,
  /* 27555 */ 0, 495, 495, 0, 323, 0, 40960, 0, 0, 323, 0, 0, 383, 0, 388, 396, 400, 400, 400, 421, 421, 421, 421, 438,
  /* 27579 */ 443, 443, 443, 443, 443, 443, 443, 443, 461, 443, 443, 443, 443, 443, 443, 400, 443, 443, 443, 443, 461,
  /* 27600 */ 443, 461, 461, 461, 461, 461, 461, 498, 498, 498, 498, 498, 521, 498, 498, 498, 498, 498, 498, 521, 521,
  /* 27621 */ 521, 521, 521, 521, 521, 521, 521, 498, 498, 521, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0,
  /* 27645 */ 313, 313, 975, 0, 0, 0, 0, 0, 0, 0, 661, 0, 0, 0, 0, 661, 0, 667, 0, 397, 397, 397, 709, 397, 397, 397,
  /* 27671 */ 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 0, 1702, 0, 0, 0, 0, 0, 0, 955, 0, 0, 957, 958, 0, 0, 0, 0, 0,
  /* 27699 */ 0, 0, 0, 0, 0, 968, 0, 1086, 0, 0, 0, 0, 1090, 1091, 0, 0, 958, 0, 0, 0, 0, 0, 0, 2068, 0, 0, 0, 0, 0, 0,
  /* 27729 */ 0, 2075, 2076, 0, 1096, 957, 0, 0, 0, 0, 0, 0, 0, 0, 948, 1104, 0, 0, 1107, 91306, 1127, 851, 1198, 517,
  /* 27753 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1217, 517, 1232, 517, 517, 1234, 517, 1236, 517, 517,
  /* 27773 */ 517, 517, 517, 517, 517, 517, 517, 0, 0, 0, 495, 495, 495, 814, 0, 0, 0, 1070382, 0, 0, 1127, 495, 495,
  /* 27796 */ 495, 495, 495, 495, 495, 495, 495, 1186, 495, 495, 495, 495, 495, 848, 495, 495, 495, 1586, 517, 517, 517,
  /* 27817 */ 517, 517, 517, 517, 1593, 0, 1594, 0, 0, 0, 0, 316, 0, 299, 361, 363, 0, 0, 0, 316, 0, 45056, 49152, 0, 0,
  /* 27842 */ 0, 1596, 0, 0, 0, 0, 0, 1599, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 352, 0, 0, 0, 0, 0, 0, 1630, 0, 0, 0,
  /* 27873 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1858, 0, 0, 0, 397, 397, 397, 573440, 0, 0, 0, 0, 495, 495, 495, 495, 495, 495,
  /* 27900 */ 1731, 495, 495, 495, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0, 495, 495, 2543, 495, 1773, 495, 495, 495,
  /* 27922 */ 0, 0, 0, 0, 1514, 0, 0, 0, 0, 517, 517, 517, 517, 517, 1557, 1558, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 27946 */ 517, 0, 0, 0, 495, 495, 495, 495, 1980, 0, 0, 0, 0, 0, 1982, 0, 0, 0, 0, 517, 517, 1985, 517, 517, 517,
  /* 27971 */ 517, 517, 1573, 517, 517, 517, 517, 517, 517, 495, 1581, 495, 651759, 397, 397, 397, 0, 495, 495, 495,
  /* 27991 */ 495, 495, 495, 495, 495, 495, 2115, 495, 495, 495, 495, 812, 495, 495, 495, 495, 828, 830, 495, 495, 840,
  /* 28012 */ 495, 495, 495, 495, 813, 819, 821, 495, 495, 495, 495, 495, 836, 495, 495, 495, 495, 517, 517, 517, 517,
  /* 28033 */ 517, 517, 517, 517, 1277, 1594, 0, 0, 495, 495, 495, 2464, 495, 495, 495, 495, 517, 517, 517, 517, 517,
  /* 28054 */ 2474, 517, 517, 517, 517, 517, 1833, 517, 1835, 517, 517, 517, 495, 495, 495, 495, 495, 0, 0, 0, 0, 1514,
  /* 28076 */ 0, 0, 0, 0, 517, 1789, 281, 282, 283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1027, 0, 0, 0, 0, 0, 321, 0,
  /* 28106 */ 322, 0, 0, 0, 0, 0, 0, 280, 322, 283, 283, 321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 954, 0, 0, 0,
  /* 28137 */ 40960, 0, 0, 0, 283, 282, 0, 0, 389, 282, 401, 401, 401, 422, 432, 422, 422, 422, 444, 444, 444, 444, 444,
  /* 28160 */ 444, 444, 444, 457, 462, 444, 444, 444, 444, 444, 457, 401, 444, 444, 444, 444, 462, 444, 462, 462, 489,
  /* 28181 */ 462, 489, 462, 499, 499, 499, 499, 499, 522, 499, 499, 499, 499, 499, 499, 522, 522, 522, 522, 522, 522,
  /* 28202 */ 522, 522, 522, 499, 499, 522, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 329, 353, 0, 0, 0, 0,
  /* 28228 */ 0, 0, 45056, 49152, 0, 0, 623, 624, 0, 0, 0, 0, 629, 0, 0, 0, 633, 0, 635, 0, 0, 0, 0, 1643, 0, 0, 0, 0,
  /* 28256 */ 0, 0, 0, 0, 0, 0, 0, 648, 0, 0, 0, 0, 0, 0, 0, 683, 0, 0, 0, 0, 690, 691, 0, 693, 397, 397, 397, 698, 397,
  /* 28285 */ 397, 706, 397, 712, 397, 715, 397, 718, 397, 397, 397, 397, 0, 0, 0, 0, 0, 0, 2098, 0, 0, 0, 0, 397, 397,
  /* 28310 */ 2212, 397, 397, 397, 397, 397, 0, 0, 0, 0, 0, 0, 1703, 0, 0, 0, 0, 0, 739, 0, 0, 0, 0, 623, 0, 0, 0, 0,
  /* 28338 */ 751, 0, 731, 0, 753, 0, 0, 0, 0, 1670, 0, 0, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 397, 397, 2090, 397, 0,
  /* 28365 */ 0, 757, 0, 0, 0, 0, 0, 0, 0, 757, 0, 751, 0, 0, 757, 0, 739, 0, 397, 770, 397, 397, 397, 397, 775, 397,
  /* 28391 */ 397, 397, 739, 757, 0, 0, 0, 0, 1711, 1712, 0, 0, 311693, 1715, 397, 397, 397, 397, 397, 397, 1685, 397,
  /* 28413 */ 397, 397, 397, 397, 397, 397, 397, 397, 397, 719, 397, 397, 397, 0, 0, 0, 0, 739, 753, 757, 0, 0, 784, 0,
  /* 28437 */ 0, 0, 784, 788, 0, 0, 495, 495, 495, 495, 1148, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 28459 */ 1154, 495, 495, 495, 495, 495, 800, 495, 495, 811, 495, 820, 495, 825, 495, 495, 831, 834, 838, 495, 495,
  /* 28480 */ 495, 495, 1179, 495, 495, 495, 495, 1185, 495, 495, 495, 495, 495, 848, 517, 517, 890, 893, 897, 517, 517,
  /* 28501 */ 517, 517, 0, 0, 0, 495, 910, 495, 495, 495, 495, 1269, 517, 517, 1272, 517, 517, 517, 517, 0, 0, 0, 1281,
  /* 28524 */ 495, 914, 838, 495, 0, 517, 918, 517, 517, 517, 922, 897, 517, 53491, 2, 6, 0, 970, 0, 0, 0, 0, 313, 313,
  /* 28548 */ 0, 0, 0, 0, 0, 0, 0, 0, 948, 0, 0, 0, 0, 0, 953, 0, 0, 0, 0, 985, 0, 0, 0, 0, 0, 0, 0, 0, 994, 0, 0, 0, 0,
  /* 28581 */ 0, 1879, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2719744, 0, 0, 0, 0, 0, 658, 0, 0, 0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
  /* 28612 */ 0, 0, 0, 963, 0, 0, 966, 967, 0, 0, 0, 0, 1032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1043, 0, 0, 397,
  /* 28642 */ 1075, 397, 1077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1885, 0, 1886, 0, 495, 495, 1145, 495, 495, 495,
  /* 28667 */ 1149, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1496, 495, 495, 495, 495, 495, 495, 495, 495, 1160,
  /* 28687 */ 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1169, 495, 495, 495, 495, 1462, 495, 495, 495, 495,
  /* 28707 */ 1466, 495, 495, 495, 1469, 495, 495, 495, 495, 1475, 1477, 495, 495, 495, 495, 495, 1482, 1483, 495, 1485,
  /* 28727 */ 1486, 91306, 1127, 851, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1214, 517, 517, 517, 517, 517,
  /* 28747 */ 1991, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2271, 517, 517, 517, 1218, 517,
  /* 28767 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1229, 517, 517, 517, 517, 517, 2004, 517, 517, 517, 517,
  /* 28788 */ 517, 517, 517, 517, 517, 517, 517, 517, 1564, 517, 517, 517, 517, 517, 1251, 517, 517, 517, 517, 1258,
  /* 28808 */ 517, 517, 0, 0, 495, 495, 495, 495, 0, 852, 517, 517, 920, 517, 517, 517, 517, 53491, 2, 6, 0, 1301, 0, 0,
  /* 28832 */ 0, 0, 0, 1305, 0, 1307, 1308, 0, 1310, 1311, 0, 0, 0, 0, 331, 0, 0, 0, 335, 336, 338, 291, 0, 0, 0, 0, 0,
  /* 28859 */ 742, 0, 625, 764, 0, 0, 0, 790, 0, 495, 793, 1314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1013, 0,
  /* 28888 */ 0, 1331, 0, 0, 0, 0, 0, 0, 0, 1339, 0, 1341, 0, 0, 0, 0, 0, 1904, 1905, 0, 0, 1908, 0, 0, 0, 0, 397, 397,
  /* 28916 */ 397, 397, 397, 397, 397, 397, 397, 397, 0, 645, 0, 0, 0, 1346, 0, 1348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1358,
  /* 28942 */ 0, 0, 0, 0, 1878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2190, 0, 0, 0, 0, 397, 397, 1397, 397, 397, 1399, 397,
  /* 28970 */ 397, 397, 397, 1403, 397, 397, 397, 1405, 397, 0, 0, 397, 0, 495, 495, 495, 495, 495, 495, 495, 495, 2371,
  /* 28992 */ 495, 2372, 872448, 0, 0, 1433, 397, 397, 1403, 397, 397, 397, 1439, 397, 397, 397, 397, 0, 0, 1080, 0, 0,
  /* 29014 */ 0, 0, 0, 0, 0, 0, 0, 2070, 0, 0, 0, 0, 0, 0, 517, 1523, 517, 517, 517, 517, 517, 517, 517, 1532, 517, 517,
  /* 29040 */ 517, 517, 1536, 517, 517, 517, 517, 1793, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 495, 495,
  /* 29061 */ 1839, 495, 495, 517, 517, 1539, 517, 517, 517, 517, 517, 517, 1545, 1547, 517, 517, 517, 517, 517, 0, 0,
  /* 29082 */ 0, 2453, 0, 0, 2456, 2457, 0, 495, 495, 1552, 1553, 517, 1555, 1556, 517, 517, 517, 517, 517, 517, 1563,
  /* 29103 */ 517, 1565, 517, 517, 517, 517, 517, 2140, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 0, 0, 495,
  /* 29124 */ 1262, 495, 495, 1486, 495, 1585, 495, 1587, 517, 517, 1547, 1556, 517, 1592, 517, 0, 1594, 0, 0, 0, 0,
  /* 29145 */ 595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1600, 0, 0, 0, 0, 0, 0, 0, 1596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1603,
  /* 29177 */ 1604, 0, 0, 0, 1608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2046, 0, 0, 0, 1640, 0, 1641, 0, 0, 0, 1645, 0,
  /* 29206 */ 0, 0, 0, 0, 0, 0, 0, 0, 1007, 0, 0, 0, 0, 0, 0, 397, 397, 397, 1684, 397, 397, 397, 397, 397, 397, 397,
  /* 29232 */ 397, 397, 397, 397, 397, 724, 0, 0, 0, 397, 397, 397, 1697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1604, 0, 0, 0,
  /* 29259 */ 0, 1892, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1041, 0, 0, 0, 0, 1708, 0, 1709, 0, 0, 0, 0, 0, 397, 397, 397,
  /* 29288 */ 397, 397, 1719, 397, 397, 0, 495, 495, 2312, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1467, 495,
  /* 29309 */ 495, 495, 495, 495, 1733, 495, 495, 495, 495, 495, 1738, 495, 1740, 495, 495, 495, 495, 495, 495, 495,
  /* 29329 */ 1182, 495, 495, 495, 495, 1189, 495, 495, 848, 495, 495, 1774, 495, 495, 0, 0, 0, 0, 1514, 0, 0, 0, 0,
  /* 29352 */ 517, 517, 517, 517, 517, 2150, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 0, 0, 495, 495, 495,
  /* 29373 */ 1157, 495, 495, 517, 517, 517, 517, 1845, 517, 517, 1594, 0, 1596, 0, 0, 0, 0, 0, 686, 0, 0, 0, 0, 0, 0,
  /* 29398 */ 397, 397, 397, 397, 0, 495, 495, 495, 495, 2232, 495, 1875, 0, 0, 0, 0, 0, 1880, 0, 0, 1882, 1883, 0, 0,
  /* 29422 */ 0, 0, 0, 0, 2174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 942, 0, 0, 0, 0, 0, 0, 0, 1007616, 364941, 397, 397, 397,
  /* 29449 */ 397, 397, 1008013, 0, 0, 0, 827392, 495, 495, 495, 0, 517, 517, 517, 517, 517, 517, 517, 517, 874, 517,
  /* 29470 */ 517, 517, 517, 517, 517, 1821, 517, 517, 517, 1825, 517, 517, 517, 517, 517, 517, 517, 517, 1796, 517,
  /* 29490 */ 517, 1799, 517, 517, 517, 517, 495, 495, 495, 1973, 495, 495, 495, 495, 495, 495, 1977, 1008111, 495, 495,
  /* 29510 */ 495, 0, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1827, 517, 517, 517, 517,
  /* 29531 */ 517, 655877, 517, 2005, 517, 2007, 517, 517, 517, 2011, 517, 517, 517, 517, 517, 517, 1992, 517, 1994,
  /* 29550 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2145, 517, 517, 517, 517, 517, 2016, 517, 517, 517,
  /* 29571 */ 517, 517, 517, 2020, 1008133, 517, 517, 517, 365039, 495, 495, 495, 495, 1476, 495, 495, 495, 495, 495,
  /* 29590 */ 495, 495, 495, 495, 495, 495, 1513, 1514, 91306, 1518, 1514, 517, 517, 517, 517, 495, 365061, 517, 517,
  /* 29609 */ 517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 729, 0, 0, 0, 0, 0, 495, 495, 397, 397, 397, 0, 0, 0, 0, 2096, 0, 0,
  /* 29639 */ 0, 2100, 0, 0, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 495, 495, 1942, 397, 397, 397, 0, 495, 495,
  /* 29663 */ 495, 495, 495, 495, 2113, 495, 495, 495, 495, 495, 0, 0, 0, 0, 1514, 0, 0, 0, 0, 1788, 517, 2127, 495,
  /* 29686 */ 495, 495, 495, 495, 495, 495, 495, 495, 495, 1980, 0, 1982, 0, 517, 517, 517, 517, 1807, 517, 517, 517,
  /* 29707 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2012, 517, 517, 517, 517, 2149, 517, 517, 517, 517, 517,
  /* 29728 */ 517, 517, 517, 2154, 517, 517, 517, 517, 517, 517, 517, 1543, 517, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 29749 */ 517, 517, 1227, 517, 517, 1230, 517, 2192, 2193, 0, 0, 0, 0, 667648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
  /* 29774 */ 0, 0, 0, 0, 0, 0, 0, 2222, 0, 479232, 397, 397, 2225, 397, 0, 495, 495, 495, 2231, 495, 495, 495, 495,
  /* 29797 */ 1491, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1764, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 29818 */ 1765, 495, 495, 495, 1768, 495, 495, 495, 2246, 495, 495, 2249, 2250, 517, 517, 517, 2254, 517, 517, 517,
  /* 29838 */ 517, 517, 517, 517, 517, 517, 517, 517, 2268, 517, 517, 517, 517, 2259, 517, 517, 2262, 517, 517, 517,
  /* 29858 */ 517, 517, 517, 2267, 2269, 517, 517, 2272, 2273, 495, 495, 2275, 517, 517, 2277, 0, 0, 0, 0, 2281, 0, 0,
  /* 29880 */ 2283, 0, 0, 0, 0, 611, 612, 613, 0, 313, 313, 313, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29908 */ 290, 291, 0, 0, 0, 0, 0, 2320, 495, 495, 495, 495, 495, 495, 495, 495, 495, 517, 517, 2330, 517, 517, 517,
  /* 29931 */ 517, 517, 517, 2019, 517, 517, 517, 517, 517, 517, 495, 495, 495, 0, 517, 517, 517, 517, 517, 517, 869,
  /* 29952 */ 517, 517, 517, 517, 517, 517, 517, 904, 517, 0, 0, 0, 495, 495, 798, 495, 0, 2356, 0, 2357, 0, 0, 0, 2361,
  /* 29976 */ 0, 0, 0, 0, 397, 397, 397, 397, 397, 397, 2215, 397, 0, 0, 0, 2219, 0, 634880, 2395, 0, 0, 2398, 2399, 0,
  /* 30000 */ 0, 0, 0, 397, 0, 495, 495, 495, 2434, 495, 495, 495, 495, 495, 495, 517, 517, 517, 2444, 517, 495, 2405,
  /* 30022 */ 495, 495, 495, 495, 495, 495, 495, 517, 517, 517, 517, 2415, 517, 517, 517, 517, 517, 2387, 517, 517, 517,
  /* 30043 */ 495, 517, 0, 0, 0, 0, 0, 0, 2162688, 2163480, 2429720, 2163480, 2163480, 2163480, 2163480, 2163480,
  /* 30059 */ 2163480, 2163480, 0, 0, 0, 0, 0, 2163538, 2429778, 2163538, 2163538, 517, 517, 517, 517, 2450, 0, 0, 0, 0,
  /* 30079 */ 0, 0, 0, 0, 0, 495, 495, 495, 495, 495, 517, 495, 495, 2461, 495, 495, 495, 495, 495, 495, 495, 517, 517,
  /* 30102 */ 2471, 517, 517, 517, 517, 517, 0, 2423, 0, 0, 868352, 0, 0, 0, 0, 0, 0, 687, 0, 0, 0, 0, 0, 397, 694, 397,
  /* 30128 */ 397, 517, 517, 2479, 2480, 0, 0, 0, 0, 0, 0, 2487, 495, 495, 2489, 495, 2491, 495, 495, 2531, 517, 2533,
  /* 30150 */ 517, 517, 517, 2537, 0, 0, 0, 0, 495, 495, 495, 0, 517, 517, 517, 517, 517, 862, 517, 517, 517, 517, 517,
  /* 30173 */ 517, 517, 517, 517, 517, 2341, 517, 517, 517, 517, 517, 0, 0, 0, 284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30200 */ 2061, 0, 0, 0, 0, 313, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 0, 0, 990, 0, 0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
  /* 30232 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 668, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 364, 0, 317, 0, 364, 45056,
  /* 30261 */ 49152, 0, 0, 375, 40960, 375, 375, 284, 375, 375, 0, 375, 0, 375, 402, 402, 402, 0, 0, 0, 317, 439, 375,
  /* 30284 */ 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 402, 375, 375, 375, 375, 481, 375, 481, 481, 490, 481,
  /* 30305 */ 490, 481, 500, 500, 500, 500, 500, 523, 500, 500, 500, 500, 500, 500, 523, 523, 523, 523, 523, 523, 523,
  /* 30326 */ 523, 523, 500, 500, 523, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0,
  /* 30353 */ 45056, 49152, 0, 0, 0, 594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2178, 0, 0, 0, 0, 0, 0, 769, 397, 397,
  /* 30381 */ 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 0, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
  /* 30404 */ 473, 450, 450, 450, 450, 0, 0, 0, 1017, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2203, 0, 0, 0, 397, 1109, 397,
  /* 30432 */ 397, 397, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91306, 1127, 851, 517,
  /* 30458 */ 517, 517, 517, 517, 517, 517, 1209, 517, 517, 517, 517, 517, 517, 517, 517, 1560, 517, 517, 517, 517, 517,
  /* 30479 */ 517, 517, 517, 517, 517, 1798, 517, 517, 517, 517, 517, 1627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30506 */ 1095, 0, 0, 397, 397, 397, 397, 397, 1939, 397, 0, 0, 0, 0, 495, 495, 495, 0, 517, 517, 517, 517, 517,
  /* 30529 */ 863, 517, 517, 875, 517, 517, 517, 517, 517, 517, 2151, 517, 517, 517, 517, 517, 517, 517, 517, 517, 0, 0,
  /* 30551 */ 0, 495, 495, 495, 816, 495, 1971, 495, 495, 495, 495, 1975, 495, 495, 495, 495, 495, 495, 495, 495, 0, 0,
  /* 30573 */ 91306, 0, 0, 517, 517, 517, 517, 495, 495, 495, 2532, 517, 517, 517, 517, 517, 0, 0, 0, 0, 495, 495, 495,
  /* 30596 */ 0, 517, 517, 517, 517, 517, 866, 517, 517, 517, 517, 517, 517, 517, 517, 1531, 517, 517, 517, 517, 517,
  /* 30617 */ 517, 517, 517, 517, 517, 517, 1228, 517, 517, 517, 517, 495, 2554, 517, 517, 517, 0, 0, 495, 495, 517,
  /* 30638 */ 517, 495, 517, 495, 517, 495, 495, 517, 517, 0, 0, 0, 0, 2351, 0, 0, 0, 0, 0, 0, 732, 0, 737, 0, 0, 0, 0,
  /* 30665 */ 0, 0, 0, 748, 0, 735, 0, 748, 0, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
  /* 30697 */ 0, 376, 40960, 376, 376, 0, 376, 376, 0, 376, 390, 376, 403, 403, 403, 423, 423, 423, 423, 423, 445, 445,
  /* 30719 */ 445, 445, 445, 445, 445, 445, 445, 445, 445, 403, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
  /* 30740 */ 445, 501, 501, 501, 501, 501, 524, 501, 501, 501, 501, 501, 501, 524, 524, 524, 524, 524, 524, 524, 524,
  /* 30761 */ 524, 501, 501, 524, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 334, 289, 0, 0, 0, 0, 0, 0, 0,
  /* 30788 */ 0, 1292, 0, 0, 0, 0, 0, 0, 0, 0, 1445, 0, 0, 0, 0, 1127, 495, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 30813 */ 1497, 495, 495, 495, 495, 495, 495, 495, 495, 517, 517, 517, 1844, 517, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30837 */ 495, 495, 495, 495, 495, 495, 495, 495, 495, 517, 2182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2191, 0, 0,
  /* 30864 */ 0, 0, 1903, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 397, 397, 1717, 397, 397, 397, 397, 0, 0, 0, 2195, 0, 0, 0, 0,
  /* 30892 */ 0, 0, 0, 2202, 0, 0, 0, 0, 0, 728, 0, 0, 0, 0, 728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
  /* 30924 */ 2207, 0, 0, 397, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1419, 0, 0, 2301, 397, 397,
  /* 30950 */ 397, 397, 397, 397, 0, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 397, 397, 720, 397, 397, 397, 0, 758, 0, 495,
  /* 30975 */ 2321, 495, 495, 495, 495, 495, 495, 495, 495, 517, 2329, 517, 517, 517, 517, 517, 517, 517, 1559, 517,
  /* 30995 */ 517, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0, 0, 495, 2527, 495, 517, 517, 517, 2336, 517, 517, 517, 517,
  /* 31018 */ 2339, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1033, 0, 495, 495, 495, 495, 495, 2374, 495, 495,
  /* 31039 */ 495, 495, 495, 517, 517, 517, 517, 517, 2380, 517, 517, 517, 517, 517, 517, 2161, 495, 495, 2164, 517,
  /* 31059 */ 517, 0, 0, 0, 0, 0, 2484, 2485, 0, 495, 495, 495, 495, 495, 495, 1947, 495, 495, 495, 495, 495, 495, 495,
  /* 31082 */ 495, 495, 2133, 495, 0, 0, 0, 0, 517, 517, 517, 517, 2386, 517, 517, 517, 517, 517, 495, 517, 0, 0, 0, 0,
  /* 31106 */ 0, 0, 2360, 0, 0, 0, 0, 0, 397, 397, 397, 397, 0, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 31130 */ 495, 495, 2544, 495, 495, 517, 517, 2547, 2548, 517, 517, 0, 0, 0, 0, 495, 495, 495, 0, 517, 517, 517,
  /* 31152 */ 517, 859, 517, 517, 870, 517, 879, 517, 884, 0, 0, 0, 610, 0, 0, 0, 0, 313, 313, 313, 0, 0, 0, 0, 0, 0,
  /* 31178 */ 2510, 495, 495, 495, 495, 495, 495, 495, 495, 2516, 675, 0, 0, 397, 397, 397, 397, 397, 397, 397, 397,
  /* 31199 */ 397, 724, 0, 0, 0, 0, 0, 2041, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1374, 0, 0, 0, 0, 0, 798, 495, 495, 495, 495,
  /* 31228 */ 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 848, 845, 495, 495, 0, 517, 517, 517, 857, 517,
  /* 31249 */ 517, 517, 517, 517, 517, 517, 517, 517, 495, 517, 0, 2391, 0, 0, 2394, 1175, 495, 495, 495, 495, 495, 495,
  /* 31271 */ 495, 495, 495, 495, 495, 495, 495, 495, 848, 0, 1431, 0, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
  /* 31293 */ 1442, 397, 0, 0, 397, 0, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 0, 1780, 0, 1786, 517,
  /* 31315 */ 397, 397, 397, 0, 1722, 0, 0, 0, 495, 495, 495, 495, 495, 495, 495, 495, 495, 2440, 517, 517, 517, 517,
  /* 31337 */ 517, 0, 0, 0, 1877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2289, 0, 0, 0, 517, 517, 517, 2017, 517, 517, 517,
  /* 31365 */ 517, 517, 517, 517, 517, 517, 495, 495, 495, 517, 517, 517, 0, 2168, 0, 0, 517, 2346, 495, 2347, 517, 0,
  /* 31387 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 741, 0, 0, 0, 397, 0, 0, 397, 2365, 495, 495, 495, 495, 495, 495, 495,
  /* 31414 */ 495, 495, 495, 495, 1980, 0, 1982, 0, 517, 0, 0, 0, 285, 330, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1660, 0,
  /* 31441 */ 0, 0, 0, 0, 0, 0, 0, 348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1353, 0, 0, 0, 0, 0,
  /* 31474 */ 0, 0, 0, 0, 286, 285, 0, 0, 0, 0, 0, 0, 0, 285, 0, 45056, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 391,
  /* 31503 */ 0, 404, 404, 404, 424, 424, 424, 424, 424, 446, 446, 446, 446, 446, 446, 446, 446, 502, 502, 502, 502,
  /* 31524 */ 502, 525, 502, 502, 446, 446, 446, 458, 446, 446, 446, 446, 446, 446, 458, 471, 446, 446, 446, 446, 502,
  /* 31545 */ 502, 502, 502, 502, 502, 525, 525, 525, 525, 525, 525, 525, 525, 525, 544, 553, 53491, 53491, 2, 2, 3,
  /* 31566 */ 94212, 5, 6, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102195, 1102195, 1102195, 1102195,
  /* 31589 */ 1102195, 1102195, 1102195, 1102195, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2441216, 2449408, 2162688,
  /* 31606 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 684, 0, 0, 0, 688, 0, 0,
  /* 31624 */ 0, 0, 397, 397, 397, 699, 0, 0, 0, 759, 0, 613, 0, 0, 0, 0, 0, 0, 763, 0, 0, 0, 0, 0, 2054, 2055, 0, 0, 0,
  /* 31653 */ 0, 0, 0, 0, 0, 0, 1373, 0, 0, 0, 0, 0, 0, 767, 0, 0, 397, 397, 397, 397, 397, 397, 397, 776, 397, 779, 0,
  /* 31680 */ 0, 759, 495, 801, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1757, 1758, 846,
  /* 31701 */ 495, 495, 0, 517, 517, 517, 517, 860, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1225, 517, 517,
  /* 31722 */ 517, 517, 517, 495, 495, 915, 846, 0, 517, 517, 517, 517, 517, 517, 923, 905, 53491, 2, 6, 969, 0, 0, 0,
  /* 31745 */ 0, 0, 313, 313, 0, 0, 0, 0, 0, 0, 0, 0, 1038, 0, 0, 0, 1042, 0, 0, 0, 397, 397, 1076, 397, 0, 0, 0, 0, 0,
  /* 31774 */ 0, 0, 0, 1083, 0, 0, 0, 0, 0, 2067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1019904, 0, 0, 0, 0, 0, 0, 0, 91306,
  /* 31803 */ 1127, 851, 517, 517, 517, 517, 517, 1203, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1533, 517,
  /* 31823 */ 517, 517, 517, 517, 1329, 1330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1340, 0, 0, 0, 0, 0, 729, 0, 0, 0, 0, 0, 0, 0,
  /* 31852 */ 0, 0, 729, 0, 0, 0, 0, 729, 0, 0, 0, 0, 0, 1360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 264, 265, 0,
  /* 31882 */ 1379, 0, 0, 1382, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 397, 397, 397, 1060, 397, 397, 397, 1407, 397,
  /* 31905 */ 397, 397, 397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1707, 495, 495, 495, 1506, 495, 495, 495, 0, 1514, 91306,
  /* 31930 */ 0, 1514, 517, 517, 517, 517, 517, 517, 517, 1822, 517, 517, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0, 0,
  /* 31953 */ 2526, 495, 495, 1655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1299, 517, 1791, 517, 517, 517, 517,
  /* 31979 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1828, 0, 1862, 0, 0, 1864, 0, 1866, 0, 0, 1869, 0,
  /* 32002 */ 0, 0, 1873, 0, 0, 0, 0, 658, 0, 660, 0, 0, 0, 0, 0, 0, 0, 0, 0, 949, 0, 0, 0, 0, 0, 0, 0, 0, 1876, 0, 0,
  /* 32033 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1887, 397, 0, 1925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1367, 0, 0, 0,
  /* 32064 */ 1866, 397, 1935, 397, 397, 397, 397, 397, 0, 0, 1940, 0, 495, 495, 495, 0, 517, 517, 517, 856, 517, 517,
  /* 32086 */ 517, 517, 517, 517, 881, 883, 1956, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 32107 */ 495, 1771, 495, 517, 2026, 517, 517, 0, 0, 2031, 0, 0, 0, 0, 0, 0, 0, 2038, 397, 2092, 397, 0, 0, 0, 0, 0,
  /* 32133 */ 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 397, 397, 397, 397, 1440, 397, 397, 397, 1444, 397, 397, 397, 0,
  /* 32156 */ 495, 2108, 495, 495, 2111, 495, 495, 495, 495, 495, 495, 495, 1183, 495, 495, 495, 495, 495, 495, 495,
  /* 32176 */ 848, 495, 495, 2119, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 2125, 495, 495, 495, 495, 1946,
  /* 32196 */ 495, 495, 495, 495, 1950, 495, 1952, 495, 495, 495, 495, 495, 815, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 32217 */ 495, 495, 1480, 495, 495, 495, 495, 495, 495, 495, 2128, 495, 495, 495, 495, 2131, 495, 495, 495, 0, 0, 0,
  /* 32239 */ 0, 517, 517, 517, 517, 1819, 1820, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 0, 0, 495, 495, 1263,
  /* 32261 */ 495, 2135, 517, 517, 2138, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2146, 517, 517, 517, 517, 517,
  /* 32281 */ 2451, 0, 2452, 0, 0, 0, 0, 0, 0, 495, 495, 2433, 495, 495, 495, 495, 495, 495, 495, 517, 517, 2443, 517,
  /* 32304 */ 517, 517, 517, 2158, 517, 517, 517, 495, 495, 495, 517, 517, 517, 2167, 0, 0, 0, 0, 0, 2082, 2083, 0,
  /* 32326 */ 2085, 397, 2087, 397, 397, 397, 397, 397, 1067, 397, 1068, 397, 397, 397, 397, 397, 1072, 1073, 397, 0, 0,
  /* 32347 */ 0, 2209, 397, 397, 397, 397, 2213, 397, 397, 397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1064960, 397, 397, 495,
  /* 32371 */ 495, 2234, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 2243, 495, 495, 495, 495, 1959, 495, 495,
  /* 32391 */ 495, 495, 495, 495, 495, 495, 495, 495, 495, 2328, 517, 517, 517, 517, 517, 517, 2447, 2448, 2449, 517, 0,
  /* 32412 */ 0, 0, 0, 0, 0, 0, 0, 0, 495, 495, 495, 495, 2324, 495, 495, 495, 495, 495, 517, 517, 517, 517, 517, 517,
  /* 32436 */ 517, 517, 517, 517, 517, 495, 495, 495, 1840, 495, 517, 517, 2518, 517, 2519, 517, 517, 517, 0, 0, 0, 0,
  /* 32458 */ 0, 495, 495, 495, 0, 517, 517, 517, 858, 861, 517, 868, 517, 517, 517, 882, 885, 495, 517, 517, 517, 517,
  /* 32480 */ 0, 0, 495, 495, 517, 517, 2558, 2559, 495, 517, 495, 495, 517, 517, 0, 0, 2349, 0, 0, 0, 2352, 0, 0, 0, 0,
  /* 32505 */ 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 730, 0, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 678, 0, 0, 327,
  /* 32537 */ 329, 0, 0, 0, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1648, 0, 0, 0, 0, 0, 0, 0, 0, 377, 40960, 377, 377, 0, 377,
  /* 32566 */ 377, 384, 377, 0, 377, 405, 405, 405, 425, 425, 425, 425, 425, 447, 447, 447, 447, 447, 447, 447, 447,
  /* 32587 */ 447, 447, 447, 405, 447, 447, 447, 447, 447, 483, 447, 447, 447, 447, 447, 447, 503, 503, 503, 503, 503,
  /* 32608 */ 526, 503, 503, 503, 503, 503, 503, 526, 526, 526, 526, 526, 526, 526, 526, 526, 503, 503, 526, 53491,
  /* 32628 */ 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 495, 2511, 495, 495, 495, 495, 495, 495, 495, 517, 517,
  /* 32652 */ 517, 517, 517, 517, 2381, 517, 517, 700, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 0, 0,
  /* 32674 */ 0, 1122, 495, 495, 803, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1155, 495, 495,
  /* 32695 */ 0, 0, 971, 0, 0, 0, 313, 313, 0, 0, 0, 0, 0, 0, 0, 0, 1092, 1093, 0, 0, 0, 1080, 0, 0, 982, 0, 0, 0, 0, 0,
  /* 32725 */ 0, 0, 0, 0, 0, 0, 0, 0, 996, 0, 0, 0, 0, 2053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2064, 0, 0, 0, 1125, 315392,
  /* 32755 */ 0, 0, 1127, 495, 495, 495, 495, 495, 495, 1135, 1141, 495, 1176, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 32776 */ 495, 1188, 495, 495, 495, 848, 91306, 1127, 851, 517, 517, 517, 517, 517, 517, 1204, 1210, 517, 517, 517,
  /* 32796 */ 517, 517, 517, 517, 517, 1576, 517, 517, 517, 495, 495, 495, 495, 517, 517, 517, 1220, 517, 517, 517, 517,
  /* 32817 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1999, 517, 495, 1176, 495, 495, 517, 517, 1204, 517,
  /* 32837 */ 517, 1245, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0, 495, 495, 495, 495, 2490, 495, 495, 495, 1460, 495, 495, 495,
  /* 32861 */ 495, 495, 495, 495, 495, 495, 495, 495, 1470, 495, 495, 495, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0,
  /* 32883 */ 495, 2542, 495, 495, 495, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0, 2552, 495, 495, 495, 495, 1736, 495,
  /* 32905 */ 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1948, 495, 495, 495, 495, 495, 495, 495, 495, 1949, 495,
  /* 32926 */ 1951, 495, 495, 495, 495, 495, 495, 495, 495, 1490, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 32947 */ 495, 1500, 495, 495, 495, 517, 517, 1525, 1526, 517, 517, 517, 1530, 517, 517, 517, 517, 517, 517, 517,
  /* 32967 */ 517, 517, 495, 517, 2390, 0, 2392, 0, 0, 517, 517, 517, 1540, 517, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 32989 */ 517, 517, 517, 517, 517, 2147, 517, 1618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1313, 397, 397,
  /* 33015 */ 1916, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 495, 517, 517, 517,
  /* 33037 */ 517, 0, 0, 0, 0, 0, 0, 0, 2035, 0, 0, 0, 0, 0, 2173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2071, 0, 0, 0, 0, 0, 0,
  /* 33069 */ 2065, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2074, 0, 0, 0, 0, 685, 0, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397,
  /* 33098 */ 397, 1058, 397, 397, 397, 397, 397, 0, 0, 0, 2080, 0, 0, 0, 0, 397, 2086, 397, 397, 397, 397, 397, 397,
  /* 33121 */ 1686, 1687, 397, 397, 397, 397, 397, 397, 397, 397, 1075, 397, 397, 397, 0, 0, 0, 0, 397, 397, 397, 2093,
  /* 33143 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 397, 397, 397, 777, 397, 397, 0, 0, 741, 397, 397, 397,
  /* 33169 */ 0, 495, 495, 495, 2110, 495, 495, 495, 495, 495, 495, 495, 495, 1976, 495, 495, 495, 495, 495, 495, 0,
  /* 33190 */ 517, 517, 2137, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1566, 517, 2290, 0,
  /* 33211 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1328, 2492, 495, 495, 495, 517, 517, 517, 517, 2499, 517, 2501,
  /* 33237 */ 517, 517, 517, 0, 0, 0, 0, 741, 0, 0, 765, 0, 652, 0, 0, 0, 0, 495, 794, 0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33266 */ 0, 0, 0, 0, 319, 0, 0, 0, 0, 2184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1910, 1911, 0, 1913, 397, 0, 0, 0,
  /* 33295 */ 40960, 0, 0, 0, 0, 0, 0, 0, 392, 0, 406, 406, 406, 426, 426, 434, 426, 426, 448, 448, 448, 448, 448, 448,
  /* 33319 */ 448, 448, 448, 448, 448, 472, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 504, 504, 504,
  /* 33340 */ 504, 504, 527, 504, 504, 504, 504, 504, 504, 527, 527, 527, 527, 527, 527, 527, 527, 527, 504, 504, 527,
  /* 33361 */ 53491, 53806, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 586, 0, 0, 0, 0, 0, 732, 0, 737, 0, 701, 397, 397,
  /* 33388 */ 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 0, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 33411 */ 495, 495, 517, 517, 517, 517, 517, 517, 517, 517, 517, 495, 495, 495, 804, 495, 495, 816, 495, 495, 495,
  /* 33432 */ 495, 495, 495, 495, 495, 495, 495, 2123, 495, 495, 495, 495, 495, 495, 495, 1177, 495, 495, 495, 495, 495,
  /* 33453 */ 495, 495, 495, 495, 495, 495, 495, 848, 91306, 1127, 851, 517, 517, 517, 517, 517, 517, 1205, 517, 517,
  /* 33473 */ 517, 517, 517, 517, 517, 517, 517, 1240, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1242, 1243, 517,
  /* 33493 */ 517, 517, 517, 517, 517, 517, 1233, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1246, 517, 517, 517,
  /* 33514 */ 517, 517, 2520, 2521, 517, 0, 0, 2523, 2524, 0, 495, 495, 495, 495, 517, 517, 517, 1226, 517, 517, 517,
  /* 33535 */ 517, 0, 0, 0, 0, 2483, 0, 0, 2486, 495, 495, 495, 495, 495, 495, 1493, 495, 1495, 495, 495, 495, 495, 495,
  /* 33558 */ 495, 1502, 495, 495, 1267, 495, 517, 517, 1205, 517, 517, 517, 1275, 517, 0, 0, 1279, 0, 0, 0, 0, 2196, 0,
  /* 33581 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 2401, 495, 495, 495, 0, 0, 1285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33612 */ 1602, 0, 0, 1300, 0, 0, 0, 0, 0, 1304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2058, 0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
  /* 33642 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1615, 1616, 1617, 565248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33673 */ 1359, 0, 1606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 944, 0, 0, 1619, 0, 1621, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33704 */ 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2633728, 2158592, 2158592, 0, 1667, 0, 0, 0, 0,
  /* 33722 */ 0, 0, 1674, 0, 0, 0, 0, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 0, 0, 646, 1759, 495, 495, 495,
  /* 33746 */ 1763, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 2124, 495, 495, 495, 495, 0, 2171, 0, 0, 0,
  /* 33768 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1028, 0, 397, 975245, 0, 495, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 33793 */ 495, 495, 495, 495, 1170, 495, 495, 0, 0, 0, 2396, 0, 0, 0, 0, 0, 0, 0, 397, 0, 495, 495, 495, 0, 517,
  /* 33818 */ 517, 853, 517, 517, 517, 517, 871, 517, 517, 517, 517, 517, 517, 517, 2338, 517, 517, 517, 517, 517, 517,
  /* 33839 */ 517, 517, 0, 2522, 0, 0, 2525, 495, 495, 495, 517, 517, 517, 2421, 517, 0, 0, 0, 2425, 0, 0, 0, 0, 0, 0,
  /* 33864 */ 0, 659, 0, 0, 0, 659, 0, 0, 0, 0, 0, 313, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1652, 0, 0, 0, 0,
  /* 33895 */ 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 335, 0, 0, 0, 0, 335, 0, 0, 0, 45056, 49152, 0, 0, 0, 40960, 0,
  /* 33924 */ 0, 290, 0, 0, 385, 0, 0, 0, 407, 407, 407, 427, 433, 433, 433, 427, 433, 433, 433, 433, 433, 433, 433,
  /* 33947 */ 433, 466, 433, 433, 433, 407, 433, 478, 466, 433, 482, 433, 482, 482, 482, 482, 482, 482, 505, 505, 505,
  /* 33968 */ 505, 505, 528, 505, 505, 505, 505, 505, 505, 528, 528, 528, 528, 528, 528, 528, 528, 528, 505, 505, 528,
  /* 33989 */ 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032,
  /* 34015 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 34028 */ 172032, 702, 397, 397, 710, 397, 397, 397, 716, 397, 397, 397, 723, 397, 0, 0, 0, 0, 0, 0, 0, 0, 1007616,
  /* 34051 */ 0, 0, 0, 0, 520192, 1882, 0, 0, 725, 0, 0, 0, 0, 734, 0, 0, 0, 0, 0, 742, 0, 622, 0, 0, 625, 0, 0, 0, 0,
  /* 34080 */ 630, 0, 632, 0, 0, 0, 0, 0, 945, 0, 0, 0, 0, 0, 0, 951, 0, 0, 0, 625, 0, 0, 0, 742, 0, 0, 725, 585, 762,
  /* 34109 */ 0, 725, 0, 764, 625, 0, 0, 0, 0, 2291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 584, 0, 0, 0, 0, 0, 0, 0, 0, 742,
  /* 34140 */ 694, 397, 397, 772, 397, 397, 397, 397, 723, 397, 0, 0, 0, 0, 0, 1929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1039, 0,
  /* 34167 */ 0, 0, 0, 0, 0, 495, 495, 805, 495, 495, 817, 495, 495, 495, 827, 495, 495, 495, 495, 842, 495, 495, 495,
  /* 34190 */ 517, 517, 517, 517, 517, 517, 0, 2539, 2540, 0, 495, 495, 495, 495, 495, 2325, 495, 495, 495, 495, 517,
  /* 34211 */ 517, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0, 0, 495, 495, 495, 886, 517, 517, 517, 517, 901, 517, 517,
  /* 34234 */ 517, 0, 0, 0, 793, 495, 495, 912, 940, 941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1044, 0, 0, 0, 1000,
  /* 34263 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1897, 0, 0, 397, 397, 1110, 397, 397, 397, 1114, 397, 397, 397,
  /* 34289 */ 397, 397, 0, 0, 0, 0, 0, 1416, 0, 0, 0, 0, 0, 495, 1266, 495, 495, 517, 517, 1271, 517, 517, 1274, 517,
  /* 34313 */ 517, 0, 0, 0, 0, 0, 0, 0, 0, 495, 2488, 495, 495, 495, 495, 0, 0, 1369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34342 */ 0, 0, 2062, 0, 0, 495, 1459, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1770,
  /* 34364 */ 495, 517, 1570, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 495, 495, 495, 495, 0, 917, 517, 517,
  /* 34385 */ 874, 517, 517, 517, 517, 53491, 2, 6, 0, 0, 0, 1669, 0, 1671, 0, 0, 0, 0, 0, 1677, 0, 1679, 397, 397, 0,
  /* 34410 */ 495, 2311, 495, 495, 495, 495, 495, 495, 495, 2318, 495, 495, 495, 0, 517, 517, 517, 517, 517, 867, 517,
  /* 34431 */ 517, 517, 517, 517, 517, 517, 517, 1544, 517, 517, 1548, 517, 517, 517, 517, 397, 397, 1696, 397, 0, 0, 0,
  /* 34453 */ 0, 0, 0, 0, 0, 1705, 0, 0, 0, 0, 0, 2197, 0, 0, 0, 0, 0, 0, 0, 2204, 0, 0, 1790, 517, 517, 517, 517, 517,
  /* 34481 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1248, 517, 517, 517, 1818, 517, 517, 517, 517, 517,
  /* 34502 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 2156, 517, 0, 0, 1850, 0, 1852, 0, 0, 1855, 0, 0, 0, 0, 0,
  /* 34526 */ 1859, 0, 0, 0, 0, 759, 0, 767, 0, 0, 0, 767, 0, 0, 0, 495, 495, 495, 495, 1775, 0, 0, 0, 0, 1514, 0, 0, 0,
  /* 34554 */ 0, 517, 517, 517, 517, 517, 2422, 0, 2424, 0, 0, 0, 0, 2427, 0, 0, 2430, 1861, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34581 */ 0, 0, 1872, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 131072, 397, 397, 397, 1917, 397, 397,
  /* 34606 */ 397, 1919, 397, 397, 1921, 397, 397, 397, 397, 397, 1113, 397, 397, 397, 397, 397, 1119, 0, 0, 1012, 0, 0,
  /* 34628 */ 0, 397, 397, 397, 397, 1938, 397, 397, 0, 0, 0, 0, 495, 495, 495, 0, 517, 517, 854, 517, 517, 517, 517,
  /* 34651 */ 517, 877, 517, 517, 517, 517, 517, 902, 517, 517, 517, 0, 0, 0, 495, 495, 495, 495, 495, 1463, 495, 495,
  /* 34673 */ 495, 495, 495, 495, 495, 495, 495, 495, 1166, 495, 495, 495, 495, 495, 1970, 495, 495, 495, 495, 495, 495,
  /* 34694 */ 495, 495, 495, 495, 495, 495, 495, 495, 0, 0, 0, 0, 517, 517, 517, 1989, 517, 517, 517, 517, 1993, 517,
  /* 34716 */ 1995, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1260, 0, 0, 495, 495, 1138, 495, 517, 517, 2002, 517,
  /* 34737 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2013, 517, 517, 517, 517, 1832, 517, 517, 517, 517, 517,
  /* 34758 */ 517, 495, 495, 495, 495, 495, 0, 1778, 0, 0, 1514, 0, 1784, 0, 0, 517, 517, 2025, 517, 517, 517, 2028, 0,
  /* 34781 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1309, 0, 0, 0, 0, 0, 0, 0, 2040, 0, 0, 0, 2042, 0, 2044, 0, 0, 0, 0, 0, 0,
  /* 34812 */ 675, 0, 0, 0, 675, 0, 0, 791, 495, 495, 2049, 2050, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2063, 0, 0, 0, 0,
  /* 34841 */ 2397, 0, 0, 0, 2400, 0, 0, 397, 0, 495, 495, 495, 495, 495, 2377, 495, 517, 517, 517, 517, 517, 517, 517,
  /* 34864 */ 517, 517, 0, 0, 0, 909, 495, 495, 815, 0, 0, 2079, 0, 0, 0, 0, 0, 397, 397, 397, 397, 397, 397, 397, 397,
  /* 34889 */ 397, 397, 397, 397, 0, 397, 397, 397, 0, 2094, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2102, 397, 0, 0, 397, 0, 495,
  /* 34915 */ 495, 495, 495, 495, 495, 495, 2370, 495, 495, 495, 495, 517, 517, 1206, 517, 517, 517, 517, 517, 0, 0,
  /* 34936 */ 1280, 0, 0, 0, 2208, 0, 2210, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 1415, 0, 0, 1418, 0, 0, 0, 0,
  /* 34962 */ 0, 0, 2223, 0, 397, 397, 397, 397, 2227, 495, 2229, 495, 495, 495, 495, 495, 818, 495, 495, 495, 495, 495,
  /* 34984 */ 495, 495, 495, 495, 495, 2240, 2241, 495, 495, 495, 495, 495, 517, 2260, 2261, 517, 517, 517, 517, 2265,
  /* 35004 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2022, 495, 495, 495, 2300, 397, 397, 2302,
  /* 35024 */ 2303, 397, 397, 397, 0, 0, 0, 0, 0, 0, 0, 397, 397, 397, 709, 397, 397, 397, 397, 397, 397, 0, 0, 0, 1081,
  /* 35049 */ 0, 0, 0, 0, 0, 0, 0, 0, 2179688, 151552, 2179688, 0, 0, 151552, 0, 0, 495, 495, 2322, 495, 495, 495, 495,
  /* 35072 */ 495, 495, 495, 517, 517, 517, 517, 2331, 2332, 2333, 517, 517, 517, 517, 517, 517, 517, 517, 2340, 517,
  /* 35092 */ 517, 517, 517, 517, 517, 517, 517, 517, 1824, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2143, 517, 517,
  /* 35113 */ 517, 517, 517, 517, 517, 517, 517, 1546, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1561, 517, 517, 517,
  /* 35134 */ 517, 517, 517, 517, 517, 517, 1811, 517, 517, 517, 517, 517, 517, 495, 2162, 495, 517, 2165, 517, 0, 0, 0,
  /* 35156 */ 0, 495, 495, 495, 2407, 495, 495, 495, 495, 495, 517, 517, 517, 517, 517, 517, 2417, 517, 2478, 0, 0, 0,
  /* 35178 */ 0, 0, 0, 0, 0, 495, 495, 495, 495, 495, 495, 2130, 495, 495, 495, 495, 0, 0, 0, 0, 2134, 2529, 495, 495,
  /* 35202 */ 517, 517, 2534, 2535, 517, 517, 0, 0, 0, 0, 495, 495, 495, 0, 517, 517, 855, 517, 517, 517, 517, 872, 878,
  /* 35225 */ 880, 517, 517, 495, 517, 517, 517, 517, 0, 0, 495, 495, 517, 517, 495, 517, 495, 517, 2562, 2563, 495,
  /* 35246 */ 517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2179, 0, 0, 0, 295, 294, 40960, 294, 294, 295, 382, 294, 293,
  /* 35273 */ 294, 0, 294, 408, 408, 408, 428, 428, 428, 436, 440, 449, 449, 449, 449, 449, 449, 449, 449, 463, 449,
  /* 35294 */ 449, 449, 449, 449, 449, 408, 449, 449, 449, 449, 463, 449, 463, 488, 463, 488, 463, 488, 506, 506, 506,
  /* 35315 */ 506, 506, 529, 506, 506, 506, 506, 506, 506, 529, 529, 529, 529, 529, 529, 529, 529, 529, 506, 506, 529,
  /* 35336 */ 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 731, 0, 736, 0, 739, 0, 0, 0, 0, 0, 575, 576, 577,
  /* 35363 */ 578, 579, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1355, 0, 0, 0, 0, 591, 0, 593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35395 */ 0, 0, 802816, 0, 0, 0, 638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1298, 0, 0, 0, 0, 571, 669, 670,
  /* 35424 */ 671, 0, 0, 0, 0, 0, 677, 0, 0, 680, 745472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 397, 697, 397, 0, 0,
  /* 35452 */ 397, 0, 495, 495, 495, 495, 495, 495, 2369, 495, 495, 495, 495, 495, 1162, 495, 495, 495, 495, 495, 495,
  /* 35473 */ 495, 495, 1172, 495, 397, 705, 397, 397, 397, 714, 397, 397, 397, 397, 721, 397, 397, 0, 0, 0, 0, 1928, 0,
  /* 35496 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 727, 0, 0, 0, 0, 0, 738, 0, 0, 607, 0, 0, 0, 0,
  /* 35528 */ 0, 0, 614, 313, 313, 313, 0, 0, 0, 619, 0, 0, 744, 745, 0, 746, 0, 0, 0, 0, 750, 0, 0, 0, 0, 0, 754, 0, 0,
  /* 35557 */ 0, 607, 0, 614, 750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2362, 0, 0, 397, 397, 397, 397, 614, 593, 0, 397, 397,
  /* 35583 */ 771, 397, 773, 397, 397, 721, 397, 780, 638, 0, 607, 671, 782, 0, 0, 607, 0, 614, 0, 0, 671, 787, 0, 0, 0,
  /* 35608 */ 495, 495, 495, 495, 2376, 495, 495, 517, 517, 517, 517, 517, 517, 517, 517, 517, 0, 0, 0, 795, 495, 495,
  /* 35630 */ 818, 799, 802, 495, 809, 495, 495, 495, 823, 826, 495, 495, 495, 835, 839, 495, 495, 495, 495, 2496, 517,
  /* 35651 */ 517, 2498, 517, 2500, 517, 517, 517, 517, 0, 0, 2481, 2482, 0, 0, 0, 0, 495, 495, 495, 495, 495, 495,
  /* 35673 */ 975343, 495, 495, 495, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0, 495, 495, 495, 517, 517, 517, 894, 898,
  /* 35695 */ 517, 517, 517, 517, 0, 0, 0, 495, 495, 911, 495, 495, 495, 517, 517, 517, 517, 517, 517, 0, 2550, 2551, 0,
  /* 35718 */ 495, 495, 495, 495, 517, 517, 517, 517, 517, 517, 517, 517, 0, 1278, 0, 0, 495, 835, 839, 916, 0, 517,
  /* 35740 */ 517, 919, 517, 517, 894, 898, 924, 53491, 2, 6, 998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1009, 0, 0, 0, 0, 0,
  /* 35767 */ 974, 313, 313, 0, 0, 0, 0, 0, 0, 0, 981, 397, 397, 1064, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
  /* 35791 */ 397, 397, 397, 1404, 397, 397, 0, 0, 0, 1332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375, 0, 0, 0, 0, 0,
  /* 35819 */ 667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1653, 0, 0, 1380, 0, 0, 0, 0, 0, 1387, 0, 0, 397, 397, 397,
  /* 35849 */ 397, 397, 397, 397, 0, 0, 0, 0, 495, 495, 495, 397, 397, 397, 1411, 397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35876 */ 0, 0, 0, 0, 308, 1421, 0, 0, 0, 0, 0, 651264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 106496, 0,
  /* 35905 */ 0, 0, 397, 1434, 397, 651661, 397, 397, 397, 397, 397, 397, 397, 397, 0, 0, 1700, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35930 */ 0, 1598, 0, 0, 0, 0, 0, 0, 0, 495, 495, 495, 1474, 495, 495, 1478, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 35954 */ 495, 1754, 495, 495, 495, 495, 495, 495, 1503, 495, 495, 495, 495, 495, 495, 0, 1514, 91306, 0, 1514, 517,
  /* 35975 */ 517, 517, 517, 517, 517, 517, 2006, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2343, 517,
  /* 35996 */ 517, 517, 0, 928, 0, 0, 0, 1597, 0, 932, 0, 0, 0, 0, 0, 0, 0, 0, 1306, 0, 0, 0, 0, 0, 1312, 0, 517, 517,
  /* 36024 */ 517, 1806, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2344, 517, 0, 0, 1981, 0,
  /* 36046 */ 1512, 0, 0, 0, 1983, 0, 1517, 517, 517, 517, 517, 517, 517, 517, 517, 1836, 517, 517, 495, 495, 495, 495,
  /* 36068 */ 1841, 397, 397, 2105, 2106, 2107, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1766, 495, 495,
  /* 36088 */ 495, 495, 495, 495, 495, 495, 495, 2120, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1743,
  /* 36109 */ 495, 495, 1746, 517, 2157, 517, 517, 517, 517, 495, 495, 495, 517, 517, 517, 0, 0, 2169, 0, 0, 0, 0,
  /* 36131 */ 2105344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 0, 0, 397, 0, 2366, 495, 495, 495, 495, 495, 495, 495,
  /* 36157 */ 495, 495, 495, 1963, 495, 495, 495, 495, 495, 495, 2404, 495, 495, 495, 495, 495, 495, 495, 495, 517, 517,
  /* 36178 */ 517, 2414, 517, 517, 517, 517, 517, 1235, 517, 517, 517, 517, 517, 517, 1245, 517, 517, 517, 517, 517,
  /* 36198 */ 517, 2337, 517, 517, 517, 517, 2342, 517, 517, 517, 517, 517, 517, 1257, 517, 517, 517, 0, 0, 495, 495,
  /* 36219 */ 1135, 495, 0, 495, 2432, 495, 495, 495, 2436, 495, 495, 495, 495, 517, 2442, 517, 517, 517, 517, 517,
  /* 36239 */ 1256, 517, 517, 517, 517, 0, 0, 495, 495, 495, 495, 0, 517, 517, 517, 875, 517, 517, 517, 517, 53491, 2,
  /* 36261 */ 6, 2446, 517, 517, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 495, 495, 495, 517, 517, 517, 0, 0, 0, 2280, 0, 0,
  /* 36288 */ 0, 0, 0, 2284, 495, 517, 517, 517, 517, 0, 0, 495, 495, 517, 517, 495, 517, 2560, 2561, 495, 495, 495,
  /* 36310 */ 517, 2546, 517, 517, 517, 517, 0, 0, 0, 0, 495, 495, 495, 0, 517, 517, 852, 517, 517, 864, 517, 517, 876,
  /* 36333 */ 517, 517, 517, 517, 517, 517, 2388, 517, 517, 495, 517, 0, 0, 0, 0, 0, 0, 2186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36360 */ 1005, 0, 0, 0, 0, 0, 0, 0, 0, 1363, 1364, 0, 1366, 0, 0, 0, 1368, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0,
  /* 36388 */ 393, 0, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 2307, 0, 0, 2308, 450, 450, 450, 450, 450, 450,
  /* 36411 */ 450, 494, 507, 507, 507, 507, 507, 530, 507, 507, 507, 507, 507, 507, 530, 530, 530, 530, 530, 530, 530,
  /* 36432 */ 530, 530, 545, 545, 554, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 946, 0, 0, 0, 0, 0, 0, 0,
  /* 36459 */ 0, 0, 2043, 0, 2045, 0, 0, 0, 0, 0, 0, 608, 0, 0, 0, 0, 0, 0, 313, 313, 313, 0, 0, 0, 0, 0, 0, 135168,
  /* 36487 */ 135168, 0, 0, 0, 0, 0, 0, 0, 0, 313, 313, 313, 0, 618, 0, 0, 0, 0, 681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397,
  /* 36517 */ 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 595, 0, 0, 0, 595, 0, 0, 0, 0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
  /* 36545 */ 0, 0, 0, 0, 0, 768, 397, 397, 397, 397, 397, 397, 397, 397, 778, 397, 0, 0, 0, 1927, 0, 0, 0, 0, 0, 0,
  /* 36571 */ 1931, 0, 1933, 0, 0, 91306, 1127, 851, 517, 517, 517, 517, 517, 517, 1206, 517, 517, 517, 517, 1216, 517,
  /* 36592 */ 517, 517, 517, 1990, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1998, 517, 517,
  /* 36612 */ 1231, 517, 517, 517, 517, 517, 517, 517, 517, 1241, 517, 517, 517, 517, 517, 517, 517, 517, 906, 0, 0, 0,
  /* 36634 */ 495, 495, 495, 495, 517, 517, 517, 1253, 517, 517, 517, 517, 517, 517, 0, 0, 495, 495, 1137, 495, 495,
  /* 36655 */ 495, 810, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1966, 495, 495, 495, 0, 0, 1286, 0,
  /* 36677 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073152, 0, 0, 0, 0, 0, 937984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36708 */ 1625, 0, 0, 0, 0, 1344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1378, 0, 0, 913408, 0, 0, 0, 0, 0, 0,
  /* 36739 */ 0, 0, 0, 0, 0, 1025, 0, 0, 0, 0, 2105344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1089536, 517, 517, 1805, 517, 517,
  /* 36766 */ 1808, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 975365, 517, 517, 0, 1780, 0, 0, 0,
  /* 36788 */ 0, 0, 1786, 0, 0, 0, 517, 517, 517, 517, 517, 517, 517, 517, 2142, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 36811 */ 517, 517, 517, 1244, 517, 517, 517, 517, 0, 2221, 0, 0, 0, 397, 2224, 397, 397, 0, 495, 495, 495, 495,
  /* 36833 */ 495, 495, 495, 495, 2317, 495, 495, 495, 495, 495, 2274, 495, 517, 2276, 517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36857 */ 0, 2177, 0, 0, 0, 0, 0, 851968, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 517, 517, 517, 517, 517,
  /* 36880 */ 517, 517, 2382, 517, 703, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 0, 495,
  /* 36903 */ 495, 495, 495, 495, 1730, 495, 1732, 495, 495, 806, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 36924 */ 495, 495, 1190, 495, 848, 495, 847, 495, 0, 517, 517, 517, 517, 517, 865, 517, 517, 517, 517, 517, 517,
  /* 36945 */ 517, 517, 1224, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1562, 517, 517, 517, 517, 517, 517, 517,
  /* 36966 */ 2335, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1567, 517, 297, 0, 0, 0, 0, 0,
  /* 36989 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1654, 0, 313, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2288, 0, 0, 0, 0,
  /* 37021 */ 0, 0, 297, 296, 40960, 296, 296, 297, 296, 296, 0, 296, 0, 296, 409, 409, 409, 0, 0, 0, 0, 297, 296, 296,
  /* 37045 */ 296, 296, 296, 296, 296, 296, 296, 296, 296, 409, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 492,
  /* 37066 */ 296, 508, 508, 508, 508, 508, 531, 508, 508, 508, 508, 508, 508, 531, 531, 531, 531, 531, 531, 531, 531,
  /* 37087 */ 531, 508, 508, 531, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37115 */ 2179687, 2179687, 2179687, 0, 0, 0, 0, 0, 637, 0, 0, 640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 652, 0, 0, 656,
  /* 37142 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1101824, 369, 369, 397, 397, 707, 397, 397, 397, 397, 717, 397,
  /* 37167 */ 397, 722, 397, 397, 0, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 992, 0, 0, 0, 0, 0, 0, 0, 0, 740,
  /* 37197 */ 0, 0, 0, 747, 0, 0, 0, 0, 672, 0, 0, 0, 0, 0, 270336, 270336, 270336, 270336, 270336, 270336, 270336,
  /* 37218 */ 270336, 270336, 270336, 0, 755, 0, 0, 741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 765, 0, 0, 0, 0, 2105344, 0, 0,
  /* 37244 */ 0, 0, 0, 0, 0, 0, 0, 665, 0, 0, 0, 0, 1088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 676, 0, 0, 0, 0, 887, 889,
  /* 37275 */ 517, 517, 899, 517, 517, 517, 517, 0, 0, 0, 794, 495, 495, 495, 495, 495, 2409, 495, 495, 495, 517, 2413,
  /* 37297 */ 517, 517, 517, 517, 517, 0, 0, 0, 0, 0, 0, 2426, 0, 0, 0, 0, 830, 495, 840, 495, 0, 853, 517, 517, 517,
  /* 37322 */ 889, 517, 899, 517, 53491, 2, 6, 0, 983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1664, 0, 0, 999, 0,
  /* 37350 */ 1001, 0, 0, 0, 0, 1006, 0, 0, 0, 0, 0, 1012, 0, 0, 0, 0, 2105344, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0,
  /* 37379 */ 0, 261, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1040, 0, 0, 0, 0, 0, 0, 1047, 1048, 0, 0, 397, 397, 397, 397,
  /* 37407 */ 397, 397, 397, 397, 397, 397, 397, 1070, 397, 397, 397, 397, 1063, 397, 397, 397, 397, 397, 397, 397, 397,
  /* 37428 */ 397, 397, 397, 397, 397, 397, 397, 1693, 0, 0, 0, 1097, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1857, 0, 0, 0,
  /* 37456 */ 0, 0, 0, 1124, 0, 0, 0, 1126, 1127, 495, 1130, 495, 495, 495, 495, 495, 495, 2237, 2238, 495, 495, 495,
  /* 37478 */ 495, 2242, 495, 495, 495, 91306, 1127, 851, 517, 1199, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 37498 */ 517, 517, 517, 1826, 517, 517, 517, 517, 517, 1221, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 37519 */ 517, 517, 1801, 517, 517, 1265, 495, 495, 1268, 517, 517, 517, 517, 1273, 517, 517, 1276, 0, 0, 0, 0, 0,
  /* 37541 */ 987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1649, 0, 1651, 0, 0, 0, 0, 1315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37572 */ 1327, 0, 0, 0, 0, 2106001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 0, 495, 2403, 495, 397, 1409, 397, 397,
  /* 37598 */ 1412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1871, 0, 0, 0, 0, 581632, 0, 0, 0, 0, 0, 1127, 495, 495, 495, 495,
  /* 37626 */ 1452, 495, 495, 495, 495, 495, 1492, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1498, 1499, 495,
  /* 37646 */ 495, 495, 495, 495, 1504, 495, 495, 1507, 495, 495, 0, 1514, 91306, 0, 1514, 517, 517, 517, 517, 517, 517,
  /* 37667 */ 517, 2389, 517, 495, 517, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 1522, 517,
  /* 37694 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1550, 517, 1538, 517, 517, 517, 517,
  /* 37715 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2014, 0, 0, 1629, 0, 0, 0, 0, 0, 0, 0, 1635, 0, 0,
  /* 37740 */ 0, 0, 1639, 0, 0, 0, 1642, 0, 0, 0, 0, 0, 0, 0, 1650, 0, 0, 0, 0, 0, 1003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37771 */ 1909, 0, 0, 1912, 397, 397, 0, 311296, 1656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1663, 0, 1665, 1666, 0, 0, 0,
  /* 37797 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 397, 1395, 397, 397, 397, 0, 0, 1723, 0, 0, 495, 495, 495,
  /* 37823 */ 495, 495, 495, 495, 495, 1464, 495, 495, 495, 495, 495, 495, 495, 495, 1479, 495, 495, 495, 495, 495, 495,
  /* 37844 */ 495, 495, 2327, 495, 517, 517, 517, 517, 517, 517, 495, 1747, 1748, 495, 1750, 495, 495, 495, 495, 495,
  /* 37864 */ 495, 495, 1755, 495, 495, 495, 495, 495, 2466, 495, 2468, 517, 517, 517, 517, 517, 517, 517, 2476, 495,
  /* 37884 */ 495, 1761, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1484, 495, 495, 517, 517,
  /* 37904 */ 1817, 517, 517, 517, 517, 517, 1823, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2009, 517, 517,
  /* 37924 */ 517, 517, 517, 495, 495, 311813, 1842, 517, 517, 517, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 495, 495, 0,
  /* 37948 */ 1849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1874, 0, 1888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37980 */ 0, 1860, 0, 0, 397, 397, 397, 1937, 397, 397, 397, 0, 0, 0, 0, 495, 495, 495, 495, 517, 517, 517, 517,
  /* 38003 */ 517, 517, 517, 517, 0, 0, 1281, 0, 495, 517, 517, 2027, 517, 2029, 2030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1895,
  /* 38028 */ 0, 0, 0, 0, 0, 1898, 0, 517, 517, 517, 2159, 517, 517, 495, 495, 495, 517, 517, 517, 0, 0, 0, 0, 0, 2282,
  /* 38053 */ 0, 0, 0, 0, 2220, 0, 0, 0, 0, 397, 397, 397, 2226, 0, 2228, 495, 495, 495, 495, 495, 0, 1779, 0, 0, 1514,
  /* 38078 */ 0, 1785, 0, 0, 517, 517, 495, 2247, 495, 495, 495, 2251, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 38100 */ 517, 517, 1534, 517, 517, 517, 517, 517, 2420, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1984, 517, 517,
  /* 38125 */ 517, 517, 495, 2530, 495, 517, 517, 517, 517, 2536, 517, 2538, 0, 0, 2541, 495, 495, 495, 495, 517, 517,
  /* 38146 */ 517, 517, 517, 517, 517, 517, 0, 1277, 0, 0, 0, 298, 299, 300, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2060,
  /* 38173 */ 0, 0, 0, 0, 0, 313, 0, 0, 0, 0, 316, 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 316, 0, 333, 0, 298, 0, 0, 0,
  /* 38204 */ 0, 0, 343, 344, 0, 0, 0, 0, 2596864, 0, 0, 2760704, 0, 0, 0, 2854912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38232 */ 0, 0, 0, 217088, 345, 0, 0, 0, 0, 345, 0, 0, 0, 350, 0, 0, 0, 316, 354, 0, 0, 0, 0, 3051520, 3055616, 0,
  /* 38258 */ 0, 0, 3141632, 0, 0, 3158016, 0, 0, 0, 0, 0, 1099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1323, 1324, 0, 1326, 0,
  /* 38285 */ 0, 0, 0, 378, 40960, 378, 378, 0, 378, 378, 363, 378, 0, 378, 410, 410, 410, 0, 0, 298, 0, 0, 451, 451,
  /* 38309 */ 451, 451, 451, 451, 451, 451, 459, 464, 451, 451, 451, 451, 451, 459, 474, 459, 451, 451, 479, 464, 484,
  /* 38330 */ 464, 464, 464, 464, 464, 464, 509, 509, 509, 509, 509, 532, 509, 509, 509, 509, 509, 509, 532, 532, 532,
  /* 38351 */ 532, 532, 532, 532, 532, 532, 546, 546, 555, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 988, 0,
  /* 38376 */ 0, 0, 0, 993, 0, 0, 0, 0, 0, 0, 609, 0, 0, 0, 0, 0, 313, 313, 313, 0, 0, 0, 0, 0, 0, 278528, 278528,
  /* 38403 */ 278528, 278528, 278528, 278528, 278528, 278528, 278528, 0, 397, 397, 397, 711, 397, 397, 397, 397, 397,
  /* 38420 */ 397, 397, 397, 397, 0, 0, 0, 0, 0, 495, 495, 495, 1729, 495, 495, 495, 495, 0, 0, 0, 695, 397, 397, 711,
  /* 38444 */ 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 0, 495, 495, 1728, 495, 495, 495, 495, 495, 0, 0, 984, 0, 0, 0,
  /* 38469 */ 0, 989, 0, 991, 0, 0, 0, 0, 0, 0, 1036, 0, 0, 0, 0, 0, 0, 0, 0, 1045, 397, 397, 397, 1066, 397, 397, 397,
  /* 38496 */ 397, 397, 397, 397, 397, 0, 0, 0, 0, 0, 1082, 0, 0, 0, 0, 0, 0, 495, 495, 1146, 495, 495, 495, 495, 495,
  /* 38521 */ 495, 495, 495, 495, 495, 495, 495, 495, 1744, 495, 495, 1157, 495, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 38542 */ 495, 495, 495, 495, 495, 495, 1776, 91306, 1127, 851, 517, 517, 517, 517, 1202, 517, 517, 1211, 517, 517,
  /* 38562 */ 1215, 517, 517, 517, 517, 1222, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1814,
  /* 38582 */ 517, 517, 0, 1345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 1628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38613 */ 0, 0, 0, 0, 0, 2180, 0, 0, 761856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2298, 0, 0, 966656, 0, 0, 0,
  /* 38643 */ 0, 0, 0, 397, 397, 397, 397, 397, 397, 967053, 1720, 397, 397, 1073549, 0, 0, 0, 0, 1725, 1726, 495, 495,
  /* 38665 */ 495, 495, 495, 495, 495, 1494, 495, 495, 495, 495, 495, 495, 495, 495, 1465, 495, 495, 495, 495, 495, 495,
  /* 38686 */ 495, 495, 495, 495, 1762, 495, 495, 495, 495, 495, 495, 495, 1767, 495, 1769, 495, 495, 495, 517, 517,
  /* 38706 */ 517, 0, 0, 2279, 0, 0, 0, 569344, 0, 0, 0, 0, 0, 180580, 180764, 180764, 180764, 180764, 180764, 180764,
  /* 38726 */ 180764, 180764, 180764, 0, 517, 1829, 517, 1831, 517, 517, 517, 517, 517, 517, 517, 495, 495, 495, 495,
  /* 38745 */ 495, 517, 517, 517, 517, 517, 517, 517, 517, 2257, 517, 517, 967151, 1073647, 517, 517, 517, 517, 517,
  /* 38764 */ 967173, 1073669, 0, 1281, 0, 1287, 0, 0, 0, 0, 0, 335872, 0, 1127, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 38786 */ 814, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1187, 495, 495, 495, 495, 848, 0, 0, 397, 397, 397,
  /* 38808 */ 397, 397, 397, 397, 0, 770048, 0, 0, 495, 495, 495, 495, 517, 517, 517, 517, 517, 517, 517, 517, 0, 1594,
  /* 38830 */ 0, 0, 517, 517, 517, 2003, 517, 517, 517, 517, 517, 517, 517, 2010, 517, 517, 517, 517, 517, 517, 1223,
  /* 38851 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 495, 517, 0, 0, 0, 0, 0, 0, 0, 2051, 0, 0, 0, 0, 2056, 0, 0,
  /* 38877 */ 0, 0, 0, 0, 0, 0, 2069, 0, 0, 0, 0, 0, 0, 0, 0, 2078, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 397, 397, 397,
  /* 38906 */ 397, 0, 0, 0, 0, 2118, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 2126, 495, 495,
  /* 38928 */ 495, 845, 0, 517, 517, 857, 517, 517, 517, 517, 904, 53491, 2, 6, 0, 0, 2194, 0, 0, 0, 0, 2198, 2199, 0,
  /* 38952 */ 0, 0, 0, 0, 0, 0, 661, 583, 0, 0, 0, 0, 583, 0, 0, 410095, 495, 495, 410117, 517, 517, 0, 0, 0, 0, 0, 0,
  /* 38979 */ 0, 0, 0, 0, 692224, 0, 0, 0, 0, 0, 962560, 1052672, 0, 2285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2295, 0,
  /* 39007 */ 0, 0, 2299, 909709, 397, 2309, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1756, 495,
  /* 39028 */ 495, 495, 495, 495, 2323, 495, 495, 495, 495, 495, 495, 517, 517, 517, 517, 517, 517, 517, 517, 517, 542,
  /* 39049 */ 0, 0, 466944, 0, 2358, 2359, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 0, 495, 495, 2230, 495, 495, 495, 397,
  /* 39073 */ 0, 806912, 807309, 0, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1512, 1514, 91306, 1517,
  /* 39092 */ 1514, 517, 517, 517, 517, 495, 495, 2406, 495, 2408, 495, 495, 495, 495, 517, 517, 517, 517, 517, 2416,
  /* 39112 */ 517, 517, 517, 517, 2018, 517, 517, 517, 517, 517, 517, 517, 517, 495, 495, 495, 517, 517, 517, 0, 0, 0,
  /* 39134 */ 0, 0, 0, 0, 0, 0, 0, 675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2418, 517, 517, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39165 */ 0, 0, 0, 2363, 397, 397, 2364, 397, 495, 2493, 495, 495, 517, 517, 517, 517, 517, 517, 517, 2502, 517,
  /* 39186 */ 517, 0, 2505, 2517, 517, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0, 0, 495, 495, 495, 495, 517, 517, 517,
  /* 39209 */ 517, 517, 517, 517, 517, 517, 517, 0, 0, 495, 495, 495, 495, 346, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39236 */ 0, 0, 2428928, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 304, 0, 0, 0,
  /* 39257 */ 411, 411, 411, 429, 429, 429, 429, 429, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 475, 452,
  /* 39278 */ 452, 452, 480, 452, 485, 452, 452, 452, 452, 452, 452, 510, 510, 510, 510, 510, 533, 510, 510, 510, 510,
  /* 39299 */ 510, 510, 533, 533, 533, 533, 533, 533, 533, 533, 533, 547, 547, 556, 53491, 53491, 2, 2, 3, 94212, 5, 6,
  /* 39321 */ 0, 0, 0, 0, 0, 0, 1100, 0, 0, 0, 0, 0, 0, 1105, 0, 0, 0, 655, 0, 0, 0, 0, 0, 569, 655, 0, 663, 664, 569,
  /* 39350 */ 0, 0, 0, 0, 0, 409997, 397, 397, 397, 0, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 2116, 495, 397,
  /* 39373 */ 397, 708, 397, 713, 397, 397, 397, 397, 720, 397, 397, 397, 0, 0, 0, 0, 0, 495, 1727, 495, 495, 495, 495,
  /* 39396 */ 495, 495, 2410, 495, 495, 2412, 517, 517, 517, 517, 517, 517, 517, 517, 1238, 517, 517, 517, 517, 517,
  /* 39416 */ 517, 517, 517, 517, 517, 517, 1813, 517, 517, 517, 517, 0, 0, 758, 0, 0, 0, 0, 569, 0, 0, 758, 569, 0, 0,
  /* 39441 */ 0, 758, 781, 0, 737, 783, 0, 0, 0, 0, 0, 781, 0, 0, 569, 0, 495, 796, 517, 517, 517, 895, 517, 517, 517,
  /* 39466 */ 517, 517, 0, 0, 0, 796, 495, 495, 819, 495, 836, 495, 495, 0, 855, 517, 517, 878, 517, 895, 517, 517,
  /* 39488 */ 53491, 2, 6, 0, 0, 956, 0, 0, 959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473984, 0, 0, 0, 0, 0, 0, 0, 1016, 0, 0,
  /* 39518 */ 0, 0, 0, 0, 0, 1025, 0, 0, 0, 0, 0, 0, 0, 0, 1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2181,
  /* 39549 */ 1046, 0, 0, 0, 0, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 1443, 0, 1030, 0, 0, 0, 0, 0, 0,
  /* 39574 */ 937, 979, 1095, 0, 1103, 0, 978, 1106, 0, 0, 0, 0, 3088384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0,
  /* 39601 */ 45056, 49152, 1108, 397, 397, 1111, 397, 397, 397, 397, 397, 397, 1118, 397, 0, 765952, 0, 0, 0, 0, 927,
  /* 39622 */ 931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2072, 2073, 0, 0, 0, 0, 0, 0,
  /* 39653 */ 959, 0, 0, 0, 1127, 495, 495, 495, 1132, 495, 495, 495, 495, 495, 1751, 495, 495, 495, 495, 495, 495, 495,
  /* 39675 */ 495, 495, 495, 1741, 1742, 495, 495, 495, 495, 1158, 495, 495, 1161, 495, 495, 495, 495, 495, 495, 495,
  /* 39695 */ 495, 495, 495, 1173, 1174, 91306, 1127, 851, 517, 517, 517, 1201, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 39715 */ 517, 495, 517, 0, 0, 0, 2393, 0, 0, 0, 0, 1287, 0, 0, 0, 0, 0, 0, 0, 1295, 1296, 0, 0, 0, 0, 0, 696320,
  /* 39742 */ 1015808, 0, 0, 0, 0, 0, 0, 2297, 0, 0, 0, 0, 1302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1101824, 371,
  /* 39770 */ 1102195, 397, 397, 397, 1398, 397, 397, 397, 397, 397, 1402, 397, 397, 397, 397, 397, 397, 1078, 0, 0, 0,
  /* 39791 */ 0, 0, 0, 0, 0, 0, 0, 0, 586, 0, 0, 589, 0, 0, 0, 0, 1423, 1423, 1413, 0, 0, 0, 1425, 0, 0, 0, 1428, 0, 0,
  /* 39820 */ 0, 0, 928, 932, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1613, 0, 0, 0, 0, 0, 0, 0, 0, 397, 397, 1435, 397, 397, 397,
  /* 39849 */ 1438, 397, 397, 397, 397, 397, 0, 1079, 0, 0, 0, 0, 0, 0, 0, 1084, 0, 0, 517, 1524, 517, 517, 517, 517,
  /* 39873 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 1537, 1569, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 39894 */ 517, 495, 495, 1582, 495, 495, 495, 1147, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1156,
  /* 39914 */ 495, 1584, 495, 495, 517, 517, 1589, 517, 517, 1591, 517, 517, 0, 0, 0, 0, 0, 1015, 1015, 0, 0, 0, 0, 0,
  /* 39938 */ 1021, 1367, 0, 0, 0, 0, 1620, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 1626, 0, 0, 1668, 0, 0, 0, 0, 0, 0,
  /* 39967 */ 0, 0, 0, 0, 397, 397, 397, 397, 1394, 397, 397, 1682, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
  /* 39989 */ 397, 397, 397, 397, 1692, 397, 1694, 1695, 397, 397, 0, 0, 0, 0, 0, 0, 0, 1704, 0, 1706, 0, 0, 0, 0, 928,
  /* 40014 */ 932, 0, 0, 0, 0, 0, 0, 0, 0, 938, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1026, 0, 1027, 0, 0, 1721, 397, 397, 0,
  /* 40044 */ 0, 0, 1724, 0, 495, 495, 495, 495, 495, 495, 495, 495, 1739, 495, 495, 495, 495, 495, 495, 495, 495, 2469,
  /* 40066 */ 517, 517, 517, 517, 517, 517, 517, 495, 495, 1734, 495, 495, 1737, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 40087 */ 1745, 495, 495, 495, 1178, 495, 495, 495, 1181, 495, 495, 495, 495, 495, 495, 495, 848, 1772, 495, 495,
  /* 40107 */ 495, 495, 0, 0, 1780, 0, 1514, 0, 0, 1786, 0, 517, 517, 517, 517, 1254, 517, 517, 517, 517, 517, 0, 0,
  /* 40130 */ 495, 495, 495, 495, 0, 854, 517, 517, 877, 517, 517, 517, 517, 53491, 2, 6, 517, 517, 1830, 517, 517, 517,
  /* 40152 */ 1834, 517, 517, 517, 517, 495, 495, 495, 495, 495, 517, 517, 517, 517, 2255, 517, 517, 517, 517, 517, 517,
  /* 40173 */ 517, 517, 517, 2153, 517, 517, 517, 517, 517, 517, 517, 517, 517, 807407, 807429, 0, 0, 0, 0, 0, 1848, 0,
  /* 40195 */ 0, 0, 0, 0, 0, 0, 0, 1856, 0, 0, 0, 0, 0, 0, 1127, 495, 495, 495, 495, 495, 495, 1455, 1456, 495, 0, 1889,
  /* 40221 */ 0, 0, 0, 1893, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 1915, 397, 397, 397, 397,
  /* 40248 */ 1918, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 1689, 397, 1690, 1691, 397, 397, 397, 0, 0, 1926,
  /* 40269 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233472, 0, 0, 0, 0, 0, 0, 397, 397, 397, 397, 397, 397, 397, 1040384,
  /* 40296 */ 0, 0, 0, 1941, 495, 495, 495, 517, 517, 517, 0, 2278, 0, 0, 0, 0, 0, 0, 0, 0, 583, 0, 0, 0, 789, 0, 495,
  /* 40323 */ 495, 495, 495, 495, 1945, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1954, 495, 495, 495, 1461,
  /* 40343 */ 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 833, 495, 495, 495, 495, 495, 1957, 1958, 495,
  /* 40364 */ 495, 495, 495, 495, 495, 495, 1965, 495, 495, 495, 495, 495, 1776, 0, 0, 0, 1514, 1782, 0, 0, 0, 517, 517,
  /* 40387 */ 517, 1988, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1997, 517, 517, 517, 517, 517, 1528, 517,
  /* 40407 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1549, 517, 517, 517, 2000, 2001, 517, 517, 517,
  /* 40427 */ 517, 517, 517, 517, 2008, 517, 517, 517, 517, 517, 517, 517, 517, 1239, 517, 517, 517, 517, 517, 517, 517,
  /* 40448 */ 517, 517, 517, 1996, 517, 517, 517, 517, 517, 495, 517, 517, 517, 517, 0, 0, 0, 0, 413696, 2033, 0, 0,
  /* 40470 */ 2036, 2037, 0, 0, 0, 0, 3088384, 0, 57344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40498 */ 2052, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 2077, 0, 0, 0, 2081, 0, 0, 0, 397, 397, 397,
  /* 40527 */ 2088, 397, 397, 397, 397, 1112, 397, 397, 397, 397, 1117, 397, 397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1930, 0,
  /* 40551 */ 1932, 0, 0, 0, 397, 397, 397, 0, 495, 495, 495, 495, 495, 2112, 495, 2114, 495, 495, 495, 2117, 517, 517,
  /* 40573 */ 517, 517, 2160, 517, 495, 495, 495, 517, 517, 517, 0, 0, 0, 0, 0, 1019, 0, 0, 0, 1024, 0, 0, 942, 0, 0, 0,
  /* 40599 */ 0, 947, 0, 0, 0, 0, 0, 0, 0, 0, 1352, 0, 0, 0, 0, 1357, 0, 0, 0, 0, 2183, 0, 0, 2185, 0, 0, 0, 0, 0, 0, 0,
  /* 40630 */ 0, 0, 0, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  /* 40645 */ 163840, 163840, 163840, 163840, 495, 495, 495, 2235, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 40663 */ 495, 495, 1953, 495, 495, 495, 495, 495, 2248, 495, 495, 517, 517, 2253, 517, 517, 517, 517, 517, 517,
  /* 40683 */ 2258, 517, 517, 517, 517, 2139, 517, 2141, 517, 517, 517, 2144, 517, 517, 517, 517, 517, 517, 517, 517,
  /* 40703 */ 2266, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1578, 517, 495, 495, 495, 495, 0, 397, 397, 397,
  /* 40724 */ 397, 397, 2304, 397, 0, 0, 2306, 0, 0, 0, 471040, 397, 0, 0, 397, 0, 495, 495, 495, 495, 495, 2368, 495,
  /* 40747 */ 495, 495, 495, 495, 0, 0, 0, 1781, 1514, 0, 0, 0, 1787, 517, 517, 397, 0, 0, 397, 0, 495, 495, 495, 495,
  /* 40771 */ 2367, 495, 495, 495, 495, 495, 495, 655855, 495, 1962, 495, 1964, 495, 495, 495, 1968, 495, 495, 495, 495,
  /* 40791 */ 2375, 495, 495, 495, 517, 517, 517, 517, 2379, 517, 517, 517, 517, 517, 517, 1529, 517, 517, 517, 517,
  /* 40811 */ 517, 517, 517, 517, 517, 0, 0, 657, 495, 495, 495, 495, 495, 495, 495, 2495, 517, 517, 517, 517, 517, 517,
  /* 40833 */ 517, 517, 517, 2504, 0, 0, 0, 0, 929, 933, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2201, 0, 0, 0, 0, 0, 0, 0, 2506,
  /* 40862 */ 0, 0, 2509, 495, 495, 495, 495, 495, 495, 2514, 2515, 495, 517, 517, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40887 */ 0, 0, 397, 0, 0, 0, 0, 495, 517, 517, 517, 517, 0, 0, 495, 2556, 517, 2557, 495, 517, 495, 517, 495,
  /* 40910 */ 909807, 517, 909829, 2348, 0, 0, 2350, 0, 0, 0, 0, 0, 0, 0, 672, 0, 0, 0, 0, 0, 596, 0, 0, 0, 0, 0, 40960,
  /* 40937 */ 0, 0, 0, 0, 0, 386, 0, 0, 0, 412, 412, 412, 430, 430, 430, 430, 430, 453, 453, 453, 430, 430, 430, 430,
  /* 40961 */ 430, 453, 453, 430, 430, 430, 467, 430, 453, 476, 430, 430, 430, 430, 453, 430, 486, 486, 486, 486, 486,
  /* 40982 */ 486, 511, 511, 511, 511, 511, 534, 511, 511, 511, 511, 511, 511, 534, 534, 534, 534, 534, 534, 534, 534,
  /* 41003 */ 534, 511, 511, 534, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 1127, 495, 495, 495, 495, 495,
  /* 41027 */ 1454, 495, 495, 495, 91306, 1127, 851, 517, 517, 517, 517, 517, 517, 1207, 517, 517, 517, 517, 517, 517,
  /* 41047 */ 517, 517, 1259, 517, 0, 0, 1261, 495, 495, 1264, 1282, 0, 0, 0, 1288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41073 */ 2163538, 2437970, 2163538, 2163538, 2163538, 0, 0, 0, 1347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704,
  /* 41095 */ 200704, 200704, 200704, 200704, 200704, 200704, 200968, 0, 0, 1381, 0, 1383, 0, 0, 0, 0, 0, 397, 397, 397,
  /* 41115 */ 397, 397, 397, 397, 397, 0, 409600, 0, 0, 0, 0, 1306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592,
  /* 41141 */ 2473984, 2478080, 0, 0, 1446, 0, 0, 0, 1127, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1752, 495, 495,
  /* 41162 */ 495, 495, 495, 495, 495, 495, 1753, 495, 495, 495, 495, 495, 495, 495, 495, 1472, 495, 495, 495, 495, 495,
  /* 41183 */ 495, 495, 495, 1481, 495, 495, 495, 495, 495, 517, 2252, 517, 517, 517, 517, 517, 517, 517, 517, 517, 0,
  /* 41204 */ 0, 184320, 495, 495, 495, 495, 0, 0, 1607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225280, 0, 0, 0, 0, 0,
  /* 41232 */ 0, 0, 397, 397, 1683, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 1121, 0, 0, 0, 495,
  /* 41255 */ 495, 517, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0, 1846, 0, 0, 0, 0, 973, 0, 313, 313, 0, 0, 0, 978, 979,
  /* 41281 */ 0, 0, 0, 0, 0, 577536, 0, 0, 1658, 0, 0, 0, 0, 0, 0, 0, 785, 0, 0, 0, 0, 0, 0, 495, 495, 495, 2512, 495,
  /* 41309 */ 2513, 495, 495, 495, 517, 1934, 0, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0, 0, 495, 495, 495, 495, 517,
  /* 41332 */ 517, 517, 1228, 517, 517, 517, 517, 0, 0, 0, 0, 0, 1051, 397, 397, 397, 397, 397, 397, 397, 1061, 397,
  /* 41354 */ 397, 495, 517, 517, 517, 517, 0, 0, 0, 2032, 0, 0, 0, 0, 0, 0, 0, 961, 0, 0, 0, 0, 0, 0, 0, 0, 1022, 0, 0,
  /* 41383 */ 0, 0, 0, 0, 0, 397, 397, 397, 0, 495, 495, 2109, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1961, 495,
  /* 41406 */ 495, 495, 495, 495, 495, 495, 495, 2122, 495, 495, 495, 495, 495, 495, 495, 495, 1184, 495, 495, 495, 495,
  /* 41427 */ 495, 495, 848, 517, 2136, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2345,
  /* 41448 */ 495, 495, 2494, 495, 517, 517, 517, 517, 517, 517, 517, 517, 2503, 517, 0, 0, 0, 0, 986, 0, 0, 0, 0, 0, 0,
  /* 41473 */ 0, 0, 0, 0, 0, 517, 517, 517, 517, 517, 495, 2545, 495, 517, 517, 517, 517, 2549, 517, 0, 0, 0, 0, 495,
  /* 41497 */ 495, 495, 495, 517, 517, 1207, 517, 517, 517, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0, 2428, 2429, 0, 0, 0, 349,
  /* 41522 */ 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 45056, 49152, 397, 397, 397, 0, 324, 0, 349, 349, 0, 0, 0, 0, 0, 0, 0,
  /* 41550 */ 0, 2163480, 2163480, 2442008, 2450200, 2163480, 2163480, 2163480, 2163480, 512, 512, 512, 512, 512, 512,
  /* 41565 */ 535, 535, 535, 535, 535, 535, 535, 535, 535, 512, 535, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0,
  /* 41589 */ 0, 1127, 1449, 495, 495, 1451, 495, 1453, 495, 495, 495, 495, 495, 807, 495, 495, 495, 495, 495, 495, 495,
  /* 41610 */ 495, 495, 495, 495, 495, 495, 2326, 495, 495, 517, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41634 */ 0, 0, 0, 1143, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1955, 1159, 495,
  /* 41656 */ 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1969, 91306, 1127, 851, 517, 517,
  /* 41676 */ 517, 517, 517, 517, 517, 517, 1212, 517, 517, 517, 517, 517, 517, 1542, 517, 517, 517, 517, 517, 517, 517,
  /* 41697 */ 517, 1551, 495, 495, 1473, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 2378, 517,
  /* 41717 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 2270, 517, 517, 517, 0, 0, 379, 40960, 379, 379, 0,
  /* 41739 */ 379, 379, 309, 379, 0, 379, 413, 413, 413, 0, 0, 0, 0, 0, 454, 454, 454, 454, 454, 454, 454, 454, 465,
  /* 41762 */ 454, 454, 454, 454, 454, 454, 477, 454, 454, 454, 454, 465, 454, 487, 487, 487, 491, 487, 487, 513, 513,
  /* 41783 */ 513, 513, 513, 536, 513, 513, 513, 513, 513, 513, 536, 536, 536, 536, 536, 536, 536, 536, 536, 548, 548,
  /* 41804 */ 557, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 1290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200, 0, 0, 0,
  /* 41833 */ 0, 2205, 0, 517, 517, 517, 896, 517, 517, 517, 517, 517, 0, 0, 0, 495, 495, 495, 495, 495, 1777, 0, 0, 0,
  /* 41857 */ 1514, 1783, 0, 0, 0, 517, 517, 495, 837, 495, 495, 0, 517, 517, 517, 517, 517, 896, 517, 517, 53491, 2, 6,
  /* 41880 */ 0, 0, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1037, 0, 0, 0, 0, 0, 0, 0, 0, 1020, 0, 0, 0, 0, 939, 0,
  /* 41912 */ 0, 0, 514, 514, 514, 514, 514, 514, 537, 537, 537, 537, 537, 537, 537, 537, 537, 514, 537, 53491, 53491,
  /* 41933 */ 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 1319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2057, 0, 0, 0, 0, 0, 0, 0, 621,
  /* 41964 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2206, 704, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
  /* 41991 */ 397, 397, 0, 0, 0, 0, 0, 2097, 0, 0, 0, 0, 0, 397, 397, 495, 495, 808, 495, 495, 495, 495, 495, 495, 495,
  /* 42016 */ 495, 495, 495, 495, 495, 495, 2411, 495, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1837, 311791,
  /* 42036 */ 1838, 495, 495, 495, 1249, 517, 517, 517, 517, 517, 517, 517, 517, 517, 0, 0, 495, 495, 495, 495, 495,
  /* 42057 */ 1960, 495, 495, 495, 495, 495, 495, 495, 1967, 495, 495, 0, 1284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42083 */ 0, 45056, 49152, 0, 0, 0, 1851, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1094, 0, 1084, 1102, 0, 0, 0, 0, 0,
  /* 42111 */ 495, 495, 841, 495, 0, 517, 517, 517, 517, 517, 517, 900, 517, 53491, 2, 6, 517, 517, 1252, 517, 517, 517,
  /* 42133 */ 517, 517, 517, 517, 0, 0, 495, 495, 495, 495, 495, 2236, 495, 495, 2239, 495, 495, 495, 495, 495, 495,
  /* 42154 */ 2244, 1458, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 1979, 0, 517, 517,
  /* 42175 */ 1554, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1815, 517, 1803, 1804, 517,
  /* 42195 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 1247, 517, 0, 0, 397, 397, 1936, 397,
  /* 42216 */ 397, 397, 397, 0, 0, 0, 0, 495, 495, 495, 495, 517, 1270, 517, 517, 517, 517, 517, 517, 0, 0, 0, 0, 0, 0,
  /* 42241 */ 0, 0, 0, 2459, 495, 0, 0, 0, 532480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1127, 495, 495, 495, 495, 495,
  /* 42268 */ 495, 1136, 495, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 394, 0, 397, 397, 397, 397, 397, 397, 397, 0, 0, 0,
  /* 42294 */ 974848, 0, 0, 0, 397, 397, 397, 397, 1436, 397, 397, 397, 397, 397, 397, 397, 0, 1413, 1414, 0, 0, 0,
  /* 42316 */ 1417, 0, 0, 0, 0, 1085440, 313, 0, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 0,
  /* 42344 */ 0, 0, 1085440, 0, 1085440, 0, 0, 0, 1085440, 1085808, 1085808, 0, 0, 0, 1085808, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42367 */ 0, 0, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 1085440, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0,
  /* 42394 */ 0, 1085440, 1085440, 1085440, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 0, 0,
  /* 42419 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111006, 1085440, 0, 0, 0, 2, 4263936, 3, 94212, 5, 6, 0, 0, 0, 0,
  /* 42447 */ 0, 0, 1350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 0, 307200, 0, 0, 2105344, 261, 262, 0, 0, 0, 0,
  /* 42476 */ 0, 0, 0, 0, 0, 0, 1127, 495, 495, 495, 495, 495, 495, 1137, 495, 2162688, 2162688, 2163536, 0, 2162688,
  /* 42496 */ 2163539, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 42507 */ 2162688, 2162688, 2162688, 2162688, 3080192, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 42518 */ 2162688, 3067904, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 2162688,
  /* 42531 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 42542 */ 2162688, 2162688, 2162688, 2162688, 4263936, 0, 0, 0, 0, 0, 2158592, 2441216, 2158592, 2158592, 2158592,
  /* 42557 */ 2158592, 2158592, 2158592, 2158592, 2621440, 2158592, 0, 1093632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42578 */ 0, 892928, 0, 0, 0, 0, 1094063, 1094063, 1094063, 1094063, 1094063, 1094063, 1094063, 1094063, 1094063,
  /* 42593 */ 1094063, 1094063, 1094063, 1094063, 1094063, 1094063, 1094063, 1094063, 1094063, 1094063, 1094063,
  /* 42604 */ 1094063, 1094063, 1094063, 1094063, 0, 0, 0, 0, 0, 0, 0, 0, 1127, 495, 495, 495, 495, 495, 495, 1138, 495,
  /* 42625 */ 1094063, 1094063, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 1367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337, 0,
  /* 42653 */ 0, 0, 342, 337, 0, 1101824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 1102195, 0, 0, 369, 0, 0,
  /* 42681 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1127, 495, 495, 495, 495, 495, 1134, 495, 495, 1102195, 1102195, 1102195,
  /* 42703 */ 1102195, 1102195, 1102195, 1102195, 1102195, 1102195, 1102195, 1102195, 1102195, 1102195, 1102195,
  /* 42714 */ 1102195, 1102195, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 1367, 0, 0, 0, 0, 0, 1662, 0, 0, 0,
  /* 42740 */ 1110016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 42762 */ 2162688, 3067904, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 1193, 0, 0,
  /* 42775 */ 1196, 2162688, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 42787 */ 2162688, 2162688, 261, 0, 262, 0, 0, 0, 2486272, 0, 0, 53491, 53491, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0,
  /* 42811 */ 0, 1367, 0, 0, 0, 0, 1661, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1127, 495,
  /* 42840 */ 495, 495, 495, 1133, 495, 495, 1142, 0, 0, 0, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
  /* 42857 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
  /* 42870 */ 106496, 106496, 106496, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704
];

XQueryParser.EXPECTED =
[
  /*    0 */ 721, 724, 726, 724, 730, 734, 738, 742, 746, 747, 1094, 751, 869, 1094, 1239, 1110, 763, 767, 1094, 774,
  /*   20 */ 941, 1189, 1902, 1094, 779, 1112, 857, 810, 876, 789, 1094, 1810, 794, 798, 1209, 1111, 1112, 808, 810,
  /*   39 */ 785, 918, 1094, 1122, 1190, 1904, 816, 1112, 822, 810, 825, 1094, 1094, 1900, 829, 1112, 833, 810, 860,
  /*   58 */ 1094, 1017, 837, 1113, 810, 844, 1094, 850, 818, 812, 1094, 854, 782, 867, 873, 880, 884, 891, 840, 895,
  /*   78 */ 899, 901, 905, 909, 911, 915, 923, 927, 931, 935, 939, 1095, 945, 966, 1094, 950, 1094, 1094, 775, 955,
  /*   98 */ 1094, 1094, 1094, 960, 1094, 1094, 1094, 1094, 1094, 1094, 1493, 1094, 1094, 1094, 973, 1094, 1094, 1094,
  /*  116 */ 1094, 1094, 1094, 1094, 1094, 1094, 1979, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 965, 1094,
  /*  134 */ 1094, 1094, 1094, 1094, 1094, 2455, 1094, 1094, 1094, 1094, 1980, 1094, 1094, 1094, 1249, 1094, 1094, 1094,
  /*  152 */ 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 975, 995, 1357, 970, 2407, 979, 983, 987, 994, 1094, 1094,
  /*  171 */ 990, 801, 999, 1003, 2457, 1560, 1007, 1011, 1094, 790, 863, 946, 1066, 1539, 1016, 961, 1094, 1322, 1120,
  /*  190 */ 1094, 951, 1562, 1021, 1642, 1230, 1094, 2299, 1094, 1398, 1891, 1094, 2469, 2483, 1536, 1657, 1094, 2192,
  /*  208 */ 1094, 1128, 1025, 1331, 2380, 1275, 1030, 1094, 1036, 1156, 1094, 1233, 1942, 1094, 1041, 1804, 1012, 1047,
  /*  226 */ 1164, 1734, 919, 1054, 1162, 1064, 1058, 2247, 1062, 1070, 1077, 1074, 1318, 1320, 1094, 1522, 1094, 1418,
  /*  244 */ 1272, 1081, 1085, 1089, 1521, 1093, 1396, 2477, 1099, 2070, 1103, 1450, 1632, 1107, 1117, 1948, 1126, 1132,
  /*  262 */ 1136, 1141, 1148, 1154, 1094, 1160, 1960, 1758, 1183, 1770, 1168, 1172, 1178, 2269, 1182, 1026, 1187, 1792,
  /*  280 */ 2010, 1183, 2475, 1194, 770, 1198, 1202, 1423, 1207, 846, 1639, 1213, 1217, 804, 1533, 1094, 1546, 1137,
  /*  298 */ 1221, 1393, 1227, 1237, 2264, 1292, 1223, 1243, 1247, 1253, 1257, 1266, 1279, 1364, 1283, 1296, 1300, 1304,
  /*  316 */ 1311, 1308, 1315, 1326, 1330, 1032, 1356, 1335, 1339, 1343, 1347, 1351, 1094, 1355, 1480, 1361, 1403, 1954,
  /*  334 */ 1368, 1372, 1376, 1380, 1986, 1150, 1390, 1402, 1721, 1407, 1411, 1992, 1094, 1415, 1455, 1422, 1427, 1431,
  /*  352 */ 1435, 2253, 1439, 1448, 1698, 1094, 1286, 1601, 1454, 1459, 1463, 1467, 1474, 1126, 1487, 1094, 1289, 1094,
  /*  370 */ 1764, 1499, 1503, 1510, 1037, 1520, 1849, 1031, 956, 1526, 1718, 1530, 1626, 1094, 1543, 1553, 2309, 1477,
  /*  388 */ 1897, 1557, 2108, 1566, 1570, 1574, 1578, 754, 1588, 1585, 1592, 1596, 1600, 1094, 1746, 1605, 1609, 1613,
  /*  406 */ 1617, 1621, 1625, 1745, 1549, 1630, 1636, 1646, 1650, 1654, 1664, 2325, 1687, 1668, 1672, 1470, 1910, 1516,
  /*  424 */ 1676, 1094, 1680, 1839, 1686, 1094, 1691, 1695, 1707, 1711, 1894, 1715, 2348, 1094, 1866, 1733, 1094, 1738,
  /*  442 */ 1742, 1750, 1756, 1269, 1729, 1094, 2205, 1042, 1925, 1490, 2105, 1094, 1762, 1768, 1094, 1774, 2219, 1262,
  /*  460 */ 1780, 1174, 1094, 1784, 1260, 1790, 2030, 1682, 1796, 1808, 2267, 1814, 1752, 2338, 1818, 2162, 1495, 887,
  /*  478 */ 2216, 1094, 1094, 1094, 2445, 2165, 1822, 1826, 1830, 1834, 1838, 2444, 1843, 1966, 1483, 1847, 1506, 1853,
  /*  496 */ 2442, 1857, 1094, 1861, 1386, 1865, 1870, 1874, 1878, 1882, 1888, 1094, 1908, 1914, 1513, 1920, 1924, 1929,
  /*  514 */ 1935, 1939, 1094, 1946, 1094, 1952, 1958, 2445, 1964, 1970, 1872, 1974, 2155, 1978, 1094, 1984, 1990, 1996,
  /*  532 */ 2000, 2004, 2008, 2322, 1094, 2404, 2014, 2040, 2018, 2025, 2029, 2034, 2038, 2044, 2021, 2048, 2052, 2056,
  /*  550 */ 2060, 1144, 2067, 2074, 2078, 2082, 2086, 2090, 2094, 2098, 2102, 1094, 1786, 2112, 2117, 2121, 2125, 2129,
  /*  568 */ 2133, 1785, 2138, 2225, 1724, 2452, 2142, 2146, 2431, 2150, 2154, 2159, 2169, 2173, 1094, 2177, 2181, 2185,
  /*  586 */ 1884, 2331, 1703, 2190, 1916, 2196, 2200, 2204, 2209, 2213, 1094, 2328, 1094, 759, 2190, 2315, 2223, 2229,
  /*  604 */ 2413, 2238, 1094, 2242, 1094, 2463, 2251, 2257, 2261, 1444, 2273, 2280, 2279, 2386, 2284, 2288, 1799, 2292,
  /*  622 */ 2297, 2234, 2303, 2307, 1802, 2313, 2319, 2336, 2342, 2425, 2346, 2352, 1043, 2232, 1094, 1094, 1094, 1094,
  /*  640 */ 1094, 1094, 1094, 2356, 1050, 2360, 2364, 2368, 2372, 1094, 2245, 1094, 2378, 2384, 2390, 2394, 2398, 2063,
  /*  658 */ 2411, 2134, 1094, 1094, 1580, 1094, 2374, 2417, 1094, 2423, 1094, 2401, 1094, 2429, 1094, 1701, 1094, 2435,
  /*  676 */ 1094, 2186, 1094, 1094, 2439, 1094, 2429, 1094, 1581, 1660, 1094, 2332, 1094, 1094, 2449, 1383, 1094, 757,
  /*  694 */ 1727, 1094, 2461, 1094, 2467, 2473, 1442, 2481, 2419, 1203, 2275, 1775, 1094, 1094, 2293, 1931, 1094, 1094,
  /*  712 */ 1776, 1094, 1776, 1094, 1094, 1094, 1094, 1094, 2113, 2487, 2569, 2493, 2506, 2506, 2506, 2506, 2497, 2506,
  /*  730 */ 2501, 2506, 2505, 2510, 2514, 2516, 2520, 2533, 2527, 2523, 2531, 2537, 2541, 2545, 2549, 2489, 2558, 3399,
  /*  748 */ 3399, 3399, 2567, 2586, 3527, 2573, 3399, 2562, 3898, 3897, 3399, 3399, 3399, 4662, 4670, 2580, 2598, 2598,
  /*  766 */ 2594, 2667, 2670, 4367, 3399, 2574, 4608, 3505, 3386, 3399, 3399, 3399, 3011, 3185, 2617, 3867, 2645, 2597,
  /*  784 */ 2598, 2598, 2600, 2596, 2679, 2681, 3399, 3399, 3399, 3027, 2612, 3399, 3399, 3052, 3185, 3185, 3054, 3399,
  /*  802 */ 2653, 2973, 3399, 2727, 3504, 2575, 2646, 2634, 2598, 2598, 2598, 2598, 3595, 3399, 3055, 2645, 2645, 2645,
  /*  820 */ 2705, 2598, 2647, 2640, 2598, 2598, 2626, 2597, 2651, 3056, 3399, 3052, 2664, 2645, 2646, 2674, 2677, 3055,
  /*  838 */ 3050, 2702, 2645, 2598, 3597, 2644, 2599, 3596, 3399, 3399, 2574, 2726, 3051, 2617, 3182, 2703, 3184, 3181,
  /*  856 */ 2712, 2645, 2646, 2623, 2598, 2625, 2696, 3399, 2605, 3399, 3036, 2743, 3399, 3399, 3051, 3185, 4419, 2717,
  /*  874 */ 2645, 2704, 2598, 2643, 2596, 2636, 2598, 2724, 3399, 3592, 2645, 2707, 2583, 3399, 2847, 3399, 2850, 2713,
  /*  892 */ 2706, 2583, 3088, 2596, 2708, 3088, 2704, 2598, 3868, 2706, 2698, 2731, 2740, 2724, 3683, 2751, 2755, 2759,
  /*  910 */ 2774, 2774, 2774, 2761, 2765, 2769, 2773, 2774, 2774, 3399, 3399, 3399, 3031, 2775, 2779, 2782, 2785, 2789,
  /*  928 */ 2793, 2797, 2801, 2805, 2809, 2812, 2815, 2819, 2823, 2826, 2613, 2606, 3021, 3399, 3399, 2604, 2611, 2855,
  /*  946 */ 3399, 3399, 3399, 3044, 2860, 3399, 3399, 3399, 3073, 3968, 3399, 3337, 3399, 4494, 3549, 3399, 3399, 3399,
  /*  964 */ 3077, 4705, 3399, 3399, 3399, 3151, 2884, 2890, 3049, 3399, 2870, 3399, 3399, 2876, 3399, 2907, 2911, 2919,
  /*  982 */ 2923, 2927, 2931, 2935, 2939, 2942, 2945, 2949, 3399, 2953, 2960, 2966, 4426, 4007, 4782, 3399, 3399, 3406,
  /* 1000 */ 3045, 3399, 2983, 3399, 4887, 2987, 2993, 3003, 3015, 3526, 4779, 4783, 3399, 3399, 3399, 3160, 3071, 3399,
  /* 1018 */ 3399, 3399, 3185, 3104, 3399, 3399, 4464, 3129, 3399, 3399, 3399, 3294, 3802, 3180, 3399, 3399, 3399, 3335,
  /* 1036 */ 3803, 3399, 3399, 3399, 3364, 3264, 3866, 3399, 3399, 3399, 3375, 3399, 4394, 4380, 3399, 3087, 3335, 2879,
  /* 1054 */ 4845, 4381, 3399, 3266, 3165, 3172, 3399, 3171, 3217, 3867, 3399, 4292, 3399, 3399, 3061, 4881, 3867, 3399,
  /* 1072 */ 3218, 4292, 2657, 2656, 4853, 2655, 2654, 3399, 3150, 2841, 2979, 3189, 3192, 3196, 3201, 3197, 3205, 3209,
  /* 1090 */ 3210, 3210, 3214, 3372, 3399, 3399, 3399, 3399, 2834, 3063, 4040, 4317, 3230, 3239, 2851, 3247, 3231, 3646,
  /* 1108 */ 3399, 3270, 3399, 3088, 2645, 2645, 2645, 2645, 2720, 3406, 3716, 3373, 3399, 3100, 3399, 3399, 3032, 3399,
  /* 1126 */ 3399, 4706, 3399, 3399, 3117, 3082, 4030, 2995, 4414, 4241, 3275, 3399, 3399, 3400, 2727, 3279, 3399, 3285,
  /* 1144 */ 3399, 3107, 3686, 4008, 3289, 4239, 3399, 3399, 3124, 2683, 3252, 3301, 3399, 3399, 3142, 3148, 4257, 4006,
  /* 1162 */ 3399, 3399, 3156, 3399, 3399, 3265, 3399, 4763, 2845, 3385, 3316, 3323, 3399, 3399, 3181, 4126, 3334, 3344,
  /* 1180 */ 3504, 2574, 3357, 3399, 3399, 3399, 3448, 3369, 3379, 3399, 3399, 3182, 3185, 3185, 4764, 3384, 4241, 3390,
  /* 1198 */ 2727, 3399, 3399, 3296, 3397, 3399, 3399, 3399, 3484, 3297, 3398, 3399, 3399, 3183, 3053, 3447, 3399, 3399,
  /* 1216 */ 4709, 2880, 4414, 4316, 3411, 3306, 3399, 3399, 4696, 3399, 3349, 4895, 2726, 3428, 3399, 3258, 2552, 3399,
  /* 1234 */ 3029, 3399, 4392, 3439, 3446, 3399, 3399, 3183, 3054, 3039, 4893, 4897, 3469, 3406, 3473, 3399, 3399, 3219,
  /* 1252 */ 3399, 4210, 3446, 3399, 3431, 3480, 3447, 3399, 2844, 3399, 3610, 3399, 3399, 4445, 4219, 4505, 3374, 3399,
  /* 1270 */ 3292, 3047, 3399, 3347, 3417, 4049, 3399, 3399, 3418, 3489, 3399, 3406, 3502, 4650, 3399, 3510, 3399, 3362,
  /* 1288 */ 3769, 3399, 3362, 3808, 3399, 3400, 2576, 3461, 3509, 3399, 4487, 3336, 4093, 3732, 3730, 3926, 3514, 3226,
  /* 1306 */ 3225, 3926, 3739, 3738, 3049, 3169, 3741, 3740, 3167, 3525, 2734, 3531, 3216, 3399, 3217, 3218, 3399, 3399,
  /* 1324 */ 3081, 3092, 3018, 3216, 3006, 2656, 3009, 3399, 3399, 3399, 3497, 3606, 2605, 4704, 3544, 3548, 3608, 4787,
  /* 1342 */ 3553, 2872, 3557, 3561, 3565, 3569, 3575, 3579, 3571, 3583, 3585, 3585, 3589, 3335, 3535, 3399, 3399, 3399,
  /* 1360 */ 3635, 3608, 3657, 2658, 3399, 3406, 3481, 4217, 3626, 3634, 4323, 3629, 3639, 4333, 4339, 3960, 3645, 3399,
  /* 1378 */ 4691, 3650, 3399, 4601, 3622, 3399, 3406, 4879, 3399, 3414, 4356, 4267, 2687, 3399, 3655, 3399, 3423, 4766,
  /* 1396 */ 3399, 3223, 3399, 3399, 3092, 3092, 3360, 3614, 3399, 3791, 4275, 4614, 3667, 3399, 3674, 4102, 4139, 3399,
  /* 1414 */ 3680, 3399, 4603, 3707, 3399, 3447, 3176, 3866, 3711, 3399, 3399, 3399, 3668, 3721, 3399, 3399, 3125, 2956,
  /* 1432 */ 3873, 3399, 3727, 2658, 2856, 3737, 2619, 4594, 3866, 3749, 3399, 3519, 3399, 3399, 4717, 3455, 3749, 3132,
  /* 1450 */ 3399, 3399, 3251, 3256, 3773, 3399, 3399, 3399, 3711, 3039, 3399, 3399, 3125, 2956, 3873, 3608, 4734, 3781,
  /* 1468 */ 3400, 3787, 3399, 3526, 4443, 2689, 3795, 3399, 3799, 3399, 3599, 3866, 3399, 3603, 2685, 3399, 3406, 3399,
  /* 1486 */ 4207, 3406, 3807, 4006, 3399, 3607, 4097, 3399, 3609, 3399, 3399, 2849, 2848, 3124, 3812, 3873, 3609, 4735,
  /* 1504 */ 3399, 3791, 3399, 3629, 4214, 4865, 3816, 3926, 3824, 3399, 3630, 4349, 3399, 3641, 4012, 4152, 3179, 3399,
  /* 1522 */ 3399, 3399, 3715, 3372, 2688, 4295, 3399, 3790, 3399, 4620, 3830, 3399, 3669, 3441, 3399, 3122, 3399, 4344,
  /* 1540 */ 3399, 3399, 3067, 3338, 3840, 2688, 3399, 3670, 3442, 3399, 3124, 3992, 3996, 3788, 3418, 4819, 3844, 3789,
  /* 1558 */ 3399, 4821, 3399, 3695, 3399, 3399, 3023, 4391, 3865, 3399, 3399, 3872, 3880, 3885, 3399, 4468, 3399, 4467,
  /* 1576 */ 3399, 3826, 2562, 3536, 3399, 3538, 3399, 3399, 3399, 2561, 3538, 3537, 3400, 2563, 3399, 3539, 3896, 3536,
  /* 1594 */ 3788, 3897, 3521, 3897, 3521, 3904, 2562, 3399, 3399, 3399, 3773, 2846, 3124, 3399, 4050, 3914, 3918, 2846,
  /* 1612 */ 3892, 3435, 3924, 3931, 3935, 3938, 3942, 3943, 3947, 3951, 3955, 3955, 3955, 3959, 3399, 3399, 3399, 3836,
  /* 1630 */ 4000, 2605, 3399, 3399, 3262, 3399, 3526, 3138, 2689, 3399, 3715, 3405, 3399, 3111, 3399, 3117, 3964, 3399,
  /* 1648 */ 4020, 3972, 4015, 4772, 3399, 3777, 3978, 4827, 3982, 3399, 3722, 3758, 3399, 3057, 3399, 4874, 4839, 3967,
  /* 1666 */ 3399, 3986, 3909, 3399, 3399, 3990, 3994, 3998, 3399, 2607, 4019, 4151, 3517, 3861, 4024, 4028, 3399, 3399,
  /* 1684 */ 3281, 3399, 4072, 3399, 3399, 3399, 3847, 3846, 4038, 3399, 3181, 4382, 4044, 4048, 3399, 3755, 3764, 3399,
  /* 1702 */ 3526, 3399, 3399, 4634, 4638, 2653, 3399, 3537, 4054, 3360, 3399, 3399, 4461, 2915, 3399, 2914, 3399, 3823,
  /* 1720 */ 3823, 3399, 3663, 3667, 3399, 3424, 3219, 3399, 3433, 3399, 3399, 4679, 4065, 4081, 3399, 3399, 3399, 3875,
  /* 1738 */ 4113, 3693, 3399, 3181, 4382, 4086, 4000, 3399, 3846, 3908, 3399, 3399, 3399, 4443, 2659, 3399, 3399, 3280,
  /* 1756 */ 3399, 4380, 3399, 3399, 3305, 3310, 3606, 2914, 3399, 3399, 3336, 3399, 2967, 4106, 3399, 3399, 3340, 3399,
  /* 1774 */ 2968, 3399, 3399, 3399, 3898, 3399, 4117, 3399, 3399, 4785, 2969, 3399, 3399, 3399, 3926, 4498, 4443, 2690,
  /* 1792 */ 3399, 3399, 3400, 3400, 3399, 4765, 4294, 4121, 3399, 4697, 2989, 2989, 3399, 3399, 3876, 3399, 2962, 2691,
  /* 1810 */ 3399, 3399, 3401, 2630, 3280, 3399, 3399, 3783, 2864, 3399, 2849, 2847, 4301, 4171, 4149, 3144, 4156, 3616,
  /* 1828 */ 4160, 4164, 4168, 4175, 4177, 4181, 4185, 4189, 4190, 4190, 4194, 3399, 3399, 3399, 4034, 3399, 4291, 4449,
  /* 1846 */ 3046, 3399, 4361, 3399, 3399, 3406, 3365, 4226, 3859, 4236, 4246, 4254, 3399, 3495, 3492, 3676, 4144, 3399,
  /* 1864 */ 4261, 3160, 3399, 3399, 3399, 4069, 4273, 3399, 3399, 4145, 4315, 3399, 3399, 4626, 4859, 4450, 2605, 3866,
  /* 1882 */ 2736, 3482, 3399, 3399, 3406, 4630, 3399, 4407, 4279, 3399, 3874, 4784, 3399, 3029, 4060, 3399, 3040, 3856,
  /* 1900 */ 3399, 3050, 3185, 3185, 2617, 3399, 3399, 3185, 3399, 4285, 3399, 3399, 3407, 4005, 4289, 4289, 3399, 3399,
  /* 1918 */ 3419, 4643, 4262, 3881, 2660, 4299, 4305, 3399, 3399, 3399, 4090, 3483, 4309, 3399, 3399, 3536, 3399, 4314,
  /* 1936 */ 3399, 3399, 3890, 4321, 3890, 3161, 3399, 3887, 3399, 3155, 4230, 4280, 3399, 3399, 3540, 3399, 3900, 4327,
  /* 1954 */ 3399, 3399, 3620, 3628, 4331, 4331, 3399, 3399, 3646, 3646, 4262, 3881, 2866, 4201, 4269, 3399, 3030, 3399,
  /* 1972 */ 3399, 4337, 2747, 3888, 3399, 4343, 4231, 3399, 3399, 3399, 4118, 3399, 4228, 4232, 3399, 3399, 3659, 3399,
  /* 1990 */ 3891, 3866, 3399, 3399, 3690, 3699, 4348, 4447, 3881, 4355, 4202, 3031, 3399, 3085, 3399, 4360, 3399, 3889,
  /* 2008 */ 4365, 3312, 3399, 3399, 3713, 3717, 4371, 3399, 4479, 4350, 3084, 3399, 4100, 2746, 3703, 3399, 4698, 3702,
  /* 2026 */ 3399, 3399, 3832, 4377, 3399, 3399, 3399, 4132, 3399, 4386, 4390, 2590, 3399, 4398, 4315, 3476, 2554, 3399,
  /* 2044 */ 3498, 3399, 3086, 4447, 4405, 3399, 3399, 4411, 2589, 3399, 4423, 4430, 4434, 3083, 3399, 4263, 4373, 3399,
  /* 2062 */ 3326, 3399, 3926, 4567, 2897, 4203, 4441, 4454, 3399, 4056, 3399, 3235, 3107, 3399, 3106, 4458, 4472, 4222,
  /* 2080 */ 4710, 3329, 4712, 3974, 4477, 3096, 3095, 4473, 4710, 3329, 4713, 3485, 4712, 4711, 4473, 3094, 3118, 4483,
  /* 2098 */ 3242, 3243, 3242, 3243, 4491, 4417, 3054, 3399, 4082, 2689, 3399, 3852, 3399, 3598, 3925, 3399, 3399, 3399,
  /* 2116 */ 4151, 4745, 4833, 4503, 4509, 2837, 4515, 3733, 4519, 4523, 4527, 4534, 4530, 4537, 4541, 4544, 4544, 4546,
  /* 2134 */ 3399, 3399, 3399, 4197, 4498, 3925, 3399, 4550, 4562, 3399, 4001, 4571, 4582, 4351, 4575, 4586, 3399, 4598,
  /* 2152 */ 4310, 3760, 4607, 3399, 3399, 3399, 4227, 3399, 4511, 4499, 3399, 4121, 3375, 3374, 3150, 4449, 2848, 3448,
  /* 2170 */ 3399, 4401, 4558, 2829, 4612, 3424, 4119, 4752, 3180, 3399, 4618, 3399, 4624, 4134, 3113, 2976, 3399, 3399,
  /* 2188 */ 3399, 4564, 4706, 4706, 3399, 3399, 3723, 3759, 3399, 4696, 3399, 3393, 3048, 2843, 3399, 4647, 4704, 3399,
  /* 2206 */ 3399, 3399, 4680, 3330, 4719, 3455, 4001, 4654, 4706, 3137, 3399, 4138, 2849, 3399, 3867, 4112, 4786, 3399,
  /* 2224 */ 4696, 3825, 4556, 2840, 2886, 4077, 4678, 2862, 3399, 4138, 3399, 3399, 4108, 4580, 3457, 4134, 3135, 3887,
  /* 2242 */ 3399, 4684, 4665, 3399, 4196, 3399, 3399, 4293, 3399, 4707, 3340, 3399, 3399, 3745, 3399, 3399, 4689, 4695,
  /* 2260 */ 4400, 4557, 2842, 4702, 3399, 4209, 3452, 3399, 3271, 3399, 3399, 3406, 3353, 4133, 4724, 3399, 3399, 3775,
  /* 2278 */ 3399, 4639, 3399, 3399, 3399, 4728, 3180, 3399, 3399, 4552, 3447, 4127, 4242, 4733, 2988, 3399, 3399, 3399,
  /* 2296 */ 4891, 3399, 4739, 3399, 3399, 3819, 3180, 3399, 4551, 4743, 4127, 4075, 4119, 3399, 3399, 3851, 3399, 3380,
  /* 2314 */ 4580, 3399, 3399, 3926, 4674, 3465, 3399, 3336, 3399, 4228, 4388, 3399, 3910, 3899, 3399, 3751, 4658, 4592,
  /* 2332 */ 3399, 3399, 3399, 4565, 4749, 4120, 3399, 3399, 4106, 3608, 3028, 3399, 3399, 3464, 4128, 3399, 3399, 3399,
  /* 2350 */ 4107, 4064, 3399, 4757, 3399, 4756, 4196, 3087, 2573, 2692, 4763, 4761, 3319, 4770, 4776, 4791, 4801, 4795,
  /* 2368 */ 4799, 4805, 4809, 4811, 4813, 4817, 3399, 3399, 4122, 3399, 3651, 4825, 3399, 3399, 4393, 3399, 3898, 3399,
  /* 2386 */ 3399, 3399, 4436, 4729, 3339, 3399, 3399, 2896, 3399, 4831, 2903, 4720, 4837, 3399, 3399, 4870, 2829, 2829,
  /* 2404 */ 3399, 4229, 4389, 3399, 3920, 2894, 2901, 2903, 3399, 3399, 3399, 4437, 3765, 4843, 4851, 3399, 3399, 4485,
  /* 2422 */ 3399, 4564, 3399, 3399, 3399, 4578, 3399, 4197, 3399, 3399, 3399, 4590, 3399, 3399, 4857, 3927, 4863, 4869,
  /* 2440 */ 2829, 2829, 3399, 4250, 3399, 3399, 3406, 4143, 3399, 4566, 2830, 4875, 3399, 4281, 4719, 3399, 4120, 3399,
  /* 2458 */ 3399, 2999, 3399, 4220, 3399, 3399, 3399, 4685, 4666, 4221, 3399, 3399, 3399, 4706, 4435, 4885, 3399, 3399,
  /* 2476 */ 3399, 4708, 3399, 3399, 4030, 2726, 3399, 3399, 3399, 4847, 3399, 5670, 5210, 5335, 5506, 5215, 4902, 5225,
  /* 2494 */ 4916, 4928, 5175, 5033, 5174, 5176, 5177, 4950, 4948, 5175, 4950, 4947, 4950, 4950, 4950, 4950, 5173, 5177,
  /* 2512 */ 5173, 4953, 4949, 4951, 4950, 4950, 5002, 5003, 4955, 4957, 4971, 4971, 4968, 4959, 4958, 4960, 4961, 4962,
  /* 2530 */ 4971, 4970, 4964, 4964, 4964, 4965, 4966, 5352, 4973, 4976, 4974, 4978, 4981, 4979, 4983, 4984, 4983, 4983,
  /* 2548 */ 4986, 4987, 5057, 5047, 5210, 5399, 5215, 5215, 5021, 5010, 5172, 5218, 5062, 5215, 4903, 5178, 5215, 5215,
  /* 2566 */ 5231, 5194, 5195, 5215, 5215, 4901, 5821, 4942, 5215, 5215, 5215, 4904, 5215, 5216, 5040, 5353, 5018, 5070,
  /* 2584 */ 5070, 5071, 5215, 4905, 4989, 5215, 4907, 5187, 5098, 5215, 5071, 4905, 5040, 5040, 5070, 5070, 5070, 5070,
  /* 2602 */ 5040, 5040, 5028, 5215, 5215, 5215, 4907, 5215, 5215, 5011, 5012, 5215, 5215, 5215, 4935, 4996, 4996, 5215,
  /* 2620 */ 5215, 4903, 5205, 5668, 5038, 5070, 5070, 5039, 5040, 5040, 5215, 5215, 5818, 5012, 5666, 5037, 5070, 5070,
  /* 2638 */ 5048, 5062, 5050, 5037, 5037, 5070, 5215, 5040, 5040, 5040, 5040, 5041, 5050, 5815, 5062, 4908, 5215, 5215,
  /* 2656 */ 5215, 4998, 5215, 5215, 5215, 4999, 5215, 4921, 4992, 5215, 5102, 5040, 5040, 5814, 5070, 5070, 5669, 5020,
  /* 2674 */ 5050, 5050, 5036, 5037, 5038, 5070, 5070, 5062, 5062, 4908, 5215, 4909, 5135, 5464, 5485, 5215, 5215, 5215,
  /* 2692 */ 5361, 5215, 5215, 4942, 5069, 5070, 5071, 5215, 5102, 5040, 4996, 4992, 5040, 5040, 5040, 5069, 5070, 5070,
  /* 2710 */ 5070, 5215, 4996, 5102, 5040, 5040, 5040, 4992, 5045, 5102, 5040, 5041, 5036, 5038, 5039, 5071, 5215, 5215,
  /* 2728 */ 4903, 5215, 5215, 5069, 5070, 5071, 5102, 5009, 5215, 5215, 5188, 5215, 5069, 5039, 5039, 5039, 5069, 5071,
  /* 2746 */ 5215, 4907, 5187, 5215, 5507, 5505, 5218, 4907, 4920, 5753, 5065, 5085, 5109, 4917, 5078, 5062, 5062, 5080,
  /* 2764 */ 5084, 5062, 5083, 5087, 5089, 5108, 5108, 5091, 4918, 4919, 5062, 5062, 5062, 5062, 5065, 5063, 5153, 5093,
  /* 2782 */ 5062, 5062, 5095, 5062, 5062, 5097, 5064, 5101, 5105, 5062, 5107, 5755, 5754, 5081, 5111, 5062, 5113, 5115,
  /* 2800 */ 5117, 5118, 5119, 5120, 5121, 5123, 5143, 5146, 5150, 5148, 5147, 5144, 5147, 5124, 5124, 5120, 5125, 5215,
  /* 2818 */ 5752, 5062, 5066, 5152, 5067, 5155, 5157, 5159, 5158, 5148, 5161, 5215, 4909, 5215, 5215, 5215, 5215, 5215,
  /* 2836 */ 5756, 5215, 4909, 5506, 5492, 5215, 5215, 4910, 5215, 5215, 5167, 5215, 5215, 5215, 5178, 5215, 5215, 5215,
  /* 2854 */ 5179, 5823, 5215, 5215, 5215, 4942, 5045, 5186, 5673, 5215, 5610, 5215, 5215, 5361, 5218, 4903, 5215, 5299,
  /* 2872 */ 5166, 5215, 4999, 5045, 5202, 5215, 5509, 5200, 5215, 4932, 5215, 5167, 5218, 5228, 5215, 5215, 4909, 5822,
  /* 2890 */ 5195, 5354, 5194, 5223, 5194, 5667, 5215, 5215, 4911, 5215, 5215, 5369, 5616, 5215, 5215, 4912, 5215, 5354,
  /* 2908 */ 5221, 5215, 5812, 5215, 5215, 5813, 5492, 5215, 5215, 5215, 5571, 5132, 5234, 5239, 5239, 5235, 5236, 5237,
  /* 2926 */ 5242, 5241, 5244, 5245, 5245, 5247, 5251, 5245, 5245, 5248, 5245, 5245, 5251, 5250, 5250, 5253, 5255, 5255,
  /* 2944 */ 5255, 5255, 5256, 5258, 5258, 5259, 5258, 5261, 5262, 5215, 5309, 5615, 5215, 4910, 5671, 5622, 5215, 5221,
  /* 2962 */ 5215, 5215, 4941, 5215, 5469, 5215, 5215, 5215, 4997, 5192, 5215, 5759, 5626, 5347, 5215, 4913, 5187, 5215,
  /* 2980 */ 4931, 4942, 4930, 5494, 5494, 5215, 5398, 5267, 5215, 5215, 5215, 5010, 5215, 5397, 5346, 5215, 5215, 4945,
  /* 2998 */ 4902, 5215, 5266, 5321, 5212, 4941, 5331, 5212, 5215, 4935, 5215, 4998, 4998, 5215, 5215, 5190, 5361, 5215,
  /* 3016 */ 5330, 5336, 5215, 4935, 5215, 5102, 5033, 5215, 5215, 4908, 5215, 5747, 5199, 5215, 5215, 5199, 5215, 5215,
  /* 3034 */ 5215, 5011, 5619, 5135, 5269, 5215, 4935, 5215, 5215, 4992, 5215, 5264, 5215, 5215, 5215, 5009, 5215, 5215,
  /* 3052 */ 5215, 4996, 4996, 4996, 4992, 5215, 5215, 5215, 4906, 5623, 5347, 5215, 5215, 4945, 5167, 5215, 5744, 5215,
  /* 3070 */ 5163, 5624, 5399, 5215, 5215, 4990, 5301, 5162, 5137, 5313, 5673, 5357, 5747, 5215, 5215, 5215, 5013, 4932,
  /* 3088 */ 5215, 5215, 5215, 5040, 5215, 5747, 5215, 5215, 4990, 5780, 5021, 5215, 5215, 5610, 5416, 5506, 5393, 5347,
  /* 3106 */ 5215, 5215, 4995, 5165, 5021, 5215, 5575, 5215, 5215, 5015, 5354, 4990, 5021, 5215, 5215, 4991, 5215, 5494,
  /* 3124 */ 5215, 5215, 5045, 5215, 4908, 5215, 5610, 5378, 5215, 4990, 5199, 5215, 4990, 5770, 5215, 5215, 5187, 5555,
  /* 3142 */ 5215, 5407, 5215, 5407, 5215, 5464, 5215, 5610, 5622, 5215, 5215, 5215, 5171, 5215, 5273, 5777, 5215, 5215,
  /* 3160 */ 5010, 5215, 5215, 5215, 5103, 5759, 5759, 5215, 5215, 5055, 5196, 5215, 5215, 5102, 5210, 5215, 4999, 5361,
  /* 3178 */ 5276, 5566, 5673, 5215, 5215, 5215, 5045, 4996, 4996, 4996, 4996, 5279, 4929, 5281, 5283, 5283, 5285, 5287,
  /* 3196 */ 5289, 5290, 5290, 5290, 5290, 5290, 5290, 5291, 5290, 5291, 5291, 5295, 5295, 5292, 5293, 5293, 5293, 5293,
  /* 3214 */ 5297, 5298, 5215, 5215, 5102, 5215, 5215, 5215, 5166, 5215, 5275, 5215, 5215, 5102, 5425, 5215, 5325, 5215,
  /* 3232 */ 5215, 5215, 5180, 5317, 5824, 4936, 5320, 5215, 5324, 5680, 5215, 4991, 5166, 5215, 5229, 5679, 5215, 5348,
  /* 3250 */ 5682, 5681, 5215, 5215, 5215, 5181, 5181, 5328, 5215, 5215, 5128, 5136, 5327, 5329, 5215, 5215, 5128, 5210,
  /* 3268 */ 5187, 5215, 5356, 5215, 5215, 5215, 5191, 4945, 5339, 5395, 5099, 5184, 5215, 5215, 5215, 5192, 5215, 5824,
  /* 3286 */ 4937, 5215, 5338, 5215, 5495, 5609, 5215, 4992, 5215, 5215, 5371, 5030, 5360, 5302, 5614, 5183, 5405, 5409,
  /* 3304 */ 5673, 5215, 5341, 5049, 5055, 5345, 5345, 5395, 5187, 5215, 5102, 4941, 5215, 5671, 5215, 5350, 5215, 5006,
  /* 3322 */ 5073, 5670, 5621, 5383, 5215, 4993, 5501, 5335, 5215, 5215, 5215, 5765, 5315, 5215, 5215, 5215, 5196, 5215,
  /* 3340 */ 5215, 5215, 4944, 5215, 5215, 5215, 5825, 5215, 4999, 4944, 5215, 5215, 4902, 5366, 4943, 5198, 5303, 5614,
  /* 3358 */ 5465, 5187, 5215, 4999, 5215, 5215, 5216, 5499, 5820, 5390, 5566, 5360, 5302, 5304, 5206, 5383, 5215, 5215,
  /* 3376 */ 5215, 5172, 5215, 5409, 5215, 5215, 5215, 5204, 5215, 5784, 5215, 5215, 5215, 5194, 5216, 5053, 5377, 5396,
  /* 3394 */ 5759, 5228, 5135, 5614, 5465, 5215, 5215, 5215, 5215, 4903, 4904, 5332, 5215, 5215, 5215, 5216, 4934, 5216,
  /* 3412 */ 5053, 5382, 5215, 5009, 5215, 5361, 5021, 5215, 5215, 5215, 5060, 4944, 5215, 5215, 5215, 5219, 5215, 5215,
  /* 3430 */ 5758, 4903, 5215, 4904, 5215, 5215, 5215, 5169, 4908, 5216, 5385, 5198, 5613, 5408, 5215, 5215, 5748, 5215,
  /* 3448 */ 5215, 5215, 5225, 5215, 5302, 5614, 5009, 5215, 5010, 5604, 5354, 5215, 4944, 5342, 5055, 5345, 5215, 5010,
  /* 3466 */ 5758, 5622, 5215, 5215, 5215, 5758, 4904, 5385, 5612, 5614, 5009, 5058, 4903, 5076, 5216, 5202, 4941, 5215,
  /* 3484 */ 5215, 5215, 5228, 5215, 5215, 5401, 5404, 5009, 5215, 5022, 5024, 5215, 5023, 5215, 5215, 5407, 5199, 5215,
  /* 3502 */ 5129, 5412, 5215, 5215, 5172, 5364, 5215, 5215, 5216, 5129, 5425, 5215, 5055, 5215, 5196, 5215, 5025, 5215,
  /* 3520 */ 5215, 5230, 5215, 5215, 5453, 5422, 5215, 5215, 5215, 5230, 5005, 5230, 4935, 5215, 5102, 5781, 5215, 5215,
  /* 3538 */ 5215, 5231, 5215, 5215, 5215, 5275, 4992, 5215, 5049, 5414, 5395, 5215, 5215, 5215, 5305, 5424, 5215, 5215,
  /* 3556 */ 5427, 5611, 5215, 5215, 5044, 5429, 5043, 5044, 5430, 5432, 5436, 5436, 5433, 5434, 5438, 5443, 5443, 5442,
  /* 3574 */ 5441, 5443, 5443, 5443, 5444, 5443, 5443, 5443, 5445, 5440, 5440, 5447, 5447, 5447, 5447, 5447, 5448, 5449,
  /* 3592 */ 5215, 5045, 5102, 5040, 5069, 5070, 5215, 5215, 5215, 4938, 5522, 4992, 5215, 4908, 5215, 5045, 5215, 5215,
  /* 3610 */ 5215, 5299, 5215, 5166, 5215, 5456, 5215, 5215, 5199, 5622, 5509, 5461, 5215, 5215, 5214, 5215, 5215, 5463,
  /* 3628 */ 5215, 5509, 5215, 5215, 5215, 5341, 5467, 5215, 5215, 5215, 5354, 5215, 5468, 5215, 5215, 5216, 5042, 5514,
  /* 3646 */ 5215, 5215, 5215, 5355, 5515, 5215, 5215, 5215, 5357, 5215, 5299, 5215, 5451, 5215, 5215, 5196, 5781, 5215,
  /* 3664 */ 5509, 5351, 5131, 5525, 5215, 5215, 5215, 5371, 4943, 5198, 5215, 5646, 5215, 5215, 5216, 5595, 5484, 5215,
  /* 3682 */ 5516, 5215, 5075, 5506, 5215, 4907, 5410, 5187, 5215, 5341, 5603, 5487, 5480, 5215, 5215, 5322, 5215, 5209,
  /* 3700 */ 5139, 5212, 5215, 5098, 5102, 5215, 5215, 4997, 5131, 5620, 5211, 5215, 5683, 5215, 5215, 5216, 5751, 5051,
  /* 3718 */ 5056, 5206, 5396, 5497, 5215, 5215, 5215, 5402, 5210, 5140, 5218, 4941, 5215, 5128, 5414, 5009, 5215, 5215,
  /* 3736 */ 5674, 4902, 5215, 5215, 5215, 5418, 5009, 5215, 5215, 5509, 5456, 5274, 5187, 5215, 5609, 5215, 5215, 5216,
  /* 3754 */ 5763, 5341, 4939, 5820, 5210, 5493, 5673, 5215, 5215, 4922, 5768, 5673, 5215, 5215, 5010, 5031, 5168, 5767,
  /* 3772 */ 5099, 5215, 5608, 5215, 5215, 5217, 5215, 5677, 5215, 4999, 5215, 5167, 5215, 5140, 5166, 5205, 5215, 5215,
  /* 3790 */ 5215, 5453, 5021, 5215, 5215, 5215, 5503, 5274, 5187, 5215, 5519, 5566, 5215, 5128, 5758, 5777, 5673, 5499,
  /* 3808 */ 5820, 5210, 5224, 5099, 4908, 4909, 5671, 5622, 5509, 5504, 5187, 5215, 5129, 5758, 5271, 5509, 5566, 5215,
  /* 3826 */ 5215, 5215, 5485, 5215, 5390, 5566, 5215, 5215, 5218, 5343, 5499, 5766, 5224, 5187, 5045, 4907, 5215, 5377,
  /* 3844 */ 5215, 5566, 5215, 5215, 5218, 5351, 5488, 5215, 5500, 5566, 5215, 5215, 4908, 5671, 5396, 5215, 5133, 5215,
  /* 3862 */ 5215, 5396, 5492, 5522, 5187, 5215, 5215, 5215, 5102, 5040, 5215, 5396, 5215, 5215, 5215, 5415, 5215, 5215,
  /* 3880 */ 5453, 5215, 5215, 5215, 5492, 5215, 5569, 5569, 5215, 5215, 5215, 5098, 5215, 5215, 4907, 5759, 5178, 5215,
  /* 3898 */ 5230, 5215, 5215, 5215, 5507, 5343, 5215, 5231, 5215, 5231, 5488, 5505, 5215, 5215, 5215, 5508, 5029, 5299,
  /* 3916 */ 5141, 5524, 5419, 5021, 5215, 5215, 5222, 5195, 5619, 5506, 5215, 5215, 5215, 5509, 4910, 5230, 5230, 5528,
  /* 3934 */ 5527, 5531, 5054, 5533, 5533, 5535, 5537, 5539, 5540, 5540, 5540, 5540, 5544, 5540, 5540, 5543, 5541, 5546,
  /* 3952 */ 5548, 5548, 5550, 5551, 5551, 5551, 5551, 5552, 5215, 5215, 5215, 5512, 5215, 5557, 5208, 5678, 5215, 5215,
  /* 3970 */ 5215, 5553, 5380, 5673, 5215, 5193, 5407, 5215, 5568, 5215, 5216, 5571, 5577, 5215, 5215, 5579, 5215, 5507,
  /* 3988 */ 5558, 5560, 5045, 5215, 5215, 5569, 4903, 5228, 5299, 5215, 5393, 5166, 5406, 5215, 5215, 5215, 5516, 5208,
  /* 4006 */ 5099, 5215, 5215, 5215, 5193, 5354, 5208, 5673, 5215, 5127, 5564, 5215, 5564, 5016, 5215, 5215, 5215, 5562,
  /* 4024 */ 5371, 4934, 5386, 5388, 5277, 5673, 5215, 5215, 5232, 4932, 5215, 5216, 5584, 5359, 5488, 5506, 5215, 5215,
  /* 4042 */ 5311, 5215, 5229, 5140, 5135, 5334, 5474, 5215, 5215, 5215, 5569, 5215, 5215, 5586, 5215, 5215, 5315, 5673,
  /* 4060 */ 5126, 5215, 5215, 5571, 5386, 5593, 5187, 5215, 5215, 5215, 5218, 5014, 5387, 5479, 5099, 5215, 5135, 5492,
  /* 4078 */ 5215, 4910, 5215, 5277, 5215, 5215, 5215, 5586, 5229, 5140, 5619, 5166, 4942, 5487, 5506, 5215, 5135, 5671,
  /* 4096 */ 5128, 5229, 5140, 5610, 5215, 5164, 5215, 5215, 5482, 5215, 5192, 5215, 5215, 5215, 5588, 5204, 5529, 5215,
  /* 4114 */ 5215, 5215, 5590, 5361, 5215, 5215, 5215, 5610, 5215, 5215, 5215, 4989, 5592, 5215, 5215, 5215, 5619, 5215,
  /* 4132 */ 5191, 5215, 5215, 5215, 5625, 5215, 5172, 5215, 5215, 5215, 5646, 5595, 5389, 5215, 5215, 5215, 5659, 5599,
  /* 4150 */ 5673, 5215, 5672, 5215, 5215, 4933, 5379, 5215, 5215, 5207, 5215, 5306, 5308, 5601, 5307, 5308, 5602, 5606,
  /* 4168 */ 5628, 5628, 5607, 5299, 4999, 5215, 5597, 5306, 5634, 5634, 5634, 5632, 5631, 5634, 5634, 5633, 5633, 5635,
  /* 4186 */ 5631, 5630, 5630, 5637, 5639, 5639, 5639, 5639, 5640, 5641, 5215, 5215, 5371, 5342, 5215, 5225, 5673, 5215,
  /* 4204 */ 5407, 5215, 5215, 5215, 5491, 5215, 5215, 5371, 5360, 5613, 5215, 5643, 5134, 5215, 5167, 4935, 5215, 5215,
  /* 4222 */ 5215, 5229, 5215, 4998, 5648, 5215, 5215, 5215, 5665, 4995, 5130, 5164, 5663, 5215, 5650, 5215, 5572, 5215,
  /* 4240 */ 5179, 5215, 5215, 5135, 5215, 5009, 5507, 5215, 5188, 5362, 5215, 5507, 5655, 5657, 5215, 5654, 5656, 5215,
  /* 4258 */ 5182, 5304, 5420, 5215, 5622, 5222, 5215, 5215, 5098, 5215, 5407, 5215, 5580, 5199, 5215, 5215, 5367, 5215,
  /* 4276 */ 5215, 5455, 5459, 5375, 5663, 5215, 5215, 5215, 5727, 5665, 5374, 5617, 5396, 5215, 5685, 5215, 5215, 5464,
  /* 4294 */ 5215, 5215, 5215, 5140, 5218, 5687, 5672, 5215, 5215, 5464, 5492, 5021, 5215, 5506, 5199, 5368, 5215, 5215,
  /* 4312 */ 5215, 5740, 5659, 5354, 5215, 5215, 5215, 5671, 4945, 5507, 5759, 5215, 5215, 5471, 5215, 5046, 5757, 5617,
  /* 4330 */ 5396, 5215, 5689, 5215, 5215, 5473, 5215, 5228, 5052, 5215, 5215, 5476, 5215, 5103, 5215, 5215, 5215, 5747,
  /* 4348 */ 5341, 5033, 5140, 5215, 5215, 5215, 5731, 4999, 5218, 4903, 5225, 5673, 5215, 5216, 5164, 5215, 5215, 5507,
  /* 4366 */ 5215, 5215, 4907, 5062, 4908, 4907, 5187, 4907, 5187, 4998, 5215, 5046, 5757, 5617, 5215, 5187, 5215, 5215,
  /* 4384 */ 5187, 4904, 5372, 4995, 5130, 5164, 5618, 5215, 5215, 5215, 5759, 5520, 5215, 5215, 5509, 5195, 5215, 5215,
  /* 4402 */ 5485, 5619, 5215, 5457, 5618, 5215, 5215, 5507, 5373, 5691, 5820, 5617, 5215, 5196, 5195, 5215, 4992, 4996,
  /* 4420 */ 4996, 5008, 5215, 5693, 5215, 5222, 5215, 5202, 4942, 4935, 5215, 5492, 4999, 4903, 5215, 5301, 5215, 5215,
  /* 4438 */ 5215, 5059, 5604, 5228, 5231, 5215, 5215, 5509, 4941, 5215, 5215, 5222, 5215, 5215, 5215, 5661, 5215, 5354,
  /* 4456 */ 5062, 4998, 5021, 4907, 4908, 5215, 5203, 5187, 5215, 5135, 5494, 5215, 4938, 5187, 5215, 5215, 5193, 5215,
  /* 4474 */ 5407, 5215, 5228, 5228, 4998, 5215, 5215, 5509, 5033, 5335, 5215, 5215, 5229, 5215, 5215, 5509, 5055, 4990,
  /* 4492 */ 4992, 4990, 4992, 4907, 5215, 5377, 5061, 4940, 5197, 5300, 5506, 5333, 5228, 5135, 5215, 5392, 5215, 5215,
  /* 4510 */ 5695, 5215, 5215, 5509, 5061, 5215, 5750, 5697, 5580, 5674, 5676, 5675, 5699, 5674, 5701, 5701, 5701, 5703,
  /* 4528 */ 5705, 5706, 5707, 5709, 5712, 5710, 5709, 5709, 5709, 5709, 5714, 5716, 5718, 5722, 5722, 5719, 5720, 5720,
  /* 4546 */ 5720, 5720, 5724, 5725, 5225, 5215, 5215, 5215, 5783, 5140, 5619, 5215, 5229, 5671, 5492, 5215, 5760, 5729,
  /* 4564 */ 5215, 5215, 5509, 5229, 5215, 5215, 5215, 5732, 5673, 5215, 5516, 5734, 5516, 5736, 5215, 5204, 5394, 5215,
  /* 4582 */ 5215, 5215, 5517, 5318, 4914, 5738, 5215, 5677, 4922, 4924, 4926, 5215, 5215, 5215, 5509, 5274, 4923, 4925,
  /* 4600 */ 5673, 5215, 5213, 5215, 5215, 5216, 5490, 5741, 5215, 5215, 5215, 5824, 5215, 5822, 5215, 5215, 5509, 5478,
  /* 4618 */ 5025, 5785, 5215, 5215, 5509, 5500, 5215, 5746, 5215, 5215, 5510, 5215, 5763, 5053, 5001, 5138, 5215, 5762,
  /* 4636 */ 5052, 5000, 5137, 5621, 5673, 5215, 5215, 5816, 5358, 5300, 5506, 5215, 5218, 5673, 5215, 5215, 5671, 5392,
  /* 4654 */ 4944, 5215, 5215, 5312, 5817, 4997, 5033, 5620, 5215, 5762, 5052, 5819, 5033, 5620, 4926, 5215, 5772, 5209,
  /* 4672 */ 5621, 5673, 5774, 5358, 5300, 5506, 5167, 5215, 5215, 5218, 4997, 5593, 5215, 5216, 5059, 5052, 5819, 5060,
  /* 4690 */ 5776, 5215, 5215, 5511, 5513, 5215, 5565, 5215, 5215, 5215, 5218, 4995, 5219, 5215, 5215, 5166, 5215, 5215,
  /* 4708 */ 5215, 4990, 5215, 5215, 5215, 4991, 5335, 5215, 5407, 5218, 5779, 5034, 5215, 5215, 5215, 5807, 5215, 5215,
  /* 4726 */ 5770, 5187, 5059, 5203, 5032, 5209, 5621, 4909, 5215, 4921, 5215, 5215, 4902, 5218, 5203, 5758, 5622, 5140,
  /* 4744 */ 5215, 5215, 5225, 5510, 5215, 5619, 5135, 5009, 5215, 5215, 5743, 5604, 5215, 5215, 5758, 5215, 5215, 4942,
  /* 4762 */ 5215, 5215, 4942, 5215, 5215, 4902, 5215, 4935, 5787, 5072, 5215, 5215, 5557, 5026, 5216, 5230, 5215, 4932,
  /* 4780 */ 5215, 5193, 5165, 5395, 5749, 5215, 5215, 5215, 4992, 5215, 5062, 4942, 4993, 4994, 4994, 5793, 5794, 5792,
  /* 4798 */ 5793, 5794, 5795, 5793, 5793, 5793, 5793, 5789, 5791, 5797, 5791, 5800, 5800, 5800, 5799, 5800, 5800, 5802,
  /* 4816 */ 5804, 5805, 5215, 5215, 5215, 5565, 5187, 5565, 5187, 4992, 5199, 5215, 5215, 5574, 5215, 5807, 5215, 5215,
  /* 4834 */ 5215, 5580, 5215, 5215, 5809, 5215, 5215, 5582, 5559, 5215, 5342, 5215, 5215, 5619, 5619, 5493, 5215, 5215,
  /* 4852 */ 5227, 5215, 5215, 5622, 5215, 4905, 5215, 5215, 5215, 5643, 5187, 5215, 5226, 5215, 5215, 5645, 5215, 5215,
  /* 4870 */ 5811, 5215, 5215, 5215, 5509, 4910, 5215, 5215, 5215, 4921, 5215, 5215, 5215, 5651, 5215, 5215, 5371, 5215,
  /* 4888 */ 5215, 5652, 5215, 5216, 5215, 5215, 5215, 5671, 5216, 5670, 5215, 5215, 4904, 1073872896, 131072, 0, 8, 0,
  /* 4906 */ 12, 0, 16, 0, 32, 0, 36, 0, 38, 161792, 262146, 262160, 524304, 1048592, 16, 2, 0, 135, 323840, 3670016,
  /* 4926 */ 33554432, 0x80000000, 268566528, 131072, 257, 4740, 256, 0, 160, 1024, 0, 172, 0, 192, 256, 512, 0, 256,
  /* 4944 */ 2048, 0, 257, 262174, 262160, 33816576, 262144, 262144, 8768, 268444864, 10560, 278530, 537149440, 278530,
  /* 4958 */ 772014080, -1375469568, 772014080, 235143168, 168034304, -1375469568, 168034304, 168034304, 235143168,
  /* 4967 */ 235143168, 168034304, 772030464, 168034304, 772014080, 772014080, 163872, 294944, -2147188704, 163840,
  /* 4977 */ 2392096, 294944, 294944, -2147188674, 537165856, -2147188704, -2145091522, -2145091522, -2111537090,
  /* 4986 */ -2145091522, 772046880, -1910210498, 14, 0, 2048, 16384, 0, 3072, 3072, 16384, 16384, 32768, 0, 4096,
  /* 5001 */ 57344, 262144, 278528, 278544, 8256, 0, 4352, 16384, 134217728, 0, 8192, 64, 64, 128, 2048, 24576,
  /* 5017 */ 0x80000000, 2129920, 2129952, 65536, 16777216, 0, 19504, 631242752, 0, 24576, -1610612736, 12, 8, 64, 256,
  /* 5032 */ 16384, 262144, 524288, 0x80000000, 32, 2097184, 2097184, 2129920, 32768, 32768, 32, 1024, 131328, 0, 16384,
  /* 5047 */ 65536, 65536, 16, 32, 32, 128, 256, 4096, 128, 512, 4096, 4096, 2, 4, 8, 16, 16, 17, 16, 20, 21, 53, 32768,
  /* 5070 */ 2129920, 2129920, 0, 17152, 17152, 1024, 268435456, 0x80000000, 1048592, 268435472, 131088, 16, 524560, 17,
  /* 5084 */ 20, 48, 80, 24, 304, 48, 1048848, 1572880, 524304, 48, 524304, 28, 21, 28, 16, 536870912, 0x80000000, 28,
  /* 5102 */ 0, 32768, 512, 2, 304, 165675008, 272, 272, 65552, 1048592, 272, 48, 84, 20, 372, -165649452, -165649452,
  /* 5119 */ -165649451, -701430800, -701430800, -164559888, -164535312, -164535308, -701430800, 0, 40960, 0, 49152,
  /* 5130 */ 65536, 131072, 524288, 16, 538968064, 0, 65536, 262144, 1572864, 2097152, 4194304, 0, 65600, -164273168,
  /* 5144 */ -164535308, -700906508, -164273164, -164535308, -164535308, -164273164, -700906512, -701430800, 112, 20,
  /* 5154 */ 304, 140511253, 140515349, 140539925, 140540573, 140540573, 140540605, -26141771, 0, 114688, 262144,
  /* 5165 */ 2097152, 8388608, 0, 131072, 1048576, 65600, 163577856, 0, 262144, 262160, 537133056, -2147221504,
  /* 5177 */ -2147221504, 262144, 0, 265, 0, 323, 129024, 2097152, 0x80000000, 100663296, 536870912, 0, 294912,
  /* 5190 */ 138412032, 0, 393216, 0, 524288, 524288, 0, 1024, 4096, 8192, 0, 1280, 4, 128, 8192, 262144, 16777216,
  /* 5207 */ 33554432, 8192, 524288, 1048576, 4194304, -1207959552, 0, -126877696, 0, 0, 1, 0, 2, 0x80000000, 2629632,
  /* 5222 */ 0, 2097152, 134217728, 268435456, 0, 48, 0, 64, 0, 128, 0, 132, 1048576, 941162496, 805371937, 805371937,
  /* 5238 */ 847314977, 941162496, 941162496, 2031683649, 957941825, 957941827, 957941825, 957941857, 957941857,
  /* 5247 */ 957941859, 960047171, 957941857, 960038977, 960038977, 957941857, 960038977, 960174145, -1199718400,
  /* 5256 */ -1199718400, -1199717854, -1199717846, -1199717846, -1199717782, -1199717846, -1182939039, -1182938517,
  /* 5264 */ 65536, 805306368, 3872768, 0, 3737600, 1572864, 939524096, 4194304, 939524096, 49152, 1048576, 268435456,
  /* 5276 */ 4608, 16777216, 536870912, 536871168, 67109121, 525312, 67174657, -1507782399, -1507782399, -2145386488,
  /* 5286 */ -1876951032, -2145386488, -2145386456, -2145381716, -1507782391, -1507782391, -432729847, -1344145085,
  /* 5294 */ -1344145085, -432729847, -432729847, -1344145077, -1344145077, 0, 4194304, 16777216, 8192, 114688, 2097152,
  /* 5305 */ 12582912, 0, 524292, 262145, 0, 526336, 525312, 0, 6291456, 939524096, 8, 2097152, -1879048192, 0, 6815744,
  /* 5320 */ 2101760, 0, 8241152, -1207959552, 265, 2166784, -1509949440, 323, 14809088, -1358954496, 0, 8243200,
  /* 5332 */ 16777216, 67108864, 1048576, 8388608, 16777216, -1207959552, 265, 69632, 2097152, 1, 4, 32, 3072, 4096,
  /* 5346 */ 16777216, 939524096, 0, 3477504, 1, 256, 32768, 32800, 2097152, 0, 331, 0, 512, 1024, 2048, 4096, 0, 528,
  /* 5364 */ 1048576, 1073741824, 2, 64, 384, 0, 17303552, 1, 2, 32, 19456, 458752, 2097152, 65536, 33554432,
  /* 5379 */ 1073741824, 8192, 655360, 65536, 67108864, 536870912, 2, 2048, 57344, 393216, 524288, 4194304, 134217728,
  /* 5392 */ 1, 65536, 1048576, 33554432, 67108864, 0, 1640448, 939524096, 0x80000000, 1, 49152, 262144, 65536,
  /* 5405 */ 12582912, 50331648, 0, 16777216, 201326592, 536870912, 16, 12582912, 134217728, 65536, 8388608, 33554432,
  /* 5417 */ 134217728, 32768, 8388608, 50331648, 201326592, 32768, 134217728, 514, 8388608, 134217728, 16384,
  /* 5428 */ 1073741824, 131328, 131328, 17039368, 131328, 807043332, 806912004, 806912004, 807043332, 807043332,
  /* 5438 */ 806928388, 806929412, 1880795910, 1880795396, 1880795396, 1880785156, 1880785156, 1889173780, 1880785156,
  /* 5447 */ -1199914555, -1199914555, -126172731, -126172731, 2, 512, 8, 262144, 4, 256, 131072, 2097152, 688128,
  /* 5460 */ 806354944, 557056, 806354944, 17408, 0, 33554432, 201326592, 688128, 1880096768, 0, 41943040, 20,
  /* 5472 */ 1888485376, 10496, 0, 50331648, 6, 11008, 32768, 524288, 16777216, 1073741824, 20, 1887436800, 10240, 0,
  /* 5486 */ 67108864, 32768, 131072, 16777216, 4, 448, 0, 134217728, 805306368, 0, 3407872, 1024, 1073741824, 4, 192,
  /* 5501 */ 16384, 2097152, 4, 131072, 268435456, 1073741824, 0, 3, 0, 4, 0, 5, 16832, 688128, -1200619520, 0, 6,
  /* 5518 */ 0x80000000, 4, 1048576, 536870912, 16384, 268435456, 32768, 1048576, 805306368, 536871040, 128, 131072,
  /* 5530 */ 1073741824, 1075839492, 128, -1610079071, -1610079071, -2146819039, -2146950111, -2146917343, -1073208287,
  /* 5539 */ -1073077215, -1610062687, -1610062687, -1542953823, -1559731039, -1593285471, -1610062687, -1610062671,
  /* 5547 */ -1542953823, -1408736095, -1542953823, -1408736095, -1592857437, -1592857437, 0, 239075328, 516, 2097152,
  /* 5557 */ 1, 1184, 59392, 17694720, -1610612736, 1, 1056, -1073741824, 0, 268435456, 536870912, 17301504, 0,
  /* 5570 */ 536870912, 24576, 0, 538968064, 50855936, 0, 939524096, 67633152, 1200, -1476395008, 0, 1073741824, 3,
  /* 5583 */ 1184, 2, 160, 4, 512, 2, 128, 2, 256, 32768, 393216, 16777216, 4, 262144, 2, 268435464, 4096, 262144,
  /* 5601 */ 262145, 262145, 448, 16384, 524288, 262145, 2359297, 0, 1610612736, 0, 8388608, 4096, 114688, 12582912,
  /* 5615 */ 16777216, 2105344, 2097152, 25165824, 0, 1048576, 2097152, 33554432, 0, 1572864, 6291456, 0, 1638400,
  /* 5628 */ 2359297, 2359297, 540278803, 540278803, 539230225, 572784657, 539230225, 539230225, -1608253423, 540311571,
  /* 5638 */ 540279315, 94850083, 94850083, 631721011, 631721011, 1, 16, 572522496, 0, 1879048192, 3, 540016640,
  /* 5650 */ -1608515584, 0, 2013265920, 3745792, 3, 19488, 458752, 94371840, 0, 1, 262144, 3, 3145728, 25165824,
  /* 5664 */ 67108864, 3, 32, 2097152, 2097152, 2129920, 4096, 65536, 0, 0x80000000, 0, -2147483646, -2147483646, 0,
  /* 5678 */ -1610612736, 0, -1509949440, 0, -436207616, 0, -134217728, 48, 603979776, 8, 268435456, 48, 536870912, 2,
  /* 5692 */ 3072, 4, 524288, 65536, 134217728, 131104, 1048, 8389656, -2147483646, -2146938874, -2146938874, 2650112,
  /* 5704 */ 271085568, 2650112, 136867840, -2146928634, -2146928634, -2144831482, -2144831482, -2146928634,
  /* 5712 */ -2144831482, -2140637178, -2144831482, -2077722618, -2144765946, -2146928634, -2144700378, -1593280506,
  /* 5720 */ -2109935225, -2109935225, -1593280506, -1593280506, -2109933177, -2109933177, 0, 6, 20480, 2621440, 0, 6,
  /* 5732 */ 30720, 524288, 2621440, 0x80000000, 96256, 0, 17301504, -1610612736, 135, 325888, 0x80000000, 6, 4096,
  /* 5745 */ 196608, 6, 2048, 16777216, 134217728, 1073741824, 4, 16, 1073774592, 16, 272, 16, 131072, 262144, 1048576,
  /* 5760 */ 0, 28672, 1, 6, 128, 6, 16384, 4194304, 402653184, 536870912, 8192, 2097152, 32768, 262144, 8, 256, 1024,
  /* 5777 */ 4194304, 536870912, 4, 16384, 8388608, 1073741824, 8, 1024, 524288, 2097152, 12288, 0, 15406, 15652, 15406,
  /* 5792 */ 15406, 15396, 15396, 15652, 15652, 15406, 15422, 324, 68, 68, 324, 4164, 8260, 15716, 15460, 46, 0, 62, 0,
  /* 5811 */ 4, 64, 41943040, 0, 2129920, 16, 256, 8192, 8192, 16384, 131072, 131072, 24, 0, 40, 44
];

XQueryParser.TOKEN =
[
  "(0)",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "URIQualifiedName",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "CharRef",
  "NCName",
  "QName",
  "StringConstructorChars",
  "S",
  "S",
  "CommentContents",
  "PragmaContents",
  "Wildcard",
  "DirCommentContents",
  "DirPIContents",
  "CDataSectionContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'<![CDATA['",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']]>'",
  "']``'",
  "'``['",
  "'`{'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exponent-separator'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'intersect'",
  "'into'",
  "'invoke'",
  "'is'",
  "'item'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'lowercase'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'occurs'",
  "'of'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'transform'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'update'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'|'",
  "'||'",
  "'}'",
  "'}`'",
  "'}}'"
];

// End
