// This file was generated on Sun Jan 9, 2022 17:37 (UTC) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "XQueryParser.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 262:                       // 'xquery'
      lookahead2W(182);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'transform' | 'treat' | 'union' | 'update' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 63750                 // 'xquery' 'encoding'
     || lk == 129286)               // 'xquery' 'version'
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 175:                       // 'module'
      lookahead2W(181);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 90799:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(262);                   // 'xquery'
    lookahead1W(110);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 124:                       // 'encoding'
      consume(124);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      break;
    default:
      consume(252);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      lookahead1W(102);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 124)                // 'encoding'
      {
        consume(124);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
    }
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(132);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(175);                   // 'module'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(238);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'construction' |
                                    // 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'option' | 'or' | 'ordering' | 'revalidation' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'variable' | '|' | '||'
        break;
      case 150:                     // 'import'
        lookahead2W(183);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 44651               // 'declare' 'base-uri'
       && lk != 45675               // 'declare' 'boundary-space'
       && lk != 50283               // 'declare' 'construction'
       && lk != 52843               // 'declare' 'copy-namespaces'
       && lk != 53867               // 'declare' 'decimal-format'
       && lk != 55403               // 'declare' 'default'
       && lk != 70763               // 'declare' 'ft-option'
       && lk != 89750               // 'import' 'module'
       && lk != 90731               // 'declare' 'namespace'
       && lk != 99435               // 'declare' 'ordering'
       && lk != 108139              // 'declare' 'revalidation'
       && lk != 109718)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(167);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55403)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 90731:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 150:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 70763:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(238);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(184);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16491               // 'declare' '%'
       && lk != 51819               // 'declare' 'context'
       && lk != 72811               // 'declare' 'function'
       && lk != 97387               // 'declare' 'option'
       && lk != 128619)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(156);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51819:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 97387:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(52);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 107:                       // 'declare'
      lookahead2W(162);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55403)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 45675:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 44651:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50283:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 99435:                     // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 108139:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 52843:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(36);                // S^WS | '(:' | 'boundary-space'
    consume(89);                    // 'boundary-space'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(230);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consume(96);                    // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consumeT(96);                   // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'base-uri'
    consume(87);                    // 'base-uri'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(98);                    // 'construction'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 230:                       // 'strip'
      consume(230);                 // 'strip'
      break;
    default:
      consume(204);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(62);                // S^WS | '(:' | 'ordering'
    consume(194);                   // 'ordering'
    lookahead1W(125);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    default:
      consume(244);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consume(192);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consume(144);                 // 'greatest'
      break;
    default:
      consume(166);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consumeT(192);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consumeT(144);                // 'greatest'
      break;
    default:
      consumeT(166);                // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(103);                   // 'copy-namespaces'
    lookahead1W(122);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(117);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(183);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 153:                       // 'inherit'
      consume(153);                 // 'inherit'
      break;
    default:
      consume(182);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(108);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 105:                       // 'decimal-format'
      consume(105);                 // 'decimal-format'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(105);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(172);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'exponent-separator' | 'grouping-separator' | 'infinity' | 'minus-sign' |
                                    // 'pattern-separator' | 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 52)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 106:                       // 'decimal-separator'
      consume(106);                 // 'decimal-separator'
      break;
    case 146:                       // 'grouping-separator'
      consume(146);                 // 'grouping-separator'
      break;
    case 152:                       // 'infinity'
      consume(152);                 // 'infinity'
      break;
    case 172:                       // 'minus-sign'
      consume(172);                 // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      consume(68);                  // 'NaN'
      break;
    case 200:                       // 'percent'
      consume(200);                 // 'percent'
      break;
    case 199:                       // 'per-mille'
      consume(199);                 // 'per-mille'
      break;
    case 263:                       // 'zero-digit'
      consume(263);                 // 'zero-digit'
      break;
    case 115:                       // 'digit'
      consume(115);                 // 'digit'
      break;
    case 198:                       // 'pattern-separator'
      consume(198);                 // 'pattern-separator'
      break;
    default:
      consume(131);                 // 'exponent-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 150:                       // 'import'
      lookahead2W(120);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 109718:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(150);                   // 'import'
    lookahead1W(65);                // S^WS | '(:' | 'schema'
    consume(214);                   // 'schema'
    lookahead1W(131);               // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 4)                    // StringLiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      lookahead1W(174);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(120);                 // 'element'
      lookahead1W(57);              // S^WS | '(:' | 'namespace'
      consume(177);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(150);                   // 'import'
    lookahead1W(56);                // S^WS | '(:' | 'module'
    consume(175);                   // 'module'
    lookahead1W(82);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 177)                  // 'namespace'
    {
      consume(177);                 // 'namespace'
      lookahead1W(174);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    default:
      consume(142);                 // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    default:
      consumeT(142);                // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consumeT(177);                  // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(51);                // S^WS | '(:' | 'ft-option'
    consume(138);                   // 'ft-option'
    lookahead1W(74);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(107);                   // 'declare'
    for (;;)
    {
      lookahead1W(135);             // S^WS | '%' | '(:' | 'function' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 251:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    default:
      whitespace();
      parse_FunctionDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(147);               // S^WS | '%' | '(' | '(:' | 'function' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(145);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(145);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(147);               // S^WS | '%' | '(' | '(:' | 'function' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(145);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(145);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(251);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(139);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(101);                   // 'context'
    lookahead1W(54);                // S^WS | '(:' | 'item'
    consume(161);                   // 'item'
    lookahead1W(139);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(142);                   // 'function'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(140);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(113);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      whitespace();
      parse_FunctionBody();
      break;
    default:
      consume(132);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(137);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(137);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(264);                   // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(264);                  // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'option'
    consume(190);                   // 'option'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      parse_ForClause();
      break;
    case 167:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      try_ForClause();
      break;
    case 167:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      parse_InitialClause();
      break;
    case 255:                       // 'where'
      parse_WhereClause();
      break;
    case 145:                       // 'group'
      parse_GroupByClause();
      break;
    case 104:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      try_InitialClause();
      break;
    case 255:                       // 'where'
      try_WhereClause();
      break;
    case 145:                       // 'group'
      try_GroupByClause();
      break;
    case 104:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(136);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(149);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(142);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(157);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(149);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(142);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(77);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(77);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(85);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(85);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(217);                   // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(217);                  // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(167);                   // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(167);                  // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(136);                   // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(240);                   // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(240);                  // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(223);                   // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(223);                  // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(226);                   // 'start'
    lookahead1W(155);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(226);                  // 'start'
    lookahead1W(155);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 189)                  // 'only'
    {
      consume(189);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(125);                   // 'end'
    lookahead1W(155);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 189)                  // 'only'
    {
      consumeT(189);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(125);                  // 'end'
    lookahead1W(155);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(144);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consume(205);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consume(180);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(144);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consumeT(205);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consumeT(180);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(104);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(104);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(255);                   // 'where'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(255);                  // 'where'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(145);                   // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consume(90);                    // 'by'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(145);                  // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consumeT(90);                   // 'by'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42015                 // '$' 'array'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 87583                 // '$' 'map'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consume(51);                // ':='
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consume(96);                // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42015                 // '$' 'array'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 87583                 // '$' 'map'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consumeT(51);               // ':='
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consumeT(96);               // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        try_URILiteral();
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 192:                       // 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
      break;
    default:
      consume(225);                 // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
      break;
    default:
      consumeT(225);                // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consume(84);                // 'ascending'
        break;
      default:
        consume(112);               // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consume(122);                 // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consume(144);               // 'greatest'
        break;
      default:
        consume(166);               // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consume(96);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consumeT(84);               // 'ascending'
        break;
      default:
        consumeT(112);              // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consumeT(122);                // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consumeT(144);              // 'greatest'
        break;
      default:
        consumeT(166);              // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consumeT(96);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    default:
      consume(128);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    consume(213);                   // 'satisfies'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    default:
      consumeT(128);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    consumeT(213);                  // 'satisfies'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  function try_QuantifiedVarDecl()
  {
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(231);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(231);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(91);                  // 'case'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(91);                 // 'case'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(242);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(242);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(91);                    // 'case'
    lookahead1W(232);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
    }
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(91);                   // 'case'
    lookahead1W(232);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
    }
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(149);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consume(233);                   // 'then'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(121);                   // 'else'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(149);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consumeT(233);                  // 'then'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(121);                  // 'else'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'catch' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'catch' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(239);                   // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedTryTargetExpr();
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(239);                  // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedTryTargetExpr();
  }

  function parse_EnclosedTryTargetExpr()
  {
    eventHandler.startNonterminal("EnclosedTryTargetExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedTryTargetExpr", e0);
  }

  function try_EnclosedTryTargetExpr()
  {
    try_EnclosedExpr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(94);                    // 'catch'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(94);                   // 'catch'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_CatchErrorList();
    try_EnclosedExpr();
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 191:                     // 'or'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(191);          // 'or'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_AndExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(191);                 // 'or'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 191:                     // 'or'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(191);          // 'or'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_AndExpr();
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(191);                // 'or'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 80:                      // 'and'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(80);           // 'and'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ComparisonExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(80);                  // 'and'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 80:                      // 'and'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(80);           // 'and'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ComparisonExpr();
            memoize(4, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(80);                 // 'and'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    switch (l1)
    {
    case 27:                        // '!='
    case 53:                        // '<'
    case 57:                        // '<<'
    case 58:                        // '<='
    case 60:                        // '='
    case 62:                        // '>'
    case 63:                        // '>='
    case 64:                        // '>>'
    case 127:                       // 'eq'
    case 143:                       // 'ge'
    case 147:                       // 'gt'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 170:                       // 'lt'
    case 179:                       // 'ne'
      lookahead2W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 145                   // 'group'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 167                   // 'let'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 236                   // 'to'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          switch (l1)
          {
          case 127:                 // 'eq'
          case 143:                 // 'ge'
          case 147:                 // 'gt'
          case 165:                 // 'le'
          case 170:                 // 'lt'
          case 179:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 160:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(237);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_FTContainsExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    if (lk == -1)
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    switch (l1)
    {
    case 27:                        // '!='
    case 53:                        // '<'
    case 57:                        // '<<'
    case 58:                        // '<='
    case 60:                        // '='
    case 62:                        // '>'
    case 63:                        // '>='
    case 64:                        // '>>'
    case 127:                       // 'eq'
    case 143:                       // 'ge'
    case 147:                       // 'gt'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 170:                       // 'lt'
    case 179:                       // 'ne'
      lookahead2W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 145                   // 'group'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 167                   // 'let'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 236                   // 'to'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          switch (l1)
          {
          case 127:                 // 'eq'
          case 143:                 // 'ge'
          case 147:                 // 'gt'
          case 165:                 // 'le'
          case 170:                 // 'lt'
          case 179:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 160:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(237);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_FTContainsExpr();
          memoize(5, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    switch (l1)
    {
    case 99:                        // 'contains'
      lookahead2W(69);              // S^WS | '(:' | 'text'
      break;
    default:
      lk = l1;
    }
    if (lk == 118883)               // 'contains' 'text'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(99);             // 'contains'
          lookahead1W(69);          // S^WS | '(:' | 'text'
          consumeT(232);            // 'text'
          lookahead1W(154);         // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
          try_FTSelection();
          if (l1 == 259)            // 'without'
          {
            try_FTIgnoreOption();
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(99);                  // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consume(232);                 // 'text'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 259)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    switch (l1)
    {
    case 99:                        // 'contains'
      lookahead2W(69);              // S^WS | '(:' | 'text'
      break;
    default:
      lk = l1;
    }
    if (lk == 118883)               // 'contains' 'text'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(99);             // 'contains'
          lookahead1W(69);          // S^WS | '(:' | 'text'
          consumeT(232);            // 'text'
          lookahead1W(154);         // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
          try_FTSelection();
          if (l1 == 259)            // 'without'
          {
            try_FTIgnoreOption();
          }
          memoize(6, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(99);                 // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consumeT(232);                // 'text'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 259)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 267:                     // '||'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(267);          // '||'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_RangeExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(267);                 // '||'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 267:                     // '||'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(267);          // '||'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_RangeExpr();
            memoize(7, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(7, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(267);                // '||'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    switch (l1)
    {
    case 236:                       // 'to'
      lookahead2W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 53                    // '<'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 127                   // 'eq'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 143                   // 'ge'
     && lk != 145                   // 'group'
     && lk != 147                   // 'gt'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 160                   // 'is'
     && lk != 165                   // 'le'
     && lk != 167                   // 'let'
     && lk != 170                   // 'lt'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 179                   // 'ne'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(236);            // 'to'
          lookahead1W(237);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_AdditiveExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(236);                 // 'to'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    switch (l1)
    {
    case 236:                       // 'to'
      lookahead2W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 53                    // '<'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 127                   // 'eq'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 143                   // 'ge'
     && lk != 145                   // 'group'
     && lk != 147                   // 'gt'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 160                   // 'is'
     && lk != 165                   // 'le'
     && lk != 167                   // 'let'
     && lk != 170                   // 'lt'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 179                   // 'ne'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(236);            // 'to'
          lookahead1W(237);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_AdditiveExpr();
          memoize(8, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(236);                // 'to'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // ','
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_MultiplicativeExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consume(39);                // '+'
        break;
      default:
        consume(41);                // '-'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // ','
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_MultiplicativeExpr();
            memoize(9, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(9, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consumeT(39);               // '+'
        break;
      default:
        consumeT(41);               // '-'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 38:                      // '*'
      case 117:                     // 'div'
      case 148:                     // 'idiv'
      case 173:                     // 'mod'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 117:               // 'div'
              consumeT(117);        // 'div'
              break;
            case 148:               // 'idiv'
              consumeT(148);        // 'idiv'
              break;
            default:
              consumeT(173);        // 'mod'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_UnionExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 117:                     // 'div'
        consume(117);               // 'div'
        break;
      case 148:                     // 'idiv'
        consume(148);               // 'idiv'
        break;
      default:
        consume(173);               // 'mod'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 38:                      // '*'
      case 117:                     // 'div'
      case 148:                     // 'idiv'
      case 173:                     // 'mod'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 117:               // 'div'
              consumeT(117);        // 'div'
              break;
            case 148:               // 'idiv'
              consumeT(148);        // 'idiv'
              break;
            default:
              consumeT(173);        // 'mod'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_UnionExpr();
            memoize(10, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(10, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 117:                     // 'div'
        consumeT(117);              // 'div'
        break;
      case 148:                     // 'idiv'
        consumeT(148);              // 'idiv'
        break;
      default:
        consumeT(173);              // 'mod'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 243:                     // 'union'
      case 266:                     // '|'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 243:               // 'union'
              consumeT(243);        // 'union'
              break;
            default:
              consumeT(266);        // '|'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_IntersectExceptExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consume(243);               // 'union'
        break;
      default:
        consume(266);               // '|'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 243:                     // 'union'
      case 266:                     // '|'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 243:               // 'union'
              consumeT(243);        // 'union'
              break;
            default:
              consumeT(266);        // '|'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_IntersectExceptExpr();
            memoize(11, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(11, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consumeT(243);              // 'union'
        break;
      default:
        consumeT(266);              // '|'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 130:                     // 'except'
      case 157:                     // 'intersect'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 157:               // 'intersect'
              consumeT(157);        // 'intersect'
              break;
            default:
              consumeT(130);        // 'except'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_InstanceofExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consume(157);               // 'intersect'
        break;
      default:
        consume(130);               // 'except'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 130:                     // 'except'
      case 157:                     // 'intersect'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 157:               // 'intersect'
              consumeT(157);        // 'intersect'
              break;
            default:
              consumeT(130);        // 'except'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_InstanceofExpr();
            memoize(12, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(12, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consumeT(157);              // 'intersect'
        break;
      default:
        consumeT(130);              // 'except'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 156:                       // 'instance'
      lookahead2W(59);              // S^WS | '(:' | 'of'
      break;
    default:
      lk = l1;
    }
    if (lk == 96412)                // 'instance' 'of'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(156);            // 'instance'
          lookahead1W(59);          // S^WS | '(:' | 'of'
          consumeT(188);            // 'of'
          lookahead1W(230);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(13, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(156);                 // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 156:                       // 'instance'
      lookahead2W(59);              // S^WS | '(:' | 'of'
      break;
    default:
      lk = l1;
    }
    if (lk == 96412)                // 'instance' 'of'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(156);            // 'instance'
          lookahead1W(59);          // S^WS | '(:' | 'of'
          consumeT(188);            // 'of'
          lookahead1W(230);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          memoize(13, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(13, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(156);                // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 238:                       // 'treat'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42734)                // 'treat' 'as'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(238);            // 'treat'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(230);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(14, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(238);                 // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 238:                       // 'treat'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42734)                // 'treat' 'as'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(238);            // 'treat'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(230);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          memoize(14, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(14, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(238);                // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42589)                // 'castable' 'as'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(93);             // 'castable'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(223);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(15, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(93);                  // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42589)                // 'castable' 'as'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(93);             // 'castable'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(223);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          memoize(15, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(15, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(93);                 // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_TransformWithExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42588)                // 'cast' 'as'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(92);             // 'cast'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(223);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(16, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(92);                  // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_TransformWithExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42588)                // 'cast' 'as'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(92);             // 'cast'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(223);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          memoize(16, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(16, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(92);                 // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_TransformWithExpr()
  {
    eventHandler.startNonterminal("TransformWithExpr", e0);
    parse_BasexUpdate1Expr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 237:                       // 'transform'
      lookahead2W(78);              // S^WS | '(:' | 'with'
      break;
    default:
      lk = l1;
    }
    if (lk == 132333)               // 'transform' 'with'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(237);            // 'transform'
          lookahead1W(78);          // S^WS | '(:' | 'with'
          consumeT(258);            // 'with'
          lookahead1W(80);          // S^WS | '(:' | '{'
          consumeT(264);            // '{'
          lookahead1W(242);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
          if (l1 != 268)            // '}'
          {
            try_Expr();
          }
          consumeT(268);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(17, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(237);                 // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consume(258);                 // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("TransformWithExpr", e0);
  }

  function try_TransformWithExpr()
  {
    try_BasexUpdate1Expr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 237:                       // 'transform'
      lookahead2W(78);              // S^WS | '(:' | 'with'
      break;
    default:
      lk = l1;
    }
    if (lk == 132333)               // 'transform' 'with'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(237);            // 'transform'
          lookahead1W(78);          // S^WS | '(:' | 'with'
          consumeT(258);            // 'with'
          lookahead1W(80);          // S^WS | '(:' | '{'
          consumeT(264);            // '{'
          lookahead1W(242);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
          if (l1 != 268)            // '}'
          {
            try_Expr();
          }
          consumeT(268);            // '}'
          memoize(17, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(17, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(237);                // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consumeT(258);                // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  function parse_BasexUpdate1Expr()
  {
    eventHandler.startNonterminal("BasexUpdate1Expr", e0);
    parse_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consume(245);                 // 'update'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("BasexUpdate1Expr", e0);
  }

  function try_BasexUpdate1Expr()
  {
    try_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consumeT(245);                // 'update'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  function parse_BasexUpdateExpr()
  {
    eventHandler.startNonterminal("BasexUpdateExpr", e0);
    parse_ArrowExpr();
    for (;;)
    {
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(241);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk != 135413)             // 'update' '{'
      {
        break;
      }
      consume(245);                 // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("BasexUpdateExpr", e0);
  }

  function try_BasexUpdateExpr()
  {
    try_ArrowExpr();
    for (;;)
    {
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(241);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk != 135413)             // 'update' '{'
      {
        break;
      }
      consumeT(245);                // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  function parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consume(61);                  // '=>'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  function try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consumeT(61);                 // '=>'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consume(41);                // '-'
        break;
      default:
        consume(39);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consumeT(41);               // '-'
        break;
      default:
        consumeT(39);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(213);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(213);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 53:                        // '<'
      consume(53);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 62:                        // '>'
      consume(62);                  // '>'
      break;
    default:
      consume(63);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 53:                        // '<'
      consumeT(53);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 62:                        // '>'
      consumeT(62);                 // '>'
      break;
    default:
      consumeT(63);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    default:
      consume(143);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    default:
      consumeT(143);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(64);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(64);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(249);                   // 'validate'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consume(241);               // 'type'
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(249);                  // 'validate'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consumeT(241);              // 'type'
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(229);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 164:                       // 'lax'
      consumeT(164);                // 'lax'
      break;
    default:
      consumeT(229);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(222);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
    }
    parse_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(2);                // PragmaContents
      consume(20);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(222);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
    }
    try_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(2);                // PragmaContents
      consumeT(20);                 // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(30);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 45:                        // '/'
      consume(45);                  // '/'
      lookahead1W(246);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consume(46);                  // '//'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 45:                        // '/'
      consumeT(45);                 // '/'
      lookahead1W(246);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consumeT(46);                 // '//'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(18, e0, lk);
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consume(45);                // '/'
        break;
      case 46:                      // '//'
        consume(46);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
            try_StepExpr();
            memoize(18, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(18, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consumeT(45);               // '/'
        break;
      case 46:                      // '//'
        consumeT(46);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(245);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(244);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 82:                        // 'array'
    case 171:                       // 'map'
      lookahead2W(197);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(209);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(205);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 123:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 155:                       // 'insert'
    case 161:                       // 'item'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(203);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(19, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 42070:                     // 'attribute' 'array'
    case 42104:                     // 'element' 'array'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 87638:                     // 'attribute' 'map'
    case 87672:                     // 'element' 'map'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135250:                    // 'array' '{'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135339:                    // 'map' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(245);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(244);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 82:                        // 'array'
    case 171:                       // 'map'
      lookahead2W(197);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(209);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(205);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 123:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 155:                       // 'insert'
    case 161:                       // 'item'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(203);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(19, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(19, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 42070:                     // 'attribute' 'array'
    case 42104:                     // 'element' 'array'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 87638:                     // 'attribute' 'map'
    case 87672:                     // 'element' 'map'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135250:                    // 'array' '{'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135339:                    // 'map' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(191);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(191);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(198);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(198);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 95:                        // 'child'
      consume(95);                  // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(134);                 // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(134);                // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 67)                   // '@'
    {
      consume(67);                  // '@'
    }
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 67)                   // '@'
    {
      consumeT(67);                 // '@'
    }
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 44:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 44:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(79);                  // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(79);                 // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(44);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(44);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(193);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(193);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 21:                        // Wildcard
      consume(21);                  // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 21:                        // Wildcard
      consumeT(21);                 // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(199);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 34:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(199);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        try_Predicate();
        break;
      case 34:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(69);                    // '['
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(70);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(69);                   // '['
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(70);                   // ']'
  }

  function parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(65);                    // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  function try_Lookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(65);                    // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  function try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consume(2);                   // DecimalLiteral
      break;
    default:
      consume(3);                   // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consumeT(2);                  // DecimalLiteral
      break;
    default:
      consumeT(3);                  // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(43);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(43);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(193);                   // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(193);                  // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(244);                   // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(244);                  // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(180);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(180);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(65);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(65);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
      parse_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
      try_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(53);                    // '<'
    parse_QName();
    parse_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consume(47);                  // '/>'
      break;
    default:
      consume(62);                  // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      parse_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consume(17);                // S
      }
      lookahead1(9);                // '>'
      consume(62);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(53);                   // '<'
    try_QName();
    try_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consumeT(47);                 // '/>'
      break;
    default:
      consumeT(62);                 // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      try_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consumeT(17);               // S
      }
      lookahead1(9);                // '>'
      consumeT(62);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consume(17);                  // S
      lookahead1(224);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        parse_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        lookahead1(8);              // '='
        consume(60);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consumeT(17);                 // S
      lookahead1(224);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        try_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        lookahead1(8);              // '='
        consumeT(60);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consume(7);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(160);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consume(8);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consumeT(7);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(160);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consumeT(8);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consume(10);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consumeT(10);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consume(11);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consumeT(11);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      parse_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consume(9);                   // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      try_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consumeT(9);                  // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(54);                    // '<!--'
    lookahead1(3);                  // DirCommentContents
    consume(22);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(42);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(54);                   // '<!--'
    lookahead1(3);                  // DirCommentContents
    consumeT(22);                   // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(42);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(0);                  // PITarget
    consume(12);                    // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(4);                // DirPIContents
      consume(23);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(66);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(0);                  // PITarget
    consumeT(12);                   // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(4);                // DirPIContents
      consumeT(23);                 // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(66);                   // '?>'
  }

  function parse_CDataSection()
  {
    eventHandler.startNonterminal("CDataSection", e0);
    consume(55);                    // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consume(24);                    // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consume(71);                    // ']]>'
    eventHandler.endNonterminal("CDataSection", e0);
  }

  function try_CDataSection()
  {
    consumeT(55);                   // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consumeT(24);                   // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consumeT(71);                   // ']]>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 118:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 120:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 118:                       // 'document'
      try_CompDocConstructor();
      break;
    case 120:                       // 'element'
      try_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      try_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(120);                   // 'element'
    lookahead1W(227);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedContentExpr();
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(120);                  // 'element'
    lookahead1W(227);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedContentExpr();
  }

  function parse_EnclosedContentExpr()
  {
    eventHandler.startNonterminal("EnclosedContentExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedContentExpr", e0);
  }

  function try_EnclosedContentExpr()
  {
    try_EnclosedExpr();
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(177);                   // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_PrefixExpr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_URIExpr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(177);                  // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_PrefixExpr();
      consumeT(268);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_URIExpr();
    consumeT(268);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(1);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(1);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consumeT(83);                 // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(171);                   // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(171);                  // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_MapConstructorEntry();
      }
    }
    consumeT(268);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consume(48);                    // ':'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consumeT(48);                   // ':'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_MapValueExpr();
  }

  function parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  function try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  function parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  function try_MapValueExpr()
  {
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 69:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    switch (l1)
    {
    case 69:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  function parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(69);                    // '['
    lookahead1W(240);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(70);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  function try_SquareArrayConstructor()
  {
    consumeT(69);                   // '['
    lookahead1W(240);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(70);                   // ']'
  }

  function parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(82);                    // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  function try_CurlyArrayConstructor()
  {
    consumeT(82);                   // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(73);                    // '``['
    parse_StringConstructorContent();
    consume(72);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  function try_StringConstructor()
  {
    consumeT(73);                   // '``['
    try_StringConstructorContent();
    consumeT(72);                   // ']``'
  }

  function parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(1);                  // StringConstructorChars
    consume(16);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consume(16);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  function try_StringConstructorContent()
  {
    lookahead1(1);                  // StringConstructorChars
    consumeT(16);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consumeT(16);                 // StringConstructorChars
    }
  }

  function parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(74);                    // '`{'
    lookahead1W(243);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(269);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  function try_StringConstructorInterpolation()
  {
    consumeT(74);                   // '`{'
    lookahead1W(243);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      try_Expr();
    }
    consumeT(269);                  // '}`'
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(187);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consume(65);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(187);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consumeT(65);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(83);                    // 'as'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(83);                   // 'as'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(208);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consume(123);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(200);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(208);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consumeT(123);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(200);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      consume(65);                  // '?'
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      consume(39);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      consumeT(65);                 // '?'
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      consumeT(39);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 171:                       // 'map'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(208);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    case 17569:                     // 'item' '('
      consume(161);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 17579:                     // 'map' '('
      parse_MapType();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 171:                       // 'map'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(208);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    case 17569:                     // 'item' '('
      consumeT(161);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_FunctionTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    case 17579:                     // 'map' '('
      try_MapType();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_MapType()
  {
    eventHandler.startNonterminal("MapType", e0);
    consume(171);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(226);               // URIQualifiedName | QName^Token | S^WS | '(:' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      whitespace();
      parse_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consume(40);                  // ','
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("MapType", e0);
  }

  function try_MapType()
  {
    consumeT(171);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(226);               // URIQualifiedName | QName^Token | S^WS | '(:' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consumeT(40);                 // ','
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 119:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 120:                       // 'element'
      parse_ElementTest();
      break;
    case 86:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 97:                        // 'comment'
      parse_CommentTest();
      break;
    case 232:                       // 'text'
      parse_TextTest();
      break;
    case 178:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 119:                       // 'document-node'
      try_DocumentTest();
      break;
    case 120:                       // 'element'
      try_ElementTest();
      break;
    case 86:                        // 'attribute'
      try_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      try_PITest();
      break;
    case 97:                        // 'comment'
      try_CommentTest();
      break;
    case 232:                       // 'text'
      try_TextTest();
      break;
    case 178:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(184);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(184);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(119);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(138);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(119);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(138);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(232);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(232);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(97);                    // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(178);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(178);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(176);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consume(4);                 // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(176);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consumeT(4);                // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(86);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(215);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(215);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(120);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consume(65);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(120);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consumeT(65);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(216);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(216);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(20, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(20, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(20, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(20, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(20, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(230);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(230);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_URILiteral()
  {
    eventHandler.startNonterminal("URILiteral", e0);
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("URILiteral", e0);
  }

  function try_URILiteral()
  {
    consumeT(4);                    // StringLiteral
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(221);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_QName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(221);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_QName();
    }
  }

  function parse_FunctionEQName()
  {
    eventHandler.startNonterminal("FunctionEQName", e0);
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("FunctionEQName", e0);
  }

  function try_FunctionEQName()
  {
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_QName()
  {
    eventHandler.startNonterminal("QName", e0);
    lookahead1(220);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'array'
      consume(82);                  // 'array'
      break;
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      break;
    case 97:                        // 'comment'
      consume(97);                  // 'comment'
      break;
    case 109:                       // 'delete'
      consume(109);                 // 'delete'
      break;
    case 119:                       // 'document-node'
      consume(119);                 // 'document-node'
      break;
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consume(123);                 // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consume(142);                 // 'function'
      break;
    case 149:                       // 'if'
      consume(149);                 // 'if'
      break;
    case 155:                       // 'insert'
      consume(155);                 // 'insert'
      break;
    case 161:                       // 'item'
      consume(161);                 // 'item'
      break;
    case 171:                       // 'map'
      consume(171);                 // 'map'
      break;
    case 178:                       // 'namespace-node'
      consume(178);                 // 'namespace-node'
      break;
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consume(206);                 // 'processing-instruction'
      break;
    case 208:                       // 'rename'
      consume(208);                 // 'rename'
      break;
    case 209:                       // 'replace'
      consume(209);                 // 'replace'
      break;
    case 215:                       // 'schema-attribute'
      consume(215);                 // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consume(216);                 // 'schema-element'
      break;
    case 231:                       // 'switch'
      consume(231);                 // 'switch'
      break;
    case 232:                       // 'text'
      consume(232);                 // 'text'
      break;
    case 242:                       // 'typeswitch'
      consume(242);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("QName", e0);
  }

  function try_QName()
  {
    lookahead1(220);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'array'
      consumeT(82);                 // 'array'
      break;
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      break;
    case 97:                        // 'comment'
      consumeT(97);                 // 'comment'
      break;
    case 109:                       // 'delete'
      consumeT(109);                // 'delete'
      break;
    case 119:                       // 'document-node'
      consumeT(119);                // 'document-node'
      break;
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consumeT(123);                // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consumeT(142);                // 'function'
      break;
    case 149:                       // 'if'
      consumeT(149);                // 'if'
      break;
    case 155:                       // 'insert'
      consumeT(155);                // 'insert'
      break;
    case 161:                       // 'item'
      consumeT(161);                // 'item'
      break;
    case 171:                       // 'map'
      consumeT(171);                // 'map'
      break;
    case 178:                       // 'namespace-node'
      consumeT(178);                // 'namespace-node'
      break;
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consumeT(206);                // 'processing-instruction'
      break;
    case 208:                       // 'rename'
      consumeT(208);                // 'rename'
      break;
    case 209:                       // 'replace'
      consumeT(209);                // 'replace'
      break;
    case 215:                       // 'schema-attribute'
      consumeT(215);                // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consumeT(216);                // 'schema-element'
      break;
    case 231:                       // 'switch'
      consumeT(231);                // 'switch'
      break;
    case 232:                       // 'text'
      consumeT(232);                // 'text'
      break;
    case 242:                       // 'typeswitch'
      consumeT(242);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 15:                        // QName^Token
      consume(15);                  // QName^Token
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 95:                        // 'child'
      consume(95);                  // 'child'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 102:                       // 'copy'
      consume(102);                 // 'copy'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 107:                       // 'declare'
      consume(107);                 // 'declare'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 118:                       // 'document'
      consume(118);                 // 'document'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 128:                       // 'every'
      consume(128);                 // 'every'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 134:                       // 'following'
      consume(134);                 // 'following'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 150:                       // 'import'
      consume(150);                 // 'import'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 159:                       // 'invoke'
      consume(159);                 // 'invoke'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 175:                       // 'module'
      consume(175);                 // 'module'
      break;
    case 174:                       // 'modify'
      consume(174);                 // 'modify'
      break;
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      break;
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 237:                       // 'transform'
      consume(237);                 // 'transform'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 239:                       // 'try'
      consume(239);                 // 'try'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    case 244:                       // 'unordered'
      consume(244);                 // 'unordered'
      break;
    case 245:                       // 'update'
      consume(245);                 // 'update'
      break;
    case 249:                       // 'validate'
      consume(249);                 // 'validate'
      break;
    case 255:                       // 'where'
      consume(255);                 // 'where'
      break;
    case 258:                       // 'with'
      consume(258);                 // 'with'
      break;
    default:
      consume(262);                 // 'xquery'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 15:                        // QName^Token
      consumeT(15);                 // QName^Token
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 102:                       // 'copy'
      consumeT(102);                // 'copy'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 107:                       // 'declare'
      consumeT(107);                // 'declare'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 118:                       // 'document'
      consumeT(118);                // 'document'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 128:                       // 'every'
      consumeT(128);                // 'every'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 134:                       // 'following'
      consumeT(134);                // 'following'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 150:                       // 'import'
      consumeT(150);                // 'import'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 159:                       // 'invoke'
      consumeT(159);                // 'invoke'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 175:                       // 'module'
      consumeT(175);                // 'module'
      break;
    case 174:                       // 'modify'
      consumeT(174);                // 'modify'
      break;
    case 177:                       // 'namespace'
      consumeT(177);                // 'namespace'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 193:                       // 'ordered'
      consumeT(193);                // 'ordered'
      break;
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      break;
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 237:                       // 'transform'
      consumeT(237);                // 'transform'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 239:                       // 'try'
      consumeT(239);                // 'try'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    case 244:                       // 'unordered'
      consumeT(244);                // 'unordered'
      break;
    case 245:                       // 'update'
      consumeT(245);                // 'update'
      break;
    case 249:                       // 'validate'
      consumeT(249);                // 'validate'
      break;
    case 255:                       // 'where'
      consumeT(255);                // 'where'
      break;
    case 258:                       // 'with'
      consumeT(258);                // 'with'
      break;
    default:
      consumeT(262);                // 'xquery'
    }
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(64);                // S^WS | '(:' | 'revalidation'
    consume(211);                   // 'revalidation'
    lookahead1W(143);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 229:                       // 'strict'
      consume(229);                 // 'strict'
      break;
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(222);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 88:                        // 'before'
      consume(88);                  // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consume(83);                // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consume(133);             // 'first'
          break;
        default:
          consume(163);             // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consume(158);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 88:                        // 'before'
      consumeT(88);                 // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consumeT(83);               // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consumeT(133);            // 'first'
          break;
        default:
          consumeT(163);            // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consumeT(158);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(155);                   // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SourceExpr();
    lookahead1W(148);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(155);                  // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_SourceExpr();
    lookahead1W(148);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    try_InsertExprTargetChoice();
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(109);                   // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(109);                  // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(209);                   // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consume(250);                 // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consume(258);                   // 'with'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(209);                  // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consumeT(250);                // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consumeT(258);                  // 'with'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(208);                   // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(208);                  // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_UpdatingFunctionCall()
  {
    eventHandler.startNonterminal("UpdatingFunctionCall", e0);
    consume(159);                   // 'invoke'
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consume(246);                   // 'updating'
    lookahead1W(234);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("UpdatingFunctionCall", e0);
  }

  function try_UpdatingFunctionCall()
  {
    consumeT(159);                  // 'invoke'
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consumeT(246);                  // 'updating'
    lookahead1W(234);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_CopyModifyExpr()
  {
    eventHandler.startNonterminal("CopyModifyExpr", e0);
    consume(102);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consume(51);                  // ':='
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    consume(174);                   // 'modify'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifyExpr", e0);
  }

  function try_CopyModifyExpr()
  {
    consumeT(102);                  // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consumeT(51);                 // ':='
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ExprSingle();
    }
    consumeT(174);                  // 'modify'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(201);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(201);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(253);                   // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(253);                  // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consume(141);                 // 'ftor'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consumeT(141);                // 'ftor'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consume(139);                 // 'ftand'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consumeT(139);                // 'ftand'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consume(186);                 // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consume(151);                 // 'in'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consumeT(186);                // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consumeT(151);                // 'in'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 140)                  // 'ftnot'
    {
      consume(140);                 // 'ftnot'
    }
    lookahead1W(146);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 140)                  // 'ftnot'
    {
      consumeT(140);                // 'ftnot'
    }
    lookahead1W(146);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    if (l1 == 248)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    if (l1 == 248)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'phrase' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'phrase' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(158);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(158);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(268);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 81:                        // 'any'
      consume(81);                  // 'any'
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consume(260);               // 'word'
      }
      break;
    case 76:                        // 'all'
      consume(76);                  // 'all'
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 261:                     // 'words'
        lookahead2W(215);           // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
        break;
      default:
        lk = l1;
      }
      if (lk == 13061               // 'words' EOF
       || lk == 14085               // 'words' '!='
       || lk == 19205               // 'words' ')'
       || lk == 19717               // 'words' '*'
       || lk == 20229               // 'words' '+'
       || lk == 20741               // 'words' ','
       || lk == 21253               // 'words' '-'
       || lk == 24837               // 'words' ':'
       || lk == 26885               // 'words' ';'
       || lk == 27397               // 'words' '<'
       || lk == 29445               // 'words' '<<'
       || lk == 29957               // 'words' '<='
       || lk == 30981               // 'words' '='
       || lk == 32005               // 'words' '>'
       || lk == 32517               // 'words' '>='
       || lk == 33029               // 'words' '>>'
       || lk == 36101               // 'words' ']'
       || lk == 38661               // 'words' 'after'
       || lk == 41221               // 'words' 'and'
       || lk == 42757               // 'words' 'as'
       || lk == 43269               // 'words' 'ascending'
       || lk == 43781               // 'words' 'at'
       || lk == 45317               // 'words' 'before'
       || lk == 46853               // 'words' 'case'
       || lk == 47365               // 'words' 'cast'
       || lk == 47877               // 'words' 'castable'
       || lk == 49413               // 'words' 'collation'
       || lk == 50949               // 'words' 'contains'
       || lk == 53509               // 'words' 'count'
       || lk == 55557               // 'words' 'default'
       || lk == 57605               // 'words' 'descending'
       || lk == 58629               // 'words' 'different'
       || lk == 59653               // 'words' 'distance'
       || lk == 60165               // 'words' 'div'
       || lk == 62213               // 'words' 'else'
       || lk == 62725               // 'words' 'empty'
       || lk == 64261               // 'words' 'end'
       || lk == 64773               // 'words' 'entire'
       || lk == 65285               // 'words' 'eq'
       || lk == 66821               // 'words' 'except'
       || lk == 69893               // 'words' 'for'
       || lk == 73477               // 'words' 'ge'
       || lk == 74501               // 'words' 'group'
       || lk == 75525               // 'words' 'gt'
       || lk == 76037               // 'words' 'idiv'
       || lk == 80133               // 'words' 'instance'
       || lk == 80645               // 'words' 'intersect'
       || lk == 81157               // 'words' 'into'
       || lk == 82181               // 'words' 'is'
       || lk == 84741               // 'words' 'le'
       || lk == 85765               // 'words' 'let'
       || lk == 87301               // 'words' 'lt'
       || lk == 88837               // 'words' 'mod'
       || lk == 89349               // 'words' 'modify'
       || lk == 91909               // 'words' 'ne'
       || lk == 97029               // 'words' 'only'
       || lk == 98053               // 'words' 'or'
       || lk == 98565               // 'words' 'order'
       || lk == 99077               // 'words' 'ordered'
       || lk == 100613              // 'words' 'paragraphs'
       || lk == 107781              // 'words' 'return'
       || lk == 108805              // 'words' 'same'
       || lk == 109317              // 'words' 'satisfies'
       || lk == 113413              // 'words' 'sentences'
       || lk == 115461              // 'words' 'stable'
       || lk == 115973              // 'words' 'start'
       || lk == 120581              // 'words' 'times'
       || lk == 121093              // 'words' 'to'
       || lk == 121605              // 'words' 'transform'
       || lk == 122117              // 'words' 'treat'
       || lk == 124677              // 'words' 'union'
       || lk == 130821              // 'words' 'where'
       || lk == 131845              // 'words' 'window'
       || lk == 132357              // 'words' 'with'
       || lk == 132869              // 'words' 'without'
       || lk == 133893              // 'words' 'words'
       || lk == 136453              // 'words' '|'
       || lk == 136965              // 'words' '||'
       || lk == 137477              // 'words' '}'
       || lk == 137989)             // 'words' '}`'
      {
        lk = memoized(21, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(261);          // 'words'
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(21, e0, lk);
        }
      }
      if (lk == -1
       || lk == 71429               // 'words' 'ftand'
       || lk == 72453               // 'words' 'ftor'
       || lk == 95493               // 'words' 'not'
       || lk == 96005               // 'words' 'occurs'
       || lk == 127237              // 'words' 'using'
       || lk == 129797)             // 'words' 'weight'
      {
        consume(261);               // 'words'
      }
      break;
    default:
      consume(201);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 81:                        // 'any'
      consumeT(81);                 // 'any'
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consumeT(260);              // 'word'
      }
      break;
    case 76:                        // 'all'
      consumeT(76);                 // 'all'
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 261:                     // 'words'
        lookahead2W(215);           // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
        break;
      default:
        lk = l1;
      }
      if (lk == 13061               // 'words' EOF
       || lk == 14085               // 'words' '!='
       || lk == 19205               // 'words' ')'
       || lk == 19717               // 'words' '*'
       || lk == 20229               // 'words' '+'
       || lk == 20741               // 'words' ','
       || lk == 21253               // 'words' '-'
       || lk == 24837               // 'words' ':'
       || lk == 26885               // 'words' ';'
       || lk == 27397               // 'words' '<'
       || lk == 29445               // 'words' '<<'
       || lk == 29957               // 'words' '<='
       || lk == 30981               // 'words' '='
       || lk == 32005               // 'words' '>'
       || lk == 32517               // 'words' '>='
       || lk == 33029               // 'words' '>>'
       || lk == 36101               // 'words' ']'
       || lk == 38661               // 'words' 'after'
       || lk == 41221               // 'words' 'and'
       || lk == 42757               // 'words' 'as'
       || lk == 43269               // 'words' 'ascending'
       || lk == 43781               // 'words' 'at'
       || lk == 45317               // 'words' 'before'
       || lk == 46853               // 'words' 'case'
       || lk == 47365               // 'words' 'cast'
       || lk == 47877               // 'words' 'castable'
       || lk == 49413               // 'words' 'collation'
       || lk == 50949               // 'words' 'contains'
       || lk == 53509               // 'words' 'count'
       || lk == 55557               // 'words' 'default'
       || lk == 57605               // 'words' 'descending'
       || lk == 58629               // 'words' 'different'
       || lk == 59653               // 'words' 'distance'
       || lk == 60165               // 'words' 'div'
       || lk == 62213               // 'words' 'else'
       || lk == 62725               // 'words' 'empty'
       || lk == 64261               // 'words' 'end'
       || lk == 64773               // 'words' 'entire'
       || lk == 65285               // 'words' 'eq'
       || lk == 66821               // 'words' 'except'
       || lk == 69893               // 'words' 'for'
       || lk == 73477               // 'words' 'ge'
       || lk == 74501               // 'words' 'group'
       || lk == 75525               // 'words' 'gt'
       || lk == 76037               // 'words' 'idiv'
       || lk == 80133               // 'words' 'instance'
       || lk == 80645               // 'words' 'intersect'
       || lk == 81157               // 'words' 'into'
       || lk == 82181               // 'words' 'is'
       || lk == 84741               // 'words' 'le'
       || lk == 85765               // 'words' 'let'
       || lk == 87301               // 'words' 'lt'
       || lk == 88837               // 'words' 'mod'
       || lk == 89349               // 'words' 'modify'
       || lk == 91909               // 'words' 'ne'
       || lk == 97029               // 'words' 'only'
       || lk == 98053               // 'words' 'or'
       || lk == 98565               // 'words' 'order'
       || lk == 99077               // 'words' 'ordered'
       || lk == 100613              // 'words' 'paragraphs'
       || lk == 107781              // 'words' 'return'
       || lk == 108805              // 'words' 'same'
       || lk == 109317              // 'words' 'satisfies'
       || lk == 113413              // 'words' 'sentences'
       || lk == 115461              // 'words' 'stable'
       || lk == 115973              // 'words' 'start'
       || lk == 120581              // 'words' 'times'
       || lk == 121093              // 'words' 'to'
       || lk == 121605              // 'words' 'transform'
       || lk == 122117              // 'words' 'treat'
       || lk == 124677              // 'words' 'union'
       || lk == 130821              // 'words' 'where'
       || lk == 131845              // 'words' 'window'
       || lk == 132357              // 'words' 'with'
       || lk == 132869              // 'words' 'without'
       || lk == 133893              // 'words' 'words'
       || lk == 136453              // 'words' '|'
       || lk == 136965              // 'words' '||'
       || lk == 137477              // 'words' '}'
       || lk == 137989)             // 'words' '}`'
      {
        lk = memoized(21, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(261);          // 'words'
            memoize(21, e0A, -1);
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(21, e0A, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 71429               // 'words' 'ftand'
       || lk == 72453               // 'words' 'ftor'
       || lk == 95493               // 'words' 'not'
       || lk == 96005               // 'words' 'occurs'
       || lk == 127237              // 'words' 'using'
       || lk == 129797)             // 'words' 'weight'
      {
        consumeT(261);              // 'words'
      }
      break;
    default:
      consumeT(201);                // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(187);                   // 'occurs'
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(235);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(187);                  // 'occurs'
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(235);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      consume(236);                 // 'to'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_AdditiveExpr();
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
      consumeT(236);                // 'to'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 193:                       // 'ordered'
      parse_FTOrder();
      break;
    case 257:                       // 'window'
      parse_FTWindow();
      break;
    case 116:                       // 'distance'
      parse_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 193:                       // 'ordered'
      try_FTOrder();
      break;
    case 257:                       // 'window'
      try_FTWindow();
      break;
    case 116:                       // 'distance'
      try_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(193);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(193);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(257);                   // 'window'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(257);                  // 'window'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(116);                   // 'distance'
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(116);                  // 'distance'
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 261:                       // 'words'
      consume(261);                 // 'words'
      break;
    case 221:                       // 'sentences'
      consume(221);                 // 'sentences'
      break;
    default:
      consume(196);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 261:                       // 'words'
      consumeT(261);                // 'words'
      break;
    case 221:                       // 'sentences'
      consumeT(221);                // 'sentences'
      break;
    default:
      consumeT(196);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 212:                       // 'same'
      consume(212);                 // 'same'
      break;
    default:
      consume(114);                 // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 212:                       // 'same'
      consumeT(212);                // 'same'
      break;
    default:
      consumeT(114);                // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 220:                       // 'sentence'
      consume(220);                 // 'sentence'
      break;
    default:
      consume(195);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 220:                       // 'sentence'
      consumeT(220);                // 'sentence'
      break;
    default:
      consumeT(195);                // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consume(226);               // 'start'
        break;
      default:
        consume(125);               // 'end'
      }
      break;
    default:
      consume(126);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(100);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consumeT(226);              // 'start'
        break;
      default:
        consumeT(125);              // 'end'
      }
      break;
    default:
      consumeT(126);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(100);                // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(248);                 // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(248);                // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(153);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 190:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(153);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      try_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 190:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 91:                        // 'case'
      consume(91);                  // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consume(154);               // 'insensitive'
        break;
      default:
        consume(219);               // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consume(169);                 // 'lowercase'
      break;
    default:
      consume(247);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consumeT(154);              // 'insensitive'
        break;
      default:
        consumeT(219);              // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consumeT(169);                // 'lowercase'
      break;
    default:
      consumeT(247);                // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(113);                   // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consume(154);                 // 'insensitive'
      break;
    default:
      consume(219);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(113);                  // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consumeT(154);                // 'insensitive'
      break;
    default:
      consumeT(219);                // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 227:                       // 'stemming'
      consume(227);                 // 'stemming'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consume(227);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 227:                       // 'stemming'
      consumeT(227);                // 'stemming'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consumeT(227);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consume(234);                 // 'thesaurus'
      lookahead1W(136);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consume(108);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(108);             // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consume(40);              // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consume(234);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consumeT(234);                // 'thesaurus'
      lookahead1W(136);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        try_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(108);            // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consumeT(40);             // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consumeT(234);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(85);                    // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(218);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'relationship' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consume(207);                 // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(151);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consume(168);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(85);                   // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
    lookahead1W(218);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'relationship' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consumeT(207);                // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(151);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consumeT(168);                // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consume(236);                 // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consumeT(236);                // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 228:                       // 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
      lookahead1W(136);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consume(108);               // 'default'
        for (;;)
        {
          lookahead1W(214);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(23, e0);
            if (lk == 0)
            {
              var b0A = b0; var e0A = e0; var l1A = l1;
              var b1A = b1; var e1A = e1; var l2A = l2;
              var b2A = b2; var e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                lk = -1;
              }
              catch (p1A)
              {
                lk = -2;
              }
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(23, e0, lk);
            }
          }
          if (lk != -1)
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(214);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(22, e0);
            if (lk == 0)
            {
              var b0A = b0; var e0A = e0; var l1A = l1;
              var b1A = b1; var e1A = e1; var l2A = l2;
              var b2A = b2; var e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                lk = -1;
              }
              catch (p1A)
              {
                lk = -2;
              }
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(22, e0, lk);
            }
          }
          if (lk != -1)
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 228:                       // 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
      lookahead1W(136);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        for (;;)
        {
          lookahead1W(214);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(23, e0);
            if (lk == 0)
            {
              var b0A = b0; var e0A = e0; var l1A = l1;
              var b1A = b1; var e1A = e1; var l2A = l2;
              var b2A = b2; var e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                memoize(23, e0A, -1);
                continue;
              }
              catch (p1A)
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(23, e0A, -2);
                break;
              }
            }
          }
          if (lk != -1)
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(214);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(22, e0);
            if (lk == 0)
            {
              var b0A = b0; var e0A = e0; var l1A = l1;
              var b1A = b1; var e1A = e1; var l2A = l2;
              var b2A = b2; var e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                memoize(22, e0A, -1);
                continue;
              }
              catch (p1A)
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(22, e0A, -2);
                break;
              }
            }
          }
          if (lk != -1)
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      break;
    default:
      consume(34);                  // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consumeT(4);                // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    default:
      consume(130);                 // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    default:
      consumeT(130);                // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(162);                   // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(162);                  // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consume(256);                 // 'wildcards'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consume(256);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consumeT(256);                // 'wildcards'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consumeT(256);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(190);                   // 'option'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(190);                  // 'option'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(259);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(100);                   // 'content'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(259);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(100);                  // 'content'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_UnionExpr();
  }

  function try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(81);               // CommentContents | '(:' | ':)'
      if (l1 == 49)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 19:                      // CommentContents
        consumeT(19);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(49);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 18:                        // S^WS
      consumeT(18);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 14:                        // NCName^Token
      consume(14);                  // NCName^Token
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    default:
      consume(255);                 // 'where'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 14:                        // NCName^Token
      consumeT(14);                 // NCName^Token
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    default:
      consumeT(255);                // 'where'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_QueryBody();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_QueryBody()
  {
    eventHandler.startNonterminal("QueryBody", e0);
    parse_Expr();
    eventHandler.endNonterminal("QueryBody", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(161);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(161);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(211);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'sliding' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'updating' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(207);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'value' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(205);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(206);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(202);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 17639:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 17650:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    case 17557:                     // 'if' '('
      parse_IfExpr();
      break;
    case 135407:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 126111:                    // 'invoke' 'updating'
      parse_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      parse_CopyModifyExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(211);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'sliding' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'updating' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(207);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'value' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(205);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(206);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(202);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 17639:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 17650:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    case 17557:                     // 'if' '('
      try_IfExpr();
      break;
    case 135407:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 126111:                    // 'invoke' 'updating'
      try_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      try_CopyModifyExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consume(6);                   // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consume(13);                  // CharRef
      break;
    case 265:                       // '{{'
      consume(265);                 // '{{'
      break;
    case 270:                       // '}}'
      consume(270);                 // '}}'
      break;
    default:
      parse_EnclosedExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consumeT(6);                  // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consumeT(13);                 // CharRef
      break;
    case 265:                       // '{{'
      consumeT(265);                // '{{'
      break;
    case 270:                       // '}}'
      consumeT(270);                // '}}'
      break;
    default:
      try_EnclosedExpr();
    }
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(118);                   // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(118);                  // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(86);                    // 'attribute'
    lookahead1W(227);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(227);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(97);                    // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(232);                   // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(232);                  // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 177:                       // 'namespace'
      lookahead2W(179);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where' | '{'
      break;
    case 206:                       // 'processing-instruction'
      lookahead2W(177);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(228);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 244:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 82:                        // 'array'
    case 97:                        // 'comment'
    case 171:                       // 'map'
    case 232:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 179:                       // 'ne'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 109:                       // 'delete'
    case 119:                       // 'document-node'
    case 123:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 155:                       // 'insert'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15027:                     // 'ne' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 135339:                    // 'map' '{'
      parse_MapConstructor();
      break;
    case 69:                        // '['
    case 135250:                    // 'array' '{'
      parse_ArrayConstructor();
      break;
    case 73:                        // '``['
      parse_StringConstructor();
      break;
    case 65:                        // '?'
      parse_UnaryLookup();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 177:                       // 'namespace'
      lookahead2W(179);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where' | '{'
      break;
    case 206:                       // 'processing-instruction'
      lookahead2W(177);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(228);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 244:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 82:                        // 'array'
    case 97:                        // 'comment'
    case 171:                       // 'map'
    case 232:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 179:                       // 'ne'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      try_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 109:                       // 'delete'
    case 119:                       // 'document-node'
    case 123:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 155:                       // 'insert'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15027:                     // 'ne' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 135339:                    // 'map' '{'
      try_MapConstructor();
      break;
    case 69:                        // '['
    case 135250:                    // 'array' '{'
      try_ArrayConstructor();
      break;
    case 73:                        // '``['
      try_StringConstructor();
      break;
    case 65:                        // '?'
      try_UnaryLookup();
      break;
    default:
      try_Constructor();
    }
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 18)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 5) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 5) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

}

XQueryParser.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 271; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 2568 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

XQueryParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

XQueryParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

XQueryParser.MAP0 =
[
  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  /* 452 */ 69, 69, 69, 69
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 2, 3, 94212, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247
];

XQueryParser.TRANSITION =
[
  /*     0 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*    15 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*    30 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*    45 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*    60 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*    75 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*    90 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   105 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   120 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   135 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   150 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   165 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   180 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   195 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   210 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   225 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   240 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   255 */ 19211, 18176, 18192, 18198, 18198, 18198, 18215, 18198, 18198, 18198, 18199, 18235, 18198, 18198, 18219,
  /*   270 */ 18197, 18244, 18260, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211,
  /*   285 */ 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351,
  /*   300 */ 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210,
  /*   315 */ 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498,
  /*   330 */ 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814,
  /*   345 */ 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005,
  /*   360 */ 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527,
  /*   375 */ 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454,
  /*   390 */ 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713,
  /*   405 */ 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211,
  /*   420 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   435 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   450 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   465 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   480 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   495 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   510 */ 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 19978, 41899, 19999,
  /*   525 */ 20015, 19211, 27725, 19048, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 20043, 18433, 26135, 19211,
  /*   540 */ 19211, 20470, 26134, 27495, 19321, 18667, 19428, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211,
  /*   555 */ 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497,
  /*   570 */ 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646,
  /*   585 */ 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777,
  /*   600 */ 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826,
  /*   615 */ 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247,
  /*   630 */ 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465,
  /*   645 */ 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773,
  /*   660 */ 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211,
  /*   675 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   690 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   705 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   720 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   735 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   750 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   765 */ 19211, 19211, 19211, 19956, 20060, 19211, 19211, 19211, 20081, 19211, 19211, 37754, 20100, 19978, 20083,
  /*   780 */ 19211, 19211, 23616, 20116, 24880, 19211, 19211, 20169, 19211, 19211, 42710, 20166, 19211, 18433, 26135,
  /*   795 */ 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 20185, 18338, 29933, 18354, 19211, 19211, 23610,
  /*   810 */ 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475,
  /*   825 */ 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897,
  /*   840 */ 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211,
  /*   855 */ 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962,
  /*   870 */ 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353,
  /*   885 */ 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414,
  /*   900 */ 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663,
  /*   915 */ 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211,
  /*   930 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   945 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   960 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   975 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*   990 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1005 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1020 */ 19211, 19211, 19211, 19211, 20235, 25438, 19211, 19211, 19211, 20281, 19211, 19211, 25439, 21022, 19978,
  /*  1035 */ 20302, 20328, 20344, 25440, 28085, 19048, 19211, 19211, 20169, 20366, 19211, 42710, 20385, 19211, 18433,
  /*  1050 */ 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 20405, 18338, 29933, 18354, 19211, 19211,
  /*  1065 */ 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454,
  /*  1080 */ 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440,
  /*  1095 */ 23897, 18646, 27498, 20446, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269,
  /*  1110 */ 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466,
  /*  1125 */ 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228,
  /*  1140 */ 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121,
  /*  1155 */ 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647,
  /*  1170 */ 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932,
  /*  1185 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1200 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1215 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1230 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1245 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1260 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1275 */ 19211, 19211, 19211, 19211, 19211, 19956, 41066, 19211, 19211, 19211, 20462, 19211, 19211, 41067, 31119,
  /*  1290 */ 19978, 19211, 41063, 20486, 18310, 18322, 19048, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211,
  /*  1305 */ 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211,
  /*  1320 */ 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773,
  /*  1335 */ 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184,
  /*  1350 */ 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754,
  /*  1365 */ 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216,
  /*  1380 */ 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452,
  /*  1395 */ 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393,
  /*  1410 */ 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578,
  /*  1425 */ 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901,
  /*  1440 */ 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1455 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1470 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1485 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1500 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1515 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1530 */ 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 20506, 19211, 19211, 31878,
  /*  1545 */ 31882, 19978, 18989, 19211, 19211, 25728, 25740, 19048, 19211, 19211, 20169, 19211, 19211, 42710, 19211,
  /*  1560 */ 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933, 18354,
  /*  1575 */ 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757,
  /*  1590 */ 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574,
  /*  1605 */ 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719,
  /*  1620 */ 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940,
  /*  1635 */ 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191,
  /*  1650 */ 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543,
  /*  1665 */ 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564,
  /*  1680 */ 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870,
  /*  1695 */ 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1710 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1725 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1740 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1755 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1770 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1785 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020, 19211, 19211,
  /*  1800 */ 19211, 30416, 20531, 19211, 19211, 19211, 19211, 29940, 24756, 19211, 19211, 20169, 19211, 19211, 42710,
  /*  1815 */ 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933,
  /*  1830 */ 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470,
  /*  1845 */ 20552, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535,
  /*  1860 */ 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683,
  /*  1875 */ 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918,
  /*  1890 */ 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173,
  /*  1905 */ 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358,
  /*  1920 */ 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548,
  /*  1935 */ 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844,
  /*  1950 */ 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1965 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1980 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  1995 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2010 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2025 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2040 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 20609, 19211, 19211, 19211, 20630, 19211,
  /*  2055 */ 19211, 38187, 20649, 20665, 20632, 19211, 19211, 19962, 20686, 32997, 19211, 19211, 20169, 19211, 19211,
  /*  2070 */ 42710, 39895, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 20726, 18338,
  /*  2085 */ 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449,
  /*  2100 */ 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507,
  /*  2115 */ 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266,
  /*  2130 */ 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896,
  /*  2145 */ 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207,
  /*  2160 */ 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342,
  /*  2175 */ 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871,
  /*  2190 */ 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805,
  /*  2205 */ 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2220 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2235 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2250 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2265 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2280 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2295 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 20855, 20767, 20767, 20767, 20798,
  /*  2310 */ 20767, 20767, 20866, 20826, 20762, 20812, 20783, 20842, 20882, 20895, 19048, 19211, 19211, 40876, 19211,
  /*  2325 */ 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296,
  /*  2340 */ 18338, 29933, 20911, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768,
  /*  2355 */ 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491,
  /*  2370 */ 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916,
  /*  2385 */ 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874,
  /*  2400 */ 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450,
  /*  2415 */ 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473,
  /*  2430 */ 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878,
  /*  2445 */ 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789,
  /*  2460 */ 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2475 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2490 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2505 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2520 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2535 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2550 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 23404, 19211, 19211, 19211,
  /*  2565 */ 20947, 19211, 19211, 26934, 21022, 20989, 20959, 20969, 20973, 42206, 28279, 19048, 19211, 19211, 20369,
  /*  2580 */ 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320,
  /*  2595 */ 18296, 18338, 29933, 21010, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079,
  /*  2610 */ 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379,
  /*  2625 */ 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498,
  /*  2640 */ 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946,
  /*  2655 */ 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189,
  /*  2670 */ 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858,
  /*  2685 */ 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862,
  /*  2700 */ 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745,
  /*  2715 */ 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2730 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2745 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2760 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2775 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2790 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2805 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 41150, 19211, 19211,
  /*  2820 */ 19211, 21020, 19211, 19211, 19211, 21022, 19978, 21038, 21058, 21042, 21074, 21086, 19048, 19211, 19211,
  /*  2835 */ 20169, 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216,
  /*  2850 */ 19320, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429,
  /*  2865 */ 19079, 19768, 18449, 18470, 20564, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072,
  /*  2880 */ 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 21102, 18641, 18662, 20588,
  /*  2895 */ 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924,
  /*  2910 */ 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171,
  /*  2925 */ 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337,
  /*  2940 */ 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133,
  /*  2955 */ 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231,
  /*  2970 */ 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  2985 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3000 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3015 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3030 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3045 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3060 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211,
  /*  3075 */ 19211, 19211, 21020, 19211, 19211, 19211, 21022, 19978, 18549, 18554, 18558, 38288, 21121, 19048, 19211,
  /*  3090 */ 19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321,
  /*  3105 */ 24216, 19320, 18296, 18338, 29933, 18354, 19211, 19211, 24413, 19211, 42351, 18383, 18399, 18415, 19094,
  /*  3120 */ 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211,
  /*  3135 */ 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662,
  /*  3150 */ 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902,
  /*  3165 */ 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430,
  /*  3180 */ 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468,
  /*  3195 */ 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532,
  /*  3210 */ 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495,
  /*  3225 */ 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3240 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3255 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3270 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3285 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3300 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3315 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 23717,
  /*  3330 */ 19211, 19211, 19211, 21172, 21201, 19211, 23719, 21022, 21219, 28658, 21185, 28662, 19211, 28430, 19048,
  /*  3345 */ 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495,
  /*  3360 */ 19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415,
  /*  3375 */ 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211,
  /*  3390 */ 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641,
  /*  3405 */ 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880,
  /*  3420 */ 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132,
  /*  3435 */ 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312,
  /*  3450 */ 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486,
  /*  3465 */ 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438,
  /*  3480 */ 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3495 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3510 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3525 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3540 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3555 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3570 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 21258,
  /*  3585 */ 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 19978, 35480, 35485, 35489, 39333, 21282,
  /*  3600 */ 21318, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441,
  /*  3615 */ 41308, 33159, 33116, 33158, 21353, 27167, 19211, 20536, 21358, 21374, 24413, 35316, 25499, 29825, 25047,
  /*  3630 */ 19211, 19211, 29820, 33582, 27093, 27093, 27093, 42679, 33114, 33114, 23993, 40531, 30415, 19211, 19211,
  /*  3645 */ 19211, 19211, 35280, 39379, 24336, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 26896, 33113,
  /*  3660 */ 33114, 33114, 33114, 28310, 41249, 23812, 19211, 19211, 19211, 19211, 35564, 29823, 25047, 30196, 25653,
  /*  3675 */ 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211, 34379, 29822,
  /*  3690 */ 27056, 26007, 41309, 21391, 27093, 25696, 38376, 33114, 33114, 29434, 19211, 19211, 30261, 30196, 25048,
  /*  3705 */ 35938, 27093, 25273, 34908, 33114, 21409, 29349, 19211, 34359, 21431, 41846, 27093, 23766, 33114, 21509,
  /*  3720 */ 19211, 38001, 26008, 33771, 42137, 41034, 21843, 19211, 24098, 21451, 37193, 19211, 38691, 41240, 24260,
  /*  3735 */ 21479, 28548, 21482, 21498, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211,
  /*  3750 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3765 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3780 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3795 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3810 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3825 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  3840 */ 19956, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21596, 19978, 19211, 19211, 19211, 41212,
  /*  3855 */ 21612, 19048, 19211, 19211, 20169, 19211, 19211, 19940, 19211, 19211, 29824, 32442, 19211, 19211, 25500,
  /*  3870 */ 32441, 41308, 33159, 33116, 21648, 21353, 19211, 19211, 20536, 19211, 19211, 23610, 19211, 25499, 29825,
  /*  3885 */ 25047, 19211, 19211, 29820, 33582, 27093, 27093, 27093, 42679, 33114, 33114, 33115, 40531, 30415, 19211,
  /*  3900 */ 19211, 19211, 19211, 35280, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 26896,
  /*  3915 */ 33113, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196,
  /*  3930 */ 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211, 19211,
  /*  3945 */ 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196,
  /*  3960 */ 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114,
  /*  3975 */ 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592,
  /*  3990 */ 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211,
  /*  4005 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4020 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4035 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4050 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4065 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4080 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4095 */ 19211, 19956, 20260, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 19978, 36840, 21665, 36854,
  /*  4110 */ 20265, 21675, 19048, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 21691, 18433, 21708, 19211, 19211,
  /*  4125 */ 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351,
  /*  4140 */ 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210,
  /*  4155 */ 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498,
  /*  4170 */ 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814,
  /*  4185 */ 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005,
  /*  4200 */ 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527,
  /*  4215 */ 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454,
  /*  4230 */ 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713,
  /*  4245 */ 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211,
  /*  4260 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4275 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4290 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4305 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4320 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4335 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4350 */ 19211, 19211, 19956, 21728, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21747, 19978, 21763, 19211,
  /*  4365 */ 19211, 23955, 21784, 23229, 19211, 19211, 20169, 19211, 19211, 29640, 19211, 19211, 29824, 32442, 19211,
  /*  4380 */ 19211, 25500, 32441, 41308, 33159, 33116, 21833, 21353, 19211, 19211, 20536, 19211, 19211, 41467, 19211,
  /*  4395 */ 25499, 29825, 25047, 19211, 19211, 29820, 33582, 27093, 27093, 27093, 42679, 33114, 33114, 33115, 40531,
  /*  4410 */ 37015, 19211, 19211, 19211, 19211, 34341, 21868, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093,
  /*  4425 */ 27093, 26896, 33113, 33114, 33114, 33114, 28310, 21887, 19211, 19211, 19211, 19211, 21580, 19211, 29823,
  /*  4440 */ 25047, 30196, 25653, 27093, 27093, 27093, 25785, 34909, 33114, 33114, 33114, 28312, 21895, 19211, 19211,
  /*  4455 */ 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 21912, 33114, 33114, 33114, 29434, 19211, 19211,
  /*  4470 */ 19211, 30196, 25048, 35938, 27093, 27093, 21947, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093,
  /*  4485 */ 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211,
  /*  4500 */ 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211,
  /*  4515 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4530 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4545 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4560 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4575 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4590 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4605 */ 19211, 19211, 19211, 19956, 37064, 19211, 19211, 19211, 21967, 21985, 19211, 19398, 21022, 22006, 41536,
  /*  4620 */ 22043, 22059, 19211, 28744, 38269, 19211, 19211, 40951, 22105, 19211, 42710, 19211, 19211, 18433, 26135,
  /*  4635 */ 19211, 19211, 20470, 26134, 28866, 22775, 22365, 22734, 22659, 18338, 29933, 22124, 19211, 19211, 23610,
  /*  4650 */ 19211, 42351, 18383, 18399, 18415, 19094, 18429, 22159, 22175, 22191, 22221, 22233, 35197, 22261, 22391,
  /*  4665 */ 22866, 22709, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 18519, 22593,
  /*  4680 */ 22301, 28869, 22317, 22362, 22381, 22830, 22525, 22915, 23119, 21266, 18683, 18719, 18754, 30269, 19211,
  /*  4695 */ 18777, 18814, 28105, 22415, 22441, 22456, 22472, 22972, 22488, 22273, 22517, 22541, 22868, 35466, 18962,
  /*  4710 */ 36826, 19005, 19021, 19064, 19132, 37430, 22582, 22609, 22205, 22625, 23051, 22645, 22784, 22700, 41353,
  /*  4725 */ 19247, 24527, 39853, 19266, 22726, 22750, 22800, 35172, 23205, 22816, 22556, 31543, 19393, 26121, 22852,
  /*  4740 */ 22765, 22884, 22900, 22926, 19486, 19532, 28133, 35141, 22942, 35186, 22245, 19564, 22958, 22988, 22285,
  /*  4755 */ 28773, 23004, 23020, 28863, 22836, 22425, 22399, 23036, 22501, 23067, 23106, 23135, 23190, 23221, 19211,
  /*  4770 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4785 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4800 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4815 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4830 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4845 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  4860 */ 19211, 19211, 19211, 19211, 19956, 21203, 19211, 19211, 19211, 23245, 23256, 19211, 19211, 21022, 23279,
  /*  4875 */ 27930, 23320, 23324, 19211, 29248, 19048, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433,
  /*  4890 */ 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211, 19211,
  /*  4905 */ 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454,
  /*  4920 */ 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 23340, 18491, 18507, 18535, 18574, 39184, 37440,
  /*  4935 */ 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 23367, 21266, 18683, 18719, 18754, 29357,
  /*  4950 */ 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 21105, 23383,
  /*  4965 */ 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 23420, 19173, 19191, 42452, 19228,
  /*  4980 */ 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 23457, 23473, 19342, 19358, 31543, 19393, 26121,
  /*  4995 */ 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647,
  /*  5010 */ 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932,
  /*  5025 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5040 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5055 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5070 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5085 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5100 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5115 */ 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 19211,
  /*  5130 */ 31492, 19146, 19151, 19155, 41789, 23489, 19048, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211,
  /*  5145 */ 18433, 23549, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 23570, 18296, 18338, 29933, 18354, 19211,
  /*  5160 */ 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773,
  /*  5175 */ 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184,
  /*  5190 */ 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754,
  /*  5205 */ 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216,
  /*  5220 */ 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452,
  /*  5235 */ 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393,
  /*  5250 */ 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578,
  /*  5265 */ 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901,
  /*  5280 */ 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5295 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5310 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5325 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5340 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5355 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5370 */ 19211, 19211, 19211, 19211, 19211, 19211, 23596, 19211, 19630, 19211, 19211, 21020, 19211, 19211, 19211,
  /*  5385 */ 21022, 19978, 19606, 23632, 19619, 19211, 32109, 20515, 19211, 19211, 20169, 19211, 19211, 42710, 19211,
  /*  5400 */ 19211, 18433, 23648, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 23671, 18296, 18338, 29933, 18354,
  /*  5415 */ 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757,
  /*  5430 */ 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574,
  /*  5445 */ 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719,
  /*  5460 */ 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940,
  /*  5475 */ 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191,
  /*  5490 */ 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543,
  /*  5505 */ 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564,
  /*  5520 */ 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870,
  /*  5535 */ 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5550 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5565 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5580 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5595 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5610 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5625 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23697, 19691, 19211, 19211, 19211, 21020, 19211, 19211,
  /*  5640 */ 19211, 21022, 19978, 19819, 19824, 19828, 19696, 34120, 23735, 19211, 19211, 20169, 19211, 19211, 42710,
  /*  5655 */ 19211, 19211, 18433, 18791, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 19677, 18338, 29933,
  /*  5670 */ 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470,
  /*  5685 */ 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535,
  /*  5700 */ 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683,
  /*  5715 */ 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918,
  /*  5730 */ 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173,
  /*  5745 */ 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358,
  /*  5760 */ 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548,
  /*  5775 */ 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844,
  /*  5790 */ 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5805 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5820 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5835 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5850 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5865 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  5880 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23783, 19211, 19211, 19211, 19211, 23799, 19211,
  /*  5895 */ 19211, 19211, 21022, 19978, 24051, 18271, 18279, 41971, 23834, 19048, 19211, 19211, 20169, 19211, 19211,
  /*  5910 */ 42710, 19211, 23870, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 23580, 23887, 18296, 18338,
  /*  5925 */ 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449,
  /*  5940 */ 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507,
  /*  5955 */ 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266,
  /*  5970 */ 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896,
  /*  5985 */ 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207,
  /*  6000 */ 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342,
  /*  6015 */ 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871,
  /*  6030 */ 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805,
  /*  6045 */ 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6060 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6075 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6090 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6105 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6120 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6135 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020,
  /*  6150 */ 19211, 19211, 19211, 21022, 19978, 19211, 19211, 19211, 18703, 23913, 19048, 19211, 19211, 20169, 19211,
  /*  6165 */ 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296,
  /*  6180 */ 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768,
  /*  6195 */ 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491,
  /*  6210 */ 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916,
  /*  6225 */ 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874,
  /*  6240 */ 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450,
  /*  6255 */ 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473,
  /*  6270 */ 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878,
  /*  6285 */ 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789,
  /*  6300 */ 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6315 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6330 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6345 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6360 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6375 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6390 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211,
  /*  6405 */ 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169,
  /*  6420 */ 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158,
  /*  6435 */ 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499,
  /*  6450 */ 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 25179,
  /*  6465 */ 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310,
  /*  6480 */ 32988, 19211, 19211, 19211, 19211, 21580, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591,
  /*  6495 */ 34909, 33114, 33114, 33114, 28312, 21895, 19211, 19211, 19211, 24009, 29822, 27056, 26007, 41309, 27093,
  /*  6510 */ 27093, 30763, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 21947,
  /*  6525 */ 33114, 40569, 30415, 19211, 42591, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756,
  /*  6540 */ 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767,
  /*  6555 */ 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6570 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6585 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6600 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6615 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6630 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6645 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211,
  /*  6660 */ 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211,
  /*  6675 */ 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116,
  /*  6690 */ 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820,
  /*  6705 */ 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211,
  /*  6720 */ 25179, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114,
  /*  6735 */ 28310, 32988, 19211, 19211, 19211, 19211, 21580, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093,
  /*  6750 */ 25591, 34909, 33114, 33114, 33114, 28312, 21895, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309,
  /*  6765 */ 27093, 27093, 30763, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093,
  /*  6780 */ 21947, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008,
  /*  6795 */ 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482,
  /*  6810 */ 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6825 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6840 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6855 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6870 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6885 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  6900 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211,
  /*  6915 */ 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211,
  /*  6930 */ 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159,
  /*  6945 */ 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211,
  /*  6960 */ 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211,
  /*  6975 */ 19211, 24031, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114,
  /*  6990 */ 33114, 28310, 32988, 19211, 19211, 19211, 19211, 21580, 19211, 29823, 25047, 30196, 25653, 27093, 27093,
  /*  7005 */ 27093, 25591, 34909, 33114, 33114, 33114, 28312, 21895, 19211, 19211, 19211, 19211, 29822, 27056, 26007,
  /*  7020 */ 41309, 27093, 27093, 30763, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093,
  /*  7035 */ 27093, 21947, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211,
  /*  7050 */ 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548,
  /*  7065 */ 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7080 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7095 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7110 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7125 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7140 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7155 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211,
  /*  7170 */ 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032, 37207, 21463, 18761,
  /*  7185 */ 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308,
  /*  7200 */ 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211,
  /*  7215 */ 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211,
  /*  7230 */ 19211, 19211, 25179, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114,
  /*  7245 */ 33114, 33114, 28310, 32988, 19211, 19211, 19211, 19211, 21580, 24067, 29823, 25047, 30196, 25653, 27093,
  /*  7260 */ 27093, 27093, 25591, 34909, 33114, 33114, 33114, 28312, 21895, 19211, 19211, 19211, 19211, 29822, 27056,
  /*  7275 */ 26007, 41309, 27093, 27093, 30763, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938,
  /*  7290 */ 27093, 27093, 21947, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211,
  /*  7305 */ 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592,
  /*  7320 */ 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7335 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7350 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7365 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7380 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7395 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7410 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949,
  /*  7425 */ 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032, 37207, 21463,
  /*  7440 */ 18761, 19211, 19211, 20169, 19211, 19211, 27145, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441,
  /*  7455 */ 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 27149, 19211, 25499, 29825, 25047,
  /*  7470 */ 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211,
  /*  7485 */ 19211, 19211, 19211, 25179, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992,
  /*  7500 */ 33114, 33114, 33114, 28310, 32988, 19211, 19211, 19211, 19211, 21580, 19211, 29823, 25047, 30196, 25653,
  /*  7515 */ 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 28312, 21895, 19211, 19211, 19211, 19211, 29822,
  /*  7530 */ 27056, 26007, 41309, 27093, 27093, 30763, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048,
  /*  7545 */ 35938, 27093, 27093, 21947, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415,
  /*  7560 */ 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305,
  /*  7575 */ 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211,
  /*  7590 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7605 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7620 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7635 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7650 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7665 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7680 */ 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032, 37207,
  /*  7695 */ 21463, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500,
  /*  7710 */ 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825,
  /*  7725 */ 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211,
  /*  7740 */ 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390,
  /*  7755 */ 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196,
  /*  7770 */ 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211, 19211,
  /*  7785 */ 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196,
  /*  7800 */ 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114,
  /*  7815 */ 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592,
  /*  7830 */ 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211,
  /*  7845 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7860 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7875 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7890 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7905 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7920 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  7935 */ 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032,
  /*  7950 */ 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211,
  /*  7965 */ 25500, 32441, 41308, 33159, 33116, 33158, 21575, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499,
  /*  7980 */ 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415,
  /*  7995 */ 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093,
  /*  8010 */ 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047,
  /*  8025 */ 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211,
  /*  8040 */ 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211, 19211,
  /*  8055 */ 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766,
  /*  8070 */ 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762,
  /*  8085 */ 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211,
  /*  8100 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8115 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8130 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8145 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8160 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8175 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8190 */ 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211,
  /*  8205 */ 28032, 37207, 34180, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211,
  /*  8220 */ 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211,
  /*  8235 */ 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531,
  /*  8250 */ 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093,
  /*  8265 */ 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823,
  /*  8280 */ 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211,
  /*  8295 */ 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211,
  /*  8310 */ 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093,
  /*  8325 */ 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211,
  /*  8340 */ 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211,
  /*  8355 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8370 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8385 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8400 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8415 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8430 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8445 */ 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 24085, 27057,
  /*  8460 */ 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442,
  /*  8475 */ 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211,
  /*  8490 */ 27800, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115,
  /*  8505 */ 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093,
  /*  8520 */ 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8535 */ 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211,
  /*  8550 */ 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211,
  /*  8565 */ 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846,
  /*  8580 */ 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843,
  /*  8595 */ 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211,
  /*  8610 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8625 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8640 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8655 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8670 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8685 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8700 */ 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971,
  /*  8715 */ 27057, 19211, 24122, 24138, 24150, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824,
  /*  8730 */ 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211,
  /*  8745 */ 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114,
  /*  8760 */ 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989,
  /*  8775 */ 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211,
  /*  8790 */ 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211,
  /*  8805 */ 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434,
  /*  8820 */ 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500,
  /*  8835 */ 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764,
  /*  8850 */ 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408,
  /*  8865 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8880 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8895 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8910 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8925 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8940 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  8955 */ 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022,
  /*  8970 */ 23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211,
  /*  8985 */ 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211,
  /*  9000 */ 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114,
  /*  9015 */ 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501,
  /*  9030 */ 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211,
  /*  9045 */ 19211, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533,
  /*  9060 */ 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114,
  /*  9075 */ 29434, 19211, 19211, 36308, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211,
  /*  9090 */ 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098,
  /*  9105 */ 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561,
  /*  9120 */ 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9135 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9150 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9165 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9180 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9195 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9210 */ 19211, 19211, 19211, 19211, 19211, 19211, 24166, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211,
  /*  9225 */ 21022, 23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211,
  /*  9240 */ 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536,
  /*  9255 */ 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257,
  /*  9270 */ 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211,
  /*  9285 */ 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211,
  /*  9300 */ 19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114,
  /*  9315 */ 40533, 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114,
  /*  9330 */ 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211,
  /*  9345 */ 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211,
  /*  9360 */ 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525,
  /*  9375 */ 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9390 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9405 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9420 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9435 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9450 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9465 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020, 19211, 19211,
  /*  9480 */ 19211, 21022, 19978, 20199, 24188, 20213, 42018, 24198, 19048, 19211, 19211, 20169, 19211, 19211, 42710,
  /*  9495 */ 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933,
  /*  9510 */ 18354, 19211, 19211, 23610, 29994, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470,
  /*  9525 */ 19757, 19773, 18454, 18475, 24214, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535,
  /*  9540 */ 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683,
  /*  9555 */ 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918,
  /*  9570 */ 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173,
  /*  9585 */ 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358,
  /*  9600 */ 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 24232, 28133, 34862, 34878, 34871, 19548,
  /*  9615 */ 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844,
  /*  9630 */ 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9645 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9660 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9675 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9690 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9705 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9720 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020, 19211,
  /*  9735 */ 19211, 19211, 21022, 19978, 19211, 19211, 19211, 19211, 29940, 19048, 19211, 19211, 20169, 19211, 19211,
  /*  9750 */ 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338,
  /*  9765 */ 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449,
  /*  9780 */ 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507,
  /*  9795 */ 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266,
  /*  9810 */ 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896,
  /*  9825 */ 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207,
  /*  9840 */ 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342,
  /*  9855 */ 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871,
  /*  9870 */ 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805,
  /*  9885 */ 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9900 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9915 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9930 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9945 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9960 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /*  9975 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 24248, 24283, 19211, 19211, 19211, 24301,
  /*  9990 */ 19211, 19211, 19211, 21022, 24331, 42040, 24352, 24356, 19211, 24315, 24372, 19211, 19211, 20169, 19211,
  /* 10005 */ 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 24399,
  /* 10020 */ 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768,
  /* 10035 */ 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491,
  /* 10050 */ 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916,
  /* 10065 */ 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874,
  /* 10080 */ 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450,
  /* 10095 */ 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473,
  /* 10110 */ 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878,
  /* 10125 */ 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789,
  /* 10140 */ 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10155 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10170 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10185 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10200 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10215 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10230 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 24436, 24458, 19211, 19211, 19211,
  /* 10245 */ 21020, 19211, 19211, 19211, 21022, 19978, 19211, 19211, 19211, 24442, 24476, 37494, 19211, 19211, 20169,
  /* 10260 */ 19211, 19211, 42710, 21329, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 18625, 19320,
  /* 10275 */ 24513, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079,
  /* 10290 */ 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379,
  /* 10305 */ 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498,
  /* 10320 */ 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946,
  /* 10335 */ 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189,
  /* 10350 */ 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858,
  /* 10365 */ 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862,
  /* 10380 */ 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745,
  /* 10395 */ 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10410 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10425 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10440 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10455 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10470 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10485 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 24576, 19211,
  /* 10500 */ 19211, 24595, 38513, 19211, 21337, 31397, 24621, 24635, 24645, 24661, 24676, 24688, 18761, 24704, 24832,
  /* 10515 */ 20169, 39883, 21242, 24725, 24747, 41339, 24772, 24823, 33395, 25136, 24855, 24871, 24896, 24912, 33974,
  /* 10530 */ 24941, 24957, 19211, 27278, 20536, 37235, 23871, 19211, 36512, 25499, 29825, 24984, 35512, 35690, 32162,
  /* 10545 */ 25005, 27093, 27093, 41439, 32257, 33114, 33114, 37001, 40531, 30415, 21151, 28445, 33095, 23554, 19211,
  /* 10560 */ 25179, 21692, 25040, 38026, 28759, 32596, 25064, 34484, 27093, 40205, 25095, 25111, 33114, 38662, 33039,
  /* 10575 */ 29420, 32988, 25152, 34140, 19211, 32327, 25170, 19211, 25198, 36131, 25248, 25653, 25264, 25282, 38114,
  /* 10590 */ 25591, 25325, 25545, 41284, 33114, 25362, 25399, 35018, 19211, 38852, 32124, 29822, 27056, 26007, 41309,
  /* 10605 */ 27093, 40901, 25426, 33114, 33114, 27239, 29434, 25456, 34135, 25479, 25496, 29092, 25517, 40255, 27093,
  /* 10620 */ 21947, 32265, 33741, 26375, 19211, 19211, 25500, 41846, 30859, 27560, 25542, 25561, 19211, 19211, 26008,
  /* 10635 */ 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26159, 25585, 32897, 25607, 32634,
  /* 10650 */ 23767, 25569, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10665 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10680 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10695 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10710 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10725 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10740 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 39122,
  /* 10755 */ 19211, 19211, 21020, 19211, 19211, 19211, 23533, 25636, 22027, 25669, 25684, 37207, 32419, 18761, 19211,
  /* 10770 */ 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159,
  /* 10785 */ 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211,
  /* 10800 */ 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 29957,
  /* 10815 */ 19211, 25716, 21692, 29825, 36728, 30792, 25501, 24989, 27093, 27093, 27019, 32390, 23992, 33114, 33114,
  /* 10830 */ 37673, 28310, 32988, 19211, 19211, 19211, 19211, 21580, 19211, 29823, 25047, 30196, 25653, 27093, 27093,
  /* 10845 */ 27093, 25591, 34909, 33114, 33114, 33114, 28312, 21895, 19211, 19211, 35716, 19211, 25756, 40173, 26007,
  /* 10860 */ 25778, 27093, 27093, 30763, 40564, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093,
  /* 10875 */ 27093, 21947, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211,
  /* 10890 */ 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 25801,
  /* 10905 */ 25840, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10920 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10935 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10950 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10965 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10980 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 10995 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211,
  /* 11010 */ 23351, 19211, 19211, 21020, 20350, 19211, 19211, 37758, 25883, 25897, 25910, 25926, 25941, 25953, 18761,
  /* 11025 */ 19211, 24285, 20169, 25969, 19211, 25986, 19211, 19211, 29824, 32442, 19211, 19211, 26005, 41090, 41308,
  /* 11040 */ 26024, 36931, 26049, 21353, 27657, 19211, 20536, 26065, 21768, 19211, 25480, 19296, 26085, 38918, 19211,
  /* 11055 */ 26107, 29820, 32570, 34454, 27093, 27093, 28180, 26151, 33114, 33115, 40531, 21852, 19211, 19211, 21297,
  /* 11070 */ 19211, 21627, 29272, 24709, 39978, 25046, 19211, 25501, 24989, 27835, 26683, 32514, 32390, 26175, 34698,
  /* 11085 */ 39834, 33114, 28310, 32988, 19211, 31800, 19211, 19211, 29263, 19211, 29823, 25047, 30196, 25653, 27093,
  /* 11100 */ 27093, 37309, 25591, 34909, 33114, 33114, 31754, 28312, 21895, 19211, 19211, 19211, 29194, 29822, 27056,
  /* 11115 */ 26007, 41309, 27093, 26191, 30763, 33114, 33114, 26212, 29434, 19211, 19211, 26231, 30196, 26249, 26265,
  /* 11130 */ 39471, 27093, 21947, 39240, 31759, 26290, 19211, 19211, 30178, 26337, 31210, 23766, 26033, 21415, 19211,
  /* 11145 */ 42614, 26008, 23756, 41705, 33114, 26366, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 27859,
  /* 11160 */ 26391, 26427, 23767, 26431, 27566, 21525, 21525, 26447, 30408, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11175 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11190 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11205 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11220 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11235 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11250 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949,
  /* 11265 */ 19211, 19250, 19211, 19211, 21020, 37022, 19211, 39175, 21022, 26477, 26491, 26501, 26517, 26532, 26544,
  /* 11280 */ 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 32838, 39949, 19211, 26560, 23976, 32441,
  /* 11295 */ 29869, 33159, 26588, 26576, 21353, 26814, 26608, 19885, 19211, 26634, 19211, 19211, 18738, 26655, 26705,
  /* 11310 */ 37620, 30651, 26739, 24787, 32186, 38953, 26795, 33668, 33736, 34168, 36229, 40531, 30415, 19211, 29905,
  /* 11325 */ 26811, 30573, 19211, 25179, 21692, 29825, 25046, 19211, 25501, 26830, 27093, 27093, 27093, 32390, 23992,
  /* 11340 */ 33114, 33114, 33114, 28900, 26858, 19211, 19211, 39606, 38976, 21580, 19211, 29823, 25047, 30196, 19377,
  /* 11355 */ 26892, 27093, 27093, 26912, 26950, 33114, 33114, 36362, 28312, 21895, 19211, 19211, 19211, 19211, 26976,
  /* 11370 */ 27056, 26007, 26996, 27093, 27017, 30763, 27035, 38587, 33114, 29434, 18833, 32539, 19211, 35603, 27054,
  /* 11385 */ 35938, 27073, 27092, 27110, 37331, 40569, 30415, 27165, 19211, 25500, 41846, 27093, 23766, 33114, 21415,
  /* 11400 */ 19211, 27183, 26008, 23756, 33943, 33114, 33801, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 25849,
  /* 11415 */ 27201, 27226, 27255, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211,
  /* 11430 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11445 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11460 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11475 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11490 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11505 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11520 */ 23949, 19211, 19212, 27275, 19211, 21020, 29471, 27294, 23818, 28498, 27312, 27326, 27336, 27352, 27367,
  /* 11535 */ 27379, 18761, 39128, 39277, 27395, 23174, 27411, 39298, 24579, 29504, 27427, 34423, 18367, 27467, 27514,
  /* 11550 */ 27530, 27546, 27588, 27636, 27673, 27689, 18606, 27710, 27763, 38531, 27798, 20131, 26715, 25499, 29825,
  /* 11565 */ 38825, 31172, 19211, 21435, 42499, 26274, 34587, 27816, 27851, 27875, 27898, 41996, 40531, 28934, 39360,
  /* 11580 */ 27946, 41128, 27968, 28002, 25179, 28018, 28054, 28070, 28121, 28149, 32227, 28165, 28196, 28223, 28264,
  /* 11595 */ 28295, 37723, 25814, 28328, 28354, 32988, 28370, 19211, 28395, 27480, 21580, 28415, 28480, 41813, 28514,
  /* 11610 */ 28538, 34663, 27093, 28564, 40452, 28585, 28623, 29801, 41724, 28643, 21895, 28678, 30979, 37084, 28695,
  /* 11625 */ 29822, 28729, 28789, 28819, 25024, 28835, 28851, 42158, 28909, 28885, 28925, 19211, 42545, 23849, 30196,
  /* 11640 */ 28950, 28979, 40427, 24801, 28995, 33915, 29022, 30415, 29044, 29060, 25463, 29108, 29137, 29167, 29324,
  /* 11655 */ 29217, 29233, 42180, 29288, 33512, 28237, 29311, 21843, 30775, 24098, 38764, 39247, 26302, 29121, 29340,
  /* 11670 */ 29373, 33677, 29389, 34089, 29405, 26431, 27566, 29457, 21525, 21561, 30408, 19211, 19211, 19211, 19211,
  /* 11685 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11700 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11715 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11730 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11745 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11760 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11775 */ 19211, 23949, 19211, 19211, 39706, 19211, 29487, 21731, 29520, 30332, 40081, 29539, 29553, 29563, 29579,
  /* 11790 */ 29594, 29606, 18761, 19211, 31461, 20169, 19211, 19211, 24015, 19211, 19211, 29824, 32442, 24012, 24012,
  /* 11805 */ 29622, 32441, 29656, 33159, 29702, 29690, 21353, 22336, 19211, 20536, 22342, 19211, 31036, 19211, 29722,
  /* 11820 */ 29825, 25047, 19211, 29766, 38911, 42499, 35430, 27093, 27093, 40406, 33114, 33114, 33115, 29782, 30415,
  /* 11835 */ 19211, 19211, 19211, 19211, 19211, 25179, 21692, 29825, 25046, 19211, 29817, 24989, 27093, 27093, 40971,
  /* 11850 */ 32390, 23992, 33114, 33114, 29841, 28310, 32988, 19211, 19211, 28458, 19211, 21580, 19211, 29823, 25047,
  /* 11865 */ 30196, 29859, 27093, 35435, 27093, 25591, 34909, 33114, 29885, 33114, 28312, 21895, 19211, 29904, 19211,
  /* 11880 */ 19211, 29822, 29921, 23441, 41309, 27093, 40701, 30763, 33114, 33114, 31830, 29434, 19211, 19211, 19211,
  /* 11895 */ 30196, 25048, 35938, 27093, 27093, 21947, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766,
  /* 11910 */ 33114, 21415, 29956, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762,
  /* 11925 */ 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 29973, 21525, 30010, 30408, 19211, 19211, 19211,
  /* 11940 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11955 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11970 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 11985 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12000 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12015 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12030 */ 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 40504, 19211, 21022, 30040, 30054, 30064,
  /* 12045 */ 30080, 30095, 30107, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 30123, 19211, 29824, 32442, 19211,
  /* 12060 */ 19211, 25500, 32441, 41308, 33159, 33116, 33158, 30143, 19211, 19211, 20536, 19211, 19211, 19211, 19211,
  /* 12075 */ 30177, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531,
  /* 12090 */ 30415, 19211, 19211, 19211, 19211, 19211, 19211, 30194, 29825, 25046, 19211, 25501, 32926, 27093, 27093,
  /* 12105 */ 27093, 26196, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 39420, 19211, 37527, 19211, 19211, 29823,
  /* 12120 */ 25047, 23435, 30212, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 30238, 19211, 19211, 19211,
  /* 12135 */ 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211,
  /* 12150 */ 30285, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 33810, 30301, 30323, 30348, 41846, 27093,
  /* 12165 */ 23766, 33114, 21415, 19211, 19211, 30371, 33619, 30394, 30432, 21843, 19211, 30462, 34077, 30478, 19211,
  /* 12180 */ 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 30515, 21561, 30408, 19211, 19211,
  /* 12195 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12210 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12225 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12240 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12255 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12270 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12285 */ 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057,
  /* 12300 */ 19211, 28032, 37207, 21463, 18761, 19211, 19211, 30555, 19211, 19211, 19211, 22710, 19211, 29824, 30571,
  /* 12315 */ 19211, 30307, 30154, 30589, 30605, 37593, 21951, 30627, 30675, 19211, 28399, 20536, 36770, 27185, 19211,
  /* 12330 */ 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 39754, 32257, 33114, 33114, 30696,
  /* 12345 */ 40531, 30415, 19211, 19211, 30733, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 29084, 30751, 27093,
  /* 12360 */ 27093, 27093, 24267, 23992, 33114, 33114, 31928, 28310, 30415, 30791, 19211, 19211, 19211, 19211, 19211,
  /* 12375 */ 29823, 25047, 30196, 39926, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211,
  /* 12390 */ 38843, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 33530, 25696, 33114, 33114, 36922, 29434, 19211,
  /* 12405 */ 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846,
  /* 12420 */ 27093, 23766, 33114, 21415, 19211, 30808, 26008, 30827, 27094, 33114, 41118, 19211, 30849, 35382, 38627,
  /* 12435 */ 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211,
  /* 12450 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12465 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12480 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12495 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12510 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12525 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12540 */ 19211, 19211, 19211, 19211, 23949, 19211, 19211, 27138, 19211, 21020, 31284, 39291, 31277, 28803, 30883,
  /* 12555 */ 30897, 30907, 30923, 30938, 30950, 18761, 19211, 19211, 29201, 28464, 19211, 19211, 19211, 30966, 30995,
  /* 12570 */ 31018, 27782, 31952, 31052, 31075, 31091, 39212, 37677, 40012, 31114, 19211, 19211, 18587, 19211, 19116,
  /* 12585 */ 31135, 19211, 25499, 34221, 42491, 31154, 19211, 29820, 39741, 31188, 31207, 32370, 38468, 29888, 33114,
  /* 12600 */ 39582, 40531, 30415, 31226, 31246, 20924, 31263, 31300, 19211, 21799, 29825, 31325, 31230, 31348, 24989,
  /* 12615 */ 27093, 35399, 31578, 35956, 23992, 33114, 30446, 38347, 28310, 30415, 19211, 19211, 26321, 31383, 27776,
  /* 12630 */ 19211, 29823, 25047, 30196, 25653, 31413, 27093, 27093, 25591, 31430, 33114, 33114, 33114, 40533, 19211,
  /* 12645 */ 23504, 31453, 23519, 31477, 29822, 29632, 22018, 31513, 38947, 27093, 25696, 33114, 40670, 33114, 29181,
  /* 12660 */ 23712, 31531, 19211, 25383, 33575, 42665, 33629, 31559, 36961, 31594, 31630, 31660, 19211, 31367, 31678,
  /* 12675 */ 41846, 35374, 31718, 31740, 21415, 36249, 19211, 31775, 23756, 27094, 33114, 25824, 31799, 24098, 23764,
  /* 12690 */ 29843, 19211, 31816, 26592, 28038, 38891, 28548, 21482, 23767, 27259, 31856, 21525, 21525, 21561, 31898,
  /* 12705 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12720 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12735 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12750 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12765 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12780 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12795 */ 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022,
  /* 12810 */ 23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 36523, 19211, 19211,
  /* 12825 */ 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211,
  /* 12840 */ 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114,
  /* 12855 */ 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501,
  /* 12870 */ 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211,
  /* 12885 */ 19211, 19211, 29823, 25047, 30196, 25653, 27093, 38121, 27093, 25591, 34909, 33114, 31927, 33114, 40533,
  /* 12900 */ 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114,
  /* 12915 */ 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211,
  /* 12930 */ 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098,
  /* 12945 */ 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561,
  /* 12960 */ 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12975 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 12990 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13005 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13020 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13035 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13050 */ 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 29496, 19211, 21020, 19211, 31944, 21375,
  /* 13065 */ 31309, 31968, 31982, 31992, 32008, 32023, 32035, 18761, 38191, 19211, 20169, 19211, 25182, 22629, 32051,
  /* 13080 */ 19211, 32071, 32442, 19211, 32094, 32158, 32148, 32178, 40213, 33116, 33158, 25125, 36536, 19211, 22566,
  /* 13095 */ 18600, 32202, 41949, 36530, 24172, 29825, 32222, 19211, 36537, 25645, 26670, 32243, 31414, 33523, 32281,
  /* 13110 */ 36027, 31437, 32310, 32297, 34816, 19211, 19211, 19211, 19211, 32326, 19211, 21692, 32343, 25046, 19211,
  /* 13125 */ 25501, 24989, 32362, 32386, 35947, 26196, 32406, 36018, 36289, 33114, 28310, 30415, 33212, 34000, 19211,
  /* 13140 */ 30735, 32780, 19211, 29823, 32435, 30196, 25653, 27093, 35583, 36270, 25591, 34909, 33114, 38658, 32458,
  /* 13155 */ 40533, 26639, 19211, 19211, 42522, 19211, 32477, 27056, 26007, 32501, 27093, 27093, 25696, 26411, 33114,
  /* 13170 */ 33114, 29434, 32537, 19211, 22329, 32555, 28489, 40626, 27093, 27093, 36075, 33114, 40569, 30415, 24046,
  /* 13185 */ 19211, 24491, 41846, 27093, 23766, 33114, 21415, 19211, 36764, 26008, 23756, 29674, 33114, 32586, 19211,
  /* 13200 */ 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 32612, 29441, 32628, 21525, 32650,
  /* 13215 */ 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13230 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13245 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13260 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13275 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13290 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13305 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 32132, 19211, 32680, 19211, 19507,
  /* 13320 */ 19211, 19516, 32696, 32710, 32720, 32736, 32751, 32763, 18761, 24069, 19211, 20169, 19211, 19211, 32779,
  /* 13335 */ 19211, 19211, 32796, 32442, 19211, 32819, 32830, 39401, 32854, 40909, 32893, 32881, 21353, 19211, 18698,
  /* 13350 */ 20536, 19211, 20746, 27296, 19211, 25499, 29825, 25047, 19211, 21990, 32913, 42499, 32954, 34615, 36156,
  /* 13365 */ 35227, 33114, 41660, 32974, 33013, 27649, 20248, 28705, 19211, 19211, 20740, 19211, 21692, 29825, 25046,
  /* 13380 */ 19211, 25501, 24989, 40392, 40050, 27093, 32390, 33029, 33055, 33074, 33114, 28310, 30415, 41365, 19498,
  /* 13395 */ 19211, 19211, 33092, 20027, 29823, 25047, 30196, 25653, 28569, 27093, 35364, 24807, 33111, 33132, 40473,
  /* 13410 */ 33114, 40533, 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114,
  /* 13425 */ 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 37228,
  /* 13440 */ 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 33151, 25232, 33114, 33175,
  /* 13455 */ 19211, 24098, 23764, 29843, 18980, 30833, 37145, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525,
  /* 13470 */ 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13485 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13500 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13515 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13530 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13545 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13560 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 23263, 19211, 33209, 19211,
  /* 13575 */ 34538, 39807, 33228, 33244, 33258, 33270, 33286, 33301, 33313, 18761, 21896, 33329, 20169, 24968, 33348,
  /* 13590 */ 19211, 19211, 33374, 33411, 33461, 33498, 33546, 33562, 33605, 33653, 33693, 33757, 33787, 21353, 19109,
  /* 13605 */ 19211, 28713, 29523, 38523, 22346, 33826, 20701, 29825, 32078, 30811, 33854, 33880, 42499, 21393, 27093,
  /* 13620 */ 33939, 32257, 36083, 33076, 33115, 33959, 27210, 19211, 22143, 19211, 19211, 19211, 31028, 21692, 34022,
  /* 13635 */ 25046, 34045, 25501, 34065, 29667, 27093, 27093, 34105, 34156, 33114, 33114, 36222, 28310, 30415, 19211,
  /* 13650 */ 19211, 19211, 34196, 19211, 27986, 34214, 41838, 34237, 32485, 27093, 27093, 34256, 34275, 34313, 33114,
  /* 13665 */ 36009, 42120, 40533, 38740, 34335, 34357, 34375, 36585, 34395, 30378, 34411, 34439, 34500, 39465, 25696,
  /* 13680 */ 29006, 29793, 41002, 27602, 38861, 41942, 34526, 34554, 21817, 34578, 34611, 27093, 34761, 33114, 31614,
  /* 13695 */ 30415, 34631, 19211, 38815, 26754, 34650, 34679, 40321, 29028, 34714, 19211, 38720, 32664, 35648, 34732,
  /* 13710 */ 21843, 30680, 24098, 34777, 34795, 19211, 24106, 37804, 33589, 34832, 30222, 40111, 23767, 26431, 27566,
  /* 13725 */ 34894, 21525, 21561, 30492, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13740 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13755 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13770 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13785 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13800 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13815 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19983, 19211, 21020,
  /* 13830 */ 20084, 21871, 19211, 20389, 34925, 34939, 34949, 34965, 34980, 34992, 18761, 35008, 35308, 23304, 35034,
  /* 13845 */ 35050, 19211, 26723, 35073, 35095, 35126, 35157, 41929, 37505, 35110, 35213, 35243, 34747, 35259, 35275,
  /* 13860 */ 19211, 19697, 20614, 19211, 18732, 35296, 28100, 35332, 36453, 25047, 19211, 19211, 29820, 35351, 27093,
  /* 13875 */ 35398, 35415, 32257, 23933, 32461, 41668, 40531, 30415, 27747, 19211, 37377, 19211, 35451, 35505, 20430,
  /* 13890 */ 29825, 41174, 23292, 30659, 24989, 27093, 41870, 27093, 40639, 23992, 33135, 35528, 40278, 33723, 33987,
  /* 13905 */ 19211, 35545, 35563, 19211, 19211, 19211, 29823, 25047, 21632, 25653, 27093, 35580, 27093, 25591, 34909,
  /* 13920 */ 36000, 33114, 33114, 40533, 19211, 19211, 35599, 27694, 19211, 29822, 27056, 26007, 41309, 27093, 27093,
  /* 13935 */ 26842, 33114, 33114, 33114, 29434, 19211, 35619, 19211, 30196, 36428, 35638, 25300, 36384, 23928, 41280,
  /* 13950 */ 39537, 30528, 19211, 19211, 24839, 41846, 35664, 34779, 33114, 21415, 19211, 19211, 26008, 23756, 27094,
  /* 13965 */ 33114, 26960, 19211, 42253, 39760, 29843, 35684, 29750, 35706, 40120, 35740, 28548, 21482, 23767, 26431,
  /* 13980 */ 31724, 35766, 35782, 21561, 34809, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 13995 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14010 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14025 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14040 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14055 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14070 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211,
  /* 14085 */ 21020, 19211, 36860, 19211, 35812, 35828, 31783, 35857, 35872, 35887, 35899, 18761, 19211, 40180, 24383,
  /* 14100 */ 19211, 19211, 19211, 19211, 31165, 29824, 32442, 35915, 19211, 19368, 35972, 41308, 35991, 27882, 33158,
  /* 14115 */ 21353, 20312, 19211, 20536, 19211, 39710, 35079, 36061, 36099, 36124, 25047, 26233, 19211, 29820, 42499,
  /* 14130 */ 36147, 37115, 36180, 36194, 36568, 24925, 36045, 36210, 29986, 19211, 19039, 19211, 22137, 19288, 36245,
  /* 14145 */ 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310,
  /* 14160 */ 30251, 21156, 19211, 19211, 39811, 31662, 30717, 30161, 32803, 30196, 25653, 27093, 36265, 27093, 30611,
  /* 14175 */ 36286, 26779, 33114, 33114, 40533, 19211, 36305, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27076,
  /* 14190 */ 27093, 32938, 33114, 38551, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908,
  /* 14205 */ 33114, 40569, 30415, 19211, 36324, 25500, 29737, 27093, 23766, 33114, 37218, 19211, 19211, 26008, 23756,
  /* 14220 */ 27094, 33114, 21843, 19211, 24098, 23764, 29843, 36341, 23762, 26592, 36378, 26592, 28548, 21482, 23767,
  /* 14235 */ 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14250 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14265 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14280 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14295 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14310 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14325 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211,
  /* 14340 */ 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211,
  /* 14355 */ 20169, 19211, 19211, 19211, 36400, 19211, 36420, 27441, 27447, 27451, 36444, 36735, 36477, 28207, 27038,
  /* 14370 */ 33158, 36501, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820,
  /* 14385 */ 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211,
  /* 14400 */ 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 27001, 23992, 33114, 33114, 33114,
  /* 14415 */ 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093,
  /* 14430 */ 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309,
  /* 14445 */ 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093,
  /* 14460 */ 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008,
  /* 14475 */ 23756, 36553, 42112, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482,
  /* 14490 */ 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14505 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14520 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14535 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14550 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14565 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14580 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211,
  /* 14595 */ 20044, 36584, 36601, 20065, 19211, 36607, 21022, 36624, 36638, 36648, 36664, 36679, 36691, 18761, 19211,
  /* 14610 */ 27952, 20169, 25700, 38219, 40747, 26069, 36707, 20710, 32442, 36751, 36786, 42482, 36811, 36876, 36892,
  /* 14625 */ 36947, 36986, 37038, 19211, 19211, 34006, 27740, 30539, 37060, 37080, 36718, 38079, 25047, 19211, 40755,
  /* 14640 */ 28522, 37100, 34259, 27093, 37161, 26769, 36036, 28627, 33115, 37179, 37251, 19211, 22082, 37268, 37274,
  /* 14655 */ 19211, 32206, 21692, 29825, 24550, 28679, 25501, 33424, 37290, 37307, 31515, 42264, 37325, 34691, 33114,
  /* 14670 */ 37708, 28310, 30415, 19211, 37347, 33864, 23165, 37369, 37393, 30355, 37415, 42374, 38087, 27093, 37126,
  /* 14685 */ 37456, 38328, 34909, 41006, 40146, 35529, 37480, 21924, 19211, 34049, 37521, 34634, 29822, 40361, 37543,
  /* 14700 */ 37581, 27093, 27093, 25696, 40030, 33114, 33114, 27912, 35622, 36608, 19211, 30196, 25048, 35938, 27093,
  /* 14715 */ 32958, 34908, 33114, 33445, 30415, 42568, 19211, 25500, 39675, 27093, 33904, 33114, 37609, 37867, 19211,
  /* 14730 */ 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 37636, 37658, 28597, 41305, 29706, 37693,
  /* 14745 */ 27572, 23767, 26431, 27566, 37739, 37774, 37790, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14760 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14775 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14790 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14805 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14820 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 14835 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211,
  /* 14850 */ 19211, 19211, 37820, 37842, 37866, 37883, 37899, 33838, 37915, 37929, 37939, 37955, 37970, 37982, 24420,
  /* 14865 */ 19211, 19211, 42066, 19211, 19211, 24731, 37998, 19631, 38017, 38034, 25989, 38050, 38066, 42063, 38103,
  /* 14880 */ 33637, 38149, 38137, 38172, 38207, 19211, 20536, 24605, 19211, 19211, 19211, 35057, 38248, 34029, 38285,
  /* 14895 */ 38304, 34562, 42499, 38320, 25018, 27093, 25079, 38344, 38375, 33115, 38363, 31905, 19211, 31497, 21931,
  /* 14910 */ 38392, 19211, 19211, 21692, 29825, 25046, 31911, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114,
  /* 14925 */ 33114, 33114, 28310, 30415, 31247, 19211, 38415, 26314, 40508, 21302, 29823, 38438, 20143, 38454, 27093,
  /* 14940 */ 37163, 25291, 38498, 38547, 33114, 31644, 36904, 29151, 21545, 19211, 34297, 19211, 19211, 24497, 29295,
  /* 14955 */ 42224, 41309, 31098, 38567, 25696, 33114, 36913, 38586, 29434, 19211, 35750, 19211, 23747, 25048, 35938,
  /* 14970 */ 25226, 38603, 38623, 38643, 40569, 30415, 19211, 28607, 25500, 38678, 27093, 23766, 33114, 30640, 21233,
  /* 14985 */ 36404, 38707, 38756, 25309, 41484, 28338, 19277, 38780, 23764, 26215, 19211, 26350, 38805, 41305, 26592,
  /* 15000 */ 38877, 21482, 33436, 38934, 28248, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15015 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15030 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15045 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15060 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15075 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15090 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949,
  /* 15105 */ 19211, 19211, 19211, 33386, 21020, 19211, 19211, 38969, 35724, 38992, 39006, 39016, 39032, 39047, 39059,
  /* 15120 */ 39902, 19211, 39075, 39091, 19211, 21712, 25410, 39107, 19211, 36108, 37555, 20670, 37565, 39144, 39160,
  /* 15135 */ 39200, 39228, 39263, 39314, 21353, 39330, 39349, 41372, 39376, 19211, 26618, 18827, 24540, 39984, 39395,
  /* 15150 */ 39417, 21136, 39436, 39452, 39487, 34467, 39504, 39525, 33114, 39553, 33058, 39569, 21538, 39598, 22089,
  /* 15165 */ 32055, 39622, 19211, 19211, 37353, 39660, 26091, 39691, 39726, 24989, 39776, 36164, 37291, 39792, 39827,
  /* 15180 */ 30024, 33114, 31608, 33708, 30415, 39850, 33358, 23150, 19211, 39869, 27612, 39918, 39942, 39965, 40000,
  /* 15195 */ 40238, 40046, 38570, 40066, 40097, 40136, 33114, 40309, 40533, 28963, 19211, 37826, 22071, 19211, 40162,
  /* 15210 */ 33482, 35335, 40196, 40229, 40254, 25696, 40271, 40294, 33114, 26461, 40337, 18971, 34198, 35928, 40359,
  /* 15225 */ 40377, 40422, 31191, 35796, 33114, 25867, 30415, 24560, 37252, 25500, 41846, 40443, 34510, 40468, 40489,
  /* 15240 */ 25377, 19211, 20150, 40524, 40549, 41041, 40585, 40611, 35841, 25526, 40655, 19211, 23762, 26592, 41305,
  /* 15255 */ 26592, 28548, 38156, 25858, 40690, 40717, 40733, 21525, 40771, 30408, 19211, 19211, 19211, 19211, 19211,
  /* 15270 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15285 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15300 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15315 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15330 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15345 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15360 */ 23949, 19211, 19211, 19211, 23655, 21020, 19211, 22108, 19211, 21022, 40787, 40801, 40814, 40830, 40845,
  /* 15375 */ 40857, 18761, 19211, 19211, 20169, 40873, 24460, 19211, 19211, 19211, 29824, 32442, 20994, 19211, 25500,
  /* 15390 */ 31361, 40892, 21649, 33116, 33158, 40925, 19211, 19211, 20536, 19211, 19211, 19211, 40941, 20219, 29825,
  /* 15405 */ 25047, 19211, 40948, 21809, 42499, 40967, 27093, 27093, 40987, 33114, 33114, 41514, 41022, 31868, 31138,
  /* 15420 */ 41057, 19211, 37850, 19211, 38422, 38901, 26980, 41083, 27978, 25501, 33892, 38607, 32865, 36485, 32390,
  /* 15435 */ 23992, 41106, 38482, 33114, 28310, 30415, 33185, 19211, 19211, 19211, 19211, 41144, 41166, 25047, 30196,
  /* 15450 */ 25653, 37464, 27093, 27093, 26689, 41190, 33114, 33114, 33114, 40533, 41206, 37642, 19211, 19211, 19211,
  /* 15465 */ 29822, 27056, 33474, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 27124, 19211, 19211, 40343, 30196,
  /* 15480 */ 25048, 42405, 27093, 27093, 36355, 33114, 40569, 30499, 19211, 19211, 25500, 41846, 27093, 23766, 33114,
  /* 15495 */ 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 41228, 41265, 19211, 23762, 26592,
  /* 15510 */ 41305, 26592, 28548, 21482, 37136, 41300, 27566, 21525, 41325, 21561, 30408, 19211, 19211, 19211, 19211,
  /* 15525 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15540 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15555 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15570 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15585 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15600 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15615 */ 19211, 23949, 19211, 19211, 19211, 19211, 21020, 21969, 20490, 38228, 38232, 23971, 38259, 20633, 41388,
  /* 15630 */ 41403, 41415, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211,
  /* 15645 */ 25500, 32441, 41431, 30867, 33116, 33158, 21353, 19211, 41455, 20536, 19211, 19211, 19211, 19211, 34240,
  /* 15660 */ 29825, 31002, 19211, 25970, 29820, 42499, 42417, 27829, 27093, 32257, 41483, 41512, 33115, 41500, 30415,
  /* 15675 */ 19211, 19211, 19211, 19211, 38399, 19211, 21692, 32346, 25762, 19211, 25501, 24989, 27093, 34476, 27093,
  /* 15690 */ 32390, 23992, 40674, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047,
  /* 15705 */ 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211,
  /* 15720 */ 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 35975, 19211,
  /* 15735 */ 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 23854, 19211, 25500, 41846, 27093, 23766,
  /* 15750 */ 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 41530, 24098, 23764, 29843, 19211, 23762,
  /* 15765 */ 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211,
  /* 15780 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15795 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15810 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15825 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15840 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15855 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 15870 */ 19211, 19211, 23949, 19211, 19211, 19211, 20286, 21020, 19211, 18798, 19211, 41552, 41568, 41582, 41592,
  /* 15885 */ 41608, 41623, 41635, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211,
  /* 15900 */ 19211, 25500, 32441, 41308, 41651, 36970, 41684, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 30127,
  /* 15915 */ 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531,
  /* 15930 */ 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093,
  /* 15945 */ 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 27620, 19211, 29823,
  /* 15960 */ 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 33332, 19211,
  /* 15975 */ 19211, 19211, 29822, 27056, 26007, 41309, 41700, 42085, 25696, 33114, 41721, 34319, 29434, 19211, 19211,
  /* 15990 */ 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093,
  /* 16005 */ 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211,
  /* 16020 */ 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211,
  /* 16035 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16050 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16065 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16080 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16095 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16110 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16125 */ 19211, 19211, 19211, 24166, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057,
  /* 16140 */ 19211, 41740, 41755, 41767, 18761, 19211, 19211, 20169, 27924, 19211, 41783, 19211, 20931, 41805, 31692,
  /* 16155 */ 31698, 31702, 41829, 31332, 41862, 34595, 33116, 33158, 21353, 19211, 19211, 41886, 18280, 19211, 41915,
  /* 16170 */ 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 42423, 32257, 33114, 33114, 25620,
  /* 16185 */ 40531, 30710, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093,
  /* 16200 */ 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16215 */ 29823, 25047, 30196, 25653, 27093, 27093, 27093, 32521, 34909, 33114, 33114, 33114, 40533, 33193, 19211,
  /* 16230 */ 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211,
  /* 16245 */ 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846,
  /* 16260 */ 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843,
  /* 16275 */ 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211,
  /* 16290 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16305 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16320 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16335 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16350 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16365 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16380 */ 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971,
  /* 16395 */ 27057, 19211, 28032, 37207, 21463, 18761, 41965, 19211, 20169, 19211, 19211, 25154, 19211, 19211, 29824,
  /* 16410 */ 32442, 19211, 19211, 25500, 38730, 41308, 41987, 33923, 38789, 42012, 19211, 19211, 20536, 19211, 19211,
  /* 16425 */ 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 25213, 27093, 27093, 35668, 32257, 33114, 33114,
  /* 16440 */ 31840, 40531, 30415, 42034, 19211, 37044, 19211, 19211, 19211, 21692, 29825, 42056, 19211, 25501, 24989,
  /* 16455 */ 31572, 27093, 42082, 32390, 42101, 33114, 40022, 33114, 28310, 30415, 37399, 19211, 19211, 19211, 19211,
  /* 16470 */ 19211, 31059, 25047, 30196, 36461, 39488, 42136, 27093, 25591, 42153, 26404, 33114, 33114, 40533, 19211,
  /* 16485 */ 36325, 19211, 19211, 19211, 29822, 27056, 36795, 41309, 39509, 27093, 42174, 33114, 42687, 33114, 42196,
  /* 16500 */ 19211, 19211, 19030, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 25340, 19211, 19211, 42222,
  /* 16515 */ 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764,
  /* 16530 */ 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408,
  /* 16545 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16560 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16575 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16590 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16605 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16620 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16635 */ 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022,
  /* 16650 */ 42240, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211,
  /* 16665 */ 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211,
  /* 16680 */ 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114,
  /* 16695 */ 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501,
  /* 16710 */ 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211,
  /* 16725 */ 19211, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533,
  /* 16740 */ 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114,
  /* 16755 */ 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211,
  /* 16770 */ 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098,
  /* 16785 */ 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561,
  /* 16800 */ 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16815 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16830 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16845 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16860 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16875 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 16890 */ 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 42280, 42311, 42329, 22684,
  /* 16905 */ 42288, 42304, 42327, 22673, 42345, 42367, 42390, 20419, 19211, 19211, 20169, 19211, 19211, 42710, 34290,
  /* 16920 */ 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 42439, 24216, 19320, 42468, 18338, 29933, 18354,
  /* 16935 */ 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19854,
  /* 16950 */ 19773, 18454, 18475, 27497, 42515, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574,
  /* 16965 */ 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719,
  /* 16980 */ 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940,
  /* 16995 */ 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191,
  /* 17010 */ 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543,
  /* 17025 */ 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564,
  /* 17040 */ 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870,
  /* 17055 */ 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17070 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17085 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17100 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17115 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17130 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17145 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020, 19211, 19211,
  /* 17160 */ 42538, 21022, 19978, 23081, 23086, 23090, 19211, 34847, 19048, 19211, 19211, 20169, 19211, 19211, 42710,
  /* 17175 */ 19211, 19211, 18433, 26135, 42561, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933,
  /* 17190 */ 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470,
  /* 17205 */ 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535,
  /* 17220 */ 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683,
  /* 17235 */ 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918,
  /* 17250 */ 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173,
  /* 17265 */ 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358,
  /* 17280 */ 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548,
  /* 17295 */ 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844,
  /* 17310 */ 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17325 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17340 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17355 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17370 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17385 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17400 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020, 42584,
  /* 17415 */ 19211, 19211, 35547, 42607, 25346, 42630, 42634, 19211, 42650, 19048, 19211, 19211, 20169, 19211, 19211,
  /* 17430 */ 42710, 23397, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338,
  /* 17445 */ 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449,
  /* 17460 */ 18470, 20576, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507,
  /* 17475 */ 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266,
  /* 17490 */ 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896,
  /* 17505 */ 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207,
  /* 17520 */ 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342,
  /* 17535 */ 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871,
  /* 17550 */ 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805,
  /* 17565 */ 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17580 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17595 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17610 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17625 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17640 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17655 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020,
  /* 17670 */ 19211, 19211, 19211, 21022, 19978, 19211, 19211, 19211, 19211, 40595, 18761, 19211, 19211, 20169, 19211,
  /* 17685 */ 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353,
  /* 17700 */ 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 33582, 27093,
  /* 17715 */ 27093, 27093, 42679, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692,
  /* 17730 */ 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 26896, 33113, 33114, 33114, 33114, 28310, 30415,
  /* 17745 */ 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909,
  /* 17760 */ 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093,
  /* 17775 */ 25696, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114,
  /* 17790 */ 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094,
  /* 17805 */ 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431,
  /* 17820 */ 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17835 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17850 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17865 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17880 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17895 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17910 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 17925 */ 19211, 19211, 19211, 26873, 19211, 26876, 39635, 39640, 39644, 34716, 26927, 42711, 19211, 19211, 19211,
  /* 17940 */ 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320,
  /* 17955 */ 19592, 18338, 29933, 42703, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079,
  /* 17970 */ 19768, 18449, 18470, 19854, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379,
  /* 17985 */ 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498,
  /* 18000 */ 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946,
  /* 18015 */ 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189,
  /* 18030 */ 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858,
  /* 18045 */ 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862,
  /* 18060 */ 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745,
  /* 18075 */ 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 18090 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 18105 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 18120 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 18135 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 18150 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211,
  /* 18165 */ 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 0, 2, 3, 94212, 5, 6, 0, 0,
  /* 18184 */ 0, 0, 0, 0, 73988, 73988, 73988, 73988, 0, 0, 78087, 78087, 73988, 73988, 78087, 78087, 78087, 78087,
  /* 18202 */ 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 45056, 78087, 318,
  /* 18217 */ 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 0, 0,
  /* 18233 */ 73988, 78087, 49152, 78087, 78087, 78087, 40960, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087,
  /* 18248 */ 78087, 78087, 78087, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 73988, 0, 0, 78087, 0, 2105344, 266, 267, 0,
  /* 18272 */ 0, 0, 0, 0, 0, 0, 270336, 270336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 997, 2162688, 2162688, 0,
  /* 18299 */ 2, 6, 0, 0, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 0, 0, 0, 131072, 0, 0, 131072, 0, 131072, 131072,
  /* 18322 */ 131072, 131072, 131072, 131072, 0, 0, 131072, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 2469888, 0, 0, 0, 0, 0, 0, 0,
  /* 18346 */ 0, 0, 0, 0, 0, 0, 0, 2719744, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 318, 318, 0, 0, 0, 0, 0, 744, 0, 0,
  /* 18375 */ 0, 0, 628, 0, 0, 0, 0, 756, 2158592, 2158592, 2158592, 2621440, 2158592, 2158592, 2686976, 2158592,
  /* 18391 */ 2703360, 2158592, 2158592, 2756608, 2777088, 2797568, 2158592, 2834432, 2158592, 2883584, 2158592,
  /* 18402 */ 2158592, 2158592, 3067904, 2158592, 2158592, 2158592, 0, 0, 0, 0, 2621440, 0, 2686976, 2703360, 0, 0,
  /* 18418 */ 2756608, 2777088, 2797568, 0, 2834432, 2883584, 0, 0, 0, 0, 0, 0, 2883584, 0, 0, 0, 2158592, 2158592,
  /* 18436 */ 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18447 */ 2158592, 2158592, 2162688, 2703360, 2162688, 2711552, 2162688, 2162688, 2756608, 2162688, 2777088,
  /* 18458 */ 2797568, 2162688, 2162688, 2162688, 2834432, 2162688, 2162688, 2883584, 2162688, 2162688, 2162688,
  /* 18469 */ 2162688, 2883584, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18480 */ 2162688, 3067904, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0,
  /* 18494 */ 2379776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2428928, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18513 */ 2580480, 2158592, 2158592, 2613248, 2158592, 2658304, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 0, 0,
  /* 18528 */ 0, 0, 2162688, 2163485, 2429725, 2163485, 2163485, 2785280, 2809856, 2158592, 2158592, 2158592, 2158592,
  /* 18541 */ 2158592, 2158592, 2158592, 2158592, 2428928, 0, 0, 2580480, 0, 0, 0, 0, 0, 163840, 163840, 163840, 163840,
  /* 18558 */ 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 0, 0, 0,
  /* 18573 */ 0, 0, 0, 2809856, 0, 0, 0, 0, 2809856, 0, 0, 0, 0, 2809856, 0, 0, 0, 0, 0, 974, 0, 0, 0, 0, 0, 318, 318,
  /* 18600 */ 0, 0, 0, 0, 0, 987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 950, 0, 0, 0, 0, 0, 0, 2162688, 2428928, 2162688,
  /* 18626 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18637 */ 2162688, 2162688, 0, 913, 2580480, 2162688, 2162688, 2162688, 2162688, 2613248, 2162688, 2162688, 2162688,
  /* 18650 */ 2658304, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2785280, 2801664,
  /* 18661 */ 2809856, 2162688, 2162688, 2785280, 2801664, 2809856, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18672 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 912, 0, 2854912, 0, 0, 0,
  /* 18687 */ 0, 0, 0, 0, 0, 3051520, 3055616, 0, 0, 0, 3141632, 0, 0, 0, 0, 959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18714 */ 278528, 278528, 278528, 278528, 278528, 0, 3158016, 0, 0, 0, 0, 0, 0, 0, 0, 2875392, 0, 2768896, 0, 0, 0,
  /* 18735 */ 0, 0, 1003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056, 402, 402, 402, 402, 402, 0, 0, 0, 2838528, 0, 0, 2854912,
  /* 18761 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 267, 0, 0, 0, 0, 0, 0, 0, 2158592, 2473984, 2478080, 2158592, 2158592,
  /* 18784 */ 2158592, 2158592, 2596864, 2158592, 2158592, 2158592, 2707456, 2158592, 2158592, 0, 0, 0, 253952, 266240,
  /* 18798 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 0, 0, 0, 0, 0, 0, 2875392, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 18820 */ 2158592, 2158592, 2158592, 2478080, 0, 0, 2707456, 0, 0, 0, 0, 0, 1035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18843 */ 2046, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 3158016, 2158592, 0, 0, 0, 0,
  /* 18861 */ 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2547712, 2162688, 2162688,
  /* 18873 */ 2162688, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2473984, 2478080, 2162688, 2162688, 2162688,
  /* 18886 */ 2519040, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2596864, 2162688, 2162688,
  /* 18897 */ 2162688, 2162688, 2162688, 2596864, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2707456,
  /* 18908 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2760704, 2162688, 2162688, 2162688, 2854912, 2162688,
  /* 18919 */ 2760704, 2162688, 2162688, 2162688, 2854912, 2875392, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18930 */ 2162688, 2162688, 2162688, 2162688, 2994176, 3018752, 2162688, 2162688, 2162688, 3051520, 2994176,
  /* 18941 */ 3018752, 2162688, 2162688, 2162688, 3051520, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 18952 */ 2162688, 2162688, 3158016, 2162688, 0, 0, 0, 0, 2121728, 0, 0, 0, 0, 2887680, 0, 0, 0, 0, 3026944, 0, 0,
  /* 18973 */ 0, 0, 0, 0, 0, 0, 2057, 0, 0, 0, 0, 0, 0, 0, 0, 2401, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 135168, 0, 0, 0, 0,
  /* 19003 */ 0, 0, 0, 0, 3043328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2527232, 2695168, 0, 3145728, 0, 0, 0, 0, 0, 0,
  /* 19029 */ 2572288, 0, 0, 0, 0, 0, 0, 0, 0, 532480, 0, 0, 0, 0, 0, 0, 0, 0, 937984, 0, 0, 0, 0, 0, 0, 0, 0, 2105344,
  /* 19057 */ 266, 267, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2527232, 2158592, 2158592, 2600960, 2158592,
  /* 19075 */ 2695168, 2158592, 2158592, 2887680, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 2162688,
  /* 19094 */ 2441216, 0, 0, 0, 0, 2777088, 0, 2883584, 0, 0, 0, 0, 0, 0, 2719744, 0, 0, 0, 0, 944, 945, 946, 0, 0, 0,
  /* 19119 */ 0, 0, 0, 0, 0, 0, 1007, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 3026944, 3076096, 3096576, 3145728, 0, 0, 0,
  /* 19141 */ 0, 0, 0, 3076096, 3096576, 0, 0, 0, 0, 0, 221605, 221605, 221605, 221605, 221605, 221605, 221605, 221605,
  /* 19159 */ 221605, 221605, 221605, 221605, 221605, 221605, 221605, 221605, 0, 0, 0, 0, 0, 0, 2162688, 2437120,
  /* 19175 */ 2162688, 2162688, 2162688, 2490368, 2162688, 2162688, 2527232, 2162688, 2162688, 2162688, 2162688,
  /* 19186 */ 2162688, 2162688, 2600960, 2162688, 2600960, 2625536, 2162688, 2162688, 2162688, 2695168, 2162688,
  /* 19197 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2887680, 2162688, 2162688, 2162688,
  /* 19208 */ 2162688, 3145728, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 285, 3145728, 2162688, 2162688,
  /* 19231 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 3153920,
  /* 19248 */ 0, 2813952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 283, 284, 0, 2158592, 2158592, 2633728, 2158592,
  /* 19270 */ 2158592, 2961408, 2158592, 3022848, 0, 0, 2633728, 0, 0, 0, 0, 0, 0, 0, 466944, 0, 2363, 2364, 0, 0, 0, 0,
  /* 19292 */ 0, 0, 0, 913408, 0, 0, 0, 0, 0, 0, 0, 0, 1054, 0, 402, 1057, 402, 402, 402, 402, 0, 0, 0, 2158592,
  /* 19316 */ 2813952, 2158592, 2158592, 2158592, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19328 */ 2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2908160, 2162688,
  /* 19340 */ 2162688, 2953216, 2162688, 2961408, 2162688, 2162688, 3022848, 3047424, 2162688, 2162688, 2162688,
  /* 19351 */ 2162688, 3174400, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 2514944, 0, 0,
  /* 19366 */ 2543616, 2592768, 0, 0, 0, 0, 0, 0, 0, 773, 0, 402, 402, 402, 402, 402, 402, 402, 402, 573440, 0, 0, 0, 0,
  /* 19390 */ 500, 500, 500, 0, 0, 3014656, 0, 2539520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 2158592, 0, 0,
  /* 19417 */ 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 0, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19434 */ 2162688, 2162688, 2162688, 912, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19446 */ 2162688, 2162688, 0, 2502656, 0, 0, 0, 0, 2891776, 2162688, 2162688, 2957312, 2162688, 2162688, 2162688,
  /* 19461 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2498560, 2539520, 2543616,
  /* 19472 */ 2162688, 2162688, 2592768, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2891776, 2162688,
  /* 19483 */ 2162688, 2957312, 2162688, 0, 0, 0, 2895872, 0, 0, 0, 2682880, 0, 2641920, 2609152, 2691072, 0, 0, 0, 0,
  /* 19502 */ 0, 0, 1624, 0, 1626, 0, 0, 0, 0, 0, 0, 0, 339, 294, 0, 0, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0, 0, 0, 0, 45056,
  /* 19532 */ 2936832, 0, 0, 3084288, 3129344, 0, 2940928, 2416640, 0, 0, 0, 0, 0, 0, 0, 2723840, 2162688, 2162688,
  /* 19550 */ 2162688, 2162688, 2162688, 3121152, 2162688, 2162688, 2162688, 2162688, 0, 2494464, 0, 0, 0, 2826240, 0,
  /* 19565 */ 2973696, 0, 0, 0, 3100672, 0, 0, 0, 0, 0, 0, 0, 2916352, 0, 2445312, 2494464, 2158592, 2744320, 2973696,
  /* 19584 */ 2744320, 0, 2158592, 0, 2162688, 2445312, 2453504, 2494464, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19603 */ 0, 2441216, 2449408, 0, 0, 0, 0, 0, 250278, 250278, 250278, 250278, 250278, 249856, 249856, 249856,
  /* 19619 */ 249856, 250278, 250278, 250278, 249856, 250278, 249856, 249856, 249856, 249856, 249856, 249856, 0, 0, 0,
  /* 19634 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 697, 2162688, 2162688, 2650112, 2744320, 2826240, 2928640, 2162688,
  /* 19654 */ 2973696, 2162688, 2162688, 2162688, 3100672, 2162688, 2445312, 2453504, 2494464, 2162688, 2162688,
  /* 19665 */ 2162688, 2162688, 2650112, 2744320, 2826240, 2928640, 2162688, 2973696, 2162688, 2162688, 2162688,
  /* 19676 */ 3100672, 2162688, 2162688, 0, 2, 0, 176128, 294912, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 0, 0, 0,
  /* 19696 */ 258048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 969, 2560000, 0, 2162688, 2551808, 2560000, 2162688,
  /* 19719 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3092480, 2162688, 2551808, 2560000,
  /* 19730 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3092480, 0, 0, 0, 0, 0, 2850816,
  /* 19745 */ 2162688, 2588672, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 19756 */ 2588672, 2162688, 2162688, 2162688, 2162688, 853, 0, 0, 856, 2162688, 2162688, 2441216, 2449408, 2162688,
  /* 19770 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2621440, 2162688, 2162688,
  /* 19781 */ 2162688, 2162688, 2686976, 2162688, 2703360, 2162688, 2711552, 2162688, 2162688, 2162688, 2162688,
  /* 19792 */ 2465792, 0, 2531328, 2985984, 0, 0, 0, 0, 2162688, 2162688, 2605056, 2162688, 2830336, 2162688, 2162688,
  /* 19807 */ 2162688, 2985984, 2162688, 2162688, 2605056, 2162688, 2830336, 2162688, 2162688, 2162688, 2985984,
  /* 19818 */ 2523136, 0, 0, 0, 0, 0, 258471, 258471, 258471, 258471, 258471, 258471, 258471, 258471, 258471, 258471,
  /* 19834 */ 258471, 258471, 258471, 258471, 258471, 258471, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688,
  /* 19850 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 2162688, 2162688,
  /* 19864 */ 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 0, 0, 2424832, 2162688, 2162688, 2162688, 2162688,
  /* 19877 */ 2981888, 2424832, 2162688, 2162688, 2162688, 2162688, 2981888, 2535424, 0, 0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
  /* 19896 */ 318, 318, 0, 0, 982, 0, 2912256, 2162688, 2654208, 2932736, 2162688, 2162688, 2654208, 2932736, 2162688,
  /* 19911 */ 2637824, 2699264, 2555904, 2162688, 2555904, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473984,
  /* 19932 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2945024, 2945024, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19949 */ 2106006, 0, 0, 0, 0, 0, 0, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 267, 267, 267, 267, 267,
  /* 19977 */ 267, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 297, 298, 299, 300, 0, 111011, 111011,
  /* 20001 */ 111011, 111011, 111011, 111011, 111011, 111011, 419, 419, 111011, 111011, 111011, 111011, 111011, 111011,
  /* 20015 */ 419, 111011, 111011, 111011, 419, 111011, 419, 419, 419, 419, 419, 419, 0, 0, 0, 0, 0, 0, 1672, 0, 0, 0,
  /* 20037 */ 0, 0, 0, 1679, 0, 0, 681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 118784, 0, 0, 266, 118784, 0,
  /* 20066 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0, 0, 318, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20099 */ 330, 0, 266, 266, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 266, 119155, 266, 266, 266, 266, 0, 0, 266, 0, 0, 2,
  /* 20126 */ 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1018, 663, 0, 0, 0, 0, 0, 968, 0, 0, 0, 0, 0, 0, 966656, 0, 0, 0, 0, 0, 0,
  /* 20156 */ 402, 402, 402, 402, 402, 2309, 402, 0, 0, 2311, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318,
  /* 20183 */ 318, 318, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 266, 0, 0, 0, 2441216, 2449408, 0, 0, 0, 0, 0, 286720,
  /* 20205 */ 286720, 286720, 286720, 286720, 0, 0, 0, 0, 0, 286720, 286720, 286720, 0, 286720, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20227 */ 0, 0, 402, 402, 402, 1060, 402, 402, 0, 2, 2183420, 94212, 5, 6, 256, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
  /* 20253 */ 1305, 0, 0, 0, 0, 0, 1309, 0, 0, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188836, 188836, 188836,
  /* 20280 */ 188836, 0, 318, 0, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 314, 315, 316, 317, 0, 122880, 0,
  /* 20305 */ 122880, 0, 122880, 122880, 122880, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 947, 0, 0, 0, 0, 952, 0, 0, 0,
  /* 20328 */ 122880, 0, 0, 122880, 122880, 122880, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 122880, 0,
  /* 20345 */ 122880, 122880, 122880, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 276, 0, 0, 0, 0, 0, 0, 147456, 0, 0,
  /* 20371 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 318, 204800, 0, 0, 0, 670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
  /* 20402 */ 0, 0, 45056, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 0, 931, 935, 0, 2441216, 2449408, 0, 0, 0, 0, 0, 307200,
  /* 20425 */ 0, 0, 2105344, 266, 267, 0, 0, 0, 0, 0, 0, 1385, 0, 0, 0, 0, 0, 1392, 0, 0, 402, 2162688, 2162688,
  /* 20448 */ 2162688, 3080192, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 1515, 0, 0,
  /* 20461 */ 1520, 0, 318, 0, 0, 0, 131072, 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592,
  /* 20482 */ 2158592, 2158592, 2158592, 2158592, 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344, 0, 0,
  /* 20505 */ 0, 0, 318, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 266, 267, 0, 0, 212992, 0, 0, 372,
  /* 20532 */ 0, 0, 0, 372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 318, 0, 0, 0, 2162688, 2162688, 2162688, 2162688,
  /* 20556 */ 1197, 0, 0, 1200, 2162688, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 853, 0, 90112,
  /* 20571 */ 856, 2162688, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 1198, 0, 0, 1201, 2162688,
  /* 20585 */ 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 20596 */ 3080192, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 139264, 0, 0,
  /* 20612 */ 267, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 318, 980, 0, 0, 0, 318, 267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20642 */ 0, 0, 0, 0, 0, 0, 344, 0, 267, 267, 0, 0, 0, 0, 0, 0, 0, 267, 0, 0, 0, 267, 45056, 139639, 0, 0, 0, 40960,
  /* 20670 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 591, 0, 0, 0, 0, 267, 267, 267, 267, 0, 0, 267, 0, 0, 2, 2, 3, 94212, 5,
  /* 20700 */ 6, 0, 0, 0, 0, 1050, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 712, 402, 402, 402, 402, 722, 402, 402,
  /* 20725 */ 727, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 0, 0, 0, 267, 2441216, 2449408, 0, 0, 0, 0, 0, 565248, 0, 0, 0,
  /* 20749 */ 0, 0, 0, 0, 0, 0, 0, 1008, 0, 0, 0, 0, 0, 49152, 264, 264, 264, 40960, 264, 264, 264, 264, 264, 264, 264,
  /* 20774 */ 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 143624, 264, 143624, 264, 264, 143624, 143624, 264, 264,
  /* 20793 */ 143624, 143624, 143624, 143624, 264, 264, 319, 264, 143624, 264, 264, 264, 264, 264, 143624, 323, 264,
  /* 20810 */ 264, 264, 264, 264, 143624, 143624, 143624, 143624, 143624, 143624, 143624, 143624, 264, 264, 264, 264,
  /* 20826 */ 264, 264, 143683, 143624, 264, 264, 264, 264, 264, 264, 143683, 264, 264, 264, 143683, 45056, 143624,
  /* 20843 */ 143624, 143624, 143624, 264, 143624, 264, 264, 264, 264, 264, 264, 0, 0, 0, 264, 264, 0, 0, 264, 264,
  /* 20863 */ 143624, 264, 264, 264, 264, 264, 264, 264, 143624, 264, 264, 143624, 264, 264, 264, 264, 264, 264, 264, 0,
  /* 20883 */ 264, 264, 264, 264, 143624, 143624, 264, 143624, 143624, 143624, 143624, 143624, 143683, 143683, 143683,
  /* 20898 */ 143683, 143624, 143624, 143624, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0,
  /* 20922 */ 2179692, 2179692, 0, 0, 0, 0, 0, 1334, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 0, 0, 0, 318, 0,
  /* 20950 */ 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 155648, 155648,
  /* 20972 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 0,
  /* 20986 */ 0, 0, 0, 49152, 155648, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 623, 0, 0, 0, 0, 0, 0, 0, 3067904,
  /* 21014 */ 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 0, 0, 159744, 0, 159744,
  /* 21043 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 0, 0, 0, 0,
  /* 21058 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 21071 */ 159744, 159744, 159744, 0, 90633, 159744, 0, 0, 0, 0, 159744, 0, 0, 0, 90633, 90633, 90633, 90633, 90633,
  /* 21090 */ 159744, 159744, 90633, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 90112, 2162688, 2428928, 2162688, 2162688, 2162688,
  /* 21108 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 266, 0,
  /* 21121 */ 163840, 163840, 163840, 163840, 163840, 163840, 163840, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1100,
  /* 21141 */ 1035, 0, 0, 0, 0, 0, 0, 942, 984, 1100, 0, 0, 0, 0, 1304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1615, 0, 0, 0,
  /* 21171 */ 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
  /* 21192 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0,
  /* 21209 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 49152, 167936, 0, 0, 40960, 167936, 167936, 0, 0, 167936, 0, 167936, 0,
  /* 21232 */ 167936, 0, 0, 0, 0, 0, 962560, 1052672, 0, 2290, 0, 0, 0, 0, 0, 0, 0, 644, 0, 0, 647, 0, 0, 0, 0, 0, 0, 2,
  /* 21260 */ 3, 253, 5, 6, 0, 257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2596864, 0, 0, 2760704, 0, 0, 0, 172032, 172032, 172032,
  /* 21285 */ 172032, 172032, 172032, 172032, 53496, 53496, 2, 2, 3, 0, 5, 6, 0, 0, 0, 0, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21310 */ 0, 0, 0, 1677, 0, 0, 0, 0, 566, 0, 0, 0, 0, 0, 0, 0, 2105344, 266, 267, 0, 0, 0, 0, 0, 0, 0, 1105920, 0,
  /* 21338 */ 0, 0, 0, 0, 0, 0, 0, 272, 271, 0, 271, 271, 272, 272, 0, 522, 522, 53496, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21367 */ 0, 0, 993, 0, 0, 0, 0, 998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 500, 1958, 500, 500, 500,
  /* 21396 */ 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1158, 500, 522, 522, 522, 2161, 522, 522, 522, 522,
  /* 21417 */ 522, 522, 522, 500, 500, 500, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 2210, 0, 0, 0, 0, 0, 402, 402, 402,
  /* 21443 */ 402, 402, 402, 402, 402, 1080, 402, 402, 500, 500, 2376, 500, 2377, 2378, 500, 500, 500, 500, 500, 500,
  /* 21463 */ 522, 522, 522, 522, 500, 500, 522, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 2446, 522, 522, 522, 522, 522,
  /* 21485 */ 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 500, 2493, 500, 500, 500, 500, 500, 500, 500, 500, 522, 2502,
  /* 21509 */ 522, 522, 522, 522, 522, 500, 500, 500, 522, 522, 522, 0, 2283, 0, 0, 0, 0, 0, 500, 500, 500, 500, 500,
  /* 21532 */ 500, 522, 522, 522, 522, 522, 522, 0, 0, 0, 1286, 0, 0, 0, 1292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21560 */ 692224, 0, 0, 500, 500, 500, 500, 522, 522, 522, 522, 0, 0, 500, 500, 522, 522, 248, 2, 6, 0, 0, 0, 0, 0,
  /* 21585 */ 0, 0, 0, 0, 0, 0, 1372, 0, 0, 0, 0, 0, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 180769, 180769,
  /* 21614 */ 180769, 180769, 0, 0, 180769, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1364, 0, 0, 0, 0, 0, 0, 0,
  /* 21639 */ 0, 0, 0, 0, 1718, 0, 402, 402, 402, 184320, 500, 500, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522,
  /* 21662 */ 522, 522, 874, 188836, 188836, 188836, 188836, 188836, 188836, 188836, 188836, 0, 0, 188836, 188836,
  /* 21677 */ 188836, 188836, 188836, 188836, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 233472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21703 */ 0, 0, 0, 0, 402, 2158592, 2158592, 0, 192512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 649, 0, 0, 0, 0, 0, 265,
  /* 21731 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 322, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 0,
  /* 21764 */ 0, 265, 0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1009, 0, 0, 0, 0, 362, 362, 362, 362, 0, 0, 362, 53496,
  /* 21792 */ 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1383, 1384, 0, 0, 1387, 0, 0, 0, 0, 0, 0, 402, 402, 1060, 402,
  /* 21818 */ 402, 402, 402, 402, 402, 402, 402, 0, 2099, 0, 0, 0, 0, 0, 0, 662, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 21842 */ 0, 522, 522, 522, 522, 522, 522, 500, 500, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
  /* 21869 */ 1026, 1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 345, 0, 0, 522, 1282, 1599, 0, 0, 0, 0, 1288, 1601, 0,
  /* 21897 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 590, 500, 500, 500, 500, 1781, 1985, 0, 0, 0, 0, 1787, 1987, 0,
  /* 21925 */ 0, 0, 0, 0, 0, 1854, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1338, 0, 1340, 0, 0, 1343, 0, 1985, 0, 1987, 0, 522, 522,
  /* 21953 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 909, 522, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21980 */ 0, 0, 0, 329, 0, 0, 0, 270, 270, 270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 0, 0, 0, 49152, 0, 0, 0,
  /* 22010 */ 40960, 0, 0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 0, 0, 1871, 402, 1940, 402, 402, 402, 402, 402, 0, 0, 0, 0, 377,
  /* 22037 */ 364, 364, 364, 364, 364, 364, 200704, 200704, 200973, 200704, 200704, 200704, 200973, 200704, 200974,
  /* 22052 */ 200704, 200704, 200973, 200704, 200704, 200704, 200704, 200974, 200704, 200704, 200704, 200704, 200704,
  /* 22065 */ 200704, 200704, 200704, 200704, 200704, 200704, 0, 0, 0, 0, 0, 0, 1894, 0, 0, 0, 1898, 0, 0, 0, 0, 0, 0,
  /* 22088 */ 1320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1322, 0, 0, 0, 0, 0, 0, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22120 */ 0, 346, 0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 0, 2179693, 0, 0, 0, 0, 0, 1349, 0, 0, 0, 0, 0, 0, 0,
  /* 22150 */ 0, 0, 0, 1323, 0, 0, 1326, 1327, 0, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2163485, 2163485,
  /* 22174 */ 2442013, 2450205, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 22185 */ 2622237, 2163485, 2163485, 2163485, 2163485, 2687773, 2163485, 2704157, 2163485, 2712349, 2163485,
  /* 22196 */ 2163485, 2757405, 2163485, 2777885, 2798365, 2163485, 2163485, 2163485, 2835229, 2163485, 2163485,
  /* 22207 */ 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 3027741, 2163485, 2163485, 3076893,
  /* 22218 */ 2163485, 3097373, 2163485, 2884381, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 22229 */ 2163485, 2163485, 2163485, 3068701, 2163485, 2163485, 2163485, 2163485, 853, 0, 0, 856, 2163543, 2163543,
  /* 22243 */ 2442071, 2450263, 2163543, 2163543, 2163543, 2163543, 2163543, 3122007, 2163485, 2163485, 2163543,
  /* 22254 */ 2163543, 0, 2494464, 0, 0, 0, 2826240, 2163543, 2757463, 2163543, 2777943, 2798423, 2163543, 2163543,
  /* 22268 */ 2163543, 2835287, 2163543, 2163543, 2884439, 2163543, 2163543, 2163543, 2163543, 2597719, 2163543,
  /* 22279 */ 2163543, 2163543, 2163543, 2163543, 2163543, 2708311, 2163543, 2163543, 2163543, 2163543, 2650967,
  /* 22290 */ 2745175, 2827095, 2929495, 2163543, 2974551, 2163543, 2163543, 2163543, 3101527, 2163485, 2163543,
  /* 22301 */ 2614045, 2163485, 2163485, 2163485, 2659101, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 22312 */ 2163485, 2163485, 2786077, 2802461, 2810653, 2163485, 2163485, 2163485, 3080989, 2163485, 2163485,
  /* 22323 */ 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 0, 0, 0, 0, 0, 0, 2070, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22345 */ 949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1025, 0, 0, 0, 0, 2163543, 2429783, 2163543, 2163543, 2163543,
  /* 22368 */ 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 0, 0,
  /* 22381 */ 2581335, 2163543, 2163543, 2163543, 2163543, 2614103, 2163543, 2163543, 2163543, 2659159, 2163543,
  /* 22392 */ 2163543, 2163543, 2163543, 2163543, 2163543, 3068759, 2163543, 2163543, 2163543, 2163543, 2163543,
  /* 22403 */ 2163543, 2163543, 2163543, 0, 0, 0, 0, 0, 0, 0, 0, 2163485, 2158592, 2158592, 2158592, 2158592, 2158592,
  /* 22420 */ 2158592, 3158016, 2158592, 0, 0, 0, 0, 0, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 22435 */ 2163485, 2163485, 2163485, 2163543, 2163543, 2163543, 2163485, 2474781, 2478877, 2163485, 2163485,
  /* 22446 */ 2163485, 2519837, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2597661, 2163485,
  /* 22457 */ 2163485, 2163485, 2163485, 2163485, 2708253, 2163485, 2163485, 2163485, 2163485, 2163485, 2761501,
  /* 22468 */ 2163485, 2163485, 2163485, 2855709, 2876189, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 22479 */ 2163485, 2163485, 2163485, 2994973, 3019549, 2163485, 2163485, 2163485, 3052317, 0, 0, 0, 2163543,
  /* 22492 */ 2163543, 2163543, 2163543, 2474839, 2478935, 2163543, 2163543, 2163543, 2519895, 2163543, 2163543,
  /* 22503 */ 2163543, 2465792, 0, 2531328, 2985984, 0, 0, 0, 0, 2163485, 2163485, 2605853, 2163485, 2831133, 2163543,
  /* 22518 */ 2761559, 2163543, 2163543, 2163543, 2855767, 2876247, 2163543, 2163543, 2163543, 2163543, 2163543,
  /* 22529 */ 2163543, 2163543, 2163543, 2163543, 3081047, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543,
  /* 22540 */ 2163543, 2995031, 3019607, 2163543, 2163543, 2163543, 3052375, 2163543, 2163543, 2163543, 2163543,
  /* 22551 */ 2163543, 2163543, 2163543, 2163543, 3158871, 2163543, 0, 0, 0, 0, 2514944, 0, 0, 2543616, 2592768, 0, 0,
  /* 22568 */ 0, 0, 0, 0, 0, 976, 0, 0, 0, 318, 318, 0, 0, 0, 0, 0, 2163485, 2437917, 2163485, 2163485, 2163485,
  /* 22589 */ 2491165, 2163485, 2163485, 2528029, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 22600 */ 2163485, 2163485, 2163485, 2163485, 2581277, 2163485, 2163485, 2163485, 2163485, 2163485, 2601757,
  /* 22611 */ 2626333, 2163485, 2163485, 2163485, 2695965, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 22622 */ 2163485, 2163485, 2888477, 2163485, 2163485, 3146525, 2163485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0,
  /* 22643 */ 0, 0, 2626391, 2163543, 2163543, 2163543, 2696023, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543,
  /* 22656 */ 2163543, 2163543, 2888535, 2163543, 2163543, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 0, 0,
  /* 22677 */ 0, 1085440, 0, 0, 1085440, 0, 0, 0, 0, 1085440, 0, 0, 1085440, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 0,
  /* 22700 */ 3146583, 2163543, 2163485, 2163485, 2163485, 2163485, 2163543, 2163543, 2163543, 2163543, 0, 0, 0, 0, 0,
  /* 22715 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 680, 0, 0, 0, 2158592, 2813952, 2158592, 2158592, 2158592, 0, 2163485,
  /* 22736 */ 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 0, 2163543, 2163543, 2163543, 2163543,
  /* 22748 */ 2163543, 2163543, 2163485, 2548509, 2163485, 2163485, 2163485, 2163485, 2634525, 2163485, 2163485,
  /* 22759 */ 2716445, 2736925, 2163485, 2163485, 2814749, 2818845, 2163485, 2163485, 2163485, 2163485, 2499357,
  /* 22770 */ 2540317, 2544413, 2163485, 2163485, 2593565, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 22781 */ 2163485, 2163485, 854, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 3027799, 2163543,
  /* 22793 */ 2163543, 3076951, 2163543, 3097431, 2163543, 2163543, 2163543, 2163485, 2908957, 2163485, 2163485,
  /* 22804 */ 2954013, 2163485, 2962205, 2163485, 2163485, 3023645, 3048221, 2163485, 2163485, 2163485, 2163485,
  /* 22815 */ 3175197, 2163543, 2962263, 2163543, 2163543, 3023703, 3048279, 2163543, 2163543, 2163543, 2163543,
  /* 22826 */ 3175255, 2163485, 2163485, 2163485, 2163543, 2163543, 2786135, 2802519, 2810711, 2163543, 2163543,
  /* 22837 */ 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 0, 2502656, 0, 0, 0, 0,
  /* 22852 */ 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 0, 2163485, 2163485, 2163485,
  /* 22870 */ 2163485, 2163485, 2163485, 2163485, 2163485, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543,
  /* 22881 */ 2163543, 0, 0, 2892573, 2163485, 2163485, 2958109, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 22894 */ 2163543, 2163543, 2163543, 2163543, 2163543, 2499415, 2540375, 2544471, 2163543, 2163543, 2593623,
  /* 22905 */ 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2892631, 2163543, 2163543, 2958167, 2163543,
  /* 22916 */ 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163543, 2163543, 2163543,
  /* 22927 */ 2163543, 2163543, 2163543, 2163543, 2163485, 2163485, 2163485, 2163543, 2163543, 2163543, 2457600, 0, 0,
  /* 22940 */ 0, 0, 2163485, 2163485, 2683677, 2741021, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 22953 */ 2163485, 2163485, 2163485, 3121949, 2421591, 0, 2445312, 2494464, 2158592, 2744320, 2973696, 2744320, 0,
  /* 22966 */ 2158592, 0, 2163485, 2446109, 2454301, 2495261, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 22978 */ 2163485, 2163485, 3158813, 2163485, 0, 0, 0, 0, 2121728, 0, 2163485, 2163485, 2650909, 2745117, 2827037,
  /* 22993 */ 2929437, 2163485, 2974493, 2163485, 2163485, 2163485, 3101469, 2163543, 2446167, 2454359, 2495319,
  /* 23004 */ 2560000, 0, 2163485, 2552605, 2560797, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 23016 */ 2163485, 3093277, 2163543, 2552663, 2560855, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543,
  /* 23027 */ 2163543, 2163543, 3093335, 0, 0, 0, 0, 0, 2850816, 2163485, 2589469, 2163485, 2163485, 2163485, 2163485,
  /* 23042 */ 2163485, 2163485, 2163485, 2163543, 2163543, 2589527, 2163543, 2163543, 2163543, 2163543, 2437975,
  /* 23053 */ 2163543, 2163543, 2163543, 2491223, 2163543, 2163543, 2528087, 2163543, 2163543, 2163543, 2163543,
  /* 23064 */ 2163543, 2163543, 2601815, 2163485, 2163485, 2163485, 2986781, 2163543, 2163543, 2605911, 2163543,
  /* 23075 */ 2831191, 2163543, 2163543, 2163543, 2986839, 2523136, 0, 0, 0, 0, 0, 1094068, 1094068, 1094068, 1094068,
  /* 23090 */ 1094068, 1094068, 1094068, 1094068, 1094068, 1094068, 1094068, 1094068, 1094068, 1094068, 1094068,
  /* 23101 */ 1094068, 0, 0, 0, 0, 0, 0, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163543, 2163543,
  /* 23116 */ 2163543, 2163543, 2163543, 2163543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473984, 0, 0, 2425629,
  /* 23138 */ 2163485, 2163485, 2163485, 2163485, 2982685, 2425687, 2163543, 2163543, 2163543, 2163543, 2982743,
  /* 23149 */ 2535424, 0, 0, 0, 0, 1631, 0, 0, 0, 0, 0, 0, 1637, 0, 1638, 1639, 0, 0, 0, 0, 1644, 0, 0, 0, 1647, 0, 0,
  /* 23176 */ 0, 0, 0, 0, 0, 628, 629, 0, 0, 0, 0, 634, 0, 0, 0, 2912256, 2163485, 2655005, 2933533, 2163485, 2163543,
  /* 23197 */ 2655063, 2933591, 2163543, 2637824, 2699264, 2556701, 2163485, 2556759, 2163543, 2634583, 2163543,
  /* 23208 */ 2163543, 2716503, 2736983, 2163543, 2163543, 2814807, 2818903, 2163543, 2163543, 2909015, 2163543,
  /* 23219 */ 2163543, 2954071, 2163485, 2163543, 2163485, 2163543, 2163485, 2163543, 2945821, 2945879, 0, 0, 0, 0, 0,
  /* 23234 */ 0, 0, 0, 265, 266, 267, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 217088,
  /* 23262 */ 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 295, 296, 0, 0, 0, 0, 0, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0,
  /* 23291 */ 217088, 0, 0, 0, 0, 0, 1426, 0, 0, 0, 0, 0, 651264, 0, 0, 0, 0, 0, 612, 0, 0, 0, 0, 0, 0, 619, 318, 318,
  /* 23319 */ 318, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088,
  /* 23332 */ 217088, 217088, 217088, 217088, 0, 0, 0, 0, 0, 57344, 0, 0, 0, 28672, 0, 0, 2658304, 0, 2785280, 0, 0, 0,
  /* 23354 */ 0, 0, 0, 276, 277, 278, 279, 280, 281, 282, 0, 0, 0, 2162688, 266, 0, 0, 0, 266, 0, 267, 0, 0, 0, 267, 0,
  /* 23380 */ 0, 0, 2473984, 267, 0, 0, 0, 2486272, 0, 0, 0, 0, 0, 0, 0, 0, 2600960, 0, 0, 0, 0, 0, 1110016, 0, 0, 0, 0,
  /* 23407 */ 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 3145728, 2162688, 853, 0, 0, 0, 853, 0, 856,
  /* 23431 */ 0, 0, 0, 856, 0, 0, 0, 0, 1712, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 1944, 402, 0, 0, 853, 0,
  /* 23459 */ 856, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2547712, 2162688, 2162688,
  /* 23472 */ 2162688, 2162688, 2633728, 2162688, 2162688, 2715648, 2736128, 2162688, 2162688, 2813952, 2818048,
  /* 23483 */ 2162688, 2162688, 2908160, 2162688, 2162688, 2953216, 221727, 221727, 221727, 221727, 221605, 221605,
  /* 23495 */ 221738, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1865, 0, 1867, 0, 0, 1869, 0, 1871, 0, 0, 1874, 0, 0, 0,
  /* 23522 */ 0, 1892, 0, 0, 0, 0, 0, 0, 0, 0, 1900, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 2158592,
  /* 23550 */ 2158592, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1355, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688,
  /* 23574 */ 2162688, 2162688, 2162688, 2162688, 2162688, 237568, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 23586 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 245760, 0, 0, 2, 3, 94212, 5, 6,
  /* 23602 */ 0, 0, 249856, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 2109440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 266, 266,
  /* 23629 */ 266, 266, 266, 250278, 250278, 250278, 250278, 250278, 250278, 250278, 250278, 249856, 249856, 250278,
  /* 23643 */ 250278, 250278, 250278, 250278, 250278, 2158592, 2158592, 114688, 0, 241664, 0, 262144, 0, 0, 0, 0, 0, 0,
  /* 23661 */ 0, 0, 0, 311, 312, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 23679 */ 2162688, 241664, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 23691 */ 2162688, 2457600, 0, 0, 0, 0, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 258048, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 2043,
  /* 23717 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 2105344, 266, 267,
  /* 23746 */ 196608, 0, 0, 0, 0, 0, 0, 2083, 0, 0, 0, 0, 0, 0, 402, 402, 402, 0, 500, 500, 500, 500, 500, 500, 500,
  /* 23771 */ 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 522, 0, 2, 3, 94212, 2195710, 6, 0, 0, 0, 0, 258,
  /* 23794 */ 0, 0, 0, 0, 258, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 1610, 0, 0, 0, 0, 0, 0, 0,
  /* 23825 */ 0, 0, 0, 285, 326, 326, 356, 0, 0, 270336, 270336, 270336, 270336, 0, 0, 270336, 0, 0, 2, 2, 3, 94212,
  /* 23847 */ 2195710, 6, 0, 0, 0, 0, 2069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2191, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0,
  /* 23877 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1013, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 23895 */ 2162688, 245760, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 23907 */ 2162688, 2580480, 2162688, 2162688, 2162688, 2162688, 278528, 278528, 278528, 278528, 0, 0, 278528, 0, 0,
  /* 23922 */ 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 2139, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1228, 522,
  /* 23946 */ 522, 522, 522, 53496, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 362, 362, 362, 362, 362,
  /* 23971 */ 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 714, 402, 402, 402, 1519, 522, 522, 522,
  /* 23996 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1038, 0, 0, 1902, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24021 */ 0, 0, 0, 0, 664, 0, 0, 0, 0, 0, 0, 0, 1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1378, 0, 0, 0, 0, 2186, 0, 0,
  /* 24053 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 1667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 589, 0,
  /* 24085 */ 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 392, 0, 402, 402, 402, 402, 402, 0, 0, 402, 0, 500, 500, 500,
  /* 24111 */ 500, 500, 500, 2412, 500, 500, 500, 500, 500, 522, 522, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 520,
  /* 24136 */ 520, 520, 500, 523, 520, 520, 520, 520, 520, 520, 520, 520, 520, 523, 523, 523, 523, 523, 520, 520, 523,
  /* 24157 */ 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 53497, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402,
  /* 24184 */ 402, 1059, 402, 402, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 286720, 286720,
  /* 24200 */ 286720, 286720, 286720, 286720, 286720, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 303104, 2162688, 2162688, 2162688,
  /* 24218 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 24229 */ 2162688, 0, 0, 2936832, 0, 0, 3084288, 3129344, 0, 2940928, 2416640, 229376, 0, 0, 0, 0, 0, 0, 2723840, 0,
  /* 24249 */ 250, 3, 94212, 5, 255, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 2436, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 24275 */ 500, 500, 1513, 500, 0, 1519, 91311, 0, 0, 261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 605, 0, 0, 318,
  /* 24303 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 0, 0, 290816, 290816, 290816, 0, 0, 250, 250, 3, 94212, 5,
  /* 24329 */ 4297269, 0, 49152, 290816, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1390, 0, 0, 0, 402, 290816,
  /* 24353 */ 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816,
  /* 24366 */ 290816, 290816, 0, 0, 0, 0, 0, 0, 567, 0, 0, 0, 0, 0, 2105344, 266, 267, 0, 0, 0, 0, 0, 0, 613, 0, 0, 0,
  /* 24393 */ 0, 0, 0, 318, 318, 318, 2162688, 2162688, 0, 250, 4297269, 0, 0, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 0,
  /* 24416 */ 0, 0, 2109440, 1019, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 267, 0, 0, 0, 573, 0, 0, 251, 3, 94212, 5, 6, 0, 0,
  /* 24444 */ 0, 0, 0, 0, 0, 0, 0, 0, 544, 544, 544, 544, 544, 544, 0, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24474 */ 651, 0, 544, 544, 544, 544, 0, 0, 544, 0, 0, 4264500, 251, 3, 94212, 5, 6, 0, 0, 0, 0, 2211, 0, 0, 0, 0,
  /* 24500 */ 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 1925, 402, 402, 2162688, 2162688, 0, 930, 6, 0, 0,
  /* 24520 */ 299008, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 0, 0, 0, 2715648, 0, 0, 0, 3039232, 0, 0, 3022848, 0, 0, 0, 0,
  /* 24544 */ 0, 1051, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 1414, 402, 402, 1417, 0, 0, 0, 0, 0, 0, 0, 2188, 0, 0,
  /* 24570 */ 2190, 0, 0, 0, 0, 0, 0, 271, 272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 678, 0, 0, 0, 318, 0, 0, 0, 0, 0,
  /* 24602 */ 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 989, 0, 0, 0, 0, 994, 0, 996, 0, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0,
  /* 24632 */ 271, 0, 400, 403, 403, 403, 403, 403, 424, 424, 424, 424, 424, 446, 446, 446, 446, 446, 446, 446, 446,
  /* 24653 */ 462, 466, 446, 446, 446, 446, 446, 446, 462, 474, 446, 446, 466, 446, 466, 466, 466, 466, 466, 498, 501,
  /* 24674 */ 501, 501, 501, 524, 501, 501, 501, 501, 501, 501, 501, 501, 501, 524, 524, 524, 524, 524, 546, 546, 555,
  /* 24695 */ 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 575, 0, 0, 578, 579, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1391, 0, 0,
  /* 24723 */ 1394, 402, 0, 654, 0, 0, 0, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 573, 0, 0, 0, 0, 0, 0, 0, 0, 671, 0, 0, 0,
  /* 24754 */ 0, 575, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 570, 571, 0, 0, 0, 0, 0, 0, 402, 402, 701, 402, 402, 402, 402,
  /* 24780 */ 402, 402, 402, 402, 402, 402, 724, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1083, 0, 1132, 1134, 500, 500, 500,
  /* 24804 */ 500, 500, 2132, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 0, 1783, 0, 0, 1519, 0, 402, 402, 0, 0,
  /* 24827 */ 0, 0, 0, 0, 731, 0, 0, 0, 0, 0, 0, 597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 2217, 402, 402, 402, 402,
  /* 24855 */ 625, 0, 0, 0, 0, 771, 0, 0, 0, 402, 402, 701, 402, 402, 779, 724, 402, 402, 402, 625, 0, 0, 0, 658, 625,
  /* 24880 */ 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 21049, 267, 0, 0, 0, 0, 0, 0, 0, 761, 500, 500, 802, 500, 500, 500, 500,
  /* 24906 */ 500, 500, 827, 829, 500, 834, 500, 837, 500, 500, 849, 500, 500, 500, 0, 522, 522, 522, 861, 522, 522,
  /* 24927 */ 522, 522, 522, 1236, 522, 522, 522, 522, 522, 522, 522, 522, 1246, 522, 0, 500, 500, 802, 500, 918, 837,
  /* 24948 */ 500, 500, 0, 522, 522, 861, 522, 926, 896, 522, 522, 53496, 2, 6, 0, 0, 0, 0, 932, 936, 0, 0, 0, 0, 0, 0,
  /* 24974 */ 627, 0, 0, 630, 0, 0, 0, 0, 635, 0, 402, 402, 402, 402, 1079, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0,
  /* 25000 */ 1132, 500, 500, 500, 500, 402, 1125, 0, 1104, 0, 0, 1013, 0, 0, 0, 0, 0, 1132, 500, 500, 500, 500, 500,
  /* 25023 */ 1162, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 655860, 500, 1967, 500, 1969, 402, 402, 402,
  /* 25043 */ 402, 1400, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 402, 1446, 402,
  /* 25067 */ 402, 0, 0, 0, 0, 0, 1452, 1453, 1132, 500, 500, 1455, 500, 500, 500, 500, 853, 91311, 1132, 856, 522, 522,
  /* 25089 */ 522, 522, 1207, 522, 522, 1216, 500, 500, 1506, 500, 500, 500, 500, 1510, 500, 500, 500, 500, 1516, 1519,
  /* 25109 */ 91311, 1521, 1519, 522, 522, 1525, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1536, 522, 522, 248, 2, 6,
  /* 25130 */ 0, 0, 0, 0, 933, 937, 0, 0, 0, 0, 0, 0, 761, 625, 0, 0, 0, 765, 0, 0, 0, 0, 0, 1606, 0, 0, 0, 0, 0, 0, 0,
  /* 25161 */ 0, 0, 0, 0, 0, 0, 0, 667, 0, 0, 1656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25194 */ 0, 650, 0, 0, 0, 0, 402, 402, 1685, 1686, 402, 402, 402, 402, 402, 402, 402, 402, 1693, 402, 0, 0, 0, 0,
  /* 25218 */ 0, 0, 0, 0, 0, 335872, 0, 1132, 500, 500, 500, 500, 500, 2123, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 25240 */ 500, 500, 500, 975348, 500, 500, 500, 522, 0, 0, 0, 1704, 0, 0, 0, 0, 1715, 0, 0, 0, 0, 402, 402, 1721,
  /* 25264 */ 500, 500, 1735, 500, 1737, 500, 500, 500, 1740, 500, 500, 500, 500, 500, 500, 500, 500, 2134, 500, 500,
  /* 25284 */ 500, 500, 500, 500, 500, 500, 1754, 500, 500, 500, 500, 500, 500, 500, 500, 1767, 500, 500, 500, 500, 500,
  /* 25305 */ 500, 500, 500, 2125, 500, 500, 500, 500, 500, 500, 500, 500, 2328, 500, 500, 500, 500, 500, 500, 522, 0,
  /* 25326 */ 0, 0, 522, 522, 522, 522, 522, 1797, 522, 1799, 522, 522, 522, 1802, 522, 0, 2173, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25351 */ 0, 0, 0, 0, 0, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200, 500, 500, 1844, 500, 500, 500, 500,
  /* 25369 */ 522, 522, 1848, 522, 522, 522, 522, 1599, 0, 0, 0, 0, 2289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2087, 2088,
  /* 25395 */ 0, 2090, 402, 2092, 1601, 0, 0, 1852, 0, 0, 0, 0, 0, 0, 1858, 0, 0, 0, 0, 0, 0, 660, 0, 0, 0, 0, 0, 574,
  /* 25423 */ 660, 0, 668, 500, 1983, 500, 500, 0, 1985, 0, 0, 0, 0, 0, 1987, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0,
  /* 25450 */ 0, 0, 0, 0, 0, 0, 2039, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 2216, 402, 402, 402, 2219,
  /* 25478 */ 402, 2065, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1045, 2077, 2078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25509 */ 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 402, 402, 2108, 402, 402, 0, 500, 500, 500, 500, 500,
  /* 25531 */ 500, 500, 500, 2380, 500, 500, 500, 522, 522, 522, 522, 522, 522, 2261, 522, 522, 522, 522, 522, 522, 522,
  /* 25552 */ 522, 522, 522, 522, 522, 522, 522, 1816, 522, 2273, 522, 522, 522, 522, 500, 500, 500, 522, 522, 522, 0,
  /* 25573 */ 0, 0, 0, 0, 2512, 2513, 0, 500, 500, 500, 500, 500, 0, 2432, 0, 0, 2435, 0, 500, 500, 500, 500, 500, 500,
  /* 25597 */ 500, 500, 500, 500, 0, 0, 0, 0, 1519, 0, 2461, 2462, 0, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 25620 */ 522, 522, 522, 522, 522, 1254, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 49152, 0, 377, 0, 40960, 0,
  /* 25642 */ 0, 377, 0, 0, 0, 0, 0, 0, 402, 402, 1059, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 500, 500,
  /* 25668 */ 500, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 475, 364, 364, 364,
  /* 25689 */ 364, 364, 364, 364, 364, 364, 364, 500, 500, 500, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 633, 0, 0, 0,
  /* 25716 */ 0, 0, 1372, 0, 0, 0, 0, 0, 0, 0, 0, 1376, 0, 0, 0, 0, 0, 0, 135168, 0, 135168, 135168, 135168, 135168,
  /* 25740 */ 135168, 135168, 135168, 135168, 0, 0, 135168, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 402, 1919, 402, 402,
  /* 25763 */ 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 1421, 0, 0, 500, 500, 500, 1948, 1949, 500,
  /* 25786 */ 500, 500, 500, 500, 500, 500, 500, 500, 500, 1781, 0, 0, 0, 1519, 1787, 0, 0, 0, 500, 500, 500, 500, 2468,
  /* 25809 */ 500, 2470, 500, 2472, 500, 522, 522, 522, 522, 522, 1557, 1558, 522, 1560, 1561, 522, 522, 522, 522, 522,
  /* 25829 */ 522, 500, 500, 522, 522, 0, 0, 2354, 0, 0, 0, 522, 2478, 522, 2480, 522, 2482, 522, 0, 0, 0, 0, 0, 0, 0,
  /* 25854 */ 0, 500, 500, 2438, 500, 500, 500, 500, 500, 500, 500, 500, 2500, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 25875 */ 522, 2165, 522, 500, 500, 500, 522, 522, 49152, 0, 378, 379, 40960, 379, 386, 378, 379, 386, 276, 386, 0,
  /* 25896 */ 386, 404, 404, 404, 404, 404, 425, 425, 425, 440, 442, 447, 447, 460, 447, 447, 447, 447, 447, 447, 447,
  /* 25917 */ 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 476, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
  /* 25938 */ 502, 502, 502, 502, 525, 502, 502, 502, 502, 502, 502, 502, 502, 502, 525, 525, 525, 525, 525, 548, 548,
  /* 25959 */ 557, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
  /* 25988 */ 655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 753, 0, 0, 622, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402,
  /* 26018 */ 402, 402, 402, 0, 0, 0, 500, 838, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 26041 */ 522, 2268, 2269, 522, 522, 522, 522, 522, 0, 500, 500, 500, 500, 500, 838, 500, 500, 0, 522, 522, 522,
  /* 26062 */ 522, 522, 897, 0, 0, 985, 948, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 677, 0, 0, 0, 402, 402, 402, 402, 1067,
  /* 26090 */ 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 1418, 1419, 0, 0, 0, 1054, 0, 0, 0, 0, 0, 0, 0,
  /* 26115 */ 0, 0, 0, 0, 0, 1087, 0, 0, 0, 0, 0, 2920448, 0, 0, 0, 2158592, 2158592, 2158592, 2543616, 2158592,
  /* 26135 */ 2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 522, 1218, 522, 522, 522, 522, 522, 1224, 522,
  /* 26160 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 2427, 0, 2429, 0, 0, 0, 1519, 522, 522, 522, 522, 522, 522,
  /* 26182 */ 522, 522, 522, 522, 522, 522, 522, 522, 1538, 500, 500, 500, 500, 1974, 500, 500, 500, 500, 500, 500, 500,
  /* 26203 */ 500, 500, 500, 500, 500, 1517, 1519, 91311, 1522, 522, 522, 2017, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 26223 */ 522, 522, 522, 522, 522, 522, 807412, 807434, 0, 2066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 947, 0,
  /* 26249 */ 402, 402, 402, 2095, 402, 402, 402, 402, 0, 0, 0, 2100, 0, 0, 0, 2104, 0, 2106, 0, 402, 402, 402, 2109,
  /* 26272 */ 402, 0, 500, 500, 500, 500, 500, 500, 500, 1150, 500, 500, 500, 1154, 500, 500, 500, 500, 2171, 0, 0, 0,
  /* 26294 */ 2175, 0, 0, 0, 0, 0, 0, 2179, 0, 0, 0, 0, 0, 0, 634880, 2400, 0, 0, 2403, 2404, 0, 0, 0, 0, 0, 0, 761856,
  /* 26321 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1636, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 2224, 0, 0, 0, 0, 0, 402, 402, 402, 402,
  /* 26351 */ 0, 500, 500, 500, 500, 500, 2411, 500, 2413, 500, 500, 500, 500, 522, 522, 522, 522, 522, 2349, 522, 522,
  /* 26372 */ 500, 500, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2181, 0, 0, 0, 0, 0, 500, 500, 500, 2467, 500,
  /* 26399 */ 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 1808, 1809, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 26420 */ 522, 1996, 522, 522, 522, 522, 522, 2477, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500,
  /* 26444 */ 500, 500, 500, 0, 0, 500, 500, 500, 2558, 522, 522, 522, 2560, 0, 0, 500, 500, 522, 522, 500, 500, 500,
  /* 26466 */ 500, 522, 522, 522, 522, 0, 0, 0, 0, 413696, 2038, 49152, 0, 328, 0, 40960, 0, 0, 328, 0, 0, 388, 0, 393,
  /* 26490 */ 401, 405, 405, 405, 405, 405, 426, 426, 426, 426, 443, 448, 448, 448, 448, 448, 448, 448, 448, 448, 467,
  /* 26511 */ 448, 448, 448, 448, 448, 448, 448, 405, 448, 448, 467, 448, 467, 467, 467, 467, 467, 467, 503, 503, 503,
  /* 26532 */ 503, 526, 503, 503, 503, 503, 503, 503, 503, 503, 503, 526, 526, 526, 526, 526, 503, 503, 526, 53496,
  /* 26552 */ 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 738, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 500, 500, 500, 819,
  /* 26581 */ 500, 500, 500, 500, 0, 522, 522, 522, 878, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0,
  /* 26603 */ 0, 0, 0, 0, 0, 0, 0, 0, 958, 0, 960, 0, 0, 962, 963, 0, 0, 0, 0, 0, 0, 0, 1021, 0, 0, 0, 0, 0, 0, 0, 1030,
  /* 26634 */ 0, 0, 1000, 0, 1002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1859, 0, 0, 0, 0, 402, 402, 1066, 402, 402, 402,
  /* 26661 */ 402, 402, 402, 402, 402, 402, 402, 402, 1074, 402, 0, 0, 0, 0, 0, 0, 0, 1130, 315392, 0, 0, 1132, 500,
  /* 26684 */ 500, 500, 500, 500, 1476, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 0, 0, 0, 1786, 1519, 0, 402,
  /* 26706 */ 1076, 402, 402, 402, 402, 402, 402, 402, 1083, 0, 0, 0, 0, 0, 0, 0, 1037, 0, 0, 0, 0, 0, 0, 0, 0, 576,
  /* 26732 */ 674, 675, 676, 0, 0, 0, 0, 953, 1109, 0, 0, 1112, 402, 402, 402, 402, 1117, 402, 402, 402, 402, 1122, 402,
  /* 26755 */ 0, 0, 0, 0, 0, 0, 0, 2228, 0, 402, 402, 402, 402, 2232, 500, 500, 500, 500, 853, 91311, 1132, 856, 522,
  /* 26778 */ 1204, 522, 522, 522, 522, 522, 522, 522, 1810, 522, 522, 1813, 522, 522, 522, 522, 522, 1172, 500, 500,
  /* 26798 */ 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1192, 1329, 0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26822 */ 0, 0, 0, 0, 0, 953, 0, 0, 402, 402, 402, 1448, 0, 0, 0, 0, 1070387, 0, 0, 1132, 500, 500, 500, 500, 0, 0,
  /* 26848 */ 0, 1986, 0, 1517, 0, 0, 0, 1988, 0, 1522, 1598, 0, 1599, 0, 0, 0, 0, 0, 1601, 0, 0, 0, 0, 0, 1604, 0, 0,
  /* 26875 */ 0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 1736, 500, 500, 500, 500, 500, 500,
  /* 26902 */ 500, 500, 500, 500, 500, 500, 0, 0, 91311, 0, 500, 500, 500, 500, 1776, 500, 1778, 500, 500, 500, 0, 0, 0,
  /* 26925 */ 0, 1519, 0, 0, 0, 0, 106496, 106496, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0,
  /* 26951 */ 0, 0, 522, 522, 522, 522, 522, 522, 1798, 522, 522, 522, 522, 522, 522, 500, 500, 522, 522, 0, 0, 0, 0,
  /* 26974 */ 2356, 0, 1915, 1916, 0, 1918, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 1405, 402, 402,
  /* 26995 */ 402, 0, 0, 500, 500, 1947, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1518, 1519, 91311,
  /* 27016 */ 1523, 500, 1971, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1501, 500, 522,
  /* 27036 */ 522, 1990, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 911, 0, 0, 402, 2094, 402,
  /* 27057 */ 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 2120, 500, 500, 500, 500, 500, 500,
  /* 27082 */ 500, 500, 500, 500, 500, 500, 500, 500, 1968, 500, 2129, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 27103 */ 500, 500, 500, 500, 500, 500, 522, 1985, 0, 1987, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2147,
  /* 27124 */ 522, 522, 500, 500, 500, 500, 522, 522, 522, 522, 0, 0, 0, 2037, 0, 0, 0, 0, 290, 291, 292, 0, 0, 0, 0, 0,
  /* 27150 */ 0, 0, 0, 0, 663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 954, 0,
  /* 27183 */ 0, 2294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1012, 0, 522, 522, 2448, 522, 522, 522, 522, 522, 522,
  /* 27210 */ 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1295, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 500, 500, 2469, 500, 500,
  /* 27237 */ 500, 500, 522, 522, 522, 522, 522, 2020, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2026, 522, 522,
  /* 27257 */ 2479, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 2517, 500, 286, 287, 288, 0, 0, 0, 0, 0,
  /* 27283 */ 0, 0, 0, 0, 0, 0, 0, 0, 967, 0, 0, 288, 326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1028, 0, 49152, 0,
  /* 27314 */ 0, 0, 40960, 0, 0, 0, 288, 287, 0, 0, 394, 287, 406, 406, 406, 406, 406, 427, 437, 427, 427, 427, 449,
  /* 27337 */ 449, 449, 449, 449, 449, 449, 449, 463, 468, 449, 449, 449, 449, 449, 449, 463, 406, 449, 449, 468, 449,
  /* 27358 */ 468, 468, 494, 468, 494, 468, 504, 504, 504, 504, 527, 504, 504, 504, 504, 504, 504, 504, 504, 504, 527,
  /* 27379 */ 527, 527, 527, 527, 504, 504, 527, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 609, 0, 0, 0, 0, 0, 0, 0,
  /* 27405 */ 0, 0, 0, 318, 318, 318, 0, 638, 0, 640, 0, 0, 0, 0, 0, 0, 0, 648, 0, 0, 0, 652, 698, 402, 402, 402, 703,
  /* 27432 */ 402, 402, 711, 402, 717, 402, 720, 402, 723, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 0, 0, 0,
  /* 27459 */ 0, 0, 0, 0, 0, 0, 734, 0, 0, 736, 0, 758, 0, 0, 0, 762, 0, 0, 0, 0, 744, 0, 0, 0, 0, 0, 1645, 0, 1646, 0,
  /* 27489 */ 0, 0, 1650, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 27506 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 762, 0, 756, 0, 0, 762, 0, 0, 744,
  /* 27523 */ 402, 775, 402, 402, 402, 402, 780, 402, 402, 402, 762, 0, 0, 744, 758, 762, 0, 0, 789, 0, 0, 0, 789, 793,
  /* 27547 */ 0, 0, 500, 500, 500, 805, 500, 500, 816, 500, 825, 500, 830, 500, 500, 500, 500, 500, 2250, 500, 500, 500,
  /* 27569 */ 500, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 0, 2489, 2490, 0, 500, 836, 839, 843, 500,
  /* 27592 */ 500, 500, 500, 500, 0, 522, 522, 522, 522, 864, 522, 522, 500, 500, 500, 2030, 522, 522, 522, 2033, 0, 0,
  /* 27614 */ 0, 0, 0, 0, 0, 1673, 0, 0, 0, 0, 0, 0, 0, 0, 1662, 0, 0, 0, 0, 0, 0, 0, 875, 522, 884, 522, 889, 522, 522,
  /* 27643 */ 895, 898, 902, 522, 522, 522, 522, 0, 0, 1284, 0, 0, 0, 1290, 0, 0, 0, 0, 0, 0, 0, 0, 948, 0, 0, 0, 0, 0,
  /* 27671 */ 0, 0, 0, 500, 915, 500, 500, 500, 919, 843, 500, 0, 522, 923, 522, 522, 522, 927, 902, 522, 53496, 2, 6,
  /* 27694 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1899, 0, 0, 0, 0, 0, 956, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
  /* 27727 */ 0, 0, 111011, 111011, 111011, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 986, 0, 988, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27755 */ 0, 1308, 651264, 0, 0, 0, 0, 0, 0, 971, 972, 0, 0, 0, 975, 0, 0, 0, 0, 318, 318, 0, 0, 0, 0, 0, 1660, 0,
  /* 27783 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 0, 0, 0, 0, 733, 0, 999, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
  /* 27815 */ 0, 500, 500, 1174, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1187, 500, 500, 500, 500, 500, 1164, 500,
  /* 27836 */ 500, 500, 500, 500, 500, 500, 500, 500, 500, 1468, 500, 500, 500, 500, 500, 500, 1194, 500, 500, 853,
  /* 27856 */ 91311, 1132, 856, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2456, 0, 2457, 0, 0, 0, 522, 522,
  /* 27877 */ 1219, 522, 522, 522, 1223, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 907, 522, 522, 522, 0, 0,
  /* 27898 */ 522, 522, 1234, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1243, 522, 522, 500, 500, 2029, 500,
  /* 27918 */ 522, 522, 2032, 522, 2034, 2035, 0, 0, 0, 0, 0, 626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 217088, 217088,
  /* 27943 */ 217088, 217088, 217088, 0, 1315, 1316, 0, 0, 1319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 601, 602, 0, 0, 0, 0, 0,
  /* 27969 */ 1346, 0, 0, 0, 0, 0, 1351, 0, 1353, 0, 0, 0, 0, 0, 0, 0, 1311, 0, 0, 0, 0, 0, 0, 0, 0, 1674, 0, 1676, 0,
  /* 27998 */ 0, 0, 0, 0, 0, 0, 0, 1363, 0, 0, 0, 0, 0, 0, 0, 0, 1367, 0, 0, 1370, 0, 1381, 1382, 0, 0, 0, 0, 0, 0, 0,
  /* 28028 */ 0, 0, 0, 1393, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 500, 2440, 500, 2442, 2443, 2444, 500,
  /* 28054 */ 1395, 1396, 402, 402, 402, 402, 402, 1402, 402, 402, 1404, 402, 402, 402, 402, 1408, 402, 402, 402, 1410,
  /* 28074 */ 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 1420, 0, 0, 0, 0, 122880, 122880, 0, 0, 0, 2, 2, 2183420, 94212,
  /* 28098 */ 5, 6, 0, 0, 0, 0, 1034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3158016, 0, 2158592, 2158592, 2158592, 0, 1423,
  /* 28123 */ 0, 0, 0, 0, 0, 0, 0, 0, 1296, 1423, 0, 0, 0, 0, 0, 0, 2158592, 2482176, 2158592, 2158592, 2740224,
  /* 28144 */ 2158592, 2158592, 2482176, 2740224, 0, 1431, 0, 0, 0, 1435, 872448, 0, 0, 1438, 402, 402, 1408, 402, 402,
  /* 28163 */ 402, 1444, 500, 1458, 500, 500, 500, 500, 500, 500, 500, 1467, 500, 500, 500, 500, 1471, 500, 500, 500,
  /* 28183 */ 500, 853, 91311, 1132, 856, 1202, 522, 1205, 522, 522, 522, 522, 1213, 500, 500, 1474, 500, 500, 500, 500,
  /* 28203 */ 500, 500, 1480, 1482, 500, 500, 500, 500, 500, 500, 852, 500, 0, 522, 522, 522, 522, 522, 870, 522, 1487,
  /* 28224 */ 1488, 500, 1490, 1491, 500, 500, 500, 500, 500, 500, 1498, 500, 1500, 500, 500, 500, 500, 500, 2325, 500,
  /* 28244 */ 500, 500, 500, 500, 500, 500, 500, 500, 522, 2522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 500, 500,
  /* 28266 */ 500, 500, 1507, 500, 500, 500, 500, 500, 500, 1514, 0, 1519, 91311, 0, 0, 0, 0, 155648, 155648, 155648, 0,
  /* 28287 */ 0, 2, 2, 0, 94212, 5, 6, 126976, 1519, 1524, 522, 522, 1526, 522, 1528, 522, 522, 522, 522, 522, 522, 522,
  /* 28309 */ 1537, 522, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 522, 1599, 0, 1568, 522,
  /* 28330 */ 1570, 522, 522, 522, 522, 522, 522, 1577, 522, 522, 522, 522, 522, 522, 500, 909812, 522, 909834, 2353, 0,
  /* 28350 */ 0, 2355, 0, 0, 1584, 1585, 500, 500, 1482, 1491, 500, 1590, 500, 1592, 522, 522, 1552, 1561, 522, 1597, 0,
  /* 28371 */ 0, 0, 1608, 1609, 0, 0, 0, 1613, 0, 0, 0, 0, 0, 0, 0, 0, 2658304, 0, 2785280, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28398 */ 892928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 966, 0, 0, 0, 1666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1678, 0,
  /* 28429 */ 1680, 0, 0, 0, 0, 167936, 167936, 167936, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1318, 0, 0, 0, 0, 0, 0,
  /* 28456 */ 0, 1325, 0, 0, 0, 0, 0, 1632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 631, 0, 0, 0, 0, 0, 0, 1683, 402, 402, 402,
  /* 28485 */ 402, 402, 402, 1689, 402, 402, 402, 402, 402, 402, 402, 402, 2098, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0,
  /* 28510 */ 0, 0, 0, 45056, 0, 0, 0, 1609, 0, 1713, 0, 1714, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 1118, 402, 402,
  /* 28535 */ 402, 402, 402, 402, 402, 1724, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 500, 500, 500, 500, 500, 500, 500,
  /* 28558 */ 500, 500, 500, 522, 522, 522, 500, 500, 500, 1762, 1763, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 28579 */ 500, 500, 1744, 500, 500, 500, 0, 0, 0, 522, 522, 522, 522, 522, 522, 522, 522, 1800, 522, 522, 522, 522,
  /* 28601 */ 522, 522, 522, 2425, 522, 522, 0, 0, 0, 0, 0, 0, 0, 2199, 0, 0, 0, 0, 2203, 2204, 0, 0, 522, 1805, 522,
  /* 28626 */ 1807, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1242, 522, 522, 522, 500, 500, 500, 500,
  /* 28647 */ 1846, 500, 500, 522, 522, 522, 522, 1850, 522, 522, 1599, 0, 0, 0, 0, 167936, 167936, 167936, 167936,
  /* 28666 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 1862, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28687 */ 0, 0, 0, 0, 0, 0, 0, 1320, 1901, 0, 0, 0, 0, 0, 0, 0, 0, 1908, 0, 0, 0, 0, 0, 0, 0, 1321, 0, 0, 0, 0, 0,
  /* 28718 */ 0, 0, 0, 977, 0, 0, 318, 318, 0, 981, 0, 402, 1928, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 1007616,
  /* 28744 */ 0, 0, 0, 0, 200704, 200973, 200704, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1425, 0, 1427, 0, 0, 0, 0, 0,
  /* 28771 */ 0, 1429, 0, 0, 0, 0, 0, 2846720, 0, 0, 0, 0, 0, 0, 2805760, 0, 3178496, 2560000, 0, 0, 0, 520192, 1887, 0,
  /* 28795 */ 1007616, 364946, 402, 402, 402, 402, 402, 1008018, 0, 0, 0, 0, 291, 290, 0, 0, 0, 0, 0, 0, 0, 290, 0,
  /* 28818 */ 45056, 0, 827392, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1954, 500, 1956, 500, 500, 500,
  /* 28838 */ 1973, 500, 500, 500, 500, 1978, 500, 500, 500, 500, 500, 500, 1982, 1008116, 500, 500, 500, 0, 1985, 0, 0,
  /* 28859 */ 0, 0, 0, 1987, 0, 0, 0, 0, 0, 0, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485,
  /* 28877 */ 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 522, 2016, 522, 522, 522, 522,
  /* 28891 */ 2021, 522, 522, 522, 522, 522, 522, 2025, 1008138, 522, 500, 500, 500, 500, 500, 500, 500, 1591, 522, 522,
  /* 28911 */ 522, 522, 522, 522, 522, 522, 522, 655882, 522, 2010, 522, 2012, 522, 522, 522, 522, 365044, 500, 500,
  /* 28930 */ 500, 365066, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1294, 0, 1296, 0, 0, 0, 402, 402, 402, 402, 2096,
  /* 28955 */ 402, 402, 402, 0, 0, 0, 0, 2101, 0, 0, 0, 0, 0, 1853, 0, 0, 0, 0, 0, 0, 0, 0, 1861, 0, 2105, 0, 0, 402,
  /* 28983 */ 402, 402, 402, 402, 0, 500, 500, 500, 500, 500, 500, 2118, 1985, 0, 1987, 0, 522, 522, 522, 522, 522, 522,
  /* 29005 */ 2145, 522, 522, 522, 522, 522, 522, 522, 1994, 522, 522, 522, 522, 1998, 522, 2000, 522, 2159, 522, 522,
  /* 29025 */ 522, 522, 522, 522, 522, 522, 522, 522, 500, 500, 500, 522, 522, 522, 0, 0, 2284, 0, 0, 0, 0, 0, 2185, 0,
  /* 29049 */ 0, 0, 0, 0, 0, 0, 0, 2192, 2193, 0, 2194, 0, 905216, 0, 0, 0, 2197, 2198, 0, 0, 0, 0, 667648, 0, 0, 0, 0,
  /* 29076 */ 0, 0, 2772992, 0, 0, 0, 0, 2113536, 0, 0, 0, 0, 0, 0, 1436, 0, 402, 402, 402, 402, 402, 402, 402, 402, 0,
  /* 29101 */ 0, 0, 0, 0, 0, 2103, 0, 2221, 2222, 0, 2223, 0, 0, 0, 2227, 0, 479232, 402, 402, 2230, 402, 0, 500, 500,
  /* 29125 */ 500, 500, 2410, 500, 500, 500, 500, 500, 500, 500, 522, 522, 500, 500, 2236, 500, 500, 500, 500, 500, 500,
  /* 29146 */ 500, 2241, 500, 500, 2244, 500, 500, 500, 500, 500, 967156, 1073652, 522, 522, 522, 522, 522, 967178,
  /* 29164 */ 1073674, 0, 1286, 500, 500, 500, 500, 2249, 2251, 500, 500, 2254, 2255, 522, 522, 522, 2259, 522, 522,
  /* 29183 */ 500, 2028, 500, 500, 522, 2031, 522, 522, 0, 0, 2036, 0, 0, 0, 0, 0, 1905, 1906, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29209 */ 0, 616, 617, 618, 0, 318, 318, 318, 2274, 522, 522, 2277, 2278, 500, 500, 2280, 522, 522, 2282, 0, 0, 0,
  /* 29231 */ 0, 2286, 0, 0, 2288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 901120, 0, 0, 0, 0, 217088, 217088, 217088, 0, 0, 2,
  /* 29258 */ 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1379, 0,
  /* 29289 */ 0, 2302, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 1933, 0, 0, 0, 0, 0, 522, 2335, 522, 522,
  /* 29315 */ 522, 522, 522, 522, 522, 522, 522, 522, 2343, 522, 522, 522, 522, 522, 2264, 522, 522, 2267, 522, 522,
  /* 29335 */ 522, 522, 522, 522, 2272, 522, 522, 2420, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 2177, 0, 0,
  /* 29359 */ 0, 0, 0, 0, 0, 0, 0, 3088384, 0, 57344, 0, 0, 0, 0, 2431, 0, 0, 0, 0, 0, 500, 500, 500, 500, 500, 500,
  /* 29385 */ 500, 500, 500, 2445, 0, 0, 0, 500, 500, 2466, 500, 500, 500, 500, 500, 500, 500, 522, 522, 2476, 500, 500,
  /* 29407 */ 2494, 500, 2496, 500, 500, 500, 500, 2501, 522, 522, 2503, 522, 2505, 522, 500, 500, 500, 500, 1588, 500,
  /* 29427 */ 500, 500, 522, 522, 522, 522, 1595, 522, 522, 500, 500, 500, 500, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0,
  /* 29451 */ 0, 2515, 500, 500, 500, 500, 0, 0, 500, 2532, 500, 500, 500, 2536, 522, 2538, 522, 522, 522, 2542, 0, 0,
  /* 29473 */ 0, 0, 326, 0, 327, 0, 0, 0, 0, 0, 0, 285, 327, 288, 0, 318, 0, 0, 0, 0, 0, 0, 322, 0, 0, 0, 0, 0, 0, 0,
  /* 29503 */ 293, 0, 0, 0, 0, 0, 0, 0, 0, 688, 0, 0, 0, 0, 695, 696, 0, 0, 0, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29535 */ 0, 995, 0, 0, 49152, 0, 0, 380, 40960, 380, 380, 289, 380, 380, 0, 380, 0, 380, 407, 407, 407, 407, 407,
  /* 29558 */ 0, 0, 0, 322, 444, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
  /* 29580 */ 407, 380, 380, 486, 380, 486, 486, 495, 486, 495, 486, 505, 505, 505, 505, 528, 505, 505, 505, 505, 505,
  /* 29601 */ 505, 505, 505, 505, 528, 528, 528, 528, 528, 505, 505, 528, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 664,
  /* 29624 */ 0, 0, 0, 0, 0, 0, 0, 774, 402, 402, 402, 402, 402, 402, 0, 1930, 0, 0, 0, 0, 0, 0, 0, 0, 662, 362, 0, 0,
  /* 29652 */ 0, 0, 0, 0, 0, 664, 0, 500, 500, 500, 500, 500, 500, 500, 820, 500, 500, 500, 500, 500, 500, 1464, 500,
  /* 29675 */ 500, 500, 500, 500, 500, 500, 500, 500, 500, 2330, 500, 500, 500, 500, 522, 0, 914, 500, 500, 820, 500,
  /* 29696 */ 500, 500, 500, 0, 922, 522, 522, 879, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0,
  /* 29719 */ 0, 0, 2460, 0, 0, 0, 1049, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 1061, 402, 0, 0, 0, 0, 0, 2226, 0, 0, 0,
  /* 29747 */ 402, 2229, 402, 402, 0, 500, 500, 500, 2409, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 0, 0, 0,
  /* 29769 */ 949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1106, 0, 500, 1267, 500, 500, 500, 500, 500, 500, 522, 1275, 522,
  /* 29794 */ 522, 522, 522, 522, 522, 522, 2007, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1824, 1825, 522, 522,
  /* 29814 */ 522, 522, 522, 0, 1432, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
  /* 29838 */ 402, 402, 402, 522, 1569, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 500, 522,
  /* 29859 */ 1722, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 500, 500, 500, 500, 500, 500, 500, 819, 500, 500,
  /* 29882 */ 500, 500, 500, 522, 522, 1819, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1229, 522,
  /* 29903 */ 522, 1876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1328, 1927, 402, 402, 402, 402, 402, 0, 0, 0, 0,
  /* 29931 */ 0, 1934, 0, 0, 0, 0, 0, 0, 2871296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 2287, 0, 0, 0, 0,
  /* 29961 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1359, 0, 0, 2531, 500, 500, 500, 500, 500, 2537, 522, 522, 522, 522, 522,
  /* 29987 */ 0, 0, 1285, 0, 0, 0, 1291, 0, 0, 0, 0, 0, 0, 0, 0, 1039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2557, 500, 500, 500,
  /* 30016 */ 2559, 522, 522, 522, 0, 0, 500, 500, 522, 522, 522, 522, 1542, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 30037 */ 522, 1551, 522, 49152, 0, 0, 381, 40960, 381, 381, 0, 381, 381, 0, 381, 395, 381, 408, 408, 408, 408, 408,
  /* 30059 */ 428, 428, 428, 428, 428, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
  /* 30080 */ 450, 408, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 506, 506, 506, 506, 529, 506, 506, 506, 506,
  /* 30101 */ 506, 506, 506, 506, 506, 529, 529, 529, 529, 529, 506, 506, 529, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0,
  /* 30124 */ 0, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1042, 0, 0, 0, 522, 522, 53496, 2, 6, 0, 0, 0, 0, 933, 937,
  /* 30154 */ 0, 0, 0, 0, 0, 0, 680, 0, 0, 402, 402, 402, 402, 402, 402, 402, 402, 402, 1691, 1692, 402, 402, 402, 1046,
  /* 30178 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 2220, 1380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30207 */ 0, 0, 402, 402, 402, 402, 1723, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 500, 500, 500, 500, 500, 500,
  /* 30231 */ 500, 2471, 500, 2473, 522, 522, 522, 500, 500, 500, 1845, 500, 500, 500, 522, 522, 522, 1849, 522, 522,
  /* 30251 */ 522, 0, 0, 1286, 0, 0, 0, 0, 0, 1292, 0, 0, 0, 0, 0, 0, 0, 2071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3088384, 0, 0,
  /* 30281 */ 0, 0, 0, 0, 0, 0, 2067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2076, 1011712, 0, 0, 0, 0, 2187, 0, 0, 0, 0,
  /* 30311 */ 0, 0, 0, 0, 0, 0, 680, 0, 0, 0, 0, 0, 0, 0, 0, 2196, 0, 0, 0, 0, 2200, 0, 0, 0, 0, 0, 0, 0, 322, 0, 0, 0,
  /* 30343 */ 0, 0, 357, 0, 0, 2207, 0, 0, 0, 0, 0, 2212, 0, 0, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
  /* 30368 */ 402, 402, 1694, 2300, 0, 0, 0, 2304, 0, 2306, 402, 402, 402, 402, 402, 402, 0, 0, 0, 1932, 0, 0, 0, 0, 0,
  /* 30393 */ 0, 500, 2323, 500, 500, 500, 500, 2326, 500, 500, 500, 500, 500, 500, 500, 500, 522, 500, 522, 500, 522,
  /* 30414 */ 500, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 372, 2334, 522, 522, 522, 522, 522, 522, 522, 2341,
  /* 30441 */ 522, 522, 522, 522, 2344, 522, 522, 522, 522, 1555, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 30461 */ 1567, 2368, 402, 402, 2369, 402, 402, 0, 0, 402, 0, 500, 500, 500, 500, 500, 2373, 522, 2385, 522, 522,
  /* 30482 */ 522, 522, 522, 522, 2391, 522, 522, 522, 522, 522, 500, 522, 500, 522, 2567, 2568, 500, 522, 0, 0, 0, 0,
  /* 30504 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2182, 0, 0, 500, 500, 2548, 2549, 500, 500, 522, 522, 2552, 2553, 522, 522,
  /* 30529 */ 0, 0, 2174, 0, 0, 0, 0, 0, 0, 2178, 0, 0, 0, 0, 0, 0, 1004, 0, 1006, 0, 0, 0, 0, 1011, 0, 0, 0, 0, 0, 610,
  /* 30559 */ 611, 0, 0, 0, 615, 0, 0, 0, 0, 318, 318, 318, 402, 729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1358, 0,
  /* 30589 */ 402, 402, 729, 0, 0, 0, 0, 0, 0, 0, 0, 680, 0, 0, 0, 680, 0, 0, 796, 500, 500, 803, 500, 500, 500, 500,
  /* 30615 */ 500, 500, 500, 500, 500, 500, 0, 1784, 0, 0, 1519, 0, 0, 500, 500, 803, 500, 500, 500, 500, 850, 0, 522,
  /* 30638 */ 522, 862, 522, 522, 522, 522, 522, 410100, 500, 500, 410122, 522, 522, 0, 0, 0, 0, 0, 0, 1101, 962, 0, 0,
  /* 30661 */ 0, 0, 0, 0, 0, 0, 402, 1439, 402, 651666, 402, 402, 402, 402, 522, 909, 53496, 2, 6, 0, 0, 0, 0, 0, 0, 0,
  /* 30687 */ 0, 0, 0, 0, 2365, 0, 0, 0, 0, 1249, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 30711 */ 0, 1283, 0, 0, 0, 1289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1675, 0, 0, 0, 0, 0, 0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
  /* 30742 */ 0, 0, 0, 0, 0, 0, 0, 1653, 0, 402, 402, 1447, 402, 0, 0, 0, 0, 0, 0, 0, 1132, 500, 500, 500, 500, 0, 1985,
  /* 30769 */ 0, 0, 0, 0, 0, 1987, 0, 0, 0, 0, 0, 0, 2361, 0, 2362, 0, 0, 0, 2366, 0, 0, 0, 1605, 0, 0, 0, 0, 0, 0, 0,
  /* 30799 */ 0, 0, 0, 0, 0, 0, 0, 0, 1376, 0, 0, 802816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1097, 1098, 0, 0, 2312,
  /* 30829 */ 0, 0, 2313, 402, 402, 0, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 2416, 500, 522, 522, 0, 402,
  /* 30851 */ 402, 402, 402, 402, 0, 0, 402, 2370, 500, 500, 500, 500, 500, 500, 500, 2238, 500, 500, 500, 500, 500,
  /* 30872 */ 500, 500, 500, 0, 522, 522, 522, 522, 522, 871, 522, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 396, 0,
  /* 30897 */ 409, 409, 409, 409, 409, 429, 429, 429, 429, 429, 451, 451, 451, 451, 451, 451, 451, 451, 464, 451, 451,
  /* 30918 */ 451, 451, 451, 451, 451, 464, 477, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 507, 507, 507, 507,
  /* 30939 */ 530, 507, 507, 507, 507, 507, 507, 507, 507, 507, 530, 530, 530, 530, 530, 549, 549, 558, 53496, 53496, 2,
  /* 30960 */ 2, 3, 94212, 5, 6, 0, 0, 0, 0, 683, 0, 0, 0, 0, 689, 0, 0, 0, 693, 0, 0, 0, 0, 0, 1880, 0, 0, 0, 0, 0,
  /* 30990 */ 1885, 0, 0, 1887, 1888, 0, 402, 402, 402, 704, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0,
  /* 31012 */ 0, 0, 1086, 0, 0, 0, 402, 402, 0, 0, 0, 0, 0, 0, 0, 733, 0, 0, 0, 0, 0, 0, 0, 1374, 0, 0, 0, 0, 0, 0, 0,
  /* 31043 */ 0, 1022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 768, 0, 0, 0, 772, 0, 0, 402, 402, 402, 402, 402, 402, 402, 402, 1690,
  /* 31070 */ 402, 402, 402, 402, 402, 781, 402, 784, 0, 764, 0, 0, 0, 0, 764, 0, 772, 0, 0, 0, 772, 0, 0, 0, 500, 500,
  /* 31096 */ 500, 806, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1965, 500, 500, 500, 500, 500, 928, 910,
  /* 31116 */ 53496, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 45056, 0, 0, 1016, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31146 */ 0, 0, 0, 0, 0, 1311, 0, 0, 0, 1088, 0, 0, 0, 0, 0, 0, 0, 0, 1094, 0, 0, 0, 0, 0, 0, 686, 0, 0, 0, 0, 0, 0,
  /* 31178 */ 0, 0, 0, 1093, 0, 0, 0, 0, 0, 0, 500, 500, 1139, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 31202 */ 500, 500, 500, 2138, 500, 500, 500, 1160, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 31223 */ 500, 2245, 2246, 0, 0, 0, 1303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1334, 0, 0, 0, 1314, 0, 0, 0, 0, 0, 0,
  /* 31253 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1618, 1345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1357, 0, 0, 0, 0, 353, 0, 0, 0,
  /* 31285 */ 0, 0, 0, 0, 0, 0, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1362, 0, 0, 0, 0, 0, 1365, 0, 0, 0, 0, 0, 0, 0, 334,
  /* 31317 */ 358, 0, 0, 0, 0, 0, 0, 45056, 402, 402, 402, 402, 402, 1412, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31343 */ 0, 0, 791, 0, 0, 0, 0, 0, 1434, 0, 0, 0, 0, 402, 402, 402, 402, 1441, 402, 402, 402, 0, 651, 0, 0, 0, 0,
  /* 31370 */ 0, 0, 0, 0, 0, 0, 0, 2202, 0, 0, 0, 0, 0, 0, 0, 1643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1652, 0, 0, 0, 0, 363,
  /* 31402 */ 365, 272, 0, 0, 0, 0, 272, 0, 370, 0, 45056, 1734, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 31425 */ 500, 500, 500, 500, 1171, 0, 0, 0, 522, 522, 522, 1796, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 31447 */ 1240, 522, 522, 522, 522, 522, 0, 0, 1878, 0, 0, 0, 0, 1881, 0, 0, 0, 0, 0, 0, 0, 0, 599, 0, 0, 0, 0, 0,
  /* 31475 */ 0, 0, 0, 0, 0, 1903, 0, 0, 0, 0, 0, 0, 1909, 1910, 0, 0, 1913, 0, 0, 0, 0, 221569, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31505 */ 0, 0, 0, 1324, 0, 0, 0, 0, 1945, 0, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 31529 */ 1502, 500, 0, 0, 0, 2052, 0, 0, 0, 0, 0, 0, 2059, 2060, 0, 0, 0, 0, 0, 0, 3133440, 0, 2727936, 0, 0, 0, 0,
  /* 31556 */ 0, 2891776, 0, 500, 500, 2130, 500, 500, 500, 500, 2133, 500, 500, 500, 500, 2136, 500, 500, 500, 500,
  /* 31576 */ 500, 1463, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1497, 500, 500, 500, 500, 500, 522, 522,
  /* 31596 */ 2151, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2157, 522, 522, 522, 522, 1573, 1574, 522, 522,
  /* 31616 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 2166, 500, 500, 2169, 522, 522, 522, 2160, 522, 522, 522,
  /* 31636 */ 522, 2163, 522, 522, 522, 500, 500, 500, 522, 522, 522, 522, 1821, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 31657 */ 522, 1829, 522, 522, 2172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1664, 0, 0, 0, 2209, 0, 0, 0, 0, 0,
  /* 31686 */ 2214, 402, 402, 402, 402, 2218, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31715 */ 0, 766, 0, 500, 500, 2248, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 31737 */ 0, 2527, 0, 522, 522, 2262, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2271, 522, 522, 522, 522,
  /* 31758 */ 1833, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 500, 500, 2168, 522, 522, 0, 0, 0, 2303, 0,
  /* 31780 */ 0, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 455, 455, 455, 455, 455, 455, 2357, 0, 0, 0, 0, 0, 0,
  /* 31806 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1629, 402, 2406, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 31830 */ 522, 522, 522, 522, 2019, 522, 522, 522, 522, 2023, 522, 522, 522, 522, 522, 522, 522, 1257, 522, 522,
  /* 31850 */ 522, 522, 522, 522, 522, 0, 2518, 500, 500, 500, 522, 522, 522, 2523, 522, 2524, 522, 522, 522, 0, 0, 0,
  /* 31872 */ 0, 1287, 0, 0, 0, 1293, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 45056, 2563,
  /* 31899 */ 2564, 500, 522, 500, 522, 500, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
  /* 31927 */ 1818, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1583, 0, 0, 332, 334, 0,
  /* 31949 */ 0, 0, 334, 0, 0, 0, 0, 0, 0, 0, 0, 764, 0, 618, 0, 0, 0, 0, 0, 49152, 0, 0, 382, 40960, 382, 382, 0, 382,
  /* 31977 */ 382, 389, 382, 0, 382, 410, 410, 410, 410, 410, 430, 430, 430, 430, 430, 452, 452, 452, 452, 452, 452,
  /* 31998 */ 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 410, 452, 452, 452, 488, 452, 452, 452, 452, 452,
  /* 32019 */ 452, 508, 508, 508, 508, 531, 508, 508, 508, 508, 508, 508, 508, 508, 508, 531, 531, 531, 531, 531, 508,
  /* 32040 */ 508, 531, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 666, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
  /* 32068 */ 0, 0, 0, 0, 402, 402, 402, 402, 705, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 1085, 0, 0,
  /* 32092 */ 0, 0, 588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 588, 0, 0, 0, 0, 250278, 250278, 250278, 0, 0, 2, 2,
  /* 32120 */ 3, 94212, 5, 6, 0, 0, 0, 0, 1904, 0, 0, 1907, 0, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 402, 402,
  /* 32150 */ 402, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 588, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 402, 1121,
  /* 32176 */ 402, 402, 0, 794, 0, 500, 500, 500, 500, 808, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1153, 500, 500,
  /* 32198 */ 500, 500, 500, 500, 0, 0, 0, 1001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1377, 0, 0, 0, 1075, 402, 402, 402,
  /* 32226 */ 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 1132, 1454, 500, 500, 1456, 500, 500, 500, 1140, 1146, 500,
  /* 32249 */ 500, 500, 500, 500, 500, 500, 500, 1156, 500, 500, 500, 500, 853, 91311, 1132, 856, 522, 522, 522, 522,
  /* 32269 */ 522, 522, 522, 522, 522, 522, 2155, 522, 522, 522, 522, 522, 1193, 500, 500, 500, 853, 91311, 1132, 856,
  /* 32289 */ 522, 522, 522, 522, 522, 522, 1209, 1215, 0, 500, 500, 1140, 500, 500, 1181, 500, 500, 522, 522, 1209,
  /* 32309 */ 522, 522, 1250, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1262, 522, 522, 522, 0, 1360, 0, 0, 0, 0, 0,
  /* 32332 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1654, 402, 402, 1398, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
  /* 32357 */ 402, 402, 1406, 402, 402, 500, 500, 1460, 1461, 500, 500, 500, 1465, 500, 500, 500, 500, 500, 500, 500,
  /* 32377 */ 500, 500, 1184, 500, 500, 500, 500, 1190, 500, 500, 500, 500, 1475, 500, 500, 500, 500, 500, 500, 500,
  /* 32397 */ 500, 500, 500, 500, 500, 0, 1519, 91311, 0, 1519, 522, 522, 522, 522, 522, 522, 1530, 1531, 522, 522, 522,
  /* 32418 */ 1535, 522, 522, 522, 522, 547, 547, 556, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 402, 402, 402, 402, 1698,
  /* 32440 */ 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 1831, 522, 522, 522, 522, 522,
  /* 32466 */ 522, 522, 522, 522, 522, 522, 522, 522, 1244, 522, 522, 0, 0, 0, 402, 402, 402, 402, 1921, 402, 402, 402,
  /* 32488 */ 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 500, 500, 1733, 0, 0, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 32512 */ 500, 1953, 500, 500, 500, 500, 500, 1492, 1493, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1782, 0,
  /* 32533 */ 0, 0, 1519, 1788, 0, 2040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2063, 0, 0, 0, 2079, 0, 0, 0, 0, 0,
  /* 32563 */ 2085, 0, 0, 0, 0, 402, 2091, 402, 0, 0, 0, 0, 1128, 1087, 0, 0, 0, 0, 0, 1132, 1133, 500, 1136, 522, 2348,
  /* 32588 */ 522, 522, 522, 522, 500, 500, 522, 522, 0, 0, 0, 0, 0, 0, 0, 1437, 402, 402, 402, 402, 402, 1442, 402,
  /* 32611 */ 402, 500, 500, 500, 2495, 500, 2497, 500, 500, 500, 522, 522, 522, 522, 2504, 522, 2506, 500, 500, 500,
  /* 32631 */ 500, 2521, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 2488, 0, 0, 2491, 500, 0, 0, 500, 2547,
  /* 32654 */ 500, 500, 500, 500, 522, 2551, 522, 522, 522, 522, 0, 0, 0, 0, 402, 402, 402, 0, 500, 500, 500, 500, 2318,
  /* 32677 */ 2319, 2320, 500, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0,
  /* 32706 */ 0, 0, 397, 0, 411, 411, 411, 411, 411, 431, 431, 439, 431, 431, 453, 453, 453, 453, 453, 453, 453, 453,
  /* 32728 */ 453, 453, 453, 453, 453, 453, 453, 453, 453, 478, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 509,
  /* 32749 */ 509, 509, 509, 532, 509, 509, 509, 509, 509, 509, 509, 509, 509, 532, 532, 532, 532, 532, 509, 509, 532,
  /* 32770 */ 53496, 53811, 2, 2, 3, 94212, 5, 6, 0, 653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 402,
  /* 32798 */ 402, 402, 402, 706, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 1705, 0, 0, 0, 0, 589, 0, 0,
  /* 32822 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 589, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 714, 402, 402,
  /* 32849 */ 402, 402, 402, 402, 402, 0, 0, 0, 500, 500, 500, 500, 809, 500, 500, 821, 500, 500, 500, 500, 500, 500,
  /* 32871 */ 1477, 500, 500, 500, 500, 500, 500, 500, 500, 1486, 0, 500, 500, 500, 821, 500, 500, 500, 500, 0, 522,
  /* 32892 */ 522, 522, 880, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 2458, 0, 0, 0, 0,
  /* 32915 */ 1110, 0, 0, 402, 402, 402, 402, 402, 402, 402, 1120, 402, 402, 402, 402, 0, 0, 1450, 0, 0, 0, 0, 1132,
  /* 32938 */ 500, 500, 500, 500, 0, 0, 1785, 0, 0, 0, 0, 0, 1791, 0, 0, 0, 500, 500, 500, 1141, 500, 500, 500, 500,
  /* 32962 */ 500, 500, 500, 500, 500, 500, 500, 500, 500, 2137, 500, 500, 522, 522, 1251, 522, 522, 522, 522, 522, 522,
  /* 32983 */ 522, 522, 522, 522, 522, 522, 0, 1599, 0, 0, 0, 0, 0, 1601, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 266, 21052,
  /* 33008 */ 0, 0, 0, 0, 0, 0, 500, 500, 1141, 500, 500, 500, 1272, 500, 522, 522, 1210, 522, 522, 522, 1280, 1519,
  /* 33030 */ 522, 522, 522, 522, 522, 522, 522, 522, 1532, 522, 522, 522, 522, 522, 522, 522, 1576, 522, 522, 522, 522,
  /* 33051 */ 1580, 522, 522, 522, 522, 522, 1540, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 33071 */ 1264, 522, 0, 522, 1554, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1245, 522,
  /* 33092 */ 0, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1342, 0, 0, 1789, 0, 0, 522, 522, 522, 522, 522, 522,
  /* 33120 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 522, 522, 1806, 522, 522, 522, 522, 522, 522, 522,
  /* 33142 */ 522, 522, 522, 522, 522, 522, 1549, 522, 522, 974848, 0, 0, 0, 402, 402, 975250, 0, 500, 500, 500, 500,
  /* 33163 */ 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 975370, 522, 522, 522, 500, 500, 522,
  /* 33184 */ 522, 0, 0, 0, 0, 0, 0, 0, 1612, 0, 0, 0, 0, 0, 0, 0, 0, 1856, 0, 0, 0, 0, 0, 0, 0, 0, 318, 295, 0, 0, 0,
  /* 33215 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1616, 1617, 0, 340, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 340, 0, 0, 0, 45056,
  /* 33244 */ 49152, 0, 0, 0, 40960, 0, 0, 295, 0, 0, 390, 0, 0, 0, 412, 412, 412, 412, 412, 432, 438, 438, 438, 432,
  /* 33268 */ 438, 438, 438, 438, 438, 438, 461, 438, 438, 438, 438, 438, 438, 438, 438, 438, 473, 461, 438, 412, 438,
  /* 33289 */ 438, 487, 438, 487, 487, 487, 487, 487, 487, 510, 510, 510, 510, 533, 510, 510, 510, 510, 510, 510, 510,
  /* 33310 */ 510, 510, 533, 533, 533, 533, 533, 510, 510, 533, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 592, 593, 0,
  /* 33333 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1873, 0, 0, 637, 0, 0, 0, 0, 0, 0, 0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
  /* 33365 */ 1625, 0, 0, 0, 0, 1628, 0, 0, 0, 0, 0, 630, 0, 0, 0, 0, 0, 0, 0, 0, 692, 0, 0, 0, 0, 0, 307, 308, 309,
  /* 33394 */ 310, 0, 0, 0, 0, 0, 0, 0, 731, 0, 731, 0, 0, 0, 0, 754, 0, 0, 402, 699, 402, 402, 707, 402, 402, 715, 402,
  /* 33421 */ 402, 402, 721, 402, 402, 402, 402, 0, 581632, 0, 0, 0, 0, 0, 1132, 500, 500, 500, 500, 500, 500, 2498,
  /* 33443 */ 500, 500, 522, 522, 522, 522, 522, 522, 522, 522, 2164, 522, 522, 500, 500, 500, 522, 522, 728, 402, 0, 0,
  /* 33465 */ 0, 0, 0, 730, 0, 0, 0, 0, 739, 0, 0, 0, 0, 0, 1939, 0, 402, 402, 402, 402, 402, 402, 402, 0, 0, 1931, 0,
  /* 33492 */ 0, 0, 0, 0, 0, 0, 0, 0, 747, 0, 627, 0, 0, 0, 0, 0, 0, 0, 0, 730, 0, 0, 0, 0, 402, 402, 402, 0, 500, 500,
  /* 33522 */ 2317, 500, 500, 500, 500, 500, 500, 1181, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1979, 500,
  /* 33542 */ 500, 500, 500, 500, 590, 0, 757, 0, 0, 630, 0, 0, 0, 747, 0, 0, 0, 730, 590, 767, 0, 730, 0, 769, 630, 0,
  /* 33568 */ 0, 747, 0, 699, 402, 402, 777, 402, 402, 402, 402, 402, 402, 2097, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33594 */ 0, 500, 500, 500, 2439, 500, 500, 500, 500, 500, 500, 402, 728, 402, 0, 0, 0, 0, 0, 0, 0, 747, 0, 630,
  /* 33618 */ 769, 0, 0, 0, 0, 402, 402, 402, 0, 500, 2316, 500, 500, 500, 500, 500, 500, 500, 2124, 500, 500, 500, 500,
  /* 33641 */ 500, 500, 500, 500, 0, 522, 522, 859, 522, 522, 522, 522, 0, 795, 0, 500, 798, 500, 500, 810, 500, 500,
  /* 33663 */ 822, 500, 500, 500, 832, 500, 500, 500, 500, 853, 91311, 1132, 856, 1203, 522, 522, 522, 522, 522, 522,
  /* 33683 */ 522, 522, 522, 2455, 0, 0, 0, 0, 0, 0, 500, 500, 500, 847, 500, 500, 500, 500, 0, 522, 522, 857, 522, 522,
  /* 33707 */ 869, 522, 500, 500, 1587, 500, 500, 1589, 500, 500, 522, 522, 1594, 522, 522, 1596, 522, 500, 1586, 500,
  /* 33727 */ 651764, 500, 500, 500, 500, 522, 1593, 522, 651786, 522, 522, 522, 522, 1222, 522, 522, 522, 522, 522,
  /* 33746 */ 522, 522, 522, 522, 522, 522, 500, 2167, 500, 522, 2170, 522, 881, 522, 522, 522, 891, 522, 522, 522, 522,
  /* 33767 */ 906, 522, 522, 522, 0, 0, 0, 0, 402, 402, 402, 0, 2315, 500, 500, 500, 500, 500, 500, 2321, 0, 798, 500,
  /* 33790 */ 500, 917, 500, 500, 500, 500, 0, 857, 522, 522, 925, 522, 522, 522, 522, 2350, 522, 500, 500, 522, 522, 0,
  /* 33812 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2180, 0, 933888, 0, 0, 944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1041, 0, 0, 0, 0, 0,
  /* 33843 */ 321, 0, 304, 366, 368, 0, 0, 0, 321, 0, 45056, 0, 0, 1085, 0, 0, 0, 0, 0, 0, 1103, 0, 0, 0, 0, 0, 0, 0,
  /* 33871 */ 1634, 0, 0, 0, 0, 0, 0, 0, 1640, 0, 0, 0, 977, 0, 402, 402, 1115, 402, 402, 402, 1119, 402, 402, 402, 402,
  /* 33896 */ 0, 0, 0, 1451, 0, 0, 0, 1132, 500, 500, 500, 500, 500, 500, 2252, 500, 500, 500, 2256, 522, 522, 522, 522,
  /* 33919 */ 522, 522, 522, 2154, 522, 522, 522, 522, 522, 522, 522, 522, 522, 905, 522, 522, 522, 522, 0, 0, 500, 500,
  /* 33941 */ 500, 1176, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 2332, 500, 522, 0, 500, 500,
  /* 33962 */ 1268, 500, 500, 1271, 500, 500, 522, 522, 1276, 522, 522, 1279, 522, 522, 522, 886, 888, 522, 893, 522,
  /* 33982 */ 896, 522, 522, 908, 522, 522, 0, 0, 0, 1600, 0, 933, 0, 0, 0, 1602, 0, 937, 0, 0, 0, 0, 0, 1623, 0, 0, 0,
  /* 34009 */ 0, 0, 0, 0, 0, 0, 0, 979, 318, 318, 0, 0, 0, 402, 402, 402, 1399, 402, 402, 402, 402, 402, 402, 402, 402,
  /* 34034 */ 402, 402, 402, 402, 0, 1084, 0, 0, 0, 0, 0, 0, 0, 0, 1424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1886, 0, 0,
  /* 34064 */ 0, 1445, 402, 402, 402, 1449, 0, 0, 0, 0, 0, 0, 1132, 500, 500, 500, 500, 500, 500, 2379, 500, 500, 500,
  /* 34087 */ 500, 500, 522, 522, 522, 522, 522, 522, 522, 2484, 2485, 0, 0, 0, 0, 0, 0, 2492, 500, 1505, 500, 500, 500,
  /* 34110 */ 500, 500, 500, 500, 500, 500, 500, 0, 1519, 91311, 0, 0, 0, 0, 258471, 258471, 258471, 0, 0, 2, 2, 3,
  /* 34132 */ 94212, 0, 6, 0, 0, 0, 0, 2053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627, 0, 0, 0, 0, 1519, 522, 522, 522,
  /* 34160 */ 522, 522, 522, 522, 522, 522, 522, 1534, 522, 522, 522, 522, 522, 522, 1237, 522, 522, 1239, 522, 1241,
  /* 34180 */ 522, 522, 522, 522, 500, 500, 522, 53496, 53811, 2, 2, 3, 94212, 5, 6, 0, 1641, 1642, 0, 0, 0, 0, 0, 0, 0,
  /* 34205 */ 0, 0, 0, 0, 0, 0, 0, 2075, 0, 1682, 0, 1684, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
  /* 34229 */ 402, 1070, 402, 402, 402, 402, 402, 402, 0, 1710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402,
  /* 34254 */ 402, 1063, 500, 500, 1761, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1157, 500,
  /* 34274 */ 500, 500, 500, 500, 1775, 500, 500, 500, 500, 500, 500, 0, 0, 0, 0, 1519, 0, 0, 0, 0, 1089536, 0, 0, 0, 0,
  /* 34299 */ 0, 0, 0, 0, 0, 0, 0, 1883, 0, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 1795, 522, 522, 522, 522, 522, 522, 522,
  /* 34326 */ 522, 522, 522, 522, 2024, 522, 522, 522, 522, 0, 0, 1864, 0, 0, 1866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1020,
  /* 34352 */ 1020, 0, 0, 0, 0, 0, 1877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2205, 0, 0, 1890, 0, 1891, 0, 0, 0,
  /* 34382 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1911, 0, 0, 0, 0, 0, 1917, 402, 402, 402, 402, 402, 1922, 402, 402, 402, 1924,
  /* 34408 */ 402, 402, 1926, 1936, 0, 1938, 0, 0, 0, 0, 402, 402, 402, 402, 1943, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34434 */ 736, 0, 741, 0, 744, 0, 0, 500, 500, 500, 500, 500, 500, 500, 1951, 500, 500, 500, 500, 1955, 500, 500,
  /* 34456 */ 500, 500, 1144, 500, 1149, 500, 500, 500, 500, 500, 1155, 500, 500, 500, 500, 500, 1163, 500, 500, 1166,
  /* 34476 */ 500, 500, 500, 500, 500, 500, 500, 1478, 500, 500, 500, 500, 500, 500, 500, 500, 1466, 500, 500, 500, 500,
  /* 34497 */ 500, 500, 500, 1957, 500, 500, 500, 500, 500, 500, 500, 500, 1964, 500, 500, 500, 500, 500, 500, 500,
  /* 34517 */ 2253, 500, 500, 522, 522, 2258, 522, 522, 522, 0, 0, 0, 2068, 0, 0, 0, 0, 0, 0, 0, 2073, 0, 0, 0, 0, 0,
  /* 34543 */ 336, 0, 0, 0, 340, 341, 343, 296, 0, 0, 0, 0, 0, 0, 2080, 2081, 0, 0, 2084, 0, 0, 0, 0, 0, 402, 402, 402,
  /* 34570 */ 1071, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 2107, 402, 402, 402, 402, 0, 500, 500, 500, 500, 500,
  /* 34592 */ 500, 500, 1165, 500, 500, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 872, 522, 500, 500,
  /* 34613 */ 500, 2121, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1169, 500, 500, 500, 0, 0, 2184, 0,
  /* 34635 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912, 0, 0, 2234, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 34661 */ 2242, 2243, 500, 500, 500, 500, 500, 1738, 500, 500, 500, 500, 500, 1743, 500, 1745, 500, 500, 500, 2247,
  /* 34681 */ 500, 500, 500, 500, 500, 500, 500, 500, 522, 2257, 522, 522, 522, 522, 522, 522, 1543, 522, 522, 522, 522,
  /* 34702 */ 522, 522, 522, 522, 522, 522, 1546, 522, 522, 522, 522, 522, 0, 569344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34727 */ 0, 0, 0, 106496, 0, 522, 522, 522, 2336, 2337, 2338, 522, 522, 522, 522, 522, 522, 522, 522, 2345, 522,
  /* 34748 */ 522, 522, 887, 890, 522, 522, 522, 899, 903, 522, 522, 522, 522, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522,
  /* 34771 */ 522, 522, 522, 522, 2148, 522, 2374, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522,
  /* 34792 */ 522, 2260, 522, 522, 522, 2386, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 500, 522, 2565,
  /* 34812 */ 2566, 500, 522, 500, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1298, 0, 522, 522, 522, 2449, 522, 522,
  /* 34838 */ 522, 522, 522, 522, 0, 0, 0, 0, 2459, 0, 0, 0, 0, 1094068, 1094068, 1094068, 0, 0, 2, 2, 3, 94212, 5, 6,
  /* 34862 */ 0, 0, 0, 0, 2158592, 2158592, 2158592, 0, 2420736, 2162688, 2162688, 2482176, 2162688, 2162688, 2162688,
  /* 34877 */ 2584576, 2162688, 2162688, 2682880, 2740224, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  /* 34888 */ 2162688, 2162688, 2162688, 2162688, 3121152, 2420736, 0, 0, 500, 500, 2533, 2534, 500, 500, 522, 522,
  /* 34904 */ 2539, 2540, 522, 522, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 49152,
  /* 34926 */ 0, 300, 299, 40960, 299, 299, 300, 387, 299, 298, 299, 0, 299, 413, 413, 413, 413, 413, 433, 433, 433,
  /* 34947 */ 441, 445, 454, 454, 454, 454, 454, 454, 454, 454, 454, 469, 454, 454, 454, 454, 454, 454, 454, 413, 454,
  /* 34968 */ 454, 469, 454, 469, 493, 469, 493, 469, 493, 511, 511, 511, 511, 534, 511, 511, 511, 511, 511, 511, 511,
  /* 34989 */ 511, 511, 534, 534, 534, 534, 534, 511, 511, 534, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 576, 0, 0, 0,
  /* 35013 */ 580, 581, 582, 583, 584, 0, 0, 0, 0, 0, 0, 0, 1868, 0, 0, 0, 0, 1872, 0, 0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
  /* 35042 */ 0, 0, 0, 0, 0, 0, 0, 636, 0, 0, 639, 0, 641, 0, 643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1055, 402, 402, 1058, 402,
  /* 35071 */ 1062, 402, 0, 682, 0, 0, 685, 745472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 0, 0, 1029, 0, 0, 402, 402,
  /* 35098 */ 702, 402, 402, 710, 402, 402, 402, 719, 402, 402, 402, 402, 726, 402, 785, 0, 612, 676, 787, 0, 0, 612, 0,
  /* 35121 */ 619, 0, 0, 676, 792, 402, 402, 0, 0, 0, 0, 0, 0, 732, 0, 0, 0, 0, 0, 743, 0, 0, 0, 0, 2158592, 2158592,
  /* 35147 */ 2158592, 0, 2421533, 2163485, 2163485, 2482973, 2163485, 2163485, 2163485, 2585373, 0, 612, 0, 0, 0, 0,
  /* 35163 */ 749, 750, 0, 751, 0, 0, 0, 0, 755, 0, 0, 0, 0, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543,
  /* 35182 */ 2163543, 2163543, 2548567, 2163543, 2163543, 2163543, 2483031, 2163543, 2163543, 2163543, 2585431,
  /* 35193 */ 2163543, 2163543, 2683735, 2741079, 2163543, 2163543, 2163543, 2163543, 2163543, 2622295, 2163543,
  /* 35204 */ 2163543, 2163543, 2163543, 2687831, 2163543, 2704215, 2163543, 2712407, 2163543, 0, 0, 0, 500, 500, 804,
  /* 35219 */ 807, 500, 814, 500, 500, 500, 828, 831, 500, 500, 500, 500, 853, 91311, 1132, 856, 522, 522, 522, 522,
  /* 35239 */ 522, 522, 1210, 522, 500, 840, 844, 500, 500, 500, 500, 500, 0, 522, 522, 522, 863, 866, 522, 873, 0, 500,
  /* 35261 */ 500, 916, 500, 500, 840, 844, 921, 0, 522, 522, 924, 522, 522, 899, 903, 929, 53496, 2, 6, 0, 0, 0, 0, 0,
  /* 35285 */ 0, 0, 0, 0, 0, 0, 2113536, 0, 0, 0, 0, 1014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 969, 0, 0, 0, 0, 0, 596, 0,
  /* 35315 */ 598, 0, 0, 0, 0, 0, 0, 0, 0, 1038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1048, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402,
  /* 35345 */ 402, 402, 402, 402, 1040384, 0, 402, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1132, 500, 500, 500, 500, 500,
  /* 35369 */ 1764, 500, 500, 500, 1768, 500, 500, 500, 500, 500, 500, 500, 2239, 500, 500, 500, 500, 500, 500, 500,
  /* 35389 */ 500, 500, 500, 2382, 500, 522, 522, 522, 522, 1159, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 35410 */ 500, 500, 500, 500, 1485, 500, 500, 1175, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1191,
  /* 35430 */ 500, 500, 500, 500, 1145, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1757, 500, 500, 500,
  /* 35451 */ 0, 1361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1368, 1369, 0, 0, 0, 0, 2486272, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35479 */ 2600960, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 35495 */ 172032, 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 1371, 0, 0, 0, 1373, 0, 672, 0, 0, 0, 0, 0, 0,
  /* 35518 */ 0, 0, 0, 1092, 0, 0, 0, 0, 0, 0, 1553, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 35542 */ 522, 522, 1842, 0, 1619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1101824, 374, 1630, 0, 0, 0, 0, 0, 0,
  /* 35570 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1681, 500, 500, 1749, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 35594 */ 500, 500, 1758, 500, 500, 0, 0, 0, 1879, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2089, 402, 402, 402, 0, 2051,
  /* 35621 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2048, 0, 2050, 0, 0, 0, 402, 402, 402, 402, 2110, 2111, 2112,
  /* 35648 */ 500, 500, 500, 500, 500, 500, 500, 2327, 500, 500, 500, 500, 500, 500, 500, 522, 500, 500, 500, 2237, 500,
  /* 35669 */ 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1188, 500, 500, 500, 0, 2396, 0, 0, 2399, 0, 0, 0,
  /* 35692 */ 0, 0, 0, 0, 0, 0, 0, 0, 1104, 0, 0, 0, 0, 0, 522, 2419, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0,
  /* 35719 */ 0, 0, 0, 0, 1895, 0, 0, 0, 0, 0, 0, 0, 0, 367, 309, 0, 0, 0, 0, 0, 45056, 522, 2447, 522, 522, 522, 2451,
  /* 35746 */ 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 2056, 0, 0, 0, 0, 2061, 0, 0, 0, 0, 2530, 500, 500, 500, 500,
  /* 35772 */ 500, 500, 522, 522, 522, 522, 522, 522, 0, 2544, 2545, 0, 500, 500, 500, 500, 500, 500, 522, 522, 522,
  /* 35793 */ 522, 522, 522, 0, 0, 0, 0, 522, 522, 522, 522, 522, 2144, 522, 2146, 522, 522, 522, 2149, 360, 0, 0, 0, 0,
  /* 35817 */ 0, 360, 0, 0, 0, 0, 360, 0, 0, 0, 45056, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 398, 0, 402, 402,
  /* 35844 */ 402, 402, 402, 0, 0, 402, 0, 500, 500, 500, 500, 2372, 500, 455, 455, 455, 455, 455, 455, 455, 455, 455,
  /* 35866 */ 455, 455, 455, 455, 455, 455, 455, 479, 455, 455, 455, 455, 455, 455, 455, 455, 455, 499, 512, 512, 512,
  /* 35887 */ 512, 535, 512, 512, 512, 512, 512, 512, 512, 512, 512, 535, 535, 535, 535, 535, 550, 550, 559, 53496,
  /* 35907 */ 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 748, 0, 0, 0, 0, 0, 600, 0, 0, 0, 600, 0, 0, 0, 0, 0, 2082, 0, 0, 0,
  /* 35937 */ 2086, 0, 0, 0, 402, 402, 402, 402, 402, 0, 500, 500, 500, 500, 500, 500, 500, 500, 1495, 500, 500, 500,
  /* 35959 */ 500, 500, 500, 500, 500, 1511, 500, 500, 500, 0, 1519, 91311, 0, 402, 783, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35984 */ 0, 0, 0, 0, 2062, 0, 0, 500, 500, 500, 848, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 36008 */ 1811, 522, 522, 522, 522, 522, 522, 522, 522, 1823, 522, 522, 522, 522, 522, 522, 522, 522, 1545, 522,
  /* 36028 */ 522, 522, 522, 522, 522, 522, 522, 1225, 522, 522, 522, 522, 522, 522, 522, 522, 1226, 522, 522, 522, 522,
  /* 36049 */ 522, 522, 522, 522, 1258, 522, 522, 522, 522, 522, 522, 0, 0, 947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1043,
  /* 36075 */ 0, 0, 0, 0, 522, 522, 522, 2142, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1227, 522, 522, 522, 522,
  /* 36097 */ 522, 522, 0, 1047, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 713, 402, 718, 402, 402, 402,
  /* 36121 */ 402, 725, 402, 402, 1065, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 1703,
  /* 36141 */ 1704, 0, 0, 1706, 0, 0, 500, 500, 500, 1142, 500, 500, 500, 500, 1152, 500, 500, 500, 500, 500, 500, 500,
  /* 36163 */ 1182, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1481, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 36183 */ 1177, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1189, 500, 500, 500, 500, 853, 91311, 1132, 856, 522,
  /* 36203 */ 522, 522, 522, 522, 522, 1211, 522, 0, 500, 500, 1142, 500, 500, 500, 500, 500, 522, 522, 1211, 522, 522,
  /* 36224 */ 522, 522, 522, 522, 1575, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1261, 522, 522, 522, 522, 0,
  /* 36245 */ 0, 0, 0, 1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2291, 2292, 0, 0, 500, 1748, 500, 500, 1751, 500, 500,
  /* 36272 */ 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1769, 500, 500, 500, 1790, 0, 0, 522, 522, 522, 522,
  /* 36293 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 1565, 522, 522, 0, 1863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36319 */ 0, 0, 2074, 0, 0, 2195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1875, 2395, 0, 2397, 0, 0, 0, 0, 0,
  /* 36349 */ 0, 2402, 0, 0, 0, 2405, 0, 0, 0, 0, 522, 522, 2141, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 36372 */ 1838, 522, 1840, 522, 522, 522, 0, 0, 2433, 2434, 0, 851968, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 36393 */ 500, 500, 2135, 500, 500, 500, 500, 0, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2297, 0, 0, 0, 0,
  /* 36421 */ 402, 402, 402, 402, 708, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 2102, 0, 0, 0,
  /* 36445 */ 0, 0, 734, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 1069, 402, 402, 402, 402, 402, 402, 402, 402,
  /* 36469 */ 0, 0, 0, 0, 0, 500, 1732, 500, 0, 0, 0, 500, 500, 500, 500, 811, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 36493 */ 500, 1496, 500, 500, 500, 500, 500, 500, 522, 522, 53496, 2, 6, 0, 0, 0, 0, 934, 938, 0, 0, 0, 0, 0, 0,
  /* 36518 */ 1036, 0, 0, 0, 1040, 0, 0, 0, 0, 0, 0, 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 943, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36550 */ 0, 0, 0, 2322, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 1221,
  /* 36572 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1230, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36598 */ 0, 0, 1914, 0, 318, 0, 0, 0, 0, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2064, 49152, 0, 302,
  /* 36627 */ 301, 40960, 301, 301, 302, 301, 301, 0, 301, 0, 301, 414, 414, 414, 414, 414, 0, 0, 0, 0, 302, 301, 301,
  /* 36650 */ 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 414, 301, 301, 301, 301, 301,
  /* 36671 */ 301, 301, 301, 497, 301, 513, 513, 513, 513, 536, 513, 513, 513, 513, 513, 513, 513, 513, 513, 536, 536,
  /* 36692 */ 536, 536, 536, 513, 513, 536, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 691,
  /* 36718 */ 0, 0, 0, 0, 0, 0, 1052, 1053, 0, 0, 402, 402, 402, 402, 402, 402, 1413, 402, 402, 402, 0, 0, 0, 0, 0, 0,
  /* 36744 */ 0, 0, 0, 0, 734, 0, 0, 745, 746, 0, 0, 0, 0, 0, 0, 745, 0, 0, 0, 752, 0, 0, 0, 0, 0, 2295, 0, 0, 0, 0, 0,
  /* 36775 */ 0, 0, 0, 0, 0, 992, 0, 0, 0, 0, 0, 0, 677, 0, 0, 0, 760, 0, 0, 746, 0, 0, 0, 0, 0, 0, 0, 402, 402, 1941,
  /* 36805 */ 402, 402, 402, 402, 0, 0, 782, 402, 402, 0, 746, 0, 0, 0, 0, 746, 0, 0, 770, 0, 657, 0, 0, 0, 0, 2646016,
  /* 36831 */ 0, 2781184, 0, 0, 0, 0, 0, 0, 3125248, 0, 0, 0, 0, 0, 188836, 188836, 188836, 188836, 188836, 0, 0, 0, 0,
  /* 36854 */ 0, 188836, 188836, 188836, 0, 188836, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 347, 342, 0, 0, 0, 500,
  /* 36880 */ 799, 500, 500, 500, 500, 817, 500, 500, 500, 500, 833, 835, 500, 500, 845, 500, 500, 500, 500, 500, 0,
  /* 36901 */ 522, 522, 858, 522, 522, 522, 522, 522, 522, 1834, 522, 1836, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 36921 */ 2008, 522, 522, 522, 522, 522, 522, 522, 522, 2022, 522, 522, 522, 522, 522, 522, 522, 522, 897, 522, 522,
  /* 36942 */ 522, 522, 522, 0, 0, 876, 522, 522, 522, 522, 892, 894, 522, 522, 904, 522, 522, 522, 522, 0, 0, 0, 0,
  /* 36965 */ 522, 2140, 522, 522, 2143, 522, 522, 522, 522, 522, 522, 522, 522, 901, 522, 522, 522, 522, 522, 0, 0, 0,
  /* 36987 */ 799, 500, 500, 500, 835, 500, 845, 500, 0, 858, 522, 522, 522, 894, 522, 522, 522, 1252, 522, 522, 522,
  /* 37008 */ 1255, 522, 522, 522, 522, 522, 522, 522, 0, 1282, 0, 0, 0, 1288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284, 284, 0,
  /* 37034 */ 328, 0, 0, 0, 904, 522, 53496, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1339, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
  /* 37064 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 269, 270, 0, 0, 0, 0, 1033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37095 */ 0, 364544, 0, 0, 0, 1124, 0, 0, 1017, 0, 0, 0, 1129, 0, 0, 0, 1131, 1132, 500, 1135, 500, 500, 500, 500,
  /* 37119 */ 1161, 500, 500, 500, 500, 500, 1167, 500, 500, 500, 500, 500, 500, 1752, 1753, 500, 1755, 500, 500, 500,
  /* 37139 */ 500, 500, 500, 500, 2499, 500, 522, 522, 522, 522, 522, 522, 522, 522, 2426, 522, 0, 0, 0, 2430, 0, 0,
  /* 37161 */ 500, 1173, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1759, 500, 0, 500, 500,
  /* 37182 */ 500, 500, 1270, 500, 500, 1273, 522, 522, 522, 522, 1278, 522, 522, 522, 522, 2388, 522, 2389, 2390, 522,
  /* 37202 */ 522, 522, 522, 522, 522, 500, 522, 500, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522,
  /* 37223 */ 500, 2279, 500, 522, 2281, 522, 0, 0, 0, 0, 0, 2176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 991, 0, 0, 0, 0, 0, 0,
  /* 37251 */ 1281, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2206, 0, 0, 0, 1332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37283 */ 0, 1354, 0, 0, 0, 0, 0, 1457, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 37306 */ 1503, 500, 1473, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1771, 500, 1519,
  /* 37326 */ 522, 522, 522, 522, 1527, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2156, 522, 522, 522, 522,
  /* 37347 */ 0, 0, 1620, 1621, 1622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1389, 0, 0, 0, 0, 402, 1655, 0, 0, 0, 0, 0,
  /* 37375 */ 311296, 1661, 0, 0, 0, 0, 0, 0, 0, 0, 1337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1668, 0, 1670, 1671, 0, 0, 0, 0, 0,
  /* 37404 */ 0, 0, 0, 0, 0, 1614, 0, 0, 0, 0, 0, 402, 1695, 1696, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 1707, 0,
  /* 37431 */ 0, 0, 0, 2887680, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 0, 0, 0,
  /* 37450 */ 0, 2162688, 2162688, 2428928, 2162688, 2162688, 500, 1760, 500, 500, 500, 500, 500, 1766, 500, 500, 500,
  /* 37467 */ 500, 500, 500, 500, 500, 500, 1741, 500, 500, 500, 500, 500, 500, 311796, 1843, 500, 500, 500, 500, 500,
  /* 37487 */ 311818, 1847, 522, 522, 522, 522, 522, 0, 0, 0, 0, 568, 0, 0, 0, 2105344, 266, 267, 0, 0, 0, 0, 0, 0, 619,
  /* 37512 */ 0, 643, 402, 402, 776, 402, 778, 402, 402, 1889, 0, 0, 0, 0, 1893, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1649, 0,
  /* 37539 */ 0, 0, 0, 0, 0, 1937, 0, 0, 0, 0, 0, 402, 402, 402, 1942, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 737, 0,
  /* 37568 */ 742, 0, 0, 0, 763, 0, 0, 0, 0, 0, 574, 0, 0, 0, 0, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1952, 500,
  /* 37594 */ 500, 500, 500, 500, 850, 500, 500, 0, 522, 522, 522, 862, 522, 522, 522, 522, 2275, 522, 522, 522, 500,
  /* 37615 */ 500, 500, 522, 522, 522, 0, 0, 0, 0, 0, 0, 1091, 0, 0, 0, 0, 1095, 1096, 0, 0, 963, 0, 0, 0, 2398, 0, 0,
  /* 37642 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1870, 0, 0, 0, 0, 0, 402, 0, 2407, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 37669 */ 2415, 500, 500, 2417, 522, 522, 522, 1571, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 37689 */ 910, 522, 0, 0, 0, 0, 2463, 500, 2465, 500, 500, 500, 500, 500, 500, 500, 500, 522, 2475, 522, 522, 522,
  /* 37711 */ 1572, 522, 522, 522, 522, 522, 522, 522, 1579, 522, 522, 1582, 522, 522, 522, 1541, 522, 522, 522, 1544,
  /* 37731 */ 522, 522, 522, 522, 522, 522, 1550, 1552, 0, 0, 500, 500, 500, 500, 2535, 500, 522, 522, 522, 522, 2541,
  /* 37752 */ 522, 2543, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 281, 0, 0, 45056, 0, 2546, 500, 500, 500,
  /* 37779 */ 500, 500, 500, 522, 522, 522, 522, 522, 522, 0, 2555, 2556, 0, 500, 500, 500, 500, 522, 522, 522, 522, 0,
  /* 37801 */ 0, 500, 500, 522, 522, 522, 522, 2422, 522, 522, 522, 522, 522, 0, 2428, 0, 0, 868352, 0, 0, 303, 304,
  /* 37823 */ 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1884, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 321, 0, 0, 0, 0, 0,
  /* 37855 */ 0, 0, 0, 1352, 0, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2293, 304, 0, 0, 0,
  /* 37887 */ 321, 0, 338, 0, 303, 0, 0, 0, 0, 0, 348, 349, 0, 350, 0, 0, 0, 0, 350, 0, 0, 0, 355, 0, 0, 0, 321, 359,
  /* 37915 */ 49152, 0, 0, 383, 40960, 383, 383, 0, 383, 383, 368, 383, 0, 383, 415, 415, 415, 415, 415, 0, 0, 303, 0,
  /* 37938 */ 0, 456, 456, 456, 456, 456, 456, 456, 456, 465, 470, 456, 456, 456, 456, 456, 456, 465, 480, 465, 484,
  /* 37959 */ 470, 489, 470, 470, 470, 470, 470, 470, 514, 514, 514, 514, 537, 514, 514, 514, 514, 514, 514, 514, 514,
  /* 37980 */ 514, 537, 537, 537, 537, 537, 551, 551, 560, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 573, 0, 0, 0, 0, 0,
  /* 38005 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2298, 2299, 0, 0, 402, 700, 402, 402, 402, 402, 402, 716, 402, 402, 402, 402,
  /* 38030 */ 402, 402, 402, 1415, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 0, 0, 0, 0, 0, 740, 0, 0, 0, 0, 0, 0, 0,
  /* 38060 */ 0, 0, 0, 753, 0, 740, 0, 753, 0, 0, 0, 0, 0, 0, 0, 700, 402, 402, 716, 402, 402, 402, 402, 402, 1068, 402,
  /* 38086 */ 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 1728, 0, 0, 500, 500, 500, 0, 753, 0, 500, 800, 500,
  /* 38109 */ 500, 500, 500, 500, 823, 500, 500, 500, 500, 500, 500, 1765, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 38130 */ 500, 1756, 500, 500, 500, 500, 500, 0, 800, 500, 500, 823, 500, 500, 500, 500, 0, 859, 522, 522, 882, 522,
  /* 38152 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 2486, 2487, 0, 0, 0, 0, 500, 522, 522, 53496,
  /* 38175 */ 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 939, 0, 0, 0, 267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 587, 588, 0, 0, 0,
  /* 38208 */ 941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 951, 0, 0, 0, 0, 0, 642, 0, 0, 645, 0, 0, 0, 0, 0, 0, 0, 354, 0, 0, 0, 0,
  /* 38240 */ 0, 0, 0, 0, 354, 0, 0, 45056, 1064, 402, 402, 402, 402, 402, 402, 402, 402, 402, 1071, 402, 402, 402, 402,
  /* 38263 */ 402, 0, 329, 0, 354, 354, 0, 0, 0, 0, 0, 0, 0, 151552, 2105344, 266, 267, 0, 208896, 0, 0, 0, 0, 0, 1089,
  /* 38288 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 163840, 163840, 0, 1099, 0, 1055, 1089, 0, 0, 0, 0, 0, 0,
  /* 38315 */ 0, 1099, 0, 1089, 1107, 500, 1138, 500, 500, 1147, 500, 500, 1151, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 38336 */ 500, 1780, 0, 0, 0, 0, 1519, 0, 522, 522, 1220, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 38358 */ 522, 522, 1581, 522, 522, 0, 500, 500, 500, 1162, 500, 500, 500, 500, 522, 522, 522, 1231, 522, 522, 522,
  /* 38379 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2001, 0, 0, 1347, 0, 0, 0, 1350, 0, 0, 0, 0,
  /* 38403 */ 0, 0, 0, 0, 0, 1366, 0, 0, 0, 0, 0, 0, 0, 0, 1073152, 0, 0, 0, 1633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375, 0,
  /* 38433 */ 0, 0, 0, 0, 0, 402, 402, 402, 1697, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 1708, 402, 402, 402,
  /* 38457 */ 967058, 1725, 402, 402, 1073554, 0, 0, 0, 0, 1730, 1731, 500, 500, 500, 500, 853, 91311, 1132, 856, 522,
  /* 38477 */ 522, 522, 522, 522, 1208, 522, 522, 522, 522, 1556, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1566,
  /* 38497 */ 522, 1772, 500, 1774, 500, 500, 500, 500, 500, 500, 500, 0, 0, 0, 0, 1519, 0, 0, 0, 271, 0, 272, 0, 271,
  /* 38521 */ 271, 272, 0, 0, 0, 0, 0, 0, 0, 1005, 0, 0, 0, 0, 0, 0, 0, 0, 990, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1793, 522,
  /* 38552 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2011, 522, 522, 522, 500, 500, 1972, 500, 500, 500,
  /* 38573 */ 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1770, 500, 500, 2015, 522, 522, 522, 522, 522, 522, 522,
  /* 38594 */ 522, 522, 522, 522, 522, 522, 522, 522, 2014, 500, 500, 500, 2131, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 38615 */ 500, 500, 500, 500, 1469, 500, 500, 500, 0, 1785, 0, 1791, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 38636 */ 522, 522, 522, 2394, 522, 500, 522, 2150, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 38657 */ 2158, 522, 522, 522, 1820, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1564, 522, 522,
  /* 38677 */ 522, 402, 0, 409600, 0, 0, 0, 0, 0, 0, 0, 410002, 402, 402, 402, 0, 500, 2408, 500, 500, 500, 500, 500,
  /* 38700 */ 500, 2414, 500, 500, 500, 522, 2418, 0, 2301, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 2310, 0, 0, 0, 0,
  /* 38724 */ 0, 2305, 402, 402, 2307, 2308, 402, 402, 402, 0, 0, 0, 0, 0, 0, 667, 0, 0, 0, 0, 0, 0, 0, 1855, 0, 1857,
  /* 38750 */ 0, 0, 1860, 0, 0, 0, 0, 0, 909312, 0, 402, 909714, 402, 2314, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 38773 */ 2381, 500, 500, 522, 522, 522, 522, 0, 402, 402, 402, 402, 402, 0, 806912, 807314, 0, 500, 500, 500, 500,
  /* 38794 */ 500, 500, 846, 500, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2421, 522, 2423, 522, 522, 522, 522,
  /* 38815 */ 0, 0, 0, 0, 0, 0, 0, 2213, 0, 2215, 402, 402, 402, 402, 402, 402, 1080, 402, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38842 */ 2613248, 0, 0, 0, 0, 0, 0, 0, 0, 1882, 0, 0, 0, 0, 0, 0, 0, 0, 1896, 0, 0, 0, 0, 0, 0, 0, 0, 2045, 0, 0,
  /* 38872 */ 0, 2047, 0, 2049, 0, 0, 0, 0, 2464, 500, 500, 500, 500, 500, 500, 500, 500, 500, 2474, 522, 522, 522, 522,
  /* 38895 */ 2450, 522, 2452, 2453, 2454, 522, 0, 0, 0, 0, 0, 0, 0, 1386, 0, 1388, 0, 0, 0, 0, 0, 402, 1114, 402, 402,
  /* 38920 */ 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 1087, 0, 2507, 522, 522, 0, 2510, 0, 0, 0, 0, 0, 0, 500,
  /* 38946 */ 2516, 500, 500, 500, 500, 500, 1961, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1168, 500,
  /* 38966 */ 500, 1170, 500, 0, 351, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1648, 0, 0, 0, 0, 0, 0, 49152, 0, 0,
  /* 38995 */ 0, 40960, 0, 0, 0, 0, 0, 309, 0, 0, 0, 416, 416, 416, 416, 416, 434, 434, 434, 434, 434, 457, 457, 457,
  /* 39019 */ 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 481, 457, 485, 457, 490, 457, 457,
  /* 39040 */ 457, 457, 457, 457, 515, 515, 515, 515, 538, 515, 515, 515, 515, 515, 515, 515, 515, 515, 538, 538, 538,
  /* 39061 */ 538, 538, 552, 552, 561, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 591, 0, 0, 594, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39088 */ 0, 0, 606, 607, 608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 318, 318, 669, 574, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39118 */ 0, 0, 0, 679, 0, 0, 0, 273, 274, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 585, 586, 0, 0, 0, 0, 763, 574, 0, 0,
  /* 39148 */ 0, 763, 0, 0, 0, 402, 402, 402, 402, 402, 402, 725, 402, 402, 402, 763, 0, 786, 0, 742, 788, 0, 0, 0, 0,
  /* 39173 */ 0, 786, 0, 0, 0, 284, 352, 0, 0, 0, 284, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592,
  /* 39196 */ 2809856, 2158592, 2158592, 2158592, 0, 574, 0, 500, 801, 500, 500, 500, 500, 818, 824, 826, 500, 500, 500,
  /* 39215 */ 500, 500, 851, 500, 500, 0, 522, 522, 522, 522, 865, 522, 522, 500, 841, 500, 500, 500, 500, 500, 500, 0,
  /* 39237 */ 522, 522, 860, 522, 522, 522, 522, 522, 522, 2153, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 39258 */ 2393, 522, 522, 500, 522, 877, 883, 885, 522, 522, 522, 522, 522, 900, 522, 522, 522, 522, 522, 0, 0, 0,
  /* 39280 */ 0, 595, 0, 0, 0, 0, 0, 0, 0, 603, 604, 0, 0, 0, 0, 290, 335, 337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 663, 0, 665,
  /* 39310 */ 0, 0, 0, 0, 0, 801, 500, 500, 824, 500, 841, 500, 500, 0, 860, 522, 522, 883, 522, 900, 0, 0, 942, 0, 0,
  /* 39335 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 955, 0, 0, 0, 0, 0, 0, 961, 0, 0, 964, 0, 0, 0,
  /* 39363 */ 0, 0, 0, 1306, 0, 0, 0, 0, 0, 1310, 0, 1312, 1313, 983, 984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39392 */ 225280, 0, 0, 402, 402, 1077, 1078, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 589, 0, 0, 0,
  /* 39418 */ 0, 1090, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1019904, 0, 0, 1108, 0, 983, 1111, 0, 1113, 402, 402,
  /* 39444 */ 1116, 402, 402, 402, 402, 402, 402, 1123, 402, 0, 765952, 0, 0, 0, 0, 0, 964, 0, 0, 0, 1132, 500, 500,
  /* 39467 */ 500, 500, 500, 1975, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 2126, 500, 500, 500, 500,
  /* 39487 */ 1137, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1746, 500, 500, 500,
  /* 39507 */ 1178, 1179, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1966, 500, 500, 500, 500, 500,
  /* 39527 */ 1195, 500, 853, 91311, 1132, 856, 522, 522, 522, 1206, 522, 522, 522, 522, 522, 522, 2162, 522, 522, 522,
  /* 39547 */ 522, 500, 500, 500, 522, 522, 1232, 522, 522, 1235, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 39567 */ 1247, 1248, 0, 1266, 500, 500, 1269, 500, 500, 500, 500, 1274, 522, 522, 1277, 522, 522, 522, 522, 1253,
  /* 39587 */ 522, 522, 522, 522, 1259, 522, 522, 522, 522, 522, 0, 1300, 1301, 0, 0, 0, 0, 0, 1307, 0, 0, 0, 0, 0, 0,
  /* 39612 */ 0, 0, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 724992, 1348, 0, 0, 0, 0, 0, 0, 0, 1356, 0, 0, 0, 0, 0, 106496,
  /* 39641 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
  /* 39654 */ 106496, 106496, 0, 0, 0, 0, 402, 1397, 402, 402, 402, 402, 402, 402, 1403, 402, 402, 402, 402, 402, 1407,
  /* 39675 */ 402, 0, 0, 0, 0, 2225, 0, 0, 0, 0, 402, 402, 402, 2231, 0, 2233, 1422, 0, 0, 0, 0, 0, 0, 0, 1428, 1428,
  /* 39701 */ 1418, 0, 0, 0, 1430, 0, 0, 0, 289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1010, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
  /* 39732 */ 0, 0, 402, 402, 1440, 402, 402, 402, 1443, 402, 0, 0, 0, 1127, 0, 0, 0, 0, 0, 0, 0, 1132, 500, 500, 500,
  /* 39757 */ 500, 500, 1180, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 2383, 522, 522, 522, 500,
  /* 39777 */ 1459, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1472, 1504, 500, 500, 500, 500,
  /* 39797 */ 500, 500, 500, 500, 500, 500, 500, 0, 1519, 91311, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1651,
  /* 39824 */ 0, 0, 0, 1519, 522, 522, 522, 522, 522, 1529, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1562,
  /* 39845 */ 1563, 522, 522, 522, 522, 0, 0, 1607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 0,
  /* 39870 */ 0, 0, 1658, 0, 0, 0, 0, 0, 0, 577536, 0, 0, 1663, 0, 0, 0, 0, 625, 0, 0, 0, 0, 0, 0, 632, 0, 0, 0, 0, 0,
  /* 39900 */ 0, 36864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 267, 0, 0, 0, 0, 574, 0, 0, 402, 402, 402, 402, 1687, 402, 402,
  /* 39927 */ 402, 402, 402, 402, 402, 402, 402, 0, 1727, 0, 0, 0, 500, 500, 500, 402, 402, 402, 402, 402, 1699, 1700,
  /* 39949 */ 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 0, 0, 1709, 0, 1711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1719, 402,
  /* 39979 */ 402, 402, 402, 402, 1401, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 1072, 402, 1073, 402, 402,
  /* 39999 */ 402, 402, 402, 402, 402, 402, 1726, 402, 402, 0, 0, 0, 1729, 0, 500, 500, 500, 500, 500, 500, 920, 851, 0,
  /* 40022 */ 522, 522, 522, 522, 522, 522, 522, 1559, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1995, 522, 522, 522,
  /* 40043 */ 522, 522, 522, 500, 500, 500, 1750, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1484, 500,
  /* 40064 */ 500, 500, 500, 1773, 500, 500, 500, 1777, 500, 500, 500, 500, 0, 0, 1785, 0, 1519, 0, 0, 0, 322, 0, 0, 0,
  /* 40088 */ 0, 0, 0, 369, 0, 322, 0, 369, 45056, 0, 1791, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1801,
  /* 40111 */ 522, 522, 522, 522, 2481, 522, 2483, 0, 0, 0, 0, 0, 0, 0, 0, 500, 2437, 500, 500, 500, 2441, 500, 500,
  /* 40134 */ 500, 500, 1804, 522, 522, 522, 522, 522, 522, 522, 522, 1812, 522, 522, 522, 522, 522, 522, 522, 1822,
  /* 40154 */ 522, 522, 522, 522, 522, 1828, 522, 522, 0, 0, 0, 402, 402, 1920, 402, 402, 402, 402, 1923, 402, 402, 402,
  /* 40176 */ 402, 402, 402, 1929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 0, 0, 0, 0, 0, 0, 0, 0, 1946, 500, 500, 500, 500,
  /* 40203 */ 500, 1950, 500, 500, 500, 500, 500, 500, 500, 1494, 500, 500, 500, 500, 500, 500, 500, 500, 0, 522, 522,
  /* 40224 */ 522, 522, 522, 867, 522, 500, 500, 500, 1959, 500, 500, 500, 1962, 1963, 500, 500, 500, 500, 500, 500,
  /* 40244 */ 500, 1739, 500, 500, 1742, 500, 500, 500, 500, 500, 1970, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 40264 */ 500, 500, 500, 500, 500, 500, 2128, 1989, 522, 522, 522, 522, 522, 1993, 522, 522, 522, 522, 522, 522,
  /* 40284 */ 522, 522, 522, 522, 1578, 522, 522, 522, 522, 522, 522, 2002, 522, 522, 522, 2005, 2006, 522, 522, 522,
  /* 40304 */ 522, 522, 522, 522, 2013, 522, 522, 522, 1832, 522, 522, 522, 1835, 522, 522, 522, 1839, 522, 522, 522,
  /* 40324 */ 522, 522, 522, 2265, 2266, 522, 522, 522, 522, 2270, 522, 522, 522, 0, 0, 2041, 2042, 0, 0, 0, 0, 0, 0, 0,
  /* 40348 */ 0, 0, 0, 0, 0, 2072, 0, 0, 0, 0, 0, 2093, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40376 */ 1935, 0, 0, 1064960, 402, 402, 402, 402, 402, 0, 500, 500, 500, 500, 500, 2117, 500, 500, 500, 500, 1462,
  /* 40397 */ 500, 500, 500, 500, 500, 500, 500, 500, 1470, 500, 500, 500, 500, 853, 91311, 1132, 856, 522, 522, 522,
  /* 40417 */ 522, 522, 522, 522, 1214, 2119, 500, 500, 500, 2122, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 40437 */ 500, 500, 2127, 500, 500, 500, 500, 2235, 500, 500, 500, 500, 500, 500, 2240, 500, 500, 500, 500, 500,
  /* 40457 */ 500, 500, 1779, 500, 500, 0, 0, 0, 0, 1519, 0, 522, 522, 522, 2263, 522, 522, 522, 522, 522, 522, 522,
  /* 40479 */ 522, 522, 522, 522, 522, 1826, 522, 522, 522, 1830, 522, 522, 2276, 522, 522, 500, 500, 500, 522, 522,
  /* 40499 */ 522, 0, 0, 0, 2285, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1030, 0, 0, 0, 0, 0, 0, 471040, 402,
  /* 40529 */ 402, 402, 0, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 522, 0, 0, 500, 500,
  /* 40551 */ 500, 500, 2324, 500, 500, 500, 500, 2329, 500, 500, 500, 500, 500, 522, 522, 522, 1991, 1992, 522, 522,
  /* 40571 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 500, 500, 500, 522, 522, 2347, 522, 522, 522, 522, 522, 500,
  /* 40592 */ 500, 522, 522, 0, 0, 0, 0, 0, 0, 0, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 2358, 0, 0, 0, 0, 0, 0,
  /* 40620 */ 0, 0, 0, 0, 0, 2367, 0, 0, 0, 402, 402, 402, 402, 402, 0, 500, 500, 500, 2115, 500, 500, 500, 500, 500,
  /* 40644 */ 1508, 500, 500, 500, 500, 500, 500, 0, 1519, 91311, 0, 2384, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 40665 */ 2392, 522, 522, 522, 500, 522, 522, 522, 2004, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 40686 */ 1548, 522, 522, 522, 522, 522, 2509, 0, 0, 0, 0, 2511, 0, 0, 2514, 500, 500, 500, 500, 500, 500, 1976,
  /* 40708 */ 500, 500, 500, 500, 1980, 500, 500, 500, 500, 500, 2519, 2520, 500, 522, 522, 522, 522, 522, 522, 2525,
  /* 40728 */ 2526, 522, 0, 0, 2528, 2529, 0, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0,
  /* 40751 */ 657, 0, 0, 661, 0, 0, 0, 0, 0, 0, 0, 0, 1102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 500, 522, 522,
  /* 40779 */ 522, 522, 0, 0, 500, 2561, 522, 2562, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 391, 0, 0, 0, 417, 417, 417,
  /* 40804 */ 417, 417, 435, 435, 435, 435, 435, 458, 458, 458, 435, 435, 435, 435, 435, 435, 435, 435, 458, 458, 435,
  /* 40825 */ 435, 472, 435, 435, 435, 458, 482, 435, 435, 458, 435, 491, 491, 491, 491, 491, 491, 516, 516, 516, 516,
  /* 40846 */ 539, 516, 516, 516, 516, 516, 516, 516, 516, 516, 539, 539, 539, 539, 539, 516, 516, 539, 53496, 53496, 2,
  /* 40867 */ 2, 3, 94212, 5, 6, 0, 0, 623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2179692, 2179692, 2179692, 0, 0,
  /* 40894 */ 0, 500, 500, 500, 500, 500, 815, 500, 500, 500, 500, 500, 500, 500, 1977, 500, 500, 500, 500, 500, 500,
  /* 40915 */ 500, 500, 0, 522, 522, 522, 522, 522, 868, 522, 522, 522, 53496, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
  /* 40941 */ 1031, 0, 1032, 0, 0, 0, 0, 0, 0, 1032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2179693, 151552, 2179693,
  /* 40967 */ 500, 500, 500, 1143, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1499, 500, 500, 500, 500,
  /* 40988 */ 500, 500, 1196, 853, 91311, 1132, 856, 522, 522, 522, 522, 522, 522, 1212, 522, 522, 522, 2018, 522, 522,
  /* 41008 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1814, 1815, 522, 1817, 0, 500, 500, 1143, 500, 500, 500,
  /* 41029 */ 500, 500, 522, 522, 1212, 522, 522, 522, 522, 522, 522, 2339, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 41050 */ 522, 522, 2342, 522, 522, 522, 522, 0, 0, 0, 1317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0,
  /* 41078 */ 0, 0, 0, 0, 0, 402, 402, 402, 402, 1411, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 790, 0, 0, 0,
  /* 41106 */ 522, 1539, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1547, 522, 522, 522, 522, 522, 522, 2351, 500,
  /* 41126 */ 2352, 522, 0, 0, 0, 0, 0, 0, 0, 1336, 0, 0, 0, 0, 0, 0, 0, 1344, 0, 0, 0, 1669, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41157 */ 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 1688, 402, 402, 402, 402, 402, 402, 402,
  /* 41181 */ 402, 1416, 402, 0, 0, 0, 0, 0, 0, 0, 0, 1792, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 41205 */ 1803, 0, 0, 1851, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180585, 180769, 180769, 180769, 180769, 180769,
  /* 41228 */ 500, 2375, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 2424, 522, 522,
  /* 41249 */ 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1603, 0, 0, 522, 522, 522, 2387, 522, 522, 522, 522, 522, 522,
  /* 41275 */ 522, 522, 522, 522, 500, 522, 522, 522, 2152, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 41296 */ 1827, 522, 522, 522, 522, 2508, 522, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 41320 */ 500, 500, 500, 500, 500, 0, 0, 500, 500, 500, 500, 2550, 500, 522, 522, 522, 522, 2554, 522, 0, 0, 0, 0,
  /* 41343 */ 684, 0, 0, 687, 0, 0, 0, 0, 0, 694, 0, 0, 0, 0, 0, 2818048, 0, 2879488, 0, 2961408, 0, 2977792, 0, 0, 0,
  /* 41368 */ 0, 0, 0, 1611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 978, 0, 318, 318, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41400 */ 517, 517, 517, 517, 540, 517, 517, 517, 517, 517, 517, 517, 517, 517, 540, 540, 540, 540, 540, 517, 517,
  /* 41421 */ 540, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 500, 500, 500, 500, 812, 500, 500, 500, 500, 500,
  /* 41444 */ 500, 500, 500, 1183, 500, 500, 500, 1186, 500, 500, 500, 0, 0, 957, 0, 0, 0, 0, 0, 0, 0, 0, 965, 0, 0, 0,
  /* 41470 */ 0, 0, 662, 1020, 0, 0, 0, 0, 0, 0, 1026, 0, 0, 1217, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 41494 */ 522, 522, 522, 522, 522, 2346, 0, 500, 500, 500, 1164, 500, 500, 500, 500, 522, 522, 522, 1233, 522, 522,
  /* 41515 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1265, 0, 0, 0, 0, 2359, 2360, 0, 0, 0, 0,
  /* 41539 */ 0, 0, 0, 0, 0, 0, 0, 200704, 200704, 200704, 200704, 200704, 200704, 313, 0, 0, 0, 0, 0, 313, 0, 0, 314,
  /* 41562 */ 0, 313, 0, 0, 0, 45056, 49152, 0, 0, 384, 40960, 384, 384, 0, 384, 384, 314, 384, 0, 384, 418, 418, 418,
  /* 41585 */ 418, 418, 0, 0, 0, 0, 0, 459, 459, 459, 459, 459, 459, 459, 459, 459, 471, 459, 459, 459, 459, 459, 459,
  /* 41608 */ 459, 483, 459, 459, 471, 459, 492, 492, 492, 496, 492, 492, 518, 518, 518, 518, 541, 518, 518, 518, 518,
  /* 41629 */ 518, 518, 518, 518, 518, 541, 541, 541, 541, 541, 553, 553, 562, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0,
  /* 41651 */ 500, 842, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522, 522, 1238, 522, 522, 522, 522,
  /* 41672 */ 522, 522, 522, 522, 522, 1260, 522, 522, 522, 522, 522, 0, 0, 500, 500, 500, 500, 500, 842, 500, 500, 0,
  /* 41694 */ 522, 522, 522, 522, 522, 901, 500, 500, 500, 500, 1960, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 41715 */ 500, 500, 2331, 500, 500, 522, 522, 522, 2003, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 41736 */ 522, 1841, 522, 522, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 519, 519, 519, 519, 542, 519, 519, 519, 519,
  /* 41761 */ 519, 519, 519, 519, 519, 542, 542, 542, 542, 542, 519, 519, 542, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0,
  /* 41784 */ 0, 0, 656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221727, 221727, 221727, 221727, 221727, 221727, 0, 402,
  /* 41807 */ 402, 402, 402, 709, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 1702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41832 */ 735, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 1701, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402,
  /* 41858 */ 402, 402, 0, 500, 0, 0, 0, 500, 500, 500, 500, 813, 500, 500, 500, 500, 500, 500, 500, 500, 1479, 500,
  /* 41880 */ 500, 1483, 500, 500, 500, 500, 970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 318, 0, 0, 0, 0, 0, 111011, 111011,
  /* 41906 */ 111011, 111011, 111011, 419, 419, 419, 419, 419, 111011, 0, 1015, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1027,
  /* 41929 */ 0, 0, 0, 0, 759, 0, 0, 0, 612, 0, 619, 755, 598, 0, 0, 0, 0, 0, 2054, 2055, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41958 */ 1023, 0, 0, 0, 0, 0, 0, 0, 0, 577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 270336, 270336, 270336,
  /* 41985 */ 270336, 270336, 500, 500, 846, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522, 522, 1256, 522,
  /* 42005 */ 522, 522, 522, 1263, 522, 522, 0, 905, 522, 53496, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720,
  /* 42030 */ 286720, 286720, 286720, 286720, 0, 0, 1302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 290816, 290816,
  /* 42053 */ 290816, 290816, 290816, 402, 402, 1409, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
  /* 42076 */ 0, 0, 0, 318, 318, 318, 500, 500, 1489, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  /* 42098 */ 1981, 500, 500, 1519, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1533, 522, 522, 522, 522, 522, 522,
  /* 42118 */ 522, 2340, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1837, 522, 522, 522, 522, 522, 522, 1747, 500,
  /* 42138 */ 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 2333, 0, 0, 0, 522, 1794, 522, 522,
  /* 42160 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 1997, 522, 1999, 522, 522, 500, 500, 500, 1984, 0, 0, 0, 0,
  /* 42182 */ 0, 0, 0, 0, 0, 0, 0, 0, 696320, 1015808, 0, 0, 0, 0, 522, 2027, 500, 500, 500, 500, 522, 522, 522, 522, 0,
  /* 42207 */ 0, 0, 0, 0, 0, 0, 155648, 0, 155648, 0, 0, 0, 0, 0, 155648, 0, 2208, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402,
  /* 42234 */ 402, 402, 402, 402, 0, 770048, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 399, 0, 402, 402, 402, 402,
  /* 42258 */ 402, 0, 0, 402, 0, 2371, 500, 500, 500, 500, 500, 500, 1509, 500, 500, 1512, 500, 500, 0, 1519, 91311, 0,
  /* 42280 */ 1085440, 318, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0, 1085440, 0, 0, 0, 1085440,
  /* 42303 */ 1085813, 1085813, 0, 0, 0, 1085813, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42328 */ 1085440, 0, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 1085440, 0, 0, 0, 1085440, 0, 0,
  /* 42353 */ 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2441216, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 1085440, 1085440,
  /* 42372 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1716, 1717, 0, 0, 311698, 1720, 402, 0, 1085440, 0, 0, 1085440, 1085440,
  /* 42396 */ 0, 0, 0, 2, 4263936, 3, 94212, 5, 6, 0, 0, 0, 402, 402, 402, 402, 402, 0, 500, 500, 2114, 500, 500, 500,
  /* 42420 */ 500, 500, 1148, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1185, 500, 500, 500, 500, 500, 2162688,
  /* 42440 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2163541, 0, 2162688, 2163544, 2162688, 2162688,
  /* 42452 */ 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3026944, 2162688, 2162688, 3076096,
  /* 42463 */ 2162688, 3096576, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 4263936, 6, 0, 0, 0, 0, 0, 0, 0,
  /* 42480 */ 2441216, 2449408, 0, 0, 0, 0, 770, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 1081, 402, 0, 0, 0, 0,
  /* 42504 */ 0, 0, 0, 0, 0, 0, 0, 1132, 500, 500, 500, 2162688, 4263936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42531 */ 1897, 0, 0, 0, 0, 0, 0, 1093632, 0, 1093632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2058, 0, 0, 0, 0, 0,
  /* 42560 */ 0, 0, 0, 0, 1097728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2189, 0, 0, 0, 0, 0, 0, 0, 1101824, 0, 0, 0, 0,
  /* 42590 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2201, 0, 0, 0, 0, 0, 0, 374, 1102200, 0, 0, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42621 */ 0, 0, 2296, 0, 0, 0, 0, 0, 0, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200,
  /* 42638 */ 1102200, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200, 0, 0, 0, 0, 0, 0, 1101824, 376,
  /* 42654 */ 1102200, 1102200, 1102200, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 402, 402, 402, 402, 402, 0, 500, 2113,
  /* 42676 */ 500, 500, 2116, 500, 500, 500, 500, 853, 0, 0, 856, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 42697 */ 2009, 522, 522, 522, 522, 522, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 0, 0, 0, 0,
  /* 42724 */ 0, 0, 0
];

XQueryParser.EXPECTED =
[
  /*    0 */ 723, 726, 728, 726, 732, 736, 740, 744, 748, 1636, 1128, 768, 1055, 754, 1054, 759, 777, 781, 1128, 2423,
  /*   20 */ 1713, 785, 790, 1128, 796, 846, 821, 856, 800, 804, 1128, 2455, 810, 815, 1060, 819, 846, 863, 856, 866,
  /*   40 */ 825, 1128, 1129, 786, 792, 831, 846, 762, 856, 837, 805, 1128, 1010, 841, 845, 833, 856, 851, 1128, 986,
  /*   60 */ 2090, 846, 855, 765, 1128, 1575, 847, 872, 1128, 860, 870, 876, 883, 892, 898, 902, 909, 906, 886, 888,
  /*   80 */ 913, 917, 919, 923, 926, 930, 934, 938, 2321, 1128, 942, 1128, 963, 1863, 1128, 1128, 1128, 948, 1128,
  /*   99 */ 1128, 1128, 965, 1128, 1128, 1128, 1128, 1128, 1128, 1922, 1128, 1128, 1128, 1941, 1128, 1128, 1128, 1128,
  /*  117 */ 1128, 1128, 1128, 1128, 1128, 1128, 1697, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 2172, 1128, 1128,
  /*  135 */ 1128, 1128, 1128, 1128, 1336, 1128, 1128, 1128, 1128, 1128, 1698, 1128, 1128, 1128, 952, 1128, 1128, 1128,
  /*  153 */ 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1889, 957, 1128, 1032, 806, 969, 973, 977, 981, 985, 1128, 2281,
  /*  172 */ 990, 1000, 1004, 1008, 1014, 996, 1018, 1128, 1128, 1025, 1102, 1219, 1029, 1114, 1128, 1166, 1128, 1036,
  /*  190 */ 1128, 1128, 771, 1040, 2352, 1262, 1053, 1128, 1059, 1128, 1064, 1463, 1128, 1068, 1074, 1021, 1078, 1128,
  /*  208 */ 1083, 1128, 1089, 1128, 1283, 1096, 1108, 1128, 1104, 1128, 1121, 1242, 1482, 2159, 2264, 1128, 1127, 2432,
  /*  226 */ 1133, 1808, 1292, 1141, 1817, 1135, 1145, 1149, 1155, 1137, 1175, 1159, 1163, 1172, 1128, 1128, 1179, 1845,
  /*  244 */ 1185, 1189, 1193, 1197, 1200, 2234, 1771, 1865, 2177, 1206, 1212, 1216, 1225, 1231, 1237, 1241, 2381, 2176,
  /*  262 */ 1246, 2383, 1250, 1699, 1254, 944, 1128, 1233, 1259, 1457, 1386, 1266, 1270, 1277, 1507, 1128, 2212, 1128,
  /*  280 */ 1572, 1479, 1457, 1867, 2156, 1289, 2305, 1128, 1587, 1128, 1629, 1298, 2237, 1305, 2259, 1309, 1424, 1315,
  /*  298 */ 1598, 1320, 1326, 1330, 1128, 1334, 1343, 1322, 1347, 1351, 1557, 1301, 1355, 2262, 1359, 1363, 2405, 1820,
  /*  316 */ 1367, 1371, 1375, 1379, 1383, 1128, 1151, 953, 1390, 1399, 1403, 1407, 1411, 1128, 1423, 1428, 1439, 2288,
  /*  334 */ 1852, 1447, 1451, 2231, 1455, 1461, 2252, 1619, 1442, 1468, 1472, 1476, 2378, 1128, 1490, 1581, 1339, 1419,
  /*  352 */ 1504, 1516, 1948, 1520, 1524, 1529, 1128, 1535, 2002, 1884, 1419, 1544, 1979, 2000, 1393, 1548, 1128, 1554,
  /*  370 */ 1128, 2250, 1561, 1443, 2201, 2446, 1128, 1906, 1128, 1565, 1569, 1579, 1585, 1550, 1776, 1591, 1595, 2210,
  /*  388 */ 1602, 1608, 2219, 1612, 2203, 1616, 1623, 1633, 1626, 1640, 1644, 1648, 1650, 1128, 2095, 1654, 1660, 1664,
  /*  406 */ 1668, 1672, 1676, 1128, 2228, 2188, 1753, 1680, 1686, 1690, 1694, 1703, 2315, 2194, 811, 1707, 2324, 1604,
  /*  424 */ 2363, 1900, 1424, 1711, 2368, 1717, 1128, 1722, 1726, 1766, 1730, 1111, 1734, 1755, 1128, 1540, 1128, 1128,
  /*  442 */ 1740, 1744, 2339, 1484, 1280, 1736, 1128, 1500, 1128, 827, 1750, 2402, 1128, 1759, 1764, 1128, 1770, 2412,
  /*  460 */ 1782, 1079, 1208, 1128, 1775, 1780, 1786, 1294, 1221, 1656, 1792, 1417, 1798, 2341, 2308, 1682, 1802, 894,
  /*  478 */ 960, 1814, 1128, 1128, 1128, 2027, 1824, 1828, 1832, 1836, 1840, 1844, 2460, 2036, 1849, 1788, 1043, 2375,
  /*  496 */ 1856, 1860, 1871, 1128, 1875, 1879, 1883, 1888, 1047, 1893, 2444, 1794, 1128, 1897, 1904, 1395, 1910, 1914,
  /*  514 */ 1920, 1926, 1935, 1128, 1939, 1128, 1945, 1952, 2461, 1958, 1962, 1045, 1966, 1128, 1970, 1128, 1976, 1983,
  /*  532 */ 1989, 1993, 1117, 1997, 1493, 1128, 2247, 2006, 1512, 2010, 1929, 2014, 2020, 1510, 2024, 2034, 2040, 2044,
  /*  550 */ 2048, 2052, 1273, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088, 1128, 2437, 2094, 2099, 2103, 2107,
  /*  568 */ 2111, 2114, 1128, 2121, 2130, 2134, 1916, 2138, 2145, 2149, 1954, 2153, 2221, 2030, 2165, 1338, 2169, 2181,
  /*  586 */ 2185, 1255, 2192, 1070, 2198, 1464, 2207, 2216, 2225, 2241, 2141, 1128, 1531, 2193, 1085, 2256, 1316, 2268,
  /*  604 */ 2272, 773, 2276, 2280, 1985, 1128, 1285, 2285, 1931, 2292, 1123, 2244, 1128, 2296, 1168, 2312, 2328, 2332,
  /*  622 */ 2336, 2016, 1486, 2126, 993, 1414, 2124, 2345, 2349, 1099, 2356, 2360, 1746, 2367, 1805, 1128, 1128, 1128,
  /*  640 */ 1128, 1128, 1128, 1128, 1092, 2372, 2387, 2391, 2395, 2399, 1128, 2161, 1128, 1972, 1538, 2174, 2299, 2409,
  /*  658 */ 2416, 2302, 1128, 1435, 1128, 878, 1128, 1128, 2420, 1128, 2116, 1128, 1496, 1499, 1434, 1128, 1760, 1128,
  /*  676 */ 1227, 2429, 1128, 2117, 1128, 1049, 1499, 1434, 1128, 879, 1810, 2436, 1128, 2441, 1128, 2450, 1525, 1128,
  /*  694 */ 1181, 1202, 1128, 750, 1128, 2425, 1431, 1765, 1311, 755, 1128, 2318, 2454, 1539, 1128, 1128, 2459, 1635,
  /*  712 */ 1128, 1718, 1128, 1718, 1128, 1128, 1128, 1128, 1128, 1128, 768, 2465, 2534, 4731, 2482, 2482, 2482, 2482,
  /*  730 */ 2472, 2482, 2476, 2482, 2480, 2490, 2487, 2483, 2494, 2497, 2501, 2505, 2509, 2512, 2516, 2520, 2524, 2528,
  /*  748 */ 3860, 2532, 3217, 3217, 2576, 3217, 2545, 3217, 3217, 3217, 2687, 3027, 3217, 4249, 4251, 2599, 2621, 2563,
  /*  766 */ 2555, 2658, 3217, 2538, 3812, 3217, 2579, 3217, 3217, 3217, 4613, 4252, 2552, 2563, 2569, 2559, 2568, 2573,
  /*  784 */ 2677, 3462, 3217, 3217, 3024, 3080, 3080, 3080, 3080, 3028, 3217, 3077, 3077, 3080, 3028, 4433, 2563, 2655,
  /*  802 */ 4250, 2654, 2587, 2678, 3217, 3217, 3217, 2795, 2592, 3217, 3217, 3076, 4012, 3080, 3080, 3080, 3083, 3082,
  /*  820 */ 4249, 4251, 4251, 2583, 2563, 2603, 2605, 3217, 3217, 2640, 4115, 3080, 4248, 4251, 4251, 2598, 2618, 2563,
  /*  838 */ 2563, 4435, 2623, 3081, 3217, 3076, 3081, 4434, 4251, 4251, 4251, 4251, 2562, 2563, 2563, 3319, 3325, 2627,
  /*  856 */ 2563, 2563, 2563, 2563, 2774, 3026, 2775, 4251, 2647, 2622, 2563, 2563, 2596, 2654, 4251, 4435, 2563, 2563,
  /*  874 */ 2554, 2657, 2564, 3325, 3217, 3217, 2659, 3217, 3217, 2633, 2645, 4251, 2561, 2656, 4434, 2569, 3316, 3322,
  /*  892 */ 2563, 2629, 3217, 3217, 2686, 2685, 2645, 2560, 2563, 3325, 4432, 4251, 2563, 3325, 4251, 2654, 2657, 4249,
  /*  910 */ 4436, 2655, 4247, 2651, 3764, 2667, 4363, 2671, 2675, 2588, 2588, 2588, 2693, 2697, 2700, 2588, 2588, 2706,
  /*  928 */ 2704, 4366, 4369, 2710, 2714, 2718, 2722, 2726, 2730, 2734, 2737, 2744, 2748, 2752, 2986, 3956, 3217, 3217,
  /*  946 */ 2764, 3282, 3037, 4298, 2768, 3765, 3763, 3217, 3217, 3217, 3028, 2779, 3217, 4221, 3217, 2684, 2683, 3217,
  /*  964 */ 2763, 3217, 3217, 2773, 3217, 3450, 4429, 2807, 2811, 2814, 2818, 2823, 2822, 2827, 2830, 2832, 2836, 2840,
  /*  982 */ 3217, 2844, 2930, 2851, 3217, 3217, 3217, 3077, 4431, 2859, 2539, 4355, 4583, 3430, 3217, 2769, 2908, 2914,
  /* 1000 */ 4004, 3217, 3104, 2985, 4205, 2864, 3217, 2868, 2878, 2883, 3217, 3217, 3078, 3080, 2889, 3217, 3217, 2901,
  /* 1018 */ 2663, 2931, 2852, 3217, 2781, 3217, 3484, 2780, 3075, 3217, 3084, 2929, 2935, 2781, 3217, 2785, 4218, 2789,
  /* 1036 */ 2965, 2971, 3217, 2978, 3476, 4356, 2990, 3217, 2803, 3217, 3217, 4315, 3217, 3217, 3300, 3462, 4811, 3011,
  /* 1054 */ 3217, 3217, 3217, 3079, 3080, 3017, 3217, 3217, 3217, 3080, 2971, 2971, 3217, 4278, 2578, 4265, 3217, 3217,
  /* 1072 */ 3217, 4636, 3021, 3217, 3217, 3036, 3041, 3217, 3217, 3217, 3141, 3485, 3042, 3217, 3217, 3217, 4656, 3048,
  /* 1090 */ 2896, 3056, 3217, 2885, 3815, 2681, 3101, 3217, 3043, 3217, 2918, 3217, 3217, 2922, 3217, 3217, 3090, 3217,
  /* 1108 */ 3600, 3217, 3089, 3217, 2925, 4862, 3217, 2942, 2950, 3217, 2802, 3000, 2539, 3457, 3094, 3217, 3217, 3217,
  /* 1126 */ 4688, 3119, 3217, 3217, 3217, 3217, 2609, 3113, 3483, 3109, 3217, 3217, 3127, 3433, 3217, 3421, 3217, 4519,
  /* 1144 */ 4046, 3217, 4355, 3133, 4826, 3217, 4825, 3217, 3217, 3262, 3217, 3120, 3217, 3225, 3433, 3623, 4247, 3217,
  /* 1162 */ 3511, 3139, 3510, 2960, 3217, 2955, 3217, 3217, 3217, 4612, 3225, 3226, 3225, 3226, 3127, 3510, 3509, 3146,
  /* 1180 */ 3151, 3217, 3217, 3336, 3217, 3157, 3103, 3217, 3167, 2895, 4045, 3030, 2874, 3174, 3177, 3181, 3182, 3186,
  /* 1198 */ 3188, 3192, 3194, 3196, 3217, 3217, 3338, 3217, 3216, 3222, 3217, 3217, 3348, 3217, 3232, 3618, 3242, 3246,
  /* 1216 */ 3697, 4738, 3355, 3217, 2984, 3217, 3217, 3123, 3217, 3398, 4032, 3217, 3217, 3364, 3217, 3631, 3217, 3217,
  /* 1234 */ 2958, 2958, 3217, 3096, 3217, 3217, 3249, 3201, 3217, 3217, 3217, 3235, 3260, 4161, 3266, 3270, 3499, 3396,
  /* 1252 */ 3578, 3695, 3276, 3217, 3217, 3217, 3247, 3134, 3147, 3103, 3217, 3005, 3217, 4310, 2897, 3256, 4257, 4771,
  /* 1270 */ 3293, 3217, 3612, 3217, 3007, 4470, 2801, 3299, 3969, 3410, 3217, 3028, 4104, 3217, 3073, 3217, 3217, 3217,
  /* 1288 */ 4673, 3410, 3966, 3970, 3217, 3118, 3217, 3217, 3237, 3217, 3352, 3217, 3217, 3576, 3217, 3472, 3799, 4161,
  /* 1306 */ 4259, 3363, 3337, 3368, 3373, 3217, 3217, 3410, 3217, 3369, 3217, 3217, 3217, 3300, 3217, 4844, 3217, 4464,
  /* 1324 */ 2636, 3217, 3218, 3473, 4258, 3428, 3340, 3384, 3703, 3393, 3402, 2546, 3217, 3217, 3430, 3217, 3217, 3217,
  /* 1342 */ 3889, 3408, 3416, 3420, 4844, 3426, 3410, 3438, 3704, 3448, 3217, 3326, 3454, 3482, 3734, 4227, 2546, 3468,
  /* 1360 */ 2897, 2639, 3481, 3162, 3490, 3247, 3489, 3490, 4456, 3795, 4848, 4847, 2546, 3797, 4850, 4849, 2910, 4242,
  /* 1378 */ 3517, 4576, 3510, 3062, 3510, 3062, 2961, 3434, 3217, 3169, 3217, 2640, 3085, 3768, 3521, 3217, 3169, 3217,
  /* 1396 */ 3217, 3745, 3217, 2992, 2759, 4175, 2892, 3531, 3535, 3538, 3542, 3543, 3547, 3551, 3555, 3557, 3557, 3559,
  /* 1414 */ 3217, 3234, 3234, 3217, 3238, 3217, 3217, 4300, 2847, 3563, 3217, 3217, 3217, 3326, 3571, 4587, 3332, 3217,
  /* 1432 */ 3247, 4706, 3217, 3247, 4810, 3217, 3217, 3582, 3217, 4298, 3589, 3217, 3973, 3217, 3725, 3604, 2879, 3610,
  /* 1450 */ 4272, 3278, 3342, 3975, 3616, 3675, 3891, 3217, 3217, 3577, 3217, 3217, 4752, 2853, 3217, 3217, 3217, 3114,
  /* 1468 */ 4563, 3629, 3217, 3491, 3629, 3217, 4569, 4324, 3217, 4571, 3635, 3217, 3250, 3331, 3217, 3100, 3217, 3103,
  /* 1486 */ 3217, 3217, 3217, 4724, 3134, 3660, 2903, 3217, 3294, 3938, 3217, 3301, 3217, 4811, 3217, 3217, 3217, 4111,
  /* 1504 */ 3834, 3217, 4172, 3217, 3305, 3309, 3103, 4398, 4517, 4360, 4373, 2917, 4298, 3664, 4572, 2896, 3827, 3673,
  /* 1522 */ 3217, 3673, 3153, 3217, 3217, 3217, 3327, 3679, 3683, 3217, 3217, 3685, 4652, 3134, 3689, 3012, 3217, 3333,
  /* 1540 */ 3217, 3217, 3217, 4096, 3834, 3217, 3388, 4136, 3716, 3160, 3217, 3217, 3786, 3217, 3134, 3717, 3012, 3217,
  /* 1558 */ 3338, 3467, 4349, 3721, 3834, 2991, 3389, 3737, 3217, 3752, 4590, 3759, 4706, 3972, 3217, 3339, 3339, 3217,
  /* 1576 */ 3079, 3028, 3059, 3775, 3775, 3217, 3217, 3949, 3949, 3835, 3780, 3217, 3217, 4007, 3404, 2981, 4590, 3217,
  /* 1594 */ 3337, 3974, 4092, 3790, 3217, 3378, 3135, 3419, 3665, 3827, 3217, 3217, 4036, 3271, 3767, 3809, 3217, 3971,
  /* 1612 */ 3805, 3217, 3217, 3826, 3044, 3217, 4680, 3217, 3386, 4349, 4135, 4679, 3217, 4350, 4574, 3335, 3334, 3217,
  /* 1630 */ 3410, 3340, 3248, 2659, 3217, 2661, 3217, 3217, 3217, 4458, 4575, 3217, 2662, 4573, 2661, 2660, 3217, 3845,
  /* 1648 */ 2659, 3337, 3849, 3850, 3863, 4574, 3854, 3217, 3217, 2612, 3440, 3217, 3076, 3217, 4045, 3869, 3873, 3933,
  /* 1666 */ 2539, 3879, 3883, 3865, 3895, 3898, 3902, 3907, 3903, 3910, 3913, 3915, 3915, 3916, 2660, 3857, 4135, 3217,
  /* 1684 */ 2686, 2684, 3930, 3217, 4832, 4607, 3944, 3953, 4838, 3963, 3979, 4125, 3986, 3217, 3432, 3217, 3217, 3217,
  /* 1702 */ 2938, 3997, 3217, 3217, 4001, 4016, 4020, 3217, 3573, 4059, 3012, 3217, 3217, 4106, 3422, 4067, 3217, 3217,
  /* 1720 */ 3217, 3333, 3920, 2853, 3217, 3768, 3289, 4073, 3217, 3084, 4204, 3217, 3217, 4077, 4862, 3926, 3217, 3217,
  /* 1738 */ 4110, 3103, 3829, 4500, 3217, 3768, 3289, 4100, 3217, 3217, 4118, 3217, 3076, 3463, 3442, 3217, 3475, 3217,
  /* 1756 */ 3217, 4083, 4087, 3770, 3217, 3217, 3217, 3334, 3357, 3217, 3217, 3217, 3335, 4124, 3358, 3217, 3217, 3217,
  /* 1774 */ 3374, 3359, 3217, 3217, 3217, 3473, 3933, 3217, 3761, 3217, 3300, 4134, 4027, 4297, 3217, 3217, 4209, 3129,
  /* 1792 */ 4133, 4298, 3217, 3217, 4282, 3217, 3122, 3217, 2897, 3728, 3429, 3217, 3734, 3733, 3217, 3735, 3217, 3566,
  /* 1810 */ 3217, 3217, 3217, 4854, 3227, 3217, 2686, 3217, 3567, 3217, 3483, 3497, 3503, 3508, 3001, 3217, 3000, 3734,
  /* 1828 */ 4144, 4148, 4152, 4178, 4443, 4156, 3982, 4166, 4169, 4182, 4183, 4187, 4191, 4194, 4196, 4196, 4198, 3217,
  /* 1846 */ 3217, 3217, 3574, 4202, 4341, 3585, 3217, 3597, 4089, 3731, 4215, 4291, 4225, 4231, 4240, 4380, 4246, 3217,
  /* 1864 */ 3649, 3217, 3217, 2780, 3217, 2641, 3818, 2614, 4256, 3444, 4266, 3217, 4402, 3217, 3624, 3000, 3771, 4339,
  /* 1882 */ 4343, 4263, 3217, 3217, 3217, 3766, 2791, 3217, 3217, 3217, 3793, 3247, 2801, 4270, 2800, 3217, 4286, 4290,
  /* 1900 */ 3217, 3655, 4044, 4050, 4856, 4856, 3217, 3217, 4414, 3271, 3625, 3217, 4295, 4304, 4375, 3236, 3217, 3217,
  /* 1918 */ 4475, 4690, 3217, 4308, 3217, 3217, 4501, 3217, 4314, 3217, 3217, 2540, 3226, 3217, 3217, 4677, 4845, 4319,
  /* 1936 */ 2540, 3217, 4348, 3936, 4328, 3217, 3217, 4502, 3217, 3217, 4333, 4290, 3217, 3669, 3217, 2904, 4055, 4055,
  /* 1954 */ 3217, 3217, 4605, 4480, 3625, 3217, 4337, 4341, 3592, 3217, 3217, 3207, 2799, 4023, 2740, 4347, 3937, 4329,
  /* 1972 */ 3217, 3217, 4628, 3217, 3294, 3938, 3332, 3217, 3701, 3217, 3708, 2739, 2800, 3217, 3217, 4672, 4659, 3744,
  /* 1990 */ 3217, 3000, 4720, 4342, 3593, 3217, 2688, 3782, 2800, 4354, 3217, 3712, 3217, 3217, 3693, 3693, 2799, 2801,
  /* 2008 */ 3217, 3746, 2687, 4379, 3228, 4389, 4384, 4388, 3217, 3217, 4713, 3217, 3217, 4394, 3940, 4390, 4406, 3217,
  /* 2026 */ 2689, 3217, 3743, 3747, 3217, 3575, 3217, 4709, 2798, 2541, 3217, 3217, 4716, 3217, 4410, 3217, 3217, 4418,
  /* 2044 */ 4422, 2740, 4426, 4718, 4440, 3217, 4447, 2998, 4453, 3217, 3013, 4462, 4622, 4740, 3606, 4474, 3007, 4479,
  /* 2062 */ 3006, 4484, 2967, 2575, 3511, 3051, 3049, 2966, 3875, 2855, 2854, 4489, 3461, 3051, 3050, 3459, 3049, 2972,
  /* 2080 */ 3052, 3461, 4488, 3051, 4509, 4510, 4509, 4510, 4493, 4495, 3080, 3217, 3078, 4250, 4499, 3217, 3217, 3217,
  /* 2098 */ 3828, 3574, 4091, 4506, 3527, 2547, 2468, 4514, 4523, 4527, 4530, 4534, 4537, 4541, 4545, 4548, 4550, 4552,
  /* 2116 */ 3217, 3217, 4814, 3217, 3217, 3300, 4556, 2853, 3217, 3748, 4751, 3217, 3068, 4728, 3577, 4707, 4758, 4585,
  /* 2134 */ 2548, 3217, 3170, 2860, 3217, 4561, 3217, 3341, 4466, 2780, 3287, 4567, 3638, 3341, 4580, 4594, 3217, 3217,
  /* 2152 */ 4598, 2951, 4611, 3217, 3217, 3755, 3346, 3217, 3108, 3217, 3217, 3217, 4809, 4760, 3959, 3947, 3170, 3217,
  /* 2170 */ 4617, 3012, 3217, 3762, 3217, 3217, 2974, 3217, 3217, 3205, 3211, 4621, 3217, 4626, 3513, 4211, 2871, 3217,
  /* 2188 */ 3217, 3769, 4014, 4018, 4632, 4600, 3217, 3217, 3217, 3921, 2945, 2780, 2780, 3217, 3776, 3217, 3217, 3833,
  /* 2206 */ 3839, 4236, 3217, 4846, 3217, 3804, 3217, 3217, 4008, 3313, 3524, 4104, 3032, 3217, 3822, 3217, 3217, 4069,
  /* 2224 */ 4557, 4640, 3762, 3217, 3217, 3920, 3925, 3217, 3412, 3622, 3217, 3248, 3200, 3217, 2973, 2679, 3886, 3217,
  /* 2242 */ 4691, 4690, 4646, 3512, 4695, 3217, 3935, 3939, 3217, 3736, 3217, 4299, 3477, 4589, 4664, 2780, 2780, 3217,
  /* 2260 */ 3969, 3411, 3217, 3163, 3217, 3217, 3565, 3217, 4668, 3217, 4846, 4707, 4758, 4052, 3212, 4642, 3233, 4648,
  /* 2278 */ 3513, 3285, 3113, 3217, 3217, 3217, 3989, 4660, 2973, 4464, 3217, 3973, 4079, 3599, 4708, 4759, 3031, 4684,
  /* 2296 */ 4699, 2946, 3217, 3217, 3992, 3656, 3217, 3993, 4823, 3217, 4006, 3403, 3217, 3121, 3217, 4140, 4700, 3012,
  /* 2314 */ 3217, 3217, 4022, 3295, 3217, 3461, 3217, 3217, 3474, 2756, 3217, 2660, 4027, 4135, 3069, 3574, 4355, 3800,
  /* 2332 */ 4704, 3432, 3217, 3272, 3234, 3421, 3217, 3217, 4027, 4203, 3217, 3217, 3122, 3217, 4745, 3217, 3765, 3217,
  /* 2350 */ 4735, 3431, 3217, 4030, 3217, 2996, 4744, 3217, 3217, 4749, 3217, 4756, 3217, 3217, 4040, 3652, 4449, 4117,
  /* 2368 */ 3217, 3217, 3217, 4063, 4204, 2682, 3067, 3217, 4089, 3841, 3217, 3642, 3646, 3217, 3254, 3217, 3217, 3380,
  /* 2386 */ 3217, 3065, 2680, 2681, 4764, 4768, 4775, 4778, 4781, 4783, 4787, 4791, 4795, 4801, 4797, 4805, 3217, 4122,
  /* 2404 */ 4135, 3217, 3504, 3798, 3495, 3992, 4819, 3217, 3217, 4129, 3217, 3142, 3301, 3217, 3217, 4813, 4830, 3300,
  /* 2422 */ 4054, 3217, 4159, 3217, 3217, 2577, 3217, 4836, 4842, 3217, 3217, 4265, 4355, 3102, 4601, 3217, 3217, 3217,
  /* 2440 */ 4234, 3217, 4815, 3217, 3217, 4276, 3217, 3217, 4413, 3741, 3217, 4812, 3029, 3958, 4860, 3217, 3217, 3217,
  /* 2458 */ 4322, 4162, 3217, 3217, 3217, 4401, 3217, 5627, 5025, 5032, 5298, 5554, 5301, 5223, 5085, 4894, 4895, 4882,
  /* 2476 */ 4903, 4901, 4898, 4883, 5001, 4902, 4903, 4903, 4903, 4903, 4914, 4897, 4903, 4900, 4903, 4881, 4903, 5049,
  /* 2494 */ 4916, 4918, 4920, 4924, 4926, 4926, 4927, 4921, 4923, 4924, 4922, 4926, 4932, 4924, 4924, 4929, 4931, 4934,
  /* 2512 */ 4926, 4926, 5008, 4936, 4939, 4937, 4941, 4937, 4942, 4944, 4945, 4947, 4945, 4945, 4949, 4951, 5627, 5442,
  /* 2530 */ 5015, 5297, 4959, 4869, 5301, 5301, 4866, 5155, 5003, 5301, 5301, 5301, 4868, 5153, 4990, 4988, 5350, 5301,
  /* 2548 */ 5301, 5301, 4873, 5156, 5365, 5005, 5010, 5010, 5006, 5007, 5010, 5022, 5007, 5007, 5007, 5010, 5010, 5010,
  /* 2566 */ 5010, 5007, 4990, 5010, 5010, 5010, 5301, 5010, 5627, 5042, 5301, 4905, 5301, 5301, 5301, 5737, 4970, 5007,
  /* 2584 */ 5007, 5030, 5789, 5011, 5566, 5566, 5566, 5566, 5360, 4983, 4984, 4906, 5006, 5007, 5007, 5007, 4961, 4961,
  /* 2602 */ 5035, 5366, 5566, 5566, 5566, 4869, 5301, 5301, 5360, 4906, 5301, 4867, 5301, 5301, 5308, 5658, 4961, 5357,
  /* 2620 */ 5357, 5357, 5358, 5010, 5010, 5010, 5566, 4961, 5357, 5010, 5010, 5010, 5788, 5074, 4988, 4988, 5301, 4867,
  /* 2638 */ 5301, 5446, 5301, 5301, 5301, 5453, 5301, 4979, 5007, 5007, 5007, 4961, 5356, 5788, 5788, 5788, 5788, 5010,
  /* 2656 */ 5010, 5010, 5359, 5301, 5301, 5301, 4907, 5301, 5301, 5301, 4908, 5222, 5301, 5560, 5298, 4871, 5045, 5048,
  /* 2674 */ 5369, 5051, 5566, 5566, 5566, 5301, 5301, 5301, 4891, 5301, 5301, 5301, 4904, 5301, 5301, 5301, 4905, 4908,
  /* 2692 */ 5301, 5071, 5569, 5367, 5566, 5058, 5061, 5063, 5046, 5065, 5369, 5370, 5570, 5368, 5566, 5566, 5569, 5567,
  /* 2710 */ 5088, 5566, 5090, 5228, 5227, 5117, 5092, 5566, 5565, 5094, 5096, 5097, 5099, 5108, 5108, 5101, 5103, 5105,
  /* 2728 */ 5102, 5112, 5107, 5111, 5110, 5102, 5114, 5110, 5109, 5108, 5108, 5301, 4868, 5153, 5301, 5301, 5038, 5116,
  /* 2746 */ 5569, 5119, 5068, 5121, 5123, 5125, 5124, 5124, 5111, 5127, 5301, 5624, 5085, 5301, 4868, 5229, 5016, 5130,
  /* 2764 */ 5301, 5301, 5301, 4972, 5557, 5301, 5301, 5301, 4980, 5055, 5301, 5301, 5301, 4988, 4979, 4994, 5301, 5301,
  /* 2782 */ 5301, 4996, 5042, 5260, 5301, 4911, 4906, 5077, 5484, 5301, 5301, 4905, 5515, 5078, 5215, 5077, 4974, 5301,
  /* 2800 */ 5301, 5661, 5301, 5301, 5301, 5640, 4974, 4905, 5479, 5301, 5478, 5301, 5485, 5233, 5161, 5161, 5162, 5163,
  /* 2818 */ 5164, 5167, 5166, 5169, 5173, 5170, 5170, 5170, 5171, 5176, 5170, 5174, 5178, 5179, 5181, 5181, 5181, 5181,
  /* 2836 */ 5181, 5183, 5184, 5184, 5186, 5184, 5188, 5190, 5310, 5319, 5454, 5301, 4873, 5263, 5472, 5435, 5334, 5298,
  /* 2854 */ 5301, 5301, 5301, 4997, 5032, 5479, 5301, 5301, 5301, 5016, 5579, 5301, 5209, 5732, 5301, 5644, 5278, 5301,
  /* 2872 */ 4877, 5153, 5301, 4890, 5453, 4889, 5275, 5301, 5301, 5301, 5059, 5209, 5731, 5301, 5301, 4910, 5753, 5290,
  /* 2890 */ 5301, 5422, 5301, 4952, 5742, 4952, 5042, 5301, 5301, 5301, 5154, 5301, 5421, 5027, 5301, 5301, 5301, 5493,
  /* 2908 */ 5429, 5033, 5301, 5301, 4963, 4991, 5301, 5430, 5027, 5301, 4970, 5301, 5301, 4970, 5443, 5264, 5732, 5301,
  /* 2926 */ 4970, 5301, 5438, 5206, 5301, 5301, 5301, 5077, 5435, 5301, 5301, 5645, 5301, 4971, 4973, 5392, 5351, 5208,
  /* 2944 */ 5148, 5363, 5150, 5630, 5301, 5301, 5416, 5630, 5301, 5301, 4953, 5362, 5265, 5200, 5301, 4975, 5301, 5301,
  /* 2962 */ 4990, 5301, 4990, 4981, 5042, 5301, 5301, 4993, 5301, 4996, 5042, 5301, 5301, 4996, 5301, 5301, 5301, 5435,
  /* 2980 */ 5344, 5301, 4979, 4869, 5263, 5212, 5301, 5301, 5301, 5052, 5494, 5301, 5301, 5301, 5080, 5074, 5301, 5732,
  /* 2998 */ 5301, 5301, 4974, 5301, 5301, 5301, 5622, 5737, 5301, 5301, 5301, 5081, 5489, 5594, 5630, 5301, 5301, 5301,
  /* 3016 */ 5083, 5440, 5012, 5025, 5200, 5443, 5647, 5212, 5301, 4988, 4988, 4988, 4979, 5301, 5301, 5301, 4874, 5301,
  /* 3034 */ 5301, 5154, 5579, 5301, 5301, 5301, 5140, 5483, 5580, 5301, 5301, 5301, 5153, 5153, 5737, 5301, 5301, 4996,
  /* 3052 */ 5742, 5042, 5301, 5042, 5301, 5435, 5298, 5301, 4988, 4988, 5624, 5301, 5301, 5446, 4995, 5453, 5301, 5301,
  /* 3070 */ 5301, 5760, 5080, 5301, 5301, 5620, 5301, 5301, 5301, 5074, 4988, 4988, 4988, 4988, 5301, 5301, 5301, 4869,
  /* 3088 */ 5434, 5301, 5382, 5025, 5138, 5301, 5301, 5435, 5301, 5301, 4976, 5301, 5301, 5646, 5646, 5153, 5301, 5301,
  /* 3106 */ 5301, 5202, 5440, 5025, 5153, 5301, 5301, 5574, 5301, 5301, 5301, 5224, 5301, 5434, 5623, 5301, 5301, 5301,
  /* 3124 */ 5214, 5301, 5301, 5301, 5623, 5301, 5301, 4977, 5301, 5646, 5301, 5301, 5301, 5231, 4960, 5301, 5472, 5301,
  /* 3142 */ 5301, 4979, 5301, 5301, 5231, 4960, 4963, 5730, 5436, 5436, 5153, 5301, 5301, 4982, 5301, 5351, 4952, 5337,
  /* 3160 */ 5739, 5630, 5301, 5301, 5302, 5441, 5384, 5301, 5351, 5456, 5301, 5301, 5301, 5305, 5239, 4888, 5241, 5243,
  /* 3178 */ 5243, 5244, 5246, 5248, 5250, 5250, 5250, 5250, 5251, 5250, 5250, 5250, 5252, 5254, 5254, 5254, 5256, 5256,
  /* 3196 */ 5256, 5256, 5258, 5259, 4962, 5626, 5348, 5542, 5301, 4912, 4891, 5301, 5301, 4985, 4891, 5457, 5154, 5301,
  /* 3214 */ 5301, 5304, 5269, 5301, 5301, 5301, 5301, 4867, 5628, 5457, 5281, 5301, 4990, 5301, 5301, 5301, 5237, 4974,
  /* 3232 */ 5272, 5630, 5301, 5301, 5360, 5301, 5301, 5301, 5213, 5301, 5447, 5277, 5301, 5280, 5282, 5301, 5301, 5301,
  /* 3250 */ 5302, 5232, 4962, 5626, 5301, 5336, 5301, 5301, 4992, 5301, 5457, 4867, 5301, 4991, 5204, 5301, 5263, 5301,
  /* 3268 */ 5457, 5019, 5436, 5138, 5301, 5301, 5301, 5304, 5152, 5630, 5301, 5301, 5056, 5301, 5054, 5393, 5138, 5301,
  /* 3286 */ 4996, 5744, 5301, 5301, 5153, 5321, 4906, 5542, 5301, 5301, 5301, 5308, 5301, 5159, 5301, 5301, 5301, 5310,
  /* 3304 */ 4906, 5301, 5302, 5326, 5372, 4969, 5149, 5296, 5151, 5054, 5348, 5152, 5301, 5007, 5007, 5010, 5007, 5007,
  /* 3322 */ 5010, 5301, 5007, 5010, 5301, 5301, 5301, 4910, 5301, 5348, 5437, 5301, 5301, 5301, 5319, 5301, 5301, 5301,
  /* 3340 */ 5320, 5301, 5301, 5301, 5317, 5433, 5331, 5437, 5301, 5301, 5074, 5464, 4962, 5626, 5338, 5301, 5017, 5301,
  /* 3358 */ 5301, 4989, 5214, 5301, 5301, 5333, 5301, 5301, 5301, 5323, 4910, 5372, 4969, 5295, 5431, 5431, 5301, 5301,
  /* 3376 */ 5301, 5336, 5301, 5320, 5301, 5320, 5020, 5301, 5354, 5320, 5301, 5301, 5080, 5304, 5301, 5301, 5154, 4969,
  /* 3394 */ 5295, 5197, 5301, 5018, 5301, 5301, 5028, 5301, 4910, 4968, 5361, 5296, 5151, 5301, 5301, 5320, 5301, 5321,
  /* 3412 */ 5301, 5301, 5301, 5313, 5301, 5302, 5753, 4963, 5730, 5301, 5301, 5301, 5360, 4984, 5628, 5302, 5627, 5301,
  /* 3430 */ 5301, 5301, 5434, 5301, 5301, 5301, 4990, 4990, 5354, 5321, 5301, 5301, 5080, 5434, 5301, 5301, 5131, 5133,
  /* 3448 */ 5296, 5350, 5301, 5301, 5146, 4974, 4968, 5295, 5197, 5301, 5042, 5301, 5042, 5301, 4906, 5301, 5301, 5301,
  /* 3466 */ 4906, 5321, 5301, 5302, 5143, 5452, 5154, 5301, 5446, 5301, 5301, 4868, 5301, 5301, 4874, 5628, 5202, 5301,
  /* 3484 */ 5301, 5301, 5440, 5354, 5483, 5441, 5343, 5301, 5301, 5301, 5463, 5628, 5440, 5203, 5350, 5301, 5301, 5158,
  /* 3502 */ 5448, 5301, 5310, 4963, 5301, 5301, 4991, 5301, 5301, 5624, 5301, 5301, 5301, 5266, 5301, 5301, 5301, 5624,
  /* 3520 */ 5350, 4868, 5390, 5435, 5437, 5443, 4905, 5263, 5301, 5301, 5685, 5301, 5480, 5480, 5481, 5396, 5480, 5395,
  /* 3538 */ 5398, 5398, 5399, 5400, 5402, 5405, 5405, 5405, 5405, 5404, 5405, 5405, 5405, 5404, 5405, 5409, 5408, 5407,
  /* 3556 */ 5407, 5411, 5411, 5411, 5411, 5413, 5414, 5755, 5298, 5301, 5301, 5220, 5499, 5301, 5301, 5074, 5301, 4868,
  /* 3574 */ 5301, 5301, 5301, 5561, 5301, 5301, 5301, 5283, 5080, 5304, 5452, 5301, 5042, 5301, 5345, 5301, 5453, 4867,
  /* 3592 */ 5301, 5042, 5360, 5301, 5301, 5301, 5424, 5420, 5301, 5301, 5301, 5468, 5426, 5428, 5301, 5301, 5260, 4868,
  /* 3610 */ 5301, 5310, 5301, 5301, 5272, 5301, 5314, 5316, 5301, 5301, 5274, 5158, 5315, 5301, 5301, 5301, 5472, 5301,
  /* 3628 */ 4974, 5217, 5212, 5301, 5301, 5287, 5289, 5043, 5301, 5301, 5307, 5301, 5317, 4885, 5301, 5302, 5474, 4989,
  /* 3646 */ 5076, 5355, 5026, 5301, 5074, 5137, 5630, 5301, 5439, 5629, 5301, 5301, 5301, 5563, 4978, 5023, 5217, 5014,
  /* 3664 */ 5747, 5301, 5301, 5301, 5497, 5301, 5459, 5024, 5739, 5301, 5616, 5301, 5301, 5300, 5301, 5302, 5496, 5460,
  /* 3682 */ 5024, 5749, 5138, 5301, 5301, 5302, 5318, 5450, 5075, 5025, 5750, 5301, 5301, 5617, 5301, 5301, 5017, 5301,
  /* 3700 */ 5282, 5491, 5042, 5301, 5301, 5302, 5376, 5294, 5301, 5310, 5024, 5739, 5301, 5310, 5221, 5153, 5231, 5497,
  /* 3718 */ 5024, 5483, 5739, 4868, 5301, 5390, 5472, 5301, 5501, 5739, 5301, 5080, 5016, 5301, 5128, 5301, 5301, 5237,
  /* 3736 */ 5301, 5301, 5301, 5446, 5301, 5335, 5138, 5301, 5301, 5302, 5590, 5079, 5301, 5301, 5301, 5621, 5074, 5301,
  /* 3754 */ 4869, 5263, 5301, 5302, 5293, 5301, 5301, 5618, 5301, 5016, 5301, 5301, 5301, 4991, 5301, 5301, 5074, 5301,
  /* 3772 */ 5301, 5554, 5301, 5301, 5504, 5153, 5301, 5301, 5498, 5335, 5153, 5301, 5309, 5301, 5310, 5497, 5483, 5739,
  /* 3790 */ 5301, 5560, 5153, 5301, 5143, 5301, 5310, 4963, 4991, 5301, 5301, 5263, 5301, 5350, 5301, 5449, 5758, 5153,
  /* 3808 */ 5301, 4868, 5263, 5541, 5301, 5144, 5301, 4891, 5301, 4891, 5301, 4867, 5301, 4992, 5301, 5739, 5301, 5739,
  /* 3826 */ 5497, 5739, 5301, 5301, 5301, 5508, 5023, 5301, 5541, 5301, 5301, 5301, 5496, 5320, 4904, 5301, 5301, 5302,
  /* 3844 */ 5642, 5491, 5301, 5301, 5319, 4904, 5301, 5319, 5301, 5320, 5023, 5738, 5298, 5301, 5153, 5544, 5301, 5154,
  /* 3862 */ 5301, 4904, 4907, 5301, 4907, 4907, 5519, 5301, 5513, 5618, 5267, 5510, 5235, 5042, 5301, 5787, 5301, 5443,
  /* 3880 */ 5301, 5301, 5218, 4869, 5646, 5298, 5301, 5154, 5301, 4991, 5298, 5301, 5301, 5299, 5301, 5518, 5522, 4966,
  /* 3898 */ 5524, 5524, 5525, 5527, 5529, 5533, 5533, 5533, 5531, 5533, 5533, 5532, 5533, 5533, 5535, 5537, 5537, 5539,
  /* 3916 */ 5539, 5539, 5539, 5540, 5301, 5304, 5509, 5502, 5222, 5222, 5301, 5301, 5301, 5554, 5546, 5346, 5635, 5301,
  /* 3934 */ 5154, 5301, 5301, 5308, 5666, 4998, 5000, 5261, 5301, 5301, 5553, 5301, 5553, 5301, 5156, 5301, 5301, 5477,
  /* 3952 */ 5301, 5301, 5546, 5135, 5301, 5157, 5301, 5301, 4873, 5301, 5301, 5301, 5301, 5635, 5301, 5158, 5301, 5237,
  /* 3970 */ 5673, 5301, 5301, 5320, 5041, 5301, 5301, 5301, 5312, 5559, 5301, 5572, 5301, 5194, 5191, 5193, 5301, 5301,
  /* 3988 */ 5578, 5301, 5196, 5147, 5301, 4876, 5301, 5301, 5301, 5301, 5582, 5548, 5635, 5308, 5547, 5549, 5301, 5199,
  /* 4006 */ 5301, 5301, 4910, 5327, 4968, 5361, 5301, 5301, 5574, 5320, 4905, 5618, 5301, 5442, 5016, 5236, 5301, 5301,
  /* 4024 */ 5309, 5301, 5301, 5301, 5310, 5452, 5301, 5211, 5301, 5301, 4971, 5288, 5301, 5302, 5445, 5346, 5301, 5302,
  /* 4042 */ 5754, 5346, 5134, 5301, 5301, 5301, 5574, 5301, 5301, 5437, 5554, 5301, 4874, 5301, 5301, 5564, 5153, 5445,
  /* 4060 */ 5377, 5379, 5469, 5302, 5584, 5455, 5378, 5347, 5138, 5301, 5301, 5310, 5226, 5080, 5263, 5234, 5516, 4986,
  /* 4078 */ 5153, 5301, 5301, 5310, 5418, 5301, 5301, 5588, 5377, 5465, 5153, 5301, 5301, 5311, 5301, 5301, 5301, 5739,
  /* 4096 */ 5304, 4967, 5378, 5469, 5080, 5646, 5016, 5236, 5301, 5350, 5301, 5301, 5322, 5321, 5301, 5304, 4989, 5465,
  /* 4114 */ 5153, 5023, 5298, 5301, 5301, 5354, 5301, 5301, 5301, 5301, 5586, 5301, 5301, 5301, 5576, 5301, 5301, 5624,
  /* 4132 */ 5520, 5301, 5452, 5301, 5301, 4952, 5301, 4867, 5301, 5301, 5618, 5434, 5301, 5301, 5623, 5350, 5080, 4952,
  /* 4150 */ 5304, 5592, 4884, 5301, 5301, 5630, 5301, 5360, 5472, 5301, 5215, 4993, 5301, 5301, 5301, 5303, 5192, 5191,
  /* 4168 */ 5475, 5596, 5596, 5597, 5618, 5301, 5487, 5301, 5074, 5342, 5301, 5042, 5301, 5341, 5733, 5602, 5602, 5602,
  /* 4186 */ 5602, 5600, 5602, 5602, 5602, 5604, 5606, 5601, 5608, 5610, 5612, 5612, 5612, 5612, 5614, 5615, 5554, 5301,
  /* 4204 */ 5351, 5301, 5301, 5301, 5579, 5301, 5303, 5301, 5301, 5373, 4974, 5649, 5301, 5651, 5301, 5215, 5260, 5215,
  /* 4222 */ 5031, 5436, 5344, 5301, 5636, 5301, 5301, 5381, 5391, 5643, 5301, 5309, 5301, 5224, 5371, 4964, 5619, 5298,
  /* 4240 */ 5653, 5655, 5301, 5301, 5388, 5301, 5678, 5301, 5301, 5301, 5624, 5007, 5007, 5007, 5007, 5008, 5679, 5301,
  /* 4258 */ 5301, 5301, 5628, 5302, 5293, 5301, 5298, 4970, 5301, 5301, 5301, 5132, 5308, 5663, 5301, 5301, 5428, 5301,
  /* 4276 */ 5653, 4980, 5301, 5301, 5434, 5349, 5665, 5677, 5261, 5437, 5301, 5308, 5676, 5659, 5668, 5301, 5301, 5301,
  /* 4294 */ 5642, 5301, 5350, 5301, 4952, 5301, 5301, 5301, 4979, 4868, 5304, 5320, 5561, 5630, 5301, 5514, 5301, 5301,
  /* 4312 */ 5441, 5354, 5301, 5302, 5013, 5301, 5301, 5301, 5301, 5672, 5301, 5225, 5301, 5301, 4870, 5471, 5000, 5261,
  /* 4330 */ 5437, 5301, 5301, 5665, 5083, 4999, 5013, 5301, 5350, 5351, 5301, 4911, 5638, 5629, 5301, 5301, 5042, 5301,
  /* 4348 */ 5624, 5452, 5301, 5301, 5301, 5437, 5625, 5301, 5301, 5301, 5646, 5263, 5301, 5554, 5351, 4911, 5566, 5037,
  /* 4366 */ 5566, 5067, 5566, 5566, 5070, 5568, 5073, 5638, 5630, 5301, 5468, 5301, 5598, 4908, 5301, 5301, 5301, 5657,
  /* 4384 */ 5675, 5083, 4999, 5013, 5262, 5301, 5301, 5301, 5661, 4868, 5301, 5304, 5666, 4998, 5301, 5301, 5681, 5301,
  /* 4402 */ 5231, 5085, 5080, 5301, 5638, 5630, 5301, 5620, 5683, 5075, 5261, 5301, 5231, 5497, 5748, 5335, 5301, 5304,
  /* 4420 */ 5083, 5053, 5262, 5301, 5301, 5661, 5301, 5310, 4993, 5301, 5260, 5270, 5301, 5301, 5301, 5007, 5007, 5007,
  /* 4438 */ 5788, 5010, 4952, 5321, 5468, 4970, 5301, 5472, 4970, 4905, 5319, 5301, 5301, 5444, 5374, 4868, 5153, 5661,
  /* 4456 */ 5624, 5343, 5301, 5301, 5215, 5216, 5031, 5042, 5301, 5301, 5456, 5301, 5301, 5415, 5032, 5301, 5301, 5661,
  /* 4474 */ 5039, 5301, 5301, 5301, 5715, 5032, 5301, 5301, 5301, 5726, 5489, 5032, 5301, 5566, 4997, 5032, 5301, 5301,
  /* 4492 */ 5042, 4905, 5301, 4997, 5301, 5074, 5074, 5593, 5297, 5301, 5301, 5301, 5618, 5016, 5598, 5301, 5339, 4905,
  /* 4510 */ 5301, 4996, 5742, 5301, 5687, 5598, 5350, 5301, 5260, 5301, 5301, 5443, 5511, 5301, 5631, 5631, 5633, 5632,
  /* 4528 */ 5689, 5631, 5691, 5691, 5692, 5694, 5696, 5698, 5699, 5700, 5700, 5700, 5700, 5698, 5700, 5703, 5704, 5699,
  /* 4546 */ 5701, 5706, 5708, 5708, 5710, 5710, 5710, 5710, 5712, 5713, 5226, 5451, 4965, 5619, 5298, 5141, 5720, 5301,
  /* 4564 */ 5301, 5459, 5023, 5717, 5630, 5301, 5301, 5467, 5301, 5301, 5301, 5491, 5301, 5301, 4907, 5446, 5719, 5306,
  /* 4582 */ 5722, 5301, 5263, 5554, 5301, 5301, 4874, 5628, 5623, 5437, 5301, 5301, 4878, 5724, 5301, 5634, 4953, 4955,
  /* 4600 */ 4957, 5301, 5301, 5301, 5753, 4954, 4956, 5630, 5301, 5215, 5439, 5727, 5301, 5301, 5301, 5752, 5461, 5301,
  /* 4618 */ 5301, 5729, 5461, 5134, 5077, 5301, 5301, 5042, 5301, 5736, 5301, 5301, 5488, 5360, 5318, 5293, 5353, 5364,
  /* 4636 */ 5301, 5735, 4908, 5352, 5301, 5304, 5630, 5301, 5434, 5301, 5301, 5360, 5461, 4974, 5301, 5456, 5328, 4989,
  /* 4654 */ 5085, 5355, 5301, 5735, 4908, 4987, 5085, 5355, 4957, 5301, 5040, 5217, 5150, 5630, 5746, 4964, 5619, 5298,
  /* 4672 */ 5301, 5302, 5752, 4908, 4987, 5224, 5482, 5301, 5301, 5506, 5301, 5301, 5305, 5301, 5301, 5016, 5304, 5757,
  /* 4690 */ 5086, 5301, 5301, 5301, 5741, 5301, 5301, 5744, 5153, 5752, 4986, 5084, 5217, 5150, 4873, 5301, 4911, 5301,
  /* 4708 */ 5301, 5301, 5541, 5646, 5301, 5304, 4986, 5354, 5623, 5301, 4974, 5301, 5301, 5350, 4952, 4911, 5301, 5301,
  /* 4726 */ 5588, 5621, 5080, 5301, 5301, 5561, 4880, 4887, 4895, 5646, 5263, 5350, 5301, 5285, 5301, 5301, 4985, 5301,
  /* 4744 */ 5301, 5360, 5354, 5623, 5301, 5301, 5621, 5340, 5301, 5301, 5301, 5755, 5301, 5301, 5646, 5301, 4906, 5628,
  /* 4762 */ 5554, 5301, 4909, 4891, 5301, 5762, 5765, 5301, 5763, 5301, 5292, 5627, 5150, 5301, 5303, 5319, 5453, 5453,
  /* 4780 */ 5081, 5082, 5767, 5767, 5767, 5768, 5767, 5769, 5767, 5768, 5767, 5774, 5767, 5773, 5770, 5771, 5770, 5776,
  /* 4798 */ 5776, 5776, 5776, 5776, 5777, 5778, 5776, 5777, 5780, 5782, 5784, 5302, 5752, 4874, 5301, 5301, 5301, 5786,
  /* 4816 */ 5301, 5301, 5301, 5301, 5562, 5301, 4892, 4875, 5301, 5301, 5301, 5510, 5080, 5301, 5301, 5324, 5301, 5301,
  /* 4834 */ 5551, 5329, 5301, 5753, 5301, 5301, 5556, 5302, 4872, 5301, 5301, 5301, 5560, 5301, 5301, 5301, 5386, 5350,
  /* 4852 */ 5301, 5301, 5301, 5322, 5301, 5301, 5564, 5670, 5302, 5301, 5301, 5301, 5573, 5301, 1073872896, 131072, 0,
  /* 4869 */ 16, 0, 20, 48, 0, 32, 0, 36, 0, 38, 161792, 262146, 262160, -2147221504, -2147221504, 262144, 0x80000000,
  /* 4886 */ 6815744, 268566528, 131072, 257, 4740, 256, 0, 62, 262160, 537133056, -2147221504, 10560, 33816576,
  /* 4899 */ 537133056, 8768, 262144, 262160, 262144, 262144, 0, 64, 0, 128, 256, 1, 2, 0, 132, 278528, 278528, 278544,
  /* 4917 */ 537149440, 278530, 537149440, 278530, 772014080, 235143168, 235143168, 772014080, 772014080, 168034304,
  /* 4927 */ 168034304, 235143168, 168034304, 772030464, -1375469568, -1375469568, 772014080, 168034304, 772014080,
  /* 4936 */ 163872, 294944, 294944, 163840, 2392096, 537165856, -2147188704, 294944, -2147188674, -2145091522,
  /* 4946 */ -2145091522, -2111537090, -2145091522, 772046880, 772046880, -1910210498, 4096, 0, 135, 323840, 3670016,
  /* 4957 */ 33554432, 0x80000000, 2, 16, 32, 32, 128, 512, 1024, 4096, 128, 2048, 4096, 8192, 0, 323, 129024, 2097152,
  /* 4975 */ 0, 331, 0, 448, 16384, 0, 512, 2048, 8192, 64, 64, 128, 8192, 16384, 16384, 32768, 0, 1024, 524288, 0,
  /* 4995 */ 1280, 0, 2048, 16384, 65536, 131072, 262144, 262174, 12, 14, 2129952, 2129920, 32768, 32768, 32800,
  /* 5010 */ 2129920, 2129920, 65536, 262144, 2097152, 4194304, 8388608, 0, 265, 69632, 2097152, 0x80000000, 12, 32768,
  /* 5024 */ 131072, 1048576, 4194304, -1207959552, 0, -436207616, 32, 2097152, 8388608, 16777216, -1207959552, 32,
  /* 5036 */ 2097184, 2, 1073774592, 16, 32768, 262144, 16777216, 0, 10240, 80, 272, 272, 65552, 262160, 268444864,
  /* 5051 */ 268435472, 16, 131072, 2097152, 12582912, 0, 10496, 17, 20, 1888485376, 24, 304, 48, 1048848, 1572880,
  /* 5066 */ 524304, 28, 21, 53, 28, 16, 131088, 28, 0, 16384, 131072, 524288, 2097152, 524288, 4194304, 0, 3072, 3072,
  /* 5084 */ 16384, 262144, 524288, 0x80000000, 2, 304, 165675008, 272, 1048592, 272, 84, 20, 372, -165649452,
  /* 5098 */ -165649452, -165649451, -165649451, -164559888, -164535312, -164535312, -164535308, -164273168, -164535308,
  /* 5107 */ -700906512, -701430800, -701430800, -164535308, -164535308, -164273164, -164535308, -700906508, -164535308,
  /* 5116 */ 80, 16, 524560, 21, 112, 140511253, 140515349, 140539925, 140540573, 140540573, 140540605, -26141771, 0,
  /* 5129 */ 17408, 163577856, 0, 19504, 631242752, 0, 24576, -1610612736, 100663296, 536870912, 0x80000000, 138412032,
  /* 5141 */ 0, 28672, 4, 128, 8256, 17303552, 2105344, 0, 114688, 2097152, 33554432, 201326592, 536870912, 0, 131072,
  /* 5156 */ 131072, 24, 0, 40, 44, 941162496, 941162496, 805371937, 805371937, 847314977, 2031683649, 957941825,
  /* 5168 */ 957941827, 957941825, 957941857, 957941857, 957941859, 960047171, 960038977, 957941857, 960047171,
  /* 5177 */ 957941857, 960038977, 960038977, 960174145, -1199718400, -1199718400, -1199717854, -1199717846,
  /* 5185 */ -1199717846, -1199717782, -1199717846, -1182939039, -1182939039, -1182938517, 0, 262145, 262145, 524292,
  /* 5195 */ 262145, 526336, 16777216, 134217728, 1638400, 939524096, 0x80000000, 1, 65536, 8388608, 1073741824,
  /* 5206 */ 1572864, 939524096, 196608, 0, 1640448, 65536, 805306368, 0, 393216, 0, 524288, 524288, 1048576, 65600,
  /* 5220 */ 49152, 1048576, 268435456, 1073741824, 4, 8, 8, 16, 272, 16, 514, 1, 4, 16, 1048576, 8388608, 50331648, 0,
  /* 5238 */ 262144, 536871168, 67109121, 525312, 67174657, -1507782399, -1507782399, -2145386488, -1876951032,
  /* 5247 */ -2145386488, -2145386456, -2145381716, -1507782391, -1507782391, -432729847, -1507782391, -432729847,
  /* 5255 */ -432729847, -1344145085, -1344145085, -1344145077, -1344145077, 0, 2097152, 25165824, 0, 65536, 1572864,
  /* 5266 */ 6291456, 0, 65600, 525312, 0, 2629632, 8, 2097152, -1879048192, 0, 3737600, 2101760, 0, 3745792, 265,
  /* 5281 */ 2166784, -1509949440, 0, 3407872, 3477504, -436207616, 323, 14809088, -1358954496, 0, 3872768, 1, 256,
  /* 5294 */ 4096, 114688, 12582912, 16777216, 1073741824, 0, -126877696, 0, 0, 1, 0, 2, 0x80000000, 6, 0, 3, 0, 4, 0,
  /* 5313 */ 5, 16832, 688128, -1200619520, 0, 6, 128, 0, 8, 0, 12, 0, 14, 2, 64, 256, 8192, 655360, 65536, 33554432,
  /* 5333 */ 65536, 67108864, 134217728, 268435456, 4608, 16777216, 67108864, 1048576, 33554432, 1073741824, 8388608,
  /* 5344 */ 134217728, 1073741824, 8192, 524288, 16777216, 33554432, 134217728, 0, 4096, 57344, 262144, 1048576,
  /* 5356 */ 2097152, 2097184, 2097184, 2129920, 0, 8192, 114688, 262144, 1572864, 2097152, 2129920, 16, 48, 524304,
  /* 5370 */ 1048592, 16, 256, 2048, 24576, 0x80000000, 2, 2048, 57344, 393216, 524288, 1, 49152, 262144, 12582912,
  /* 5385 */ 134217728, 32768, 8388608, 32768, 134217728, 32, 65536, 12582912, 50331648, 201326592, 17039368, 131328,
  /* 5397 */ 131328, 807043332, 807043332, 806912004, 806912004, 806928388, 806929412, 1889173780, 1880785156,
  /* 5406 */ 1880785156, 1880795910, 1880795396, 1880795396, 1880785156, -1199914555, -1199914555, -126172731,
  /* 5414 */ -126172731, 0, 6291456, 939524096, 256, 688128, 806354944, 0, 8241152, -1207959552, 4, 557056, 4, 688128,
  /* 5428 */ 1880096768, 0, 8243200, 16777216, 201326592, 11008, 0, 8388608, 33554432, 67108864, 0, 40960, 0, 49152,
  /* 5442 */ 65536, 1048576, 0, 160, 1024, 0, 172, 0, 192, 256, 512, 0, 256, 1024, 2048, 0, 257, 4, 256, 16384, 524288,
  /* 5463 */ 4, 32768, 393216, 16777216, 1879048192, 0, 16777216, 536870912, 1887436800, 0, 33554432, 4, 448, 262145,
  /* 5477 */ -134217728, 0, 41943040, 0, 131328, 1024, 4194304, 134217728, 134217728, 524288, 2, 512, 16384, 2097152, 8,
  /* 5492 */ 262144, 4, 1048576, 939524096, 4, 192, 16384, 4194304, 536870912, 4, 131072, 16777216, 4, 268435456, 192,
  /* 5507 */ 536870912, 2, 256, 32768, 1048576, 536870912, 8, 64, 384, 0, 50331648, 536871040, 128, 131072, 1073741824,
  /* 5522 */ 1075839492, 128, -1610079071, -1610079071, -2146819039, -2146950111, -2146917343, -1073208287, -1073077215,
  /* 5531 */ -1559731039, -1593285471, -1610062687, -1610062687, -1542953823, -1610062671, -1542953823, -1408736095,
  /* 5539 */ -1592857437, -1592857437, 0, 67108864, 536870912, 516, 2097152, 1, 1184, 59392, 17694720, -1610612736, 1,
  /* 5552 */ 1056, -1073741824, 0, 134217728, 17301504, 0, 239075328, 50855936, 0, 268435456, 0, 46, 0, 48, 16, 16, 17,
  /* 5569 */ 16, 20, 304, 1, 24576, 0, 536870912, 67633152, 1200, -1476395008, 0, 805306368, 0x80000000, 3, 1184, 2,
  /* 5585 */ 160, 4, 512, 2, 128, 4, 262144, 268435464, 4096, 4194304, 939524096, 2359297, 2359297, 0, 1073741824,
  /* 5600 */ 572784657, 540278803, 539230225, 539230225, 572784657, 539230225, 572784657, -1608253423, 540278803,
  /* 5609 */ 540278803, 540311571, 540279315, 94850083, 94850083, 631721011, 631721011, 0, 1610612736, 0, 4194304,
  /* 5620 */ 16777216, 8192, 262144, 33554432, 0, 32768, 512, 4096, 65536, 0, 0x80000000, 0, -2147483646, -2147483646,
  /* 5634 */ 0, -1610612736, 0, -1608515584, 8, 268435456, 1, 262144, 16, 538968064, 0, 2013265920, 0, 1048576,
  /* 5648 */ 134217728, 572522496, 0, 3, 540016640, 294912, 0, 528, 0, 3, 19488, 458752, 2097152, 16, 536870912,
  /* 5663 */ 3145728, 0, 3, 32, 3072, 25165824, 67108864, 603979776, 0, 3, 1048576, 1073741824, 2, 32, 19456, 458752,
  /* 5679 */ 94371840, 0, 4, 524288, 2, 3072, 65536, 134217728, 131104, 1048, 8389656, -2147483646, -2146938874,
  /* 5692 */ -2146938874, 2650112, 271085568, 2650112, 136867840, 136867840, -2146928634, -2146928634, -2144831482,
  /* 5701 */ -2144831482, -2144765946, -2140637178, -2144831482, -2077722618, -2146928634, -2144700378, -1593280506,
  /* 5709 */ -1593280506, -2109935225, -2109935225, -2109933177, -2109933177, 0, 6, 20480, 30720, 524288, 30720,
  /* 5720 */ 2621440, 0, 96256, 0, 17301504, -1610612736, 135, 325888, 0x80000000, 6, 4096, 16777216, 939524096, 0,
  /* 5734 */ 524292, 1, 6, 2048, 16777216, 268435456, 536870912, 6, 16384, 8388608, 8192, 2097152, 8, 256, 131072,
  /* 5749 */ 4194304, 402653184, 536870912, 2, 4, 32, 1024, 8388608, 4, 16384, 268435456, 8, 1024, 4352, 17152, 0,
  /* 5765 */ 17152, 12288, 15396, 15396, 15652, 15406, 15406, 15422, 15406, 15652, 15652, 68, 68, 324, 68, 4164, 8260,
  /* 5782 */ 15716, 15716, 15460, 0, 4, 64, 32768, 2129920, 2097184
];

XQueryParser.TOKEN =
[
  "(0)",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "URIQualifiedName",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "CharRef",
  "NCName",
  "QName",
  "StringConstructorChars",
  "S",
  "S",
  "CommentContents",
  "PragmaContents",
  "Wildcard",
  "DirCommentContents",
  "DirPIContents",
  "CDataSectionContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'<![CDATA['",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']]>'",
  "']``'",
  "'``['",
  "'`{'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exponent-separator'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'intersect'",
  "'into'",
  "'invoke'",
  "'is'",
  "'item'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'lowercase'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'occurs'",
  "'of'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'transform'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'update'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'|'",
  "'||'",
  "'}'",
  "'}`'",
  "'}}'"
];

// End
